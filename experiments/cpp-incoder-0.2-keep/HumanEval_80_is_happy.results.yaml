name: HumanEval_80_is_happy
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmph2r462nw: /tmp/tmph2r462nw.cpp:42: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false; // string length less than 3\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s.at(i) == s.at(i + 1)) {\n            if (s.at(i) == s.at(i\
    \ + 2)) {\n                if (s.at(i) == s.at(i + 3)) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n\
    \                flag = true;\n                break;\n            }\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxbgqsgw8: /tmp/tmpxbgqsgw8.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (s[i] == s[j]) {\n                flag = false;\n            }\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfh2qop6f: /tmp/tmpfh2qop6f.cpp:36: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    \n    bool\
    \ flag = false;\n    int len = s.size();\n    for(int i = 0; i < len-3; i++){\n\
    \        if(s[i] == s[i+1] && s[i+1] == s[i+2] && s[i+2] == s[i+3]){\n       \
    \     flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprqztc9w8: /tmp/tmprqztc9w8.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    \n    for(int\
    \ i=0;i<s.size();i++){\n        if(s[i]==s[i+1] && s[i]==s[i+2]){\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvjj7x8td: /tmp/tmpvjj7x8td.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            count++;\n        } else {\n            flag = false;\n \
    \           break;\n        }\n    }\n    if (flag && count >= 3) {\n        for\
    \ (int i = 0; i < s.length() - 1; i++) {\n            if (s[i] == s[i + 1]) {\n\
    \                count++;\n            } else {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0i3bzpap: /tmp/tmp0i3bzpap.cpp:40: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            count++;\n        } else {\n            flag = true;\n  \
    \          break;\n        }\n    }\n    if (flag && count >= 3) {\n        flag\
    \ = false;\n        for (int i = 0; i < s.length() - 1; i++) {\n            if\
    \ (s[i] == s[i + 1]) {\n                flag = true;\n                break;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd8wxzgfu: /tmp/tmpd8wxzgfu.cpp:37: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpppvyn39f: /tmp/tmpppvyn39f.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      for (int i = 0; i < n - 3; i++) {\n            if (s.at(i) == s.at(i +\
    \ 1) && s.at(i) == s.at(i + 2)) {\n                flag = true;\n            }\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq7t9uagx: /tmp/tmpq7t9uagx.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpylhf3ir4: /tmp/tmpylhf3ir4.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = true;\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n        else\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    if (flag\
    \ && count >= 3) {\n        for (int i = 0; i < s.length(); i++) {\n         \
    \   if (s[i] == s[i + 1]) {\n                count++;\n            }\n       \
    \     else {\n                flag = false;\n                break;\n        \
    \    }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4u4v64a9: /tmp/tmp4u4v64a9.cpp:43: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1])\
    \ {\n            count++;\n        } else {\n            if (count == 3) {\n \
    \               flag = true;\n                break;\n            }\n        \
    \    count = 0;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwnkt9ca9: /tmp/tmpwnkt9ca9.cpp:33: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) count++;\n        else count = 0;\n        if (count\
    \ == 3) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqugtwiga: /tmp/tmpqugtwiga.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n          \
    \      if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) {\n                 \
    \   return false;\n                }\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvtq48vil: /tmp/tmpvtq48vil.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 4]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 5]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 6]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 7]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 8]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 9]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 10]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 11]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 12]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 13]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 14]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 15]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 16]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 17]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqyu22l9q.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpqyu22l9q.cpp:133:19: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  133 |     if (count >= 3\n      |        ~          ^\n      |    \
    \               )\n  134 | }\n      | ~                  \n/tmp/tmpqyu22l9q.cpp:134:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  134 | }\n \
    \     | ^\n/tmp/tmpqyu22l9q.cpp:134:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdt_6ww30: /tmp/tmpdt_6ww30.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmps_7eela2: /tmp/tmps_7eela2.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            count++;\n        } else {\n            flag = false;\n \
    \           break;\n        }\n    }\n    if (flag && count >= 3) {\n        for\
    \ (int i = 0; i < s.length() - 1; i++) {\n            if (s[i] == s[i + 1]) {\n\
    \                count++;\n            } else {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpubd_ods0: /tmp/tmpubd_ods0.cpp:40: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppym14ne9: /tmp/tmppym14ne9.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = false;\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n        for(int\
    \ j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n   \
    \             if(s[i] == s[j] && s[i] == s[k] && s[j] == s[k]) {\n           \
    \         flag = true;\n                }\n            }\n        }\n    }\n \
    \   return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqd3olm_c: /tmp/tmpqd3olm_c.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n       \
    \         flag = true;\n                break;\n            }\n        }\n   \
    \ }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpo7jkw8ko: /tmp/tmpo7jkw8ko.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n - 3; i++) {\n\
    \        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2] && s[i + 2] == s[i + 3])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8i1d7p7y: /tmp/tmp8i1d7p7y.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n\
    \                flag = true;\n                break;\n            }\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsuf94_sz: /tmp/tmpsuf94_sz.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == s[i + 1]) {\n           \
    \ flag = false;\n            break;\n        }\n    }\n    for (int i = 0; i <\
    \ s.length() - 3; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2] &&\
    \ s[i] == s[i + 3]) {\n            flag = false;\n            break;\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1csvlj78: /tmp/tmp1csvlj78.cpp:38: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false; // empty string\n    bool flag = true;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (s[i] != s[i + 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n   \
    \ assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp530w559y: /tmp/tmp530w559y.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            count++;\n\
    \    }\n    if (count < 3)\n        return false;\n    for (int i = 0; i < n -\
    \ 3; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i +\
    \ 3])\n            count++;\n    }\n    return count == 3;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4sn04z9n: /tmp/tmp4sn04z9n.cpp:34: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) !=\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpttcqew8g: /tmp/tmpttcqew8g.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1] && s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkq5xxrwo: /tmp/tmpkq5xxrwo.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] != s[j]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj_y886bh: /tmp/tmpj_y886bh.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9_v813ya: /tmp/tmp9_v813ya.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1cdmupmh: /tmp/tmp1cdmupmh.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprcy9l3zr: /tmp/tmprcy9l3zr.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    for (int i = 0; i < n - 3; i++) {\n        if\
    \ (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgue35ihl: /tmp/tmpgue35ihl.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && n == (count -\
    \ 1);\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpase48hrl: /tmp/tmpase48hrl.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            if (s[i] == s[j]) {\n                flag = true;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwwgkzbgn: /tmp/tmpwwgkzbgn.cpp:29: int main(): Assertion `candidate((\"\
    aa\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] != s[j]) break;\n        }\n      \
    \  if (j == n) return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5329mgc.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpl5329mgc.cpp:20:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   20 |         if (j == n) return true;\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbnr6c8_h: /tmp/tmpbnr6c8_h.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    int n =\
    \ s.size();\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n      \
    \  for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n      \
    \          flag = false;\n            }\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpud2lskf6: /tmp/tmpud2lskf6.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1])\
    \ {\n            count++;\n        }\n        if (count == 3) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0zsx89l7: /tmp/tmp0zsx89l7.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n             \
    \   if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n \
    \                   break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpza2llmov: /tmp/tmpza2llmov.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    if\
    \ (count == 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    if (count == 3)\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4q4lmztu: /tmp/tmp4q4lmztu.cpp:36: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 2] &&\
    \ s[i] == s[i + 3]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqk3wa8st: /tmp/tmpqk3wa8st.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n            if (count ==\
    \ 3) {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxwc71ik8: /tmp/tmpxwc71ik8.cpp:32: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] != s[j] && s[i] != s[k] && s[i] != s[k]) return false;\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd98dic4t: /tmp/tmpd98dic4t.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n   \
    \         if (s.at(i) == s.at(i - 1) && s.at(i) == s.at(i - 2)) {\n          \
    \      flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n\
    \    if (count == 3)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy1i95ftz: /tmp/tmpy1i95ftz.cpp:31: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) == s.at(i\
    \ + 1)) {\n            if (s.at(i) == s.at(i + 2)) {\n                if (s.at(i)\
    \ == s.at(i + 3)) {\n                    return false;\n                }\n  \
    \          }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzi75upfo: /tmp/tmpzi75upfo.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3)\n        return false;\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (s[i] != s[j])\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_qceknja: /tmp/tmp_qceknja.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzo6yqa4j: /tmp/tmpzo6yqa4j.cpp:274: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    return\
    \ count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm18xfxiz: /tmp/tmpm18xfxiz.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwhzqrsnb: /tmp/tmpwhzqrsnb.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmph0_s88u7: /tmp/tmph0_s88u7.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i]\
    \ == s[i + 3]) {\n            flag = false;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzw3fvvpa: /tmp/tmpzw3fvvpa.cpp:31: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) == s.at(i\
    \ + 1)) continue;\n        if (s.at(i) == s.at(i + 2)) continue;\n        if (s.at(i)\
    \ == s.at(i + 3)) continue;\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvq5pof86: /tmp/tmpvq5pof86.cpp:26: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (s[i] == s[j])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpux0yy1jc: /tmp/tmpux0yy1jc.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) continue;\n            if\
    \ (s[i] == s[j] && i != j) continue;\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n   \
    \ assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl18gqwnt: /tmp/tmpl18gqwnt.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3)\n        return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i)\
    \ == s.at(i + 1))\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            flag = true;\n        }\n    }\n    if (flag) {\n       \
    \ for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    if (flag) {\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 4]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 5])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 6])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 7])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 8])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 9])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 10])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 11])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 12])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 13])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 14])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 15])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 16])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 17])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 18])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int \n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpad_5uk4d.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpad_5uk4d.cpp:142:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpad_5uk4d.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpad_5uk4d.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpad_5uk4d.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpad_5uk4d.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpad_5uk4d.cpp:141:17: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \     ~   ^\n      |                 )\n  142 | }\n      | ~                \n\
    /tmp/tmpad_5uk4d.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpad_5uk4d.cpp:143:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  143 | int main() {\n     \
    \ |            ^\n/tmp/tmpad_5uk4d.cpp:153:1: error: expected \u2018}\u2019 at\
    \ end of input\n  153 | }\n      | ^\n/tmp/tmpad_5uk4d.cpp:13:30: note: to match\
    \ this \u2018{\u2019\n   13 | bool is_happy(std::string s) {\n      |        \
    \                      ^\n/tmp/tmpad_5uk4d.cpp:153:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  153 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    unordered_set<char> hash;\n    for (int\
    \ i = 0; i < n; i++) {\n        hash[s[i]];\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        if (i % 3 == 0) {\n            if (hash[s[i + 1]] == hash[s[i\
    \ + 2]] && hash[s[i + 1]] == hash[s[i + 3]]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9ucp764b.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp9ucp764b.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ hash;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp9ucp764b.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp9ucp764b.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ hash;\n      |                   ^~~~\n/tmp/tmp9ucp764b.cpp:20:9: error: \u2018\
    hash\u2019 was not declared in this scope; did you mean \u2018std::hash\u2019\
    ?\n   20 |         hash[s[i]];\n      |         ^~~~\n      |         std::hash\n\
    In file included from /usr/include/c++/9/bits/basic_string.h:6722,\n         \
    \        from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9ucp764b.cpp:2:\n/usr/include/c++/9/bits/functional_hash.h:58:12: note:\
    \ \u2018std::hash\u2019 declared here\n   58 |     struct hash;\n      |     \
    \       ^~~~\n/tmp/tmp9ucp764b.cpp:24:17: error: \u2018hash\u2019 was not declared\
    \ in this scope; did you mean \u2018std::hash\u2019?\n   24 |             if (hash[s[i\
    \ + 1]] == hash[s[i + 2]] && hash[s[i + 1]] == hash[s[i + 3]]) {\n      |    \
    \             ^~~~\n      |                 std::hash\nIn file included from /usr/include/c++/9/bits/basic_string.h:6722,\n\
    \                 from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9ucp764b.cpp:2:\n/usr/include/c++/9/bits/functional_hash.h:58:12: note:\
    \ \u2018std::hash\u2019 declared here\n   58 |     struct hash;\n      |     \
    \       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    int count = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (s[i] == s[i + 1]) {\n            count++;\n     \
    \   }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm8liteu3: /tmp/tmpm8liteu3.cpp:33: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb5rjs1kk: /tmp/tmpb5rjs1kk.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdhs3sh5a: /tmp/tmpdhs3sh5a.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if\
    \ (s[i] == s[j] && s[i] == s[k]) {\n                    flag = true;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6ppaj4zk: /tmp/tmp6ppaj4zk.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) continue;\n        if (s.at(i) == s.at(i + 2)) continue;\n    \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbiahdr6p: /tmp/tmpbiahdr6p.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count >= 3;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpoekzajgf: /tmp/tmpoekzajgf.cpp:34: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n\
    \            if (s.at(i) == s.at(i - 1) && s.at(i) == s.at(i - 2)) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int len\
    \ = s.size();\n    if (len < 3)\n        return false;\n    for (int i = 0; i\
    \ < len-3; i++) {\n        if (s[i] == s[i+1] && s[i] == s[i+2])\n           \
    \ flag = false;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfxo2qg1x: /tmp/tmpfxo2qg1x.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0_hnjd5u: /tmp/tmp0_hnjd5u.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj7l8mzp2: /tmp/tmpj7l8mzp2.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] != s[k]) {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp41qn8j52: /tmp/tmp41qn8j52.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && n == (count -\
    \ 1);\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd78vigvw: /tmp/tmpd78vigvw.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps3n_s10l: /tmp/tmps3n_s10l.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsr36q37r: /tmp/tmpsr36q37r.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    unordered_set<char> chars;\n    for (int i = 0; i < n;\
    \ i++) {\n        char c = s[i];\n        if (chars.find(c) != chars.end()) {\n\
    \            return false;\n        }\n        chars.insert(c);\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyxj5xxyx.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpyxj5xxyx.cpp:16:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   16 |     unordered_set<char>\
    \ chars;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpyxj5xxyx.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpyxj5xxyx.cpp:16:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   16 |     unordered_set<char>\
    \ chars;\n      |                   ^~~~\n/tmp/tmpyxj5xxyx.cpp:19:13: error: \u2018\
    chars\u2019 was not declared in this scope; did you mean \u2018char\u2019?\n \
    \  19 |         if (chars.find(c) != chars.end()) {\n      |             ^~~~~\n\
    \      |             char\n/tmp/tmpyxj5xxyx.cpp:22:9: error: \u2018chars\u2019\
    \ was not declared in this scope; did you mean \u2018char\u2019?\n   22 |    \
    \     chars.insert(c);\n      |         ^~~~~\n      |         char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n;\
    \ j++) {\n            for(int k = j+1; k < n; k++) {\n                if(s[i]\
    \ == s[j] && s[i] == s[k]) {\n                    flag = false;\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyornmrsz: /tmp/tmpyornmrsz.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyambzy12: /tmp/tmpyambzy12.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (s[k] == s[i]) {\n        \
    \                for (int l = k + 1; l < n; l++) {\n                         \
    \   if (s[l] == s[i]) {\n                                return false;\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7ctl8ho8: /tmp/tmp7ctl8ho8.cpp:38: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i +\
    \ 2)) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 2]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 3]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppjh2mh9k: /tmp/tmppjh2mh9k.cpp:46: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq6easw_j: /tmp/tmpq6easw_j.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n      \
    \          if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) return false;\n \
    \           }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4o_rc4dm: /tmp/tmp4o_rc4dm.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpznh_eljl: /tmp/tmpznh_eljl.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (s[i] == s[j]) {\n                flag = false;\n                break;\n  \
    \          }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1imwfkj3: /tmp/tmp1imwfkj3.cpp:37: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            flag = true;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm0dlqfwx: /tmp/tmpm0dlqfwx.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            count++;\n        }\n \
    \   }\n    if (count != 3) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptzz29xu1: /tmp/tmptzz29xu1.cpp:38: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count % 3 ==\
    \ 0;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmt6ceeh0: /tmp/tmpmt6ceeh0.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            if(s[i]==s[j])\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2pxbfv_t: /tmp/tmp2pxbfv_t.cpp:37: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    unordered_set<char> s;\n    for (int i = 0; i < n; i++)\
    \ {\n        s.insert(s[i]);\n    }\n    for (int i = 0; i < n; i++) {\n     \
    \   if (s.size() != 3) return false;\n        if (s.count(s[i]) == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvvbzd4d5.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpvvbzd4d5.cpp:16:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   16 |     unordered_set<char>\
    \ s;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpvvbzd4d5.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpvvbzd4d5.cpp:16:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   16 |     unordered_set<char>\
    \ s;\n      |                   ^~~~\n/tmp/tmpvvbzd4d5.cpp:18:22: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::insert(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   18 |         s.insert(s[i]);\n      |        \
    \              ^\nIn file included from /usr/include/c++/9/string:55,\n      \
    \           from /usr/include/c++/9/bits/locale_classes.h:40,\n              \
    \   from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvvbzd4d5.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1582:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 1582 |         insert(const_iterator __p, _InputIterator __beg, _InputIterator\
    \ __end)\n      |         ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1582:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpvvbzd4d5.cpp:18:22:\
    \ note:   candidate expects 3 arguments, 1 provided\n   18 |         s.insert(s[i]);\n\
    \      |                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvvbzd4d5.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1616:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT =\
    \ char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 1616 |       insert(const_iterator __p, initializer_list<_CharT>\
    \ __l)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1616:7: note:\
    \   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1643:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1643 |       insert(size_type __pos1, const basic_string& __str)\n\
    \      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1643:7: note:  \
    \ candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1666:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1666 |       insert(size_type __pos1, const basic_string&\
    \ __str,\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1666:7:\
    \ note:   candidate expects 4 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1689:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1689 |       insert(size_type __pos, const _CharT*\
    \ __s, size_type __n)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1689:7:\
    \ note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1708:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1708 |       insert(size_type __pos, const _CharT*\
    \ __s)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1708:7: note:\
    \   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1732:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1732 |       insert(size_type __pos, size_type __n, _CharT __c)\n\
    \      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1732:7: note:  \
    \ candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1750:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 1750 |       insert(__const_iterator __p, _CharT __c)\n\
    \      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1750:7: note:  \
    \ candidate expects 2 arguments, 1 provided\n/tmp/tmpvvbzd4d5.cpp:22:15: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018count\u2019\n   22 |         if (s.count(s[i]) ==\
    \ 0) return false;\n      |               ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcec8o21t: /tmp/tmpcec8o21t.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7s54o76r: /tmp/tmp7s54o76r.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2g3ggb8n: /tmp/tmp2g3ggb8n.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt__vv_8v: /tmp/tmpt__vv_8v.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 3] &&\
    \ s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmb3lggl3: /tmp/tmpmb3lggl3.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n; i++) {\n    \
    \        int j = i + 1;\n            int k = i + 2;\n            if (s[j] == s[k]\
    \ && s[j] == s[j + 1]) {\n                flag = true;\n            }\n      \
    \  }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5yxf8qj_: /tmp/tmp5yxf8qj_.cpp:31: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    \n    for(int\
    \ i=0;i<s.size();i++){\n        if(s[i]==s[i+1] && s[i]==s[i+2]){\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz_32_jzi: /tmp/tmpz_32_jzi.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n; i++) {\n    \
    \        for (int j = i + 1; j < n; j++) {\n                if (s[i] == s[j])\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8gn2n0vb: /tmp/tmp8gn2n0vb.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            if (s[i] == s[j]) {\n                flag = true;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb6_tstrf: /tmp/tmpb6_tstrf.cpp:29: int main(): Assertion `candidate((\"\
    aa\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4rxyg8r: /tmp/tmpd4rxyg8r.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n - 3; i++) {\n        if (s.at(i)\
    \ == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeher8qej: /tmp/tmpeher8qej.cpp:28: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            if (s[i] == s[j]) continue;\n            if\
    \ (s[i] == s[j] && i != j) continue;\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n   \
    \ assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8bqjb4_x: /tmp/tmp8bqjb4_x.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]==s[i+1] && s[i]==s[i+2]){\n            continue;\n        }\n\
    \        else{\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpr1yksauu: /tmp/tmpr1yksauu.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3 && n == s.size() % 3) {\n        for (int i = 0;\
    \ i < n; i++) {\n            int j = i + 1;\n            int k = i + 2;\n    \
    \        if (s[j] == s[k]) {\n                flag = true;\n                break;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp35n_hzdy: /tmp/tmp35n_hzdy.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n             \
    \   if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = true;\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpytz95tut: /tmp/tmpytz95tut.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            count++;\n\
    \        else\n            count = 0;\n    }\n    return count >= 3;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5920ok4z: /tmp/tmp5920ok4z.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n - 3; i++) {\n            if (s[i] == s[i + 3] && s[i + 1] == s[i\
    \ + 2] && s[i] == s[i + 2]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptqwauvob: /tmp/tmptqwauvob.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] != s[j] || s[i] != s[k] || s[i] != s[k]) return false;\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4wu5g8jr: /tmp/tmp4wu5g8jr.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    for(int i=0;i<s.size();i++){\n\
    \        for(int j=i+1;j<s.size();j++){\n            for(int k=j+1;k<s.size();k++){\n\
    \                if(s[i]==s[j] && s[i]==s[k]){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj35vrmb2: /tmp/tmpj35vrmb2.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx5hly_jj: /tmp/tmpx5hly_jj.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv_avvm92: /tmp/tmpv_avvm92.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] != s[k]) {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpox7f4wts: /tmp/tmpox7f4wts.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 2]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 3]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo9xczord: /tmp/tmpo9xczord.cpp:46: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >=\
    \ 3 && count == n;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpswehz0m2: /tmp/tmpswehz0m2.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpadasoibx: /tmp/tmpadasoibx.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count == n;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplspgx1j0: /tmp/tmplspgx1j0.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = true;\n    for(int i=0;i<s.size();i++){\n        for(int j=i+1;j<s.size();j++){\n\
    \            for(int k=j+1;k<s.size();k++){\n                if(s[i]==s[j] &&\
    \ s[i]==s[k]){\n                    flag = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmbw6m1yt: /tmp/tmpmbw6m1yt.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    unordered_set<char> seen;\n    for (int i = 0; i < n; i++)\
    \ {\n        char c = s[i];\n        if (seen.find(c) != seen.end()) {\n     \
    \       return false;\n        }\n        seen.insert(c);\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpznhzdsp7.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpznhzdsp7.cpp:16:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   16 |     unordered_set<char>\
    \ seen;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpznhzdsp7.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpznhzdsp7.cpp:16:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   16 |     unordered_set<char>\
    \ seen;\n      |                   ^~~~\n/tmp/tmpznhzdsp7.cpp:19:13: error: \u2018\
    seen\u2019 was not declared in this scope\n   19 |         if (seen.find(c) !=\
    \ seen.end()) {\n      |             ^~~~\n/tmp/tmpznhzdsp7.cpp:22:9: error: \u2018\
    seen\u2019 was not declared in this scope\n   22 |         seen.insert(c);\n \
    \     |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) {\n               \
    \     return false;\n                }\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcrjj0ce7: /tmp/tmpcrjj0ce7.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptjrcils3: /tmp/tmptjrcils3.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcwe_53nu: /tmp/tmpcwe_53nu.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >=\
    \ 3 && n == (count - 3);\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqro0x73j: /tmp/tmpqro0x73j.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1] && s[i] == s[i + 2]) count++;\n    }\n    return count\
    \ >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7x0zw5j2: /tmp/tmp7x0zw5j2.cpp:26: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    for(int\
    \ i = 0; i < s.length()-3; i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2] &&\
    \ s[i+2]==s[i+3]){\n            flag = true;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) return false;\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpws_t_tvk: /tmp/tmpws_t_tvk.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    int n =\
    \ s.size();\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n      \
    \  for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n      \
    \          flag = false;\n                break;\n            }\n        }\n \
    \   }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n   \
    \ assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpayde2lw7: /tmp/tmpayde2lw7.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n    for(int i = 0; i < s.length();\
    \ i++) {\n        for(int j = i + 1; j < s.length(); j++) {\n            for(int\
    \ k = j + 1; k < s.length(); k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k]) {\n                    return false;\n                }\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpndbybwgh: /tmp/tmpndbybwgh.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int len\
    \ = s.length();\n    if (len < 3)\n        return false;\n    for (int i = 0;\
    \ i < len - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            flag = true;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3nhmwxp1: /tmp/tmp3nhmwxp1.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) continue;\n            if\
    \ (s[i] == s[j] && i != j) return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjdgf7bd8: /tmp/tmpjdgf7bd8.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) continue;\n        if (s.at(i) == s.at(i + 2)) continue;\n    \
    \    if (s.at(i) == s.at(i + 3)) continue;\n        return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp69lvhqoc: /tmp/tmp69lvhqoc.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (s[i] == s[i + 1] && s[i] == s[i + 2]) count++;\n    }\n    return count\
    \ >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx2ql0mgx: /tmp/tmpx2ql0mgx.cpp:24: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i+=3)\n    {\n        if(s.at(i)==s.at(i+1)&&s.at(i+1)==s.at(i+2))\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_bigawtb: /tmp/tmp_bigawtb.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] != s[i+1]) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            if(s[i] != s[i+2]) {\n          \
    \      flag = false;\n                break;\n            }\n        }\n    }\n\
    \    if(flag) {\n        for(int i = 0; i < s.length(); i++) {\n            if(s[i]\
    \ != s[i+3]) {\n                flag = false;\n                break;\n      \
    \      }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe_hak8ze: /tmp/tmpe_hak8ze.cpp:43: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ql4resc: /tmp/tmp5ql4resc.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) != s.at(i\
    \ + 1)) {\n            flag = false;\n            break;\n        }\n    }\n \
    \   if (flag) {\n        for (int i = 0; i < n; i++) {\n            if (s.at(i)\
    \ != s.at(i + 2)) {\n                flag = false;\n                break;\n \
    \           }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] == s[i+1] && s[i] == s[i+2]) {\n\
    \            flag = false;\n            break;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpphr6r0p0: /tmp/tmpphr6r0p0.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n\
    \            flag = true;\n        }\n    }\n    if (flag) {\n        flag = false;\n\
    \        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        flag = false;\n        for (int i = 0; i < n; i++) {\n          \
    \  if (s[i] == s[i + 3]) {\n                flag = true;\n            }\n    \
    \    }\n    }\n    if (flag) {\n        flag = false;\n        for (int i = 0;\
    \ i < n; i++) {\n            if (s[i] == s[i + 4]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 5]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 6]) {\n                flag = true;\n            }\n        }\n\
    \    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (s[i] == s[i + 7]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 8]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 9]) {\n                flag = true;\n            }\n        }\n\
    \    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (s[i] == s[i + 10]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 11]) {\n  \
    \              flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 12]) {\n                flag = true;\n            }\n       \
    \ }\n    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (s[i] == s[i + 13]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 14]) {\n  \
    \              flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 15]) {\n                flag = true;\n            }\n       \
    \ }\n    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (s[i] == s[i + 16]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv7kvg5bk.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpv7kvg5bk.cpp:141:13: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  141 |     if (flag\n      |        ~    ^\n      |             )\n\
    \  142 | }\n      | ~            \n/tmp/tmpv7kvg5bk.cpp:142:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  142 | }\n      | ^\n/tmp/tmpv7kvg5bk.cpp:142:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8v2i0ypb: /tmp/tmp8v2i0ypb.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count == n;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpajnpvexp: /tmp/tmpajnpvexp.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n - 3; i++) {\n\
    \        if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4aq4fluw: /tmp/tmp4aq4fluw.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) {\n        return false;\n    }\n    unordered_set<char> seen;\n    for\
    \ (int i = 0; i < n; i++) {\n        char ch = s[i];\n        if (seen.find(ch)\
    \ != seen.end()) {\n            return false;\n        }\n        seen.insert(ch);\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsohq09st.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpsohq09st.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ seen;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpsohq09st.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpsohq09st.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ seen;\n      |                   ^~~~\n/tmp/tmpsohq09st.cpp:21:13: error: \u2018\
    seen\u2019 was not declared in this scope\n   21 |         if (seen.find(ch) !=\
    \ seen.end()) {\n      |             ^~~~\n/tmp/tmpsohq09st.cpp:24:9: error: \u2018\
    seen\u2019 was not declared in this scope\n   24 |         seen.insert(ch);\n\
    \      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd132kifx: /tmp/tmpd132kifx.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      flag = true;\n        for (int i = 0; i < n - 3; i++) {\n            if\
    \ (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n                flag =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxsdhh6cz: /tmp/tmpxsdhh6cz.cpp:35: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = false;\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n  \
    \      if(s[i] == s[i + 1]) {\n            count++;\n        }\n        else {\n\
    \            flag = true;\n            break;\n        }\n    }\n    if(count\
    \ >= 3 && flag == true) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpungcv8s3: /tmp/tmpungcv8s3.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6e_kdap: /tmp/tmpc6e_kdap.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) !=\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwdhiqv8w: /tmp/tmpwdhiqv8w.cpp:25: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprldq9eke: /tmp/tmprldq9eke.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count >= 3;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp01tmyiri: /tmp/tmp01tmyiri.cpp:34: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcdir69jf: /tmp/tmpcdir69jf.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n\
    \                if(s[i]==s[j] && s[i]==s[k]){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptyqajybq: /tmp/tmptyqajybq.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s.at(i) != s.at(i - 1) && s.at(i)\
    \ != s.at(i - 2) && s.at(i) != s.at(i - 3)) {\n            flag = false;\n   \
    \         break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyswejplw: /tmp/tmpyswejplw.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    for(int\
    \ i=0;i<s.length();i+=3){\n        for(int j=i+1;j<s.length();j+=3){\n       \
    \     for(int k=j+1;k<s.length();k+=3){\n                if(s[i]==s[j] && s[i]==s[k]\
    \ && s[i]==s[k]){\n                    return false;\n                }\n    \
    \        }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz_rl8gku: /tmp/tmpz_rl8gku.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && n == (count -\
    \ 3);\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvyqwk_81: /tmp/tmpvyqwk_81.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp303eu26a: /tmp/tmp303eu26a.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    unordered_set<char> s;\n    for (int\
    \ i = 0; i < n; i++) {\n        s.insert(s[i]);\n    }\n    for (int i = 0; i\
    \ < n; i++) {\n        if (s.size() != 3) {\n            return false;\n     \
    \   }\n        if (s.find(s[i]) != s.end()) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_llk3xnz.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp_llk3xnz.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ s;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp_llk3xnz.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ s;\n      |                   ^~~~\n/tmp/tmp_llk3xnz.cpp:20:22: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::insert(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   20 |         s.insert(s[i]);\n      |        \
    \              ^\nIn file included from /usr/include/c++/9/string:55,\n      \
    \           from /usr/include/c++/9/bits/locale_classes.h:40,\n              \
    \   from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1582:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 1582 |         insert(const_iterator __p, _InputIterator __beg, _InputIterator\
    \ __end)\n      |         ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1582:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:20:22:\
    \ note:   candidate expects 3 arguments, 1 provided\n   20 |         s.insert(s[i]);\n\
    \      |                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1616:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT =\
    \ char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 1616 |       insert(const_iterator __p, initializer_list<_CharT>\
    \ __l)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1616:7: note:\
    \   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1643:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1643 |       insert(size_type __pos1, const basic_string& __str)\n\
    \      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1643:7: note:  \
    \ candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1666:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1666 |       insert(size_type __pos1, const basic_string&\
    \ __str,\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1666:7:\
    \ note:   candidate expects 4 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1689:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1689 |       insert(size_type __pos, const _CharT*\
    \ __s, size_type __n)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1689:7:\
    \ note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1708:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1708 |       insert(size_type __pos, const _CharT*\
    \ __s)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1708:7: note:\
    \   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1732:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1732 |       insert(size_type __pos, size_type __n, _CharT __c)\n\
    \      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1732:7: note:  \
    \ candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:1750:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 1750 |       insert(__const_iterator __p, _CharT __c)\n\
    \      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:1750:7: note:  \
    \ candidate expects 2 arguments, 1 provided\n/tmp/tmp_llk3xnz.cpp:26:26: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   26 |         if (s.find(s[i]) != s.end()) {\n      |         \
    \    ~~~~~~~~~~~~ ^~ ~~~~~~~\n      |                   |              |\n   \
    \   |                   |              std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |                   std::__cxx11::basic_string<char>::size_type {aka long\
    \ unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:904:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator!=(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  904 |     operator!=(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:904:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1186:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1186 |     operator!=(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1186:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1260:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator!=(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1260 |     operator!=(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1260:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\nIn file included from /usr/include/c++/9/regex:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n    \
    \             from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1334:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1334 |     operator!=(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1334:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1408:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator!=(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1408 |     operator!=(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1408:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\nIn file included from /usr/include/c++/9/regex:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n    \
    \             from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1486:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1486 |     operator!=(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1486:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/regex.h:2015:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 2015 |     operator!=(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:2015:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/iosfwd:40,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/postypes.h:227:5: note: candidate:\
    \ \u2018template<class _StateT> bool std::operator!=(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  227 |     operator!=(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:227:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::fpos<_StateT>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:461:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator!=(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  461 |     operator!=(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:461:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:337:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator!=(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  337 |     operator!=(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:337:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:375:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator!=(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  375 |     operator!=(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:375:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched\
    \ types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1148:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator!=(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1148 |     operator!=(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1148:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1154:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator!=(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1154 |     operator!=(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1154:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/allocator.h:173:5:\
    \ note: candidate: \u2018template<class _T1, class _T2> bool std::operator!=(const\
    \ std::allocator<_CharT>&, const std::allocator<_T2>&)\u2019\n  173 |     operator!=(const\
    \ allocator<_T1>&, const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:173:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::allocator<_CharT>\u2019 and \u2018\
    std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   26 |         if (s.find(s[i]) != s.end()) {\n      |                   \
    \                ^\nIn file included from /usr/include/c++/9/string:55,\n    \
    \             from /usr/include/c++/9/bits/locale_classes.h:40,\n            \
    \     from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6191:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator!=(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6191 | \
    \    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      | \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6191:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6204:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator!=(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6204 |     operator!=(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6204:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018long unsigned int\u2019\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6216:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator!=(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6216 |     operator!=(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6216:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/ios_base.h:46,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/system_error:319:3: note: candidate:\
    \ \u2018bool std::operator!=(const std::error_code&, const std::error_code&)\u2019\
    \n  319 |   operator!=(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:319:32: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::error_code&\u2019\n\
    \  319 |   operator!=(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:323:3:\
    \ note: candidate: \u2018bool std::operator!=(const std::error_code&, const std::error_condition&)\u2019\
    \n  323 |   operator!=(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:323:32: note:\
    \   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::error_code&\u2019\n\
    \  323 |   operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:327:3:\
    \ note: candidate: \u2018bool std::operator!=(const std::error_condition&, const\
    \ std::error_code&)\u2019\n  327 |   operator!=(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:327:37:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::error_condition&\u2019\
    \n  327 |   operator!=(const error_condition& __lhs, const error_code& __rhs)\
    \ noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:331:3:\
    \ note: candidate: \u2018bool std::operator!=(const std::error_condition&, const\
    \ std::error_condition&)\u2019\n  331 |   operator!=(const error_condition& __lhs,\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:331:37: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::error_condition&\u2019\
    \n  331 |   operator!=(const error_condition& __lhs,\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    In file included from /usr/include/c++/9/bits/locale_facets.h:48,\n          \
    \       from /usr/include/c++/9/bits/basic_ios.h:37,\n                 from /usr/include/c++/9/ios:44,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:214:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator!=(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  214 |     operator!=(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:214:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/complex:481:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator!=(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  481 |     operator!=(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:481:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/complex:486:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator!=(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  486 |     operator!=(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:486:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/complex:491:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator!=(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  491 |     operator!=(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:491:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\nIn file included from /usr/include/c++/9/deque:67,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n     \
    \            from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:299:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator!=(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  299 |     operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:299:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:306:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator!=(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  306 |     operator!=(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:306:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator!=(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2338 |   \
    \  operator!=(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2338:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::deque<_Tp, _Alloc>\u2019 and \u2018\
    std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   26 |         if (s.find(s[i]) != s.end()) {\n      |                   \
    \                ^\nIn file included from /usr/include/c++/9/tuple:39,\n     \
    \            from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/array:257:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> bool std::operator!=(const\
    \ std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  257 |     operator!=(const\
    \ array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/array:257:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::array<_Tp,\
    \ _Nm>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/tuple:1445:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator!=(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1445 |     operator!=(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1445:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched\
    \ types \u2018const std::tuple<_Tps ...>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/std_function.h:764:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator!=(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  764 |     operator!=(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:764:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/std_function.h:770:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator!=(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  770 |     operator!=(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:770:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::function<_Res(_ArgTypes\
    \ ...)>\u2019\n   26 |         if (s.find(s[i]) != s.end()) {\n      |       \
    \                            ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:732:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator!=(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  732 |     operator!=(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:732:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:738:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator!=(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  738 |     operator!=(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:738:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   26 |         if (s.find(s[i]) != s.end()) {\n      |                   \
    \                ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:743:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator!=(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  743 |     operator!=(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:743:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::unique_ptr<_Tp,\
    \ _Dp>\u2019\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:141:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator!=(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  141 |     operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:141:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/list:63,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2032:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator!=(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2032 |     operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2032:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1479:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator!=(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1479 |     operator!=(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1479:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/map:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1143:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator!=(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1143 |     operator!=(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1143:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1428:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator!=(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1428 |     operator!=(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1428:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1434:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator!=(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1434 |     operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1434:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   26 |         if (s.find(s[i]) != s.end()) {\n      |                   \
    \                ^\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1439:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator!=(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1439 |     operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1439:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::__shared_ptr<_Tp,\
    \ _Lp>\u2019\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:398:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator!=(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  398 |     operator!=(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:398:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:403:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator!=(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  403 |     operator!=(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:403:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:408:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator!=(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  408 |     operator!=(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:408:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::shared_ptr<_Tp>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\nIn file included from /usr/include/c++/9/vector:67,\n     \
    \            from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1912:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator!=(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1912 | \
    \    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:362:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator!=(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  362 |     operator!=(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:362:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::queue<_Tp,\
    \ _Seq>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:1003:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator!=(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n 1003 |     operator!=(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:1003:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::set<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/set:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:988:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator!=(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  988 |     operator!=(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:988:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:337:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator!=(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  337 |     operator!=(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:337:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::stack<_Tp,\
    \ _Seq>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:418:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__not_equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator!=(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  418 |     _DEFINE_EXPR_BINARY_OPERATOR(!=, __not_equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:418:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:418:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__not_equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator!=(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  418\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(!=, __not_equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:418:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:418:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__not_equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator!=(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  418 |     _DEFINE_EXPR_BINARY_OPERATOR(!=,\
    \ __not_equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:418:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:418:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__not_equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator!=(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  418 |     _DEFINE_EXPR_BINARY_OPERATOR(!=, __not_equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:418:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:418:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__not_equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator!=(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  418 |     _DEFINE_EXPR_BINARY_OPERATOR(!=, __not_equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:418:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/valarray:1198:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__not_equal_to,\
    \ _Tp>::result_type> std::operator!=(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1198 | _DEFINE_BINARY_OPERATOR(!=, __not_equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1198:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/valarray:1198:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__not_equal_to,\
    \ _Tp>::result_type> std::operator!=(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1198 | _DEFINE_BINARY_OPERATOR(!=,\
    \ __not_equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1198:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/valarray:1198:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__not_equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__not_equal_to,\
    \ _Tp>::result_type> std::operator!=(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1198 | _DEFINE_BINARY_OPERATOR(!=, __not_equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1198:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1451:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator!=(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1451 |     operator!=(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1451:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::forward_list<_Tp,\
    \ _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/future:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/thread:286:3:\
    \ note: candidate: \u2018bool std::operator!=(std::thread::id, std::thread::id)\u2019\
    \n  286 |   operator!=(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:286:25: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019} to \u2018std::thread::id\u2019\n  286 |   operator!=(thread::id __x,\
    \ thread::id __y) noexcept\n      |              ~~~~~~~~~~~^~~\nIn file included\
    \ from /usr/include/c++/9/random:49,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:421:5:\
    \ note: candidate: \u2018template<class _UIntType, _UIntType __a, _UIntType __c,\
    \ _UIntType __m> bool std::operator!=(const std::linear_congruential_engine<_UIntType,\
    \ __a, __c, __m>&, const std::linear_congruential_engine<_UIntType, __a, __c,\
    \ __m>&)\u2019\n  421 |     operator!=(const std::linear_congruential_engine<_UIntType,\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:421:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::linear_congruential_engine<_UIntType,\
    \ __a, __c, __m>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:658:5:\
    \ note: candidate: \u2018template<class _UIntType, long unsigned int __w, long\
    \ unsigned int __n, long unsigned int __m, long unsigned int __r, _UIntType __a,\
    \ long unsigned int __u, _UIntType __d, long unsigned int __s, _UIntType __b,\
    \ long unsigned int __t, _UIntType __c, long unsigned int __l, _UIntType __f>\
    \ bool std::operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n,\
    \ __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&, const std::mersenne_twister_engine<_UIntType,\
    \ __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>&)\u2019\n \
    \ 658 |     operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n,\
    \ __m,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:658:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::mersenne_twister_engine<_UIntType,\
    \ __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>\u2019 and \u2018\
    std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   26 |         if (s.find(s[i]) != s.end()) {\n      |                   \
    \                ^\nIn file included from /usr/include/c++/9/random:49,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n  \
    \               from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:859:5:\
    \ note: candidate: \u2018template<class _UIntType, long unsigned int __w, long\
    \ unsigned int __s, long unsigned int __r> bool std::operator!=(const std::subtract_with_carry_engine<_UIntType,\
    \ __w, __s, __r>&, const std::subtract_with_carry_engine<_UIntType, __w, __s,\
    \ __r>&)\u2019\n  859 |     operator!=(const std::subtract_with_carry_engine<_UIntType,\
    \ __w,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:859:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::subtract_with_carry_engine<_UIntType,\
    \ __w, __s, __r>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:1082:5:\
    \ note: candidate: \u2018template<class _RandomNumberEngine, long unsigned int\
    \ __p, long unsigned int __r> bool std::operator!=(const std::discard_block_engine<_RandomNumberEngine,\
    \ __p, __r>&, const std::discard_block_engine<_RandomNumberEngine, __p, __r>&)\u2019\
    \n 1082 |     operator!=(const std::discard_block_engine<_RandomNumberEngine,\
    \ __p,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:1082:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::discard_block_engine<_RandomNumberEngine,\
    \ __p, __r>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:1279:5:\
    \ note: candidate: \u2018template<class _RandomNumberEngine, long unsigned int\
    \ __w, class _UIntType> bool std::operator!=(const std::independent_bits_engine<_RandomNumberEngine,\
    \ __w, _UIntType>&, const std::independent_bits_engine<_RandomNumberEngine, __w,\
    \ _UIntType>&)\u2019\n 1279 |     operator!=(const std::independent_bits_engine<_RandomNumberEngine,\
    \ __w,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:1279:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::independent_bits_engine<_RandomNumberEngine,\
    \ __w, _UIntType>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:1532:5:\
    \ note: candidate: \u2018template<class _RandomNumberEngine, long unsigned int\
    \ __k> bool std::operator!=(const std::shuffle_order_engine<_RandomNumberEngine,\
    \ __k>&, const std::shuffle_order_engine<_RandomNumberEngine, __k>&)\u2019\n 1532\
    \ |     operator!=(const std::shuffle_order_engine<_RandomNumberEngine,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:1532:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched\
    \ types \u2018const std::shuffle_order_engine<_RandomNumberEngine, __k>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:1692:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::uniform_int_distribution<_IntType>&,\
    \ const std::uniform_int_distribution<_IntType>&)\u2019\n 1692 |     operator!=(const\
    \ std::uniform_int_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:1692:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::uniform_int_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:1913:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::uniform_real_distribution<_IntType>&,\
    \ const std::uniform_real_distribution<_IntType>&)\u2019\n 1913 |     operator!=(const\
    \ std::uniform_real_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:1913:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::uniform_real_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:2170:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 2170 |     operator!=(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:2170:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::normal_distribution<_RealType>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:2381:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::lognormal_distribution<_RealType>&, const std::lognormal_distribution<_RealType>&)\u2019\
    \n 2381 |     operator!=(const std::lognormal_distribution<_RealType>& __d1,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:2381:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::lognormal_distribution<_RealType>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:2612:6:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::gamma_distribution<_RealType>&, const std::gamma_distribution<_RealType>&)\u2019\
    \n 2612 |      operator!=(const std::gamma_distribution<_RealType>& __d1,\n  \
    \    |      ^~~~~~~~\n/usr/include/c++/9/bits/random.h:2612:6: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::gamma_distribution<_RealType>\u2019 and \u2018\
    std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   26 |         if (s.find(s[i]) != s.end()) {\n      |                   \
    \                ^\nIn file included from /usr/include/c++/9/random:49,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n  \
    \               from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:2836:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::chi_squared_distribution<_RealType>&, const std::chi_squared_distribution<_RealType>&)\u2019\
    \n 2836 |     operator!=(const std::chi_squared_distribution<_RealType>& __d1,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:2836:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::chi_squared_distribution<_RealType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:3010:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::cauchy_distribution<_RealType>&, const std::cauchy_distribution<_RealType>&)\u2019\
    \n 3010 |     operator!=(const std::cauchy_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:3010:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::cauchy_distribution<_RealType>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:3274:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::fisher_f_distribution<_RealType>&, const std::fisher_f_distribution<_RealType>&)\u2019\
    \n 3274 |     operator!=(const std::fisher_f_distribution<_RealType>& __d1,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:3274:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::fisher_f_distribution<_RealType>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:3496:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::student_t_distribution<_RealType>&, const std::student_t_distribution<_RealType>&)\u2019\
    \n 3496 |     operator!=(const std::student_t_distribution<_RealType>& __d1,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:3496:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::student_t_distribution<_RealType>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:3684:3:\
    \ note: candidate: \u2018bool std::operator!=(const std::bernoulli_distribution&,\
    \ const std::bernoulli_distribution&)\u2019\n 3684 |   operator!=(const std::bernoulli_distribution&\
    \ __d1,\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/random.h:3684:49: note: \
    \  no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::bernoulli_distribution&\u2019\
    \n 3684 |   operator!=(const std::bernoulli_distribution& __d1,\n      |     \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~\n/usr/include/c++/9/bits/random.h:3959:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::binomial_distribution<_IntType>&,\
    \ const std::binomial_distribution<_IntType>&)\u2019\n 3959 |     operator!=(const\
    \ std::binomial_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:3959:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::binomial_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:4138:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::geometric_distribution<_IntType>&,\
    \ const std::geometric_distribution<_IntType>&)\u2019\n 4138 |     operator!=(const\
    \ std::geometric_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:4138:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::geometric_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:4392:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::negative_binomial_distribution<_IntType>&,\
    \ const std::negative_binomial_distribution<_IntType>&)\u2019\n 4392 |     operator!=(const\
    \ std::negative_binomial_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/random.h:4392:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note:   mismatched types \u2018const std::negative_binomial_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:4618:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::poisson_distribution<_IntType>&,\
    \ const std::poisson_distribution<_IntType>&)\u2019\n 4618 |     operator!=(const\
    \ std::poisson_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:4618:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::poisson_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:4809:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::exponential_distribution<_RealType>&, const std::exponential_distribution<_RealType>&)\u2019\
    \n 4809 |     operator!=(const std::exponential_distribution<_RealType>& __d1,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:4809:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::exponential_distribution<_RealType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:5019:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::weibull_distribution<_RealType>&, const std::weibull_distribution<_RealType>&)\u2019\
    \n 5019 |     operator!=(const std::weibull_distribution<_RealType>& __d1,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:5019:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::weibull_distribution<_RealType>\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |        \
    \                           ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:5229:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::extreme_value_distribution<_RealType>&, const std::extreme_value_distribution<_RealType>&)\u2019\
    \n 5229 |     operator!=(const std::extreme_value_distribution<_RealType>& __d1,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:5229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::extreme_value_distribution<_RealType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:5494:5:\
    \ note: candidate: \u2018template<class _IntType> bool std::operator!=(const std::discrete_distribution<_IntType>&,\
    \ const std::discrete_distribution<_IntType>&)\u2019\n 5494 |     operator!=(const\
    \ std::discrete_distribution<_IntType>& __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:5494:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::discrete_distribution<_IntType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:5765:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::piecewise_constant_distribution<_RealType>&, const std::piecewise_constant_distribution<_RealType>&)\u2019\
    \n 5765 |     operator!=(const std::piecewise_constant_distribution<_RealType>&\
    \ __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:5765:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::piecewise_constant_distribution<_RealType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/random:49,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/random.h:6038:5:\
    \ note: candidate: \u2018template<class _RealType> bool std::operator!=(const\
    \ std::piecewise_linear_distribution<_RealType>&, const std::piecewise_linear_distribution<_RealType>&)\u2019\
    \n 6038 |     operator!=(const std::piecewise_linear_distribution<_RealType>&\
    \ __d1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/random.h:6038:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::piecewise_linear_distribution<_RealType>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/scoped_allocator:498:5:\
    \ note: candidate: \u2018template<class _OutA1, class _OutA2, class ... _InA>\
    \ bool std::operator!=(const std::scoped_allocator_adaptor<_OutA1, _InA ...>&,\
    \ const std::scoped_allocator_adaptor<_InnerHead, _InnerTail ...>&)\u2019\n  498\
    \ |     operator!=(const scoped_allocator_adaptor<_OutA1, _InA...>& __a,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:498:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35: note: \
    \  mismatched types \u2018const std::scoped_allocator_adaptor<_OutA1, _InA ...>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end()) {\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2099:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator!=(const std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\
    \n 2099 |     operator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2099:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2111:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator!=(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2111 |     operator!=(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2111:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::unordered_multimap<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/unordered_set:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1711:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator!=(const std::unordered_set<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1711\
    \ |     operator!=(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1711:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::unordered_set<_Value, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/unordered_set:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1723:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator!=(const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\
    \n 1723 |     operator!=(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1723:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   mismatched types \u2018const std::unordered_multiset<_Value, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n   26 |         if (s.find(s[i]) != s.end())\
    \ {\n      |                                   ^\nIn file included from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/bits/allocator.h:159:7:\
    \ note: candidate: \u2018bool std::operator!=(const std::allocator<char>&, const\
    \ std::allocator<char>&)\u2019\n  159 |       operator!=(const allocator&, const\
    \ allocator&) _GLIBCXX_NOTHROW\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:159:18:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const std::allocator<char>&\u2019\
    \n  159 |       operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |                  ^~~~~~~~~~~~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_llk3xnz.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:172:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator!=(const __gnu_cxx::new_allocator<char>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  172 |  operator!=(const new_allocator&,\
    \ const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:172:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_llk3xnz.cpp:26:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019} is not derived from \u2018const __gnu_cxx::new_allocator<_Tp>\u2019\
    \n   26 |         if (s.find(s[i]) != s.end()) {\n      |                    \
    \               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int len\
    \ = s.length();\n    if (len < 3)\n        return false;\n    for (int i = 0;\
    \ i < len - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            flag = true;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8mucseh3: /tmp/tmp8mucseh3.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] != s[j]) break;\n        }\n        if\
    \ (j - i != 3) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8etrt1my.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp8etrt1my.cpp:20:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   20 |         if (j - i != 3) return false;\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count == n;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ip354yz: /tmp/tmp9ip354yz.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxnaa_wp4: /tmp/tmpxnaa_wp4.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj8lfnw5z: /tmp/tmpj8lfnw5z.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (s[k] == s[i]) {\n        \
    \                return false;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7clle3ht: /tmp/tmp7clle3ht.cpp:31: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            flag = true;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmprwgr34wn: /tmp/tmprwgr34wn.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    return\
    \ count >= 3 && count == n;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpijpco9na: /tmp/tmpijpco9na.cpp:26: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            flag = true;\n        }\n    }\n    if (flag) {\n       \
    \ for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    if (flag) {\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 4]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 5])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 6])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 7])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 8])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 9])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 10])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 11])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 12])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 13])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 14])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 15])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 16])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 17])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 18])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int \n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpwo1p7_jn.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpwo1p7_jn.cpp:142:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpwo1p7_jn.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpwo1p7_jn.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpwo1p7_jn.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpwo1p7_jn.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpwo1p7_jn.cpp:141:17: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \     ~   ^\n      |                 )\n  142 | }\n      | ~                \n\
    /tmp/tmpwo1p7_jn.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpwo1p7_jn.cpp:143:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  143 | int main() {\n     \
    \ |            ^\n/tmp/tmpwo1p7_jn.cpp:153:1: error: expected \u2018}\u2019 at\
    \ end of input\n  153 | }\n      | ^\n/tmp/tmpwo1p7_jn.cpp:13:30: note: to match\
    \ this \u2018{\u2019\n   13 | bool is_happy(std::string s) {\n      |        \
    \                      ^\n/tmp/tmpwo1p7_jn.cpp:153:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  153 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i+=3)\n    {\n        for(int j=i;j<i+3;j++)\n\
    \        {\n            if(s.at(j)==s.at(j+1))\n            {\n              \
    \  if(s.at(j)==s.at(j+2))\n                {\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] !=\
    \ s[i + 1] && s[i] != s[i + 2] && s[i] != s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2q78j8ix: /tmp/tmp2q78j8ix.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpatlpflfg: /tmp/tmpatlpflfg.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n           \
    \ for(int k=j+1;k<n;k++)\n            {\n                if(s[i]==s[j] && s[i]==s[k])\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplabq9q2q: /tmp/tmplabq9q2q.cpp:32: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i+=3)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if(s[i]==s[j] && s[i]==s[k])\n                    return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeyucjuv8: /tmp/tmpeyucjuv8.cpp:35: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >=\
    \ 3 && count == n;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxysnnpm3: /tmp/tmpxysnnpm3.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe9fos5_4: /tmp/tmpe9fos5_4.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n; i++) {\n    \
    \        int j = i + 1;\n            int k = i + 2;\n            if (j > n ||\
    \ k >= n || s[j] != s[k]) {\n                flag = false;\n                break;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpopvjg161: /tmp/tmpopvjg161.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) != s.at(i\
    \ + 1) && s.at(i) != s.at(i + 2)) {\n            flag = false;\n            break;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) == s.at(i +\
    \ 1)) {\n            if (s.at(i) == s.at(i + 2)) {\n                flag = true;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2jttne_h: /tmp/tmp2jttne_h.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] != s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptvcwx2rj: /tmp/tmptvcwx2rj.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    unordered_set<char> seen;\n    for (int\
    \ i = 0; i < n; i++) {\n        char ch = s[i];\n        if (seen.find(ch) !=\
    \ seen.end()) {\n            return false;\n        }\n        seen.insert(ch);\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpryzt5o8c.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpryzt5o8c.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ seen;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpryzt5o8c.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpryzt5o8c.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ seen;\n      |                   ^~~~\n/tmp/tmpryzt5o8c.cpp:21:13: error: \u2018\
    seen\u2019 was not declared in this scope\n   21 |         if (seen.find(ch) !=\
    \ seen.end()) {\n      |             ^~~~\n/tmp/tmpryzt5o8c.cpp:24:9: error: \u2018\
    seen\u2019 was not declared in this scope\n   24 |         seen.insert(ch);\n\
    \      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    for(int i=0;i<s.size();i++){\n\
    \        for(int j=i+1;j<s.size();j++){\n            for(int k=j+1;k<s.size();k++){\n\
    \                if(s[i]==s[j] && s[i]==s[k]){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps28etklo: /tmp/tmps28etklo.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int len\
    \ = s.length();\n    if (len < 3)\n        return false;\n    for (int i = 0;\
    \ i < len - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n   \
    \ assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpoww2566u: /tmp/tmpoww2566u.cpp:35: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    \n    for (int i = 0; i < n; i++) {\n        if (s.at(i)\
    \ != s.at(i + 1)) return false;\n    }\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjboi8rye: /tmp/tmpjboi8rye.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n - 3; i++) {\n            if (s[i] == s[i + 1] && s[i] == s[i +\
    \ 2] && s[i] == s[i + 3]) {\n                return false;\n            }\n  \
    \      }\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4te2zgzq: /tmp/tmp4te2zgzq.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfo8091te: /tmp/tmpfo8091te.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            flag = true;\n  \
    \      }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc829s_uo: /tmp/tmpc829s_uo.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] != s[j]) break;\n        }\n      \
    \  if (j - i + 1 != 3) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxqioqomc.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpxqioqomc.cpp:20:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   20 |         if (j - i + 1 != 3) return false;\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      flag = true;\n        for (int i = 0; i < n - 3; i++) {\n            if\
    \ (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n                flag =\
    \ false;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6qzoi_2c: /tmp/tmp6qzoi_2c.cpp:34: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9e3_x6da: /tmp/tmp9e3_x6da.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    return\
    \ count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphoh7nipy: /tmp/tmphoh7nipy.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp_ot9ab0: /tmp/tmpp_ot9ab0.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                if (s[i] == s[j]) {\n                    flag = false;\n\
    \                    break;\n                }\n                else {\n     \
    \               flag = true;\n                }\n            }\n        }\n  \
    \  }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp38llgemh: /tmp/tmp38llgemh.cpp:43: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzdzi9scm: /tmp/tmpzdzi9scm.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] != s[k]) {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6dwn_dh6: /tmp/tmp6dwn_dh6.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            count++;\n\
    \    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ouscyva: /tmp/tmp4ouscyva.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int len\
    \ = s.size();\n    if (len < 3)\n        flag = false;\n    else {\n        for\
    \ (int i = 0; i < len - 1; i++) {\n            if (s.at(i) == s.at(i + 1))\n \
    \               flag = false;\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxrrb73b7: /tmp/tmpxrrb73b7.cpp:35: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
