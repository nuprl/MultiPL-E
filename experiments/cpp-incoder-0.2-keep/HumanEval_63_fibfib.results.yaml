language: cpp
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib = 0;\n    if (n == 0)\n        fibfib = 0;\n    else if (n == 1)\n  \
    \      fibfib = 0;\n    else if (n == 2)\n        fibfib = 1;\n    else\n    \
    \    fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n    return fibfib;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjle8vws7.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpjle8vws7.cpp:24:37: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   24 |         fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n      |       \
    \                              ^\n/tmp/tmpjle8vws7.cpp:24:51: error: \u2018fibfib\u2019\
    \ cannot be used as a function\n   24 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n      |                                                   ^\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long \n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdlpcl96y.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpdlpcl96y.cpp:30:10: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   30 |     long n = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:43:10:\
    \ error: redeclaration of \u2018long int a\u2019\n   43 |     long a = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:17:10: note: \u2018long int a\u2019 previously\
    \ declared here\n   17 |     long a = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:44:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   44 |     long b = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:18:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   18 |     long b = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:45:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   45 |     long c = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:19:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   19 |     long c = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:46:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   46 |     long d = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:20:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   20 |     long d = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:47:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   47 |     long e = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:21:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   21 |     long e = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:48:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   48 |     long f = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:22:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   22 |     long f = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:49:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   49 |     long g = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:23:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   23 |     long g = 1;\n      |          ^\n/tmp/tmpdlpcl96y.cpp:50:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   50 |     long h = 1;\n  \
    \    |          ^\n/tmp/tmpdlpcl96y.cpp:24:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   24 |     long h = 1;\n      |          ^\n/tm"
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0)\n        return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9llpej9x: /tmp/tmp9llpej9x.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long temp;\n    long fibfib;\n    long i;\n    for(i=1;i<=n;i++){\n     \
    \   temp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n  \
    \      d = temp;\n        fibfib = a + b + c + d;\n        sum = sum + fibfib;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpw9f3vydj: /tmp/tmpw9f3vydj.cpp:37: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    long ans=fibfib(n-1);\n    ans=ans+fibfib(n-2);\n    ans=ans+fibfib(n-3);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp6tj046lm: /tmp/tmp6tj046lm.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0)\n        return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9llpej9x: /tmp/tmp9llpej9x.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<0){\n\
    \        cout<<\"The fibfib(n) function only accepts positive integers\"<<endl;\n\
    \        exit(1);\n    }\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n\
    \        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7pid0jd.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpj7pid0jd.cpp:17:9: error: \u2018cout\u2019 was not declared in this\
    \ scope; did you mean \u2018std::cout\u2019?\n   17 |         cout<<\"The fibfib(n)\
    \ function only accepts positive integers\"<<endl;\n      |         ^~~~\n   \
    \   |         std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpj7pid0jd.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpj7pid0jd.cpp:17:72:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   17 |         cout<<\"The fibfib(n) function only accepts\
    \ positive integers\"<<endl;\n      |                                        \
    \                                ^~~~\n      |                               \
    \                                         std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpj7pid0jd.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long fibfib = 0;\n    if (n == 0)\n        fibfib\
    \ = 0;\n    else if (n == 1)\n        fibfib = 0;\n    else if (n == 2)\n    \
    \    fibfib = 1;\n    else\n        fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n\
    \    return fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuggibea1.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpuggibea1.cpp:25:37: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   25 |         fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n      |       \
    \                              ^\n/tmp/tmpuggibea1.cpp:25:51: error: \u2018fibfib\u2019\
    \ cannot be used as a function\n   25 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n      |                                                   ^\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    long a = fibfib(n-1);\n    long b = fibfib(n-2);\n \
    \   long c = fibfib(n-3);\n    return a + b + c;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmph2p9quvs: /tmp/tmph2p9quvs.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib = 0;\n    long fibfib1 = fibfib;\n    long fibfib2 = fibfib1;\n    long\
    \ fibfib3 = fibfib2;\n    long fibfib4 = fibfib3;\n    long fibfib5 = fibfib4;\n\
    \    long fibfib6 = fibfib5;\n    long fibfib7 = fibfib6;\n    long fibfib8 =\
    \ fibfib7;\n    long fibfib9 = fibfib8;\n    long fibfib10 = fibfib9;\n    long\
    \ fibfib11 = fibfib10;\n    long fibfib12 = fibfib11;\n    long fibfib13 = fibfib12;\n\
    \    long fibfib14 = fibfib13;\n    long fibfib15 = fibfib14;\n    long fibfib16\
    \ = fibfib15;\n    long fibfib17 = fibfib16;\n    long fibfib18 = fibfib17;\n\
    \    long fibfib19 = fibfib18;\n    long fibfib20 = fibfib19;\n    long fibfib21\
    \ = fibfib20;\n    long fibfib22 = fibfib21;\n    long fibfib23 = fibfib22;\n\
    \    long fibfib24 = fibfib23;\n    long fibfib25 = fibfib24;\n    long fibfib26\
    \ = fibfib25;\n    long fibfib27 = fibfib26;\n    long fibfib28 = fibfib27;\n\
    \    long fibfib29 = fibfib28;\n    long fibfib30 = fibfib29;\n    long fibfib31\
    \ = fibfib30;\n    long fibfib32 = fibfib31;\n    long fibfib33 = fibfib32;\n\
    \    long fibfib34 = fibfib33;\n    long fibfib35 = fibfib34;\n    long fibfib36\
    \ = fibfib35;\n    long fibfib37 = fibfib36;\n    long fibfib38 = fibfib37;\n\
    \    long fibfib39 = fibfib38;\n    long fibfib40 = fibfib39;\n    long fibfib41\
    \ = fibfib40;\n    long fibfib42 = fibfib41;\n    long fibfib43 = fibfib42;\n\
    \    long fibfib44 = fibfib43;\n    long fibfib45 = fibfib44;\n    long fibfib46\
    \ = fibfib45;\n    long fibfib47 = fibfib46;\n    long fibfib48 = fibfib47;\n\
    \    long fibfib49 = fibfib48;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpi5xx17sx: /tmp/tmpi5xx17sx.cpp:69: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ long sum = 0;\n    for(int i = 3; i <= n; i++) {\n        sum += fibfib[i-1]\
    \ + fibfib[i-2];\n        fibfib[i] = sum;\n    }\n    return fibfib[n];\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmph6yp2h44: /tmp/tmph6yp2h44.cpp:31: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    long fibfib1 = fibfib(n-1);\n\
    \    long fibfib2 = fibfib(n-2);\n    long fibfib3 = fibfib(n-3);\n    return\
    \ fibfib1 + fibfib2 + fibfib3;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    long ans=fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpkpl7m1k4: /tmp/tmpkpl7m1k4.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long curr = 1;\n    long prev = 0;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long temp;\n    long count = 0;\n    while (i <=\
    \ n) {\n        temp = curr + prev;\n        prev = curr;\n        curr = temp;\n\
    \        sum += curr;\n        i++;\n    }\n    temp = curr + prev;\n    prev\
    \ = curr;\n    curr = temp;\n    sum += curr;\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpng2bonib: /tmp/tmpng2bonib.cpp:39: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ long sum = 0;\n    for(int i=3;i<=n;i++){\n        sum += fibfib[i-1] + fibfib[i-2];\n\
    \        fibfib[i] = sum;\n    }\n    return fibfib[n];\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpejgjg_ri: /tmp/tmpejgjg_ri.cpp:31: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    long ans=fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpkpl7m1k4: /tmp/tmpkpl7m1k4.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long fibfib = 0;\n    long fibfib1 = 1;\n    long fibfib2 = 1;\n\
    \    long fibfib3 = 1;\n    long fibfib4 = 1;\n    long fibfib5 = 1;\n    long\
    \ fibfib6 = 1;\n    long fibfib7 = 1;\n    long fibfib8 = 1;\n    long fibfib9\
    \ = 1;\n    long fibfib10 = 1;\n    long fibfib11 = 1;\n    long fibfib12 = 1;\n\
    \    long fibfib13 = 1;\n    long fibfib14 = 1;\n    long fibfib15 = 1;\n    long\
    \ fibfib16 = 1;\n    long fibfib17 = 1;\n    long fibfib18 = 1;\n    long fibfib19\
    \ = 1;\n    long fibfib20 = 1;\n    long fibfib21 = 1;\n    long fibfib22 = 1;\n\
    \    long fibfib23 = 1;\n    long fibfib24 = 1;\n    long fibfib25 = 1;\n    long\
    \ fibfib26 = 1;\n    long fibfib27 = 1;\n    long fibfib28 = 1;\n    long fibfib29\
    \ = 1;\n    long fibfib30 = 1;\n    long fibfib31 = 1;\n    long fibfib32 = 1;\n\
    \    long fibfib33 = 1;\n    long fibfib34 = 1;\n    long fibfib35 = 1;\n    long\
    \ fibfib36 = 1;\n    long fibfib37 = 1;\n    long fibfib38 = 1;\n    long fibfib39\
    \ = 1;\n    long fibfib40 = 1;\n    long fibfib41 = 1;\n    long fibfib42 = 1;\n\
    \    long fibfib43 = 1;\n    long fibfib44 = 1;\n    long fibfib45 = 1;\n    long\
    \ fibfib46 = 1;\n    long fibfib47 = 1;\n    long fibfib48 = 1;\n    long fibfib49\
    \ = 1;\n    long fibfib50 = 1;\n    long fibfib51 = 1;\n    long fibfib52 = 1;\n\
    \    long fibfib53 = 1;\n    long fibfib54 = 1;\n    long fibfib55 = 1;\n    long\
    \ fibfib56 = 1;\n    long fibfib57 = 1;\n    long fibfib58 = 1;\n    long fibfib59\
    \ = 1;\n    long fibfib60 = 1;\n    long fibfib61 = 1;\n    long fibfib62 = 1;\n\
    \    long fibfib63 = 1;\n    long fibfib64 = 1;\n    long fibfib65 = 1;\n    long\
    \ fibfib66 = 1;\n    long fibfib67 = 1;\n    long fibfib68 = 1;\n    long fibfib69\
    \ = 1;\n    long fibfib70 = 1;\n    long fibfib71 = 1;\n    \n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmppij8ueei: /tmp/tmppij8ueei.cpp:93: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long temp;\n    long fibfib = 0;\n    long fibfib1 = 0;\n    long fibfib2\
    \ = 0;\n    long fibfib3 = 0;\n    long fibfib4 = 0;\n    long fibfib5 = 0;\n\
    \    long fibfib6 = 0;\n    long fibfib7 = 0;\n    long fibfib8 = 0;\n    long\
    \ fibfib9 = 0;\n    long fibfib10 = 0;\n    long fibfib11 = 0;\n    long fibfib12\
    \ = 0;\n    long fibfib13 = 0;\n    long fibfib14 = 0;\n    long fibfib15 = 0;\n\
    \    long fibfib16 = 0;\n    long fibfib17 = 0;\n    long fibfib18 = 0;\n    long\
    \ fibfib19 = 0;\n    long fibfib20 = 0;\n    long fibfib21 = 0;\n    long fibfib22\
    \ = 0;\n    long fibfib23 = 0;\n    long fibfib24 = 0;\n    long fibfib25 = 0;\n\
    \    long fibfib26 = 0;\n    long fibfib27 = 0;\n    long fibfib28 = 0;\n    long\
    \ fibfib29 = 0;\n    long fibfib30 = 0;\n    long fibfib31 = 0;\n    long fibfib32\
    \ = 0;\n    long fibfib33 = 0;\n    long fibfib34 = 0;\n    long fibfib35 = 0;\n\
    \    long fibfib36 = 0;\n    long fibfib37 = 0;\n    long fibfib38 = 0;\n    long\
    \ fibfib39 = 0;\n    long fibfib40 = 0;\n    long fibfib41 = 0;\n    long fibfib42\
    \ = 0;\n    long fibfib43 = 0;\n    long fibfib44 = 0;\n    long fibfib45 = 0;\n\
    \    long fibfib46 = 0;\n    long fibfib47 = 0;\n    long fibfib48 = 0;\n    long\
    \ fibfib49 = 0;\n    long fibfib50 = 0;\n    long fibfib51 = 0;\n    long fibfib52\
    \ = 0;\n    long fibfib53 = 0;\n    long fibfib54 = 0;\n    long fibfib55 = 0;\n\
    \    long fibfib56 = 0;\n    long fibfib57 = 0;\n    long fibfib58 = 0;\n    long\
    \ fibfib59 = 0;\n    long fibfib60 = 0;\n    long fibfib61 = 0;\n    long fibfib62\
    \ = 0;\n    long fibfib63 = 0;\n    long fibfib64 = 0;\n    long fibfib65 = 0;\n\
    \    long fibfib66 = 0;\n    long fibfib67 = 0;\n    long fibfib68 = 0;\n    long\
    \ fibfib69\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvetv0p6e.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpvetv0p6e.cpp:92:1: error: expected initializer before \u2018}\u2019\
    \ token\n   92 | }\n      | ^\n/tmp/tmpvetv0p6e.cpp:92:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib = 0;\n    if (n == 0 || n == 1)\n        return n;\n    fibfib += fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    return fibfib;\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps5_kwmty.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmps5_kwmty.cpp:19:25: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   19 |     fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n      |     \
    \                    ^\n/tmp/tmps5_kwmty.cpp:19:39: error: \u2018fibfib\u2019\
    \ cannot be used as a function\n   19 |     fibfib += fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n      |                                       ^\n/tmp/tmps5_kwmty.cpp:19:53:\
    \ error: \u2018fibfib\u2019 cannot be used as a function\n   19 |     fibfib +=\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n      |                          \
    \                           ^\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long sum = 0;\n    long fibfib = 0;\n    long fibfib1\
    \ = 1;\n    long fibfib2 = 1;\n    long fibfib3 = 1;\n    long fibfib4 = 1;\n\
    \    long fibfib5 = 1;\n    long fibfib6 = 1;\n    long fibfib7 = 1;\n    long\
    \ fibfib8 = 1;\n    long fibfib9 = 1;\n    long fibfib10 = 1;\n    long fibfib11\
    \ = 1;\n    long fibfib12 = 1;\n    long fibfib13 = 1;\n    long fibfib14 = 1;\n\
    \    long fibfib15 = 1;\n    long fibfib16 = 1;\n    long fibfib17 = 1;\n    long\
    \ fibfib18 = 1;\n    long fibfib19 = 1;\n    long fibfib20 = 1;\n    long fibfib21\
    \ = 1;\n    long fibfib22 = 1;\n    long fibfib23 = 1;\n    long fibfib24 = 1;\n\
    \    long fibfib25 = 1;\n    long fibfib26 = 1;\n    long fibfib27 = 1;\n    long\
    \ fibfib28 = 1;\n    long fibfib29 = 1;\n    long fibfib30 = 1;\n    long fibfib31\
    \ = 1;\n    long fibfib32 = 1;\n    long fibfib33 = 1;\n    long fibfib34 = 1;\n\
    \    long fibfib35 = 1;\n    long fibfib36 = 1;\n    long fibfib37 = 1;\n    long\
    \ fibfib38 = 1;\n    long fibfib39 = 1;\n    long fibfib40 = 1;\n    long fibfib41\
    \ = 1;\n    long fibfib42 = 1;\n    long fibfib43 = 1;\n    long fibfib44 = 1;\n\
    \    long fibfib45 = 1;\n    long fibfib46 = 1;\n    long fibfib47 = 1;\n    long\
    \ fibfib48 = 1;\n    long fibfib49 = 1;\n    long fibfib50 = 1;\n    long fibfib51\
    \ = 1;\n    long fibfib52 = 1;\n    long fibfib53 = 1;\n    long fibfib54 = 1;\n\
    \    long fibfib55 = 1;\n    long fibfib56 = 1;\n    long fibfib57 = 1;\n    long\
    \ fibfib58 = 1;\n    long fibfib59 = 1;\n    long fibfib60 = 1;\n    long fibfib61\
    \ = 1;\n    long fibfib62 = 1;\n    long fibfib63 = 1;\n    long fibfib64 = 1;\n\
    \    long fibfib65 = 1;\n    long fibfib66 = 1;\n    long fibfib67 = 1;\n    long\
    \ fibfib68 = 1;\n    long fibfib69 = 1;\n    long fibfib70 = 1;\n    long fib\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxoi72kqi.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpxoi72kqi.cpp:90:1: error: expected initializer before \u2018}\u2019\
    \ token\n   90 | }\n      | ^\n/tmp/tmpxoi72kqi.cpp:90:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1]\
    \ = 0;\n    fibfib[2] = 1;\n    fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n\
    \    return fibfib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpbbg4s_sw: /tmp/tmpbbg4s_sw.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_9pidquc: /tmp/tmp_9pidquc.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib = 0;\n    if (n == 0)\n        fibfib = 0;\n    else if (n == 1)\n  \
    \      fibfib = 0;\n    else if (n == 2)\n        fibfib = 1;\n    else\n    \
    \    fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n    return fibfib;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjle8vws7.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpjle8vws7.cpp:24:37: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   24 |         fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n      |       \
    \                              ^\n/tmp/tmpjle8vws7.cpp:24:51: error: \u2018fibfib\u2019\
    \ cannot be used as a function\n   24 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n      |                                                   ^\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpo3whl8zv: /tmp/tmpo3whl8zv.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 3) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpksvokjrb: /tmp/tmpksvokjrb.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1]\
    \ = 0;\n    fibfib[2] = 1;\n    long sum = 0;\n    for(int i = 3; i <= n; i++)\
    \ {\n        sum += fibfib[i-1] + fibfib[i-2];\n        fibfib[i] = sum;\n   \
    \ }\n    return fibfib[n];\n}\nint main() {\n    auto candidate = fibfib;\n  \
    \  assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmps911ngzv: /tmp/tmps911ngzv.cpp:32: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0)\n        return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9llpej9x: /tmp/tmp9llpej9x.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<0)\n\
    \        return -1;\n    if(n==0)\n        return 0;\n    if(n==1)\n        return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp8vrq0zj_: /tmp/tmp8vrq0zj_.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==0)\n\
    \        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpav2rpfsr: /tmp/tmpav2rpfsr.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpo3whl8zv: /tmp/tmpo3whl8zv.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib = 0;\n    if (n == 0) {\n        fibfib = 0;\n    }\n    else if (n ==\
    \ 1) {\n        fibfib = 0;\n    }\n    else if (n == 2) {\n        fibfib = 1;\n\
    \    }\n    else {\n        fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n   \
    \ }\n    return fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5zsoq_0h.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp5zsoq_0h.cpp:27:37: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   27 |         fibfib = fibfib + fibfib(n-1) + fibfib(n-2);\n      |       \
    \                              ^\n/tmp/tmp5zsoq_0h.cpp:27:51: error: \u2018fibfib\u2019\
    \ cannot be used as a function\n   27 |         fibfib = fibfib + fibfib(n-1)\
    \ + fibfib(n-2);\n      |                                                   ^\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ write your code here\n    if(n==0)\n        return 0;\n    if(n==1)\n      \
    \  return 1;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpyxbe58p8: /tmp/tmpyxbe58p8.cpp:28: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ write your code here\n    long fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1]\
    \ = 0;\n    fibfib[2] = 1;\n    fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n\
    \    return fibfib[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpabjt0o5s: /tmp/tmpabjt0o5s.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ code here\n    if(n<=1)\n        return 0;\n    if(n==2)\n        return 1;\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpwoq2zxz0: /tmp/tmpwoq2zxz0.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    long ans = fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_9pidquc: /tmp/tmp_9pidquc.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0) return 0;\n    if(n == 1) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ long sum = 0;\n    for(int i=3;i<=n;i++){\n        sum += fibfib[i-1] + fibfib[i-2];\n\
    \        fibfib[i] = sum;\n    }\n    return fibfib[n];\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpejgjg_ri: /tmp/tmpejgjg_ri.cpp:31: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_9pidquc: /tmp/tmp_9pidquc.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib = 0;\n    long fibfib1 = 1;\n    long fibfib2 = 1;\n    long fibfib3\
    \ = 1;\n    long fibfib4 = fibfib1 + fibfib2 + fibfib3;\n    long fibfib5 = fibfib4\
    \ + fibfib4;\n    long fibfib6 = fibfibfib5 + fibfib5;\n    long fibfib7 = fibfib6\
    \ + fibfib6;\n    long fibfib8 = fibfib7 + fibfib7;\n    long fibfib9 = fibfib8\
    \ + fibfib8;\n    long fibfib10 = fibfib9 + fibfib9;\n    long fibfib11 = fibfib10\
    \ + fibfib10;\n    long fibfib12 = fibfib11 + fibfib11;\n    long fibfib13 = fibfib12\
    \ + fibfib12;\n    long fibfib14 = fibfib13 + fibfib13;\n    long fibfib15 = fibfib14\
    \ + fibfib14;\n    long fibfib16 = fibfib15 + fibfib15;\n    long fibfib17 = fibfib16\
    \ + fibfib16;\n    long fibfib18 = fibfib17 + fibfib17;\n    long fibfib19 = fibfib18\
    \ + fibfib18;\n    long fibfib20 = fibfib19 + fibfib19;\n    long fibfib21 = fibfib20\
    \ + fibfib20;\n    long fibfib22 = fibfib21 + fibfib21;\n    long fibfib23 = fibfib22\
    \ + fibfib22;\n    long fibfib24 = fibfib23 + fibfib23;\n    long fibfib25 = fibfib24\
    \ + fibfib24;\n    long fibfib26 = fibfib25 + fibfib25;\n    long fibfib27 = fibfib26\
    \ + fibfib26;\n    long fibfib28 = fibfib27 + fibfib27;\n    long fibfib29 = fibfib28\
    \ + fibfib28;\n    long fibfib30 = fibfib29 + fibfib29;\n    long fibfib31 = fibfib30\
    \ + fibfib30;\n    long fibfib32 = fibfib31 + fibfib31;\n    long fibfib33 = fibfib32\
    \ + fibfib32;\n    long fibfib34 = fibfib33 + fibfib33;\n    long fibfib35 = fibfib34\
    \ + fibfib34;\n    long fibfib36 = fibfib35 + fibfib35;\n    long fibfib37 = fibfib36\
    \ + fibfib36;\n\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl5af_85o.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpl5af_85o.cpp:22:20: error: \u2018fibfibfib5\u2019 was not declared\
    \ in this scope; did you mean \u2018fibfib5\u2019?\n   22 |     long fibfib6 =\
    \ fibfibfib5 + fibfib5;\n      |                    ^~~~~~~~~~\n      |      \
    \              fibfib5\n/tmp/tmpl5af_85o.cpp:55:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpo3whl8zv: /tmp/tmpo3whl8zv.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long sum = 0;\n    long fibfib = 0;\n    long fibfib1\
    \ = 1;\n    long fibfib2 = 1;\n    long fibfib3 = 1;\n    long fibfib4 = 1;\n\
    \    long fibfib5 = 1;\n    long fibfib6 = 1;\n    long fibfib7 = 1;\n    long\
    \ fibfib8 = 1;\n    long fibfib9 = 1;\n    long fibfib10 = 1;\n    long fibfib11\
    \ = 1;\n    long fibfib12 = 1;\n    long fibfib13 = 1;\n    long fibfib14 = 1;\n\
    \    long fibfib15 = 1;\n    long fibfib16 = 1;\n    long fibfib17 = 1;\n    long\
    \ fibfib18 = 1;\n    long fibfib19 = 1;\n    long fibfib20 = 1;\n    long fibfib21\
    \ = 1;\n    long fibfib22 = 1;\n    long fibfib23 = 1;\n    long fibfib24 = 1;\n\
    \    long fibfib25 = 1;\n    long fibfib26 = 1;\n    long fibfib27 = 1;\n    long\
    \ fibfib28 = 1;\n    long fibfib29 = 1;\n    long fibfib30 = 1;\n    long fibfib31\
    \ = 1;\n    long fibfib32 = 1;\n    long fibfib33 = 1;\n    long fibfib34 = 1;\n\
    \    long fibfib35 = 1;\n    long fibfib36 = 1;\n    long fibfib37 = 1;\n    long\
    \ fibfib38 = 1;\n    long fibfib39 = 1;\n    long fibfib40 = 1;\n    long fibfib41\
    \ = 1;\n    long fibfib42 = 1;\n    long fibfib43 = 1;\n    long fibfib44 = 1;\n\
    \    long fibfib45 = 1;\n    long fibfib46 = 1;\n    long fibfib47 = 1;\n    long\
    \ fibfib48 = 1;\n    long fibfib49 = 1;\n    long fibfib50 = 1;\n    long fibfib51\
    \ = 1;\n    long fibfib52 = 1;\n    long fibfib53 = 1;\n    long fibfib54 = 1;\n\
    \    long fibfib55 = 1;\n    long fibfib56 = 1;\n    long fibfib57 = 1;\n    long\
    \ fibfib58 = 1;\n    long fibfib59 = 1;\n    long fibfib60 = 1;\n    long fibfib61\
    \ = 1;\n    long fibfib62 = 1;\n    long fibfib63 = 1;\n    long fibfib64 = 1;\n\
    \    long fibfib65 = 1;\n    long fibfib66 = 1;\n    long fibfib67 = 1;\n    long\
    \ fibfib68 = 1;\n    long fibfib69 = 1;\n    long fibfib70 = 1;\n    long fib\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxoi72kqi.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpxoi72kqi.cpp:90:1: error: expected initializer before \u2018}\u2019\
    \ token\n   90 | }\n      | ^\n/tmp/tmpxoi72kqi.cpp:90:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long fibfib = 0;\n    long fibfib1 = 1;\n    long fibfib2 = 1;\n\
    \    long fibfib3 = 1;\n    long fibfib4 = 1;\n    long fibfib5 = 1;\n    long\
    \ fibfib6 = 1;\n    long fibfib7 = 1;\n    long fibfib8 = 1;\n    long fibfib9\
    \ = 1;\n    long fibfib10 = 1;\n    long fibfib11 = 1;\n    long fibfib12 = 1;\n\
    \    long fibfib13 = 1;\n    long fibfib14 = 1;\n    long fibfib15 = 1;\n    long\
    \ fibfib16 = 1;\n    long fibfib17 = 1;\n    long fibfib18 = 1;\n    long fibfib19\
    \ = 1;\n    long fibfib20 = 1;\n    long fibfib21 = 1;\n    long fibfib22 = 1;\n\
    \    long fibfib23 = 1;\n    long fibfib24 = 1;\n    long fibfib25 = 1;\n    long\
    \ fibfib26 = 1;\n    long fibfib27 = 1;\n    long fibfib28 = 1;\n    long fibfib29\
    \ = 1;\n    long fibfib30 = 1;\n    long fibfib31 = 1;\n    long fibfib32 = 1;\n\
    \    long fibfib33 = 1;\n    long fibfib34 = 1;\n    long fibfib35 = 1;\n    long\
    \ fibfib36 = 1;\n    long fibfib37 = 1;\n    long fibfib38 = 1;\n    long fibfib39\
    \ = 1;\n    long fibfib40 = 1;\n    long fibfib41 = 1;\n    long fibfib42 = 1;\n\
    \    long fibfib43 = 1;\n    long fibfib44 = 1;\n    long fibfib45 = 1;\n    long\
    \ fibfib46 = 1;\n    long fibfib47 = 1;\n    long fibfib48 = 1;\n    long fibfib49\
    \ = 1;\n    long fibfib50 = 1;\n    long fibfib51 = 1;\n    long fibfib52 = 1;\n\
    \    long fibfib53 = 1;\n    long fibfib54 = 1;\n    long fibfib55 = 1;\n    long\
    \ fibfib56 = 1;\n    long fibfib57 = 1;\n    long fibfib58 = 1;\n    long fibfib59\
    \ = 1;\n    long fibfib60 = 1;\n    long fibfib61 = 1;\n    long fibfib62 = 1;\n\
    \    long fibfib63 = 1;\n    long fibfib64 = 1;\n    long fibfib65 = 1;\n    long\
    \ fibfib66 = 1;\n    long fibfib67 = 1;\n    long fibfib68 = 1;\n    long fibfib69\
    \ = 1;\n    long fibfib70 = 1;\n    long fibfib71 = 1;\n    \n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmppij8ueei: /tmp/tmppij8ueei.cpp:93: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 3) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmph9bhpdad: /tmp/tmph9bhpdad.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n==0)\n\
    \        return 0;\n    if(n==1)\n        return 1;\n    if(n==2)\n        return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpav2rpfsr: /tmp/tmpav2rpfsr.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ sum = 0;\n    long fibfib = 0;\n    long fibfib1 = 1;\n    long fibfib2 = 1;\n\
    \    long fibfib3 = 1;\n    long fibfib4 = 1;\n    long fibfib5 = 1;\n    long\
    \ fibfib6 = 1;\n    long fibfib7 = 1;\n    long fibfib8 = 1;\n    long fibfib9\
    \ = 1;\n    long fibfib10 = 1;\n    long fibfib11 = 1;\n    long fibfib12 = 1;\n\
    \    long fibfib13 = 1;\n    long fibfib14 = 1;\n    long fibfib15 = 1;\n    long\
    \ fibfib16 = 1;\n    long fibfib17 = 1;\n    long fibfib18 = 1;\n    long fibfib19\
    \ = 1;\n    long fibfib20 = 1;\n    long fibfib21 = 1;\n    long fibfib22 = 1;\n\
    \    long fibfib23 = 1;\n    long fibfib24 = 1;\n    long fibfib25 = 1;\n    long\
    \ fibfib26 = 1;\n    long fibfib27 = 1;\n    long fibfib28 = 1;\n    long fibfib29\
    \ = 1;\n    long fibfib30 = 1;\n    long fibfib31 = 1;\n    long fibfib32 = 1;\n\
    \    long fibfib33 = 1;\n    long fibfib34 = 1;\n    long fibfib35 = 1;\n    long\
    \ fibfib36 = 1;\n    long fibfib37 = 1;\n    long fibfib38 = 1;\n    long fibfib39\
    \ = 1;\n    long fibfib40 = 1;\n    long fibfib41 = 1;\n    long fibfib42 = 1;\n\
    \    long fibfib43 = 1;\n    long fibfib44 = 1;\n    long fibfib45 = 1;\n    long\
    \ fibfib46 = 1;\n    long fibfib47 = 1;\n    long fibfib48 = 1;\n    long fibfib49\
    \ = 1;\n    long fibfib50 = 1;\n    long fibfib51 = 1;\n    long fibfib52 = 1;\n\
    \    long fibfib53 = 1;\n    long fibfib54 = 1;\n    long fibfib55 = 1;\n    long\
    \ fibfib56 = 1;\n    long fibfib57 = 1;\n    long fibfib58 = 1;\n    long fibfib59\
    \ = 1;\n    long fibfib60 = 1;\n    long fibfib61 = 1;\n    long fibfib62 = 1;\n\
    \    long fibfib63 = 1;\n    long fibfib64 = 1;\n    long fibfib65 = 1;\n    long\
    \ fibfib66 = 1;\n    long fibfib67 = 1;\n    long fibfib68 = 1;\n    long fibfib69\
    \ = 1;\n    long fibfib70 = 1;\n    long fibfib71 = 1;\n    \n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmppij8ueei: /tmp/tmppij8ueei.cpp:93: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpo3whl8zv: /tmp/tmpo3whl8zv.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) {\n        return 0;\n    }\n    long a = fibfib(n-1);\n    long b\
    \ = fibfib(n-2);\n    long c = fibfib(n-3);\n    return a + b + c;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpe9c3palh: /tmp/tmpe9c3palh.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_9pidquc: /tmp/tmp_9pidquc.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ write your code here\n    if(n==0)\n        return 0;\n    if(n==1)\n      \
    \  return 1;\n    if(n==2)\n        return 2;\n    long ans=fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp2hck262u: /tmp/tmp2hck262u.cpp:28: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    //\
    \ Write your code here\n    long sum = 0;\n    long a = 0, b = 1;\n    long c\
    \ = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n \
    \   long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l\
    \ = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n \
    \   long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u\
    \ = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n \
    \   long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d\
    \ = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n \
    \   long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m\
    \ = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n \
    \   long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v\
    \ = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n \
    \   long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e\
    \ = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n \
    \   long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n\
    \ = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n \
    \   long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w\
    \ = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f\
    \ = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n \
    \   long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o\
    \ = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixjf61xl.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpixjf61xl.cpp:30:10: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   30 |     long n = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:43:10:\
    \ error: redeclaration of \u2018long int a\u2019\n   43 |     long a = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:18:10: note: \u2018long int a\u2019 previously\
    \ declared here\n   18 |     long a = 0, b = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:44:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   44 |     long b = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:18:17: note: \u2018long int b\u2019 previously\
    \ declared here\n   18 |     long a = 0, b = 1;\n      |                 ^\n/tmp/tmpixjf61xl.cpp:45:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   45 |     long c = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:19:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   19 |     long c = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:46:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   46 |     long d = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:20:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   20 |     long d = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:47:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   47 |     long e = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:21:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   21 |     long e = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:48:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   48 |     long f = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:22:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   22 |     long f = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:49:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   49 |     long g = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:23:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   23 |     long g = 1;\n      |          ^\n/tmp/tmpixjf61xl.cpp:50:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   50 |     long h = 1;\n  \
    \    |          ^\n/tmp/tmpixjf61xl.cpp:24:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   24 |     long h = 1;\n "
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    long\
    \ fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2] = 1;\n   \
    \ fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n    return fibfib[n];\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6d7vvq59: /tmp/tmp6d7vvq59.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpo3whl8zv: /tmp/tmpo3whl8zv.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    long ans=fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpkpl7m1k4: /tmp/tmpkpl7m1k4.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqo3rqrg: /tmp/tmpyqo3rqrg.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n <= 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpo3whl8zv: /tmp/tmpo3whl8zv.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n\
    \ == 0)\n        return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n\
    \        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9llpej9x: /tmp/tmp9llpej9x.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<=1)\n\
    \        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpob49ih_k: /tmp/tmpob49ih_k.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if(n<0)\
    \ return 0;\n    if(n==0) return 0;\n    if(n==1) return 1;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpsurm37ek: /tmp/tmpsurm37ek.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132097
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n//\
    \ >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nlong fibfib(long n) {\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n ==\
    \ 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132096
