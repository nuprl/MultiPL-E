name: HumanEval_59_largest_prime_factor
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp1u0ikcg4: /tmp/tmp1u0ikcg4.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 2;\n    long b = 2;\n    long c = 2;\n \
    \   long d = 2;\n    long e = 2;\n    long f = 3;\n    long g = 3;\n    long h\
    \ = 3;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    long l = 2;\n \
    \   long m = n;\n    long n = m;\n    long o = 2;\n    long p = 3;\n    long q\
    \ = 3;\n    long r = 2;\n    long s = 2;\n    long t = 2;\n    long u = 2;\n \
    \   long v = 3;\n    long w = 3;\n    long x = 2;\n    long y = 2;\n    long z\
    \ = 2;\n    long A = 2;\n    long B = 2;\n    long C = 2;\n    long D = 2;\n \
    \   long E = 2;\n    long F = 3;\n    long G = 3;\n    long H = 3;\n    long I\
    \ = 2;\n    long J = 2;\n    long K = 2;\n    long L = 2;\n    long M = 2;\n \
    \   long N = 2;\n    long O = 2;\n    long P = 3;\n    long Q = 3;\n    long R\
    \ = 2;\n    long S = 2;\n    long T = 2;\n    long U = 2;\n    long V = 3;\n \
    \   long W = 3;\n    long X = 2;\n    long Y = 2;\n    long Z = 2;\n    long AA\
    \ = 2;\n    long AB = 2;\n    long AC = 2;\n    long AD = 2;\n    long AE = 2;\n\
    \    long AF = 3;\n    long AG = 3;\n    long AH = 3;\n    long AI = 2;\n    long\
    \ AJ = 2;\n    long AK = 2;\n    long AL = 2;\n    long AM = 2;\n    long AN =\
    \ 2;\n    long AO = 2;\n    long AP = 3;\n    long AQ = 3;\n    long AR = 2;\n\
    \    long AS = 2;\n    long AT = 2;\n    long AU = 2;\n    long AV = 3;\n    long\
    \ AW = 3;\n    long AX = 2;\n    long AY = 2;\n    long AZ = 2;\n    long BA =\
    \ 2;\n    long BB = 2;\n    long BC = 2;\n    long BD = 2;\n    long BE = 2;\n\
    \    long BF = 3;\n    long BG = 3;\n    long BH = 3;\n    long BI = 2;\n    long\
    \ BJ = 2;\n    long BK = 2;\n    long BL = 2;\n    long BM = 2;\n    long BN =\
    \ 2;\n    long BO = 2;\n    long BP = 3;\n    long BQ = 3;\n    long BR = 2;\n\
    \    long BS = 2;\n    long BT = 2;\n    long BU = 2;\n    long BV = 3;\n    \n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4l10tb1o.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp4l10tb1o.cpp:22:10: error: redeclaration of \u2018long\
    \ int m\u2019\n   22 |     long m = n;\n      |          ^\n/tmp/tmp4l10tb1o.cpp:9:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    9 |     long m =\
    \ n;\n      |          ^\n/tmp/tmp4l10tb1o.cpp:23:10: error: declaration of \u2018\
    long int n\u2019 shadows a parameter\n   23 |     long n = m;\n      |       \
    \   ^\n/tmp/tmp4l10tb1o.cpp:111:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  111 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    while (p < n && n % p == 0) {\n        ++p;\n   \
    \ }\n    if (p == n) {\n        return n;\n    }\n    long q = p * p;\n    while\
    \ (n % q == 0) {\n        ++q;\n    }\n    if (q == n) {\n        return n;\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpklxx82vb: /tmp/tmpklxx82vb.cpp:27: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpe_lae043: /tmp/tmpe_lae043.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    while (i < res) {\n        if\
    \ (n % i == 0) {\n            res = i;\n        }\n        ++i;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpf5wz22nw: /tmp/tmpf5wz22nw.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = n;\n    while (i <= largest) {\n \
    \       if (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n\
    \    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpkhpok920: /tmp/tmpkhpok920.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        while\
    \ (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n     \
    \   p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp12hbnpbp: /tmp/tmp12hbnpbp.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            n /= p;\n            res = p;\n        }\n  \
    \      p++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp2migrhcw: /tmp/tmp2migrhcw.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   long t = 2;\n    long u = 2;\n    long v = 2;\n    long w = 2;\n    long x\
    \ = 2;\n    long y = 2;\n    long z = 2;\n    long A = 2;\n    long B = 2;\n \
    \   long C = 2;\n    long D = 2;\n    long E = 2;\n    long F = 2;\n    long G\
    \ = 2;\n    long H = 2;\n    long I = 2;\n    long J = 2;\n    long K = 2;\n \
    \   long L = 2;\n    long M = 2;\n    long N = 2;\n    long O = 2;\n    long P\
    \ = 2;\n    long Q = 2;\n    long R = 2;\n    long S = 2;\n    long T = 2;\n \
    \   long U = 2;\n    long V = 2;\n    long W = 2;\n    long X = 2;\n    long Y\
    \ = 2;\n    long Z = 2;\n    long aa = 2;\n    long ab = 2;\n    long ac = 2;\n\
    \    long ad = 2;\n    long ae = 2;\n    long af = 2;\n    long ag = 2;\n    long\
    \ ah = 2;\n    long ai = 2;\n    long aj = 2;\n    long ak = 2;\n    long al =\
    \ 2;\n    long am = 2;\n    long an = 2;\n    long ao = 2;\n    long ap = 2;\n\
    \    long aq = 2;\n    long ar = 2;\n    long as = 2;\n    long at = 2;\n    long\
    \ au = 2;\n    long av = 2;\n    long aw = 2;\n    long ax = 2;\n    long ay =\
    \ 2;\n    long az = 2;\n    long ba = 2;\n    long bb = 2;\n    long bc = 2;\n\
    \    long bd = 2;\n    long be = 2;\n    long bf = 2;\n    long bg = 2;\n    long\
    \ bh = 2;\n    long bi = 2;\n    long bj = 2;\n    long bk = 2;\n    long bl =\
    \ 2;\n    long bm = 2;\n    long bn = 2;\n    long bo = 2;\n    long bp = 2;\n\
    \    long bq = 2;\n    long br = 2;\n    long bs = 2;\n    long bt = 2;\n    long\
    \ bu = 2;\n    long bv = 2;\n    long bw = 2;\n    long bx = 2;\n    long by =\
    \ 2;\n    long bz = 2;\n    long ca = 2;\n    long cb = 2;\n    long cc = 2;\n\
    \    long cd = 2;\n    long ce = 2;\n    long cf = 2;\n    long cg = 2;\n    long\
    \ ch = 2;\n    long ci = 2;\n    long cj = 2;\n    long ck = 2;\n    long cl =\
    \ 2;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpctyd5ext: /tmp/tmpctyd5ext.cpp:113: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            break;\n        }\n        i\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpwa0_thd_: /tmp/tmpwa0_thd_.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    while (i < res) {\n        if\
    \ (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpg2mz1pvg: /tmp/tmpg2mz1pvg.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        while\
    \ (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n     \
    \   p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpoeqnlq51: /tmp/tmpoeqnlq51.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i <= n / i) {\n\
    \        if (n % i == 0) {\n            ans = i;\n            break;\n       \
    \ }\n        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpx5zyyvyo: /tmp/tmpx5zyyvyo.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    long long max = 2;\n\
    \    while (i < n) {\n        if (n % i == 0) {\n            ans = max(ans, i);\n\
    \            max = max(i, max);\n        }\n        i += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdqkjkha.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpsdqkjkha.cpp:14:29: error: \u2018max\u2019 cannot be used\
    \ as a function\n   14 |             ans = max(ans, i);\n      |             \
    \                ^\n/tmp/tmpsdqkjkha.cpp:15:29: error: \u2018max\u2019 cannot\
    \ be used as a function\n   15 |             max = max(i, max);\n      |     \
    \                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmphuwbbk1l: /tmp/tmphuwbbk1l.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp3017p947: /tmp/tmp3017p947.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp58ghb72h: /tmp/tmp58ghb72h.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            break;\n        }\n   \
    \     p += 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpo_pglbh7: /tmp/tmpo_pglbh7.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor = i;\n                    max_factor_index = j;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpl1hxvmnu: /tmp/tmpl1hxvmnu.cpp:31: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpj_frfb6l: /tmp/tmpj_frfb6l.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            while (n %\
    \ i == 0) {\n                n /= i;\n                max_factor_index = i;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    while (p < n) {\n        if\
    \ (n % p == 0) {\n            factor = p;\n            break;\n        }\n   \
    \     p++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp6dhk5e8_: /tmp/tmp6dhk5e8_.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    long j;\n    for(j = n; j > 1; j--) {\n        while(n % i == 0) {\n\
    \            n /= i;\n            max_factor_index = i;\n        }\n        i++;\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                ++i;\n            }\n    \
    \        if (max_factor < i) {\n                max_factor = i;\n            \
    \    max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n  \
    \  return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpty7ab__m: /tmp/tmpty7ab__m.cpp:29: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpfnyv6dj1: /tmp/tmpfnyv6dj1.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            break;\n        }\n   \
    \     i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpuhe2n3zx: /tmp/tmpuhe2n3zx.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpjxp9q5rb: /tmp/tmpjxp9q5rb.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmprd7lublm: /tmp/tmprd7lublm.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long int i = 2;\n    long long int max = 2;\n    long long int\
    \ prime = 2;\n    long long int factor = 1;\n    long long int count = 0;\n  \
    \  while(i <= n) {\n        if(n % i == 0) {\n            factor = i;\n      \
    \      count++;\n        }\n        i++;\n    }\n    while(count > max) {\n  \
    \      max = count;\n        prime = factor;\n        factor = 1;\n        count\
    \ = 0;\n        while(i <= n) {\n            if(n % i == 0) {\n              \
    \  factor = i;\n                count++;\n            }\n            i++;\n  \
    \      }\n    }\n    return prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp3kga38_a: /tmp/tmp3kga38_a.cpp:38: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long int i = 2;\n    long long int p = n;\n    long long int\
    \ factor = 1;\n    while (i < p) {\n        if (n % i == 0) {\n            factor++;\n\
    \            while (n % i == 0) {\n                n /= i;\n            }\n  \
    \      }\n        i++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpvhy55a3r: /tmp/tmpvhy55a3r.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            while (n % p == 0) {\n      \
    \          n /= p;\n            }\n        }\n        p++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp5dwn1zad: /tmp/tmp5dwn1zad.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            break;\n        }\n   \
    \     p += 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpm9yor34n: /tmp/tmpm9yor34n.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor_index;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpymnjsvqg: /tmp/tmpymnjsvqg.cpp:31: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmph_hxloxw: /tmp/tmph_hxloxw.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long temp = max_factor;\n\
    \            max_factor = i;\n            max_factor_index = i;\n        }\n \
    \   }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpqgrrgxr2: /tmp/tmpqgrrgxr2.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while(i <= n/2) {\n        if(n%i == 0) {\n            n = n/i;\n  \
    \          max_factor_index = i;\n            max_factor = i;\n        }\n   \
    \     i++;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpz0xehy76: /tmp/tmpz0xehy76.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpj8omgfqj: /tmp/tmpj8omgfqj.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long cur = 3;\n    while (cur < n) {\n        if\
    \ (n % cur == 0) {\n            max = cur;\n        }\n        cur += 2;\n   \
    \ }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpzbh4_tc6: /tmp/tmpzbh4_tc6.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    long max_p = 1;\n    while (p *\
    \ p <= n) {\n        if (n % p == 0) {\n            p /= i;\n            max_p\
    \ = i;\n        }\n        ++i;\n    }\n    return max_p;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpfcj6e5k6: /tmp/tmpfcj6e5k6.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            while (n % i\
    \ == 0) {\n                n /= i;\n                ++i;\n            }\n    \
    \        if (max_factor < i) {\n                max_factor = i;\n            \
    \    max_factor_index = i;\n            }\n        }\n        ++i;\n    }\n  \
    \  return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpibhaaa43: /tmp/tmpibhaaa43.cpp:29: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    while (d < n) {\n        while\
    \ (n % d == 0) {\n            ans = d;\n            n /= d;\n        }\n     \
    \   d += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpub70bs6o: /tmp/tmpub70bs6o.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplpxxdb8_.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmplpxxdb8_.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:35:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   35 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:9:10: note: \u2018long int p\u2019 previously\
    \ declared here\n    9 |     long p = 2;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:36:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   36 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:10:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   10 |     long q = n;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:37:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   37 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:11:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   11 |     long r = n;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:38:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   38 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:12:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   12 |     long s = 1;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:39:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   39 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:13:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   13 |     long t = 1;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:40:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   40 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:14:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   14 |     long u = 1;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:41:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   41 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:15:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   15 |     long v = 1;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:42:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   42 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmplpxxdb8_.cpp:16:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   16 |     long w = 1;\n      |          ^\n/tmp/tmplpxxdb8_.cpp:43:10:\
    \ error: redeclaration of \u2018long int "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmple2tws2l: /tmp/tmple2tws2l.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp6m5507nz: /tmp/tmp6m5507nz.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (s % p == 0) {\n            s /= p;\n        }\n        if\
    \ (p > s) {\n            p = s;\n        }\n        else {\n            q = s;\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long maxPrime = 2;\n    long maxFactor = 1;\n    long i = 3;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            long factor = i / maxPrime;\n\
    \            if (factor > maxFactor) {\n                maxFactor = factor;\n\
    \            }\n            maxPrime = i;\n        }\n        i += 2;\n    }\n\
    \    return maxFactor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp_xbjxhi4: /tmp/tmp_xbjxhi4.cpp:26: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp11r3gw9l: /tmp/tmp11r3gw9l.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpn7368p85: /tmp/tmpn7368p85.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n                max_factor_index = i;\n     \
    \       }\n        }\n    }\n    return max_factor_index;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    while (p < q) {\n        while (q\
    \ % p == 0) {\n            p += 1;\n        }\n        q /= p;\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp5hcarvo0: /tmp/tmp5hcarvo0.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long max_factor = 1;\n    long max_prime_factor\
    \ = 1;\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n\
    \            factor *= i;\n            if (factor > max_factor) {\n          \
    \      max_factor = factor;\n                max_prime_factor = i;\n         \
    \   }\n        }\n        i += 2;\n    }\n    return max_prime_factor;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp79pxgdzi: /tmp/tmp79pxgdzi.cpp:27: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long p = 2;\n    while (p < n && n % p == 0) {\n\
    \        res = p;\n        p += 1;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpyeqzp8rx: /tmp/tmpyeqzp8rx.cpp:19: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            n = n / factor;\n            factor++;\n        } else {\n  \
    \          factor++;\n        }\n    }\n    return factor;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmphypm2bbx: /tmp/tmphypm2bbx.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n                max_factor_index = i;\n     \
    \       }\n        }\n    }\n    return max_factor_index;\n}\nint main() {\n \
    \   auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i <= n / i) {\n\
    \        ans = i;\n        i += 2;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpltip4ir7: /tmp/tmpltip4ir7.cpp:19: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long temp;\n    long i = 2;\n    while(i < n)\
    \ {\n        temp = factor;\n        while(temp % i == 0) {\n            temp\
    \ /= i;\n        }\n        if(temp == 1) {\n            return factor;\n    \
    \    }\n        factor++;\n        i++;\n    }\n    return factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpm6qtg9e7: /tmp/tmpm6qtg9e7.cpp:27: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp505sa46w: /tmp/tmp505sa46w.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpmrsxlgei: /tmp/tmpmrsxlgei.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            while (n % i ==\
    \ 0) {\n                n /= i;\n                max_factor_index = i;\n     \
    \       }\n            max_factor = i;\n        }\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    long long limit = (long\
    \ long) sqrt(n);\n    long long factor = 1;\n    while (i <= limit) {\n      \
    \  if (n % i == 0) {\n            factor *= i;\n            while (n % i == 0)\
    \ {\n                n /= i;\n                factor++;\n            }\n     \
    \   }\n        i++;\n    }\n    if (n > 1) {\n        ans = factor;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpnkix1ziq: /tmp/tmpnkix1ziq.cpp:30: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long int i = 2;\n    long long int max_i = n;\n    long long\
    \ int max_factor = 1;\n    while (i < max_i) {\n        if (n % i == 0) {\n  \
    \          max_factor = i;\n            max_i = max_i / i;\n        }\n      \
    \  i++;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp15293y66: /tmp/tmp15293y66.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long p = 2;\n    while (m % p == 0) {\n        m\
    \ /= p;\n        p++;\n    }\n    return p;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpp_k_9jkm: /tmp/tmpp_k_9jkm.cpp:19: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            break;\n        }\n        i\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpju0f7ugi: /tmp/tmpju0f7ugi.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 2;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            res = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        ++i;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpn3f0nh_j: /tmp/tmpn3f0nh_j.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long int i = 2;\n    long long int max_factor = 1;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            max_factor = i;\n        }\n\
    \        ++i;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpmtb0z55d: /tmp/tmpmtb0z55d.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpglmodrt2: /tmp/tmpglmodrt2.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            max = p;\n        }\n        ++p;\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpfw9fbky1: /tmp/tmpfw9fbky1.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            break;\n        }\n   \
    \     p += 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpahw7jco1: /tmp/tmpahw7jco1.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps61quzvc.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmps61quzvc.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmps61quzvc.cpp:35:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   35 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:9:10: note: \u2018long int p\u2019 previously\
    \ declared here\n    9 |     long p = 2;\n      |          ^\n/tmp/tmps61quzvc.cpp:36:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   36 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:10:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   10 |     long q = n;\n      |          ^\n/tmp/tmps61quzvc.cpp:37:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   37 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:11:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   11 |     long r = n;\n      |          ^\n/tmp/tmps61quzvc.cpp:38:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   38 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:12:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   12 |     long s = 1;\n      |          ^\n/tmp/tmps61quzvc.cpp:39:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   39 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:13:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   13 |     long t = 1;\n      |          ^\n/tmp/tmps61quzvc.cpp:40:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   40 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:14:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   14 |     long u = 1;\n      |          ^\n/tmp/tmps61quzvc.cpp:41:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   41 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:15:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   15 |     long v = 1;\n      |          ^\n/tmp/tmps61quzvc.cpp:42:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   42 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmps61quzvc.cpp:16:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   16 |     long w = 1;\n      |          ^\n/tmp/tmps61quzvc.cpp:43:10:\
    \ error: redeclaration of \u2018long int "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i <= n / i) {\n\
    \        if (n % i == 0) {\n            ans = i;\n            break;\n       \
    \ }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpnil41b9n: /tmp/tmpnil41b9n.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpv_ebz09e: /tmp/tmpv_ebz09e.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i < n) {\n  \
    \      if (n % i == 0) {\n            ans = i;\n            break;\n        }\n\
    \        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp9box17j4: /tmp/tmp9box17j4.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            res = p;\n        }\n        p += 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpo2k8nh2y: /tmp/tmpo2k8nh2y.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j\
    \ = max_factor;\n            while (n % i == 0) {\n                n /= i;\n \
    \               j++;\n            }\n            if (j > max_factor) {\n     \
    \           max_factor = j;\n                max_factor_index = i;\n         \
    \   }\n        }\n    }\n    return max_factor_index;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp_vk__yza: /tmp/tmp_vk__yza.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long\
    \ o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n\
    \    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n\
    \    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long\
    \ g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n\
    \    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long\
    \ p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n\
    \    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long\
    \ y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n\
    \    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long\
    \ h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n\
    \    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long\
    \ q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n\
    \    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long\
    \ z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n\
    \    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long\
    \ i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long \n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1b6ciqsc.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp1b6ciqsc.cpp:34:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   34 |     long n = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:36:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   36 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:10:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   10 |     long p = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:37:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   37 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:11:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   11 |     long q = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:38:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   38 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:12:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   12 |     long r = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:39:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   39 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:13:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   13 |     long s = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:40:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   40 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:14:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   14 |     long t = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:41:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   41 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:15:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   15 |     long u = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:42:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   42 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:16:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   16 |     long v = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:43:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   43 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp1b6ciqsc.cpp:17:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   17 |     long w = n;\n      |          ^\n/tmp/tmp1b6ciqsc.cpp:44:10:\
    \ error: redeclaration of \u2018long int"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpz8b52p8f: /tmp/tmpz8b52p8f.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpwklio0p7: /tmp/tmpwklio0p7.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n                ++i;\n            }\n        }\n   \
    \     ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpg3xle0rf: /tmp/tmpg3xle0rf.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long i = 2;\n    while (i < n && n % i == 0)\
    \ {\n        factor = i;\n        i += 2;\n    }\n    return factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpvg7vljq3: /tmp/tmpvg7vljq3.cpp:19: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    long maxp = 1;\n    while (i <=\
    \ p) {\n        if (n % i == 0) {\n            while (n % i == 0) {\n        \
    \        n /= i;\n                maxp = i;\n            }\n        }\n      \
    \  i++;\n    }\n    return maxp;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   long t = 3;\n    long u = n;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 2;\n    long y = 2;\n    long z = 2;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4m94k7vu.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp4m94k7vu.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:35:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   35 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:9:10: note: \u2018long int p\u2019 previously\
    \ declared here\n    9 |     long p = 2;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:36:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   36 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:10:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   10 |     long q = n;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:37:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   37 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:11:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   11 |     long r = n;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:38:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   38 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:12:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   12 |     long s = 2;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:39:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   39 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:13:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   13 |     long t = 3;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:40:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   40 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:14:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   14 |     long u = n;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:41:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   41 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:15:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   15 |     long v = 1;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:42:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   42 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmp4m94k7vu.cpp:16:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   16 |     long w = 1;\n      |          ^\n/tmp/tmp4m94k7vu.cpp:43:10:\
    \ error: redeclaration of \u2018long int "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp59vfr47w: /tmp/tmp59vfr47w.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 2; i <= n / 2; ++i) {\n        while (n % i == 0) {\n            n /= i;\n\
    \            max_factor_index = i;\n            max_factor = i;\n        }\n \
    \   }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpfk8u9api: /tmp/tmpfk8u9api.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 2, b = 2;\n    long c = 1;\n    long d =\
    \ 1;\n    long p = 2;\n    long q = 2;\n    long r = 2;\n    long s = 2;\n   \
    \ long t = 2;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x =\
    \ 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n   \
    \ long c = 1;\n    long d = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d =\
    \ 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n   \
    \ long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9lbi4auu.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp9lbi4auu.cpp:24:10: error: redeclaration of \u2018long\
    \ int a\u2019\n   24 |     long a = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:10:10:\
    \ note: \u2018long int a\u2019 previously declared here\n   10 |     long a =\
    \ 2, b = 2;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:25:10: error: redeclaration\
    \ of \u2018long int b\u2019\n   25 |     long b = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:10:17:\
    \ note: \u2018long int b\u2019 previously declared here\n   10 |     long a =\
    \ 2, b = 2;\n      |                 ^\n/tmp/tmp9lbi4auu.cpp:26:10: error: redeclaration\
    \ of \u2018long int c\u2019\n   26 |     long c = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:11:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   11 |     long c =\
    \ 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:27:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   27 |     long d = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:12:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   12 |     long d =\
    \ 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:28:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   28 |     long p = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:13:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   13 |     long p =\
    \ 2;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:29:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   29 |     long q = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ 2;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:30:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   30 |     long r = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ 2;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:31:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   31 |     long s = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:16:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   16 |     long s =\
    \ 2;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:32:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   32 |     long t = 1;\n      |          ^\n/tmp/tmp9lbi4auu.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor_index = j;\n                    break;\n                }\n\
    \                j++;\n            }\n            if (max_factor_index > max_factor)\
    \ {\n                max_factor = max_factor_index;\n            }\n        }\n\
    \        i++;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpgqord41b: /tmp/tmpgqord41b.cpp:32: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    while (d < n) {\n        if (n\
    \ % d == 0) {\n            ans = d;\n            while (n % d == 0) {\n      \
    \          n /= d;\n            }\n        }\n        d += 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp84kcoutp: /tmp/tmp84kcoutp.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long d = 2;\n    while (d < n) {\n        if (n\
    \ % d == 0) {\n            res = d;\n            n /= d;\n        }\n        else\
    \ {\n            d += 2;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmp1yrgi7h1: /tmp/tmp1yrgi7h1.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    long p = 2;\n    while (i <= n\
    \ / p) {\n        if (n % p == 0) {\n            ans = p;\n            break;\n\
    \        }\n        ++p;\n        ++i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmp1272cplf: /tmp/tmp1272cplf.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    long p = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            ans = i;\n            while (n % i\
    \ == 0) {\n                n /= i;\n                ++p;\n            }\n    \
    \    }\n        ++i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n    }\n \
    \   return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp19lsbj5m: /tmp/tmp19lsbj5m.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        while\
    \ (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n     \
    \   p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpcdhw9u7w: /tmp/tmpcdhw9u7w.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    while (true) {\n        if (q %\
    \ p == 0) {\n            return p;\n        }\n        p += 2;\n        q = n\
    \ / p;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpyvm0ngt0: /tmp/tmpyvm0ngt0.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    long q = 3;\n    long r = n;\n\
    \    long m = n;\n    while (m % 2 == 0) {\n        m /= 2;\n        ans++;\n\
    \    }\n    while (p < r) {\n        while (r % p == 0) {\n            r /= p;\n\
    \            ans++;\n        }\n        while (r % q == 0) {\n            r /=\
    \ q;\n            ans++;\n        }\n        p += 2;\n        q += 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmprcpzbj1p: /tmp/tmprcpzbj1p.cpp:34: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (r % q == 0) {\n            r /= q;\n        }\n        if\
    \ (r > 1) {\n            s *= p;\n        }\n        p += 1;\n        q += 1;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp91dwudfd: /tmp/tmp91dwudfd.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (r % q == 0) {\n            r /= q;\n        }\n        if\
    \ (r > 1) {\n            s *= p;\n        }\n        p += 1;\n        q += 1;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpx7l_b2v3: /tmp/tmpx7l_b2v3.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp92hgenrk: /tmp/tmp92hgenrk.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max = 2;\n    while (n > 1) {\n       \
    \ if (n % factor == 0) {\n            max = factor;\n        }\n        factor++;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            long\
    \ j = 2;\n            while (j * i <= n) {\n                if (n % j == 0) {\n\
    \                    max_factor_index = j;\n                    max_factor = i;\n\
    \                    break;\n                }\n                j++;\n       \
    \     }\n        }\n        i++;\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpwyeq9dq5: /tmp/tmpwyeq9dq5.cpp:30: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor = i;\n                    max_factor_index = j;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpgg1bw1rp: /tmp/tmpgg1bw1rp.cpp:31: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpo__uzc0i: /tmp/tmpo__uzc0i.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long i = 2;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            n = n / i;\n            factor = i;\n        }\n\
    \        i++;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpvchbe0gp: /tmp/tmpvchbe0gp.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            max = i;\n        }\n        i += 2;\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpkm21qubl: /tmp/tmpkm21qubl.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i < n) {\n  \
    \      if (n % i == 0) {\n            ans = i;\n            while (ans * i <=\
    \ n) {\n                ans *= i;\n                i++;\n            }\n     \
    \   }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpbik6oj3i: /tmp/tmpbik6oj3i.cpp:26: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpxmfdhkwn: /tmp/tmpxmfdhkwn.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpjljkvyum: /tmp/tmpjljkvyum.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp82lnl7rm: /tmp/tmp82lnl7rm.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    long q = n;\n    while (p < q)\
    \ {\n        while (q % p == 0) {\n            q = (q * p) / 2;\n        }\n \
    \       p++;\n    }\n    while (p > 1) {\n        while (q % p == 0) {\n     \
    \       q = (q * p) / 2;\n        }\n        p--;\n    }\n    return q;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 1;\n    long b = 2;\n    long c = 1;\n \
    \   long d = 2;\n    long e = 2;\n    long f = 3;\n    long g = 3;\n    long h\
    \ = 2;\n    long i = 2;\n    long j = 2;\n    long k = 2;\n    long l = 2;\n \
    \   long m = n;\n    long n = m;\n    long o = m;\n    long p = m;\n    long q\
    \ = m;\n    long r = m;\n    long s = m;\n    long t = m;\n    long u = m;\n \
    \   long v = m;\n    long w = m;\n    long x = m;\n    long y = m;\n    long z\
    \ = m;\n    long a = m;\n    long b = m;\n    long c = m;\n    long d = m;\n \
    \   long e = m;\n    long f = m;\n    long g = m;\n    long h = m;\n    long i\
    \ = m;\n    long j = m;\n    long k = m;\n    long l = m;\n    long m = n;\n \
    \   long n = m;\n    long o = m;\n    long p = m;\n    long q = m;\n    long r\
    \ = m;\n    long s = m;\n    long t = m;\n    long u = m;\n    long v = m;\n \
    \   long w = m;\n    long x = m;\n    long y = m;\n    long z = m;\n    long a\
    \ = m;\n    long b = m;\n    long c = m;\n    long d = m;\n    long e = m;\n \
    \   long f = m;\n    long g = m;\n    long h = m;\n    long i = m;\n    long j\
    \ = m;\n    long k = m;\n    long l = m;\n    long m = n;\n    long n = m;\n \
    \   long o = m;\n    long p = m;\n    long q = m;\n    long r = m;\n    long s\
    \ = m;\n    long t = m;\n    long u = m;\n    long v = m;\n    long w = m;\n \
    \   long x = m;\n    long y = m;\n    long z = m;\n    long a = m;\n    long b\
    \ = m;\n    long c = m;\n    long d = m;\n    long e = m;\n    long f = m;\n \
    \   long g = m;\n    long h = m;\n    long i = m;\n    long j = m;\n    long k\
    \ = m;\n    long l = m;\n    long m = n;\n    long n = m;\n    long o = m;\n \
    \   long p = m;\n    long q = m;\n    long r = m;\n    long s = m;\n    long t\
    \ = m;\n    long u = m;\n    long v = m;\n    long w = m;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9wbptrfh.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp9wbptrfh.cpp:22:10: error: redeclaration of \u2018long\
    \ int m\u2019\n   22 |     long m = n;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:9:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    9 |     long m =\
    \ n;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:23:10: error: declaration of \u2018\
    long int n\u2019 shadows a parameter\n   23 |     long n = m;\n      |       \
    \   ^\n/tmp/tmp9wbptrfh.cpp:36:10: error: redeclaration of \u2018long int a\u2019\
    \n   36 |     long a = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:10:10: note:\
    \ \u2018long int a\u2019 previously declared here\n   10 |     long a = 1;\n \
    \     |          ^\n/tmp/tmp9wbptrfh.cpp:37:10: error: redeclaration of \u2018\
    long int b\u2019\n   37 |     long b = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:11:10:\
    \ note: \u2018long int b\u2019 previously declared here\n   11 |     long b =\
    \ 2;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:38:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   38 |     long c = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:12:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   12 |     long c =\
    \ 1;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:39:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   39 |     long d = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:13:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   13 |     long d =\
    \ 2;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:40:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   40 |     long e = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:14:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   14 |     long e =\
    \ 2;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:41:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   41 |     long f = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:15:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   15 |     long f =\
    \ 3;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:42:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   42 |     long g = m;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:16:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   16 |     long g =\
    \ 3;\n      |          ^\n/tmp/tmp9wbptrfh.cpp:43:10: error: redeclaration of\
    \ \u2018long int "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    while (i <= n / factor) {\n        if (n % i == 0)\
    \ {\n            factor *= i;\n            if (factor > max_factor) {\n      \
    \          max_factor = factor;\n                max_factor_index = i;\n     \
    \       }\n        }\n        ++i;\n    }\n    return max_factor_index;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpflcmgdte: /tmp/tmpflcmgdte.cpp:27: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long i = 2;\n    while (i < n && n % i == 0)\
    \ {\n        factor = i;\n        i += 2;\n    }\n    return factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpui1lpoa3: /tmp/tmpui1lpoa3.cpp:19: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n   \
    \ auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmp8lr210e8: /tmp/tmp8lr210e8.cpp:30: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            n /= p;\n        }\n  \
    \      p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp4d3bn072: /tmp/tmp4d3bn072.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n     \
    \   if (n % i == 0) {\n            while (n % i == 0) {\n                n /=\
    \ i;\n                max_factor++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmputub4312: /tmp/tmputub4312.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpg7jbu730: /tmp/tmpg7jbu730.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpn1xhbg60: /tmp/tmpn1xhbg60.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmph5j4w51d: /tmp/tmph5j4w51d.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    long j = 2;\n    while (i < n) {\n        while (n % i == 0) {\n   \
    \         n = n / i;\n            max_factor_index = i;\n            max_factor\
    \ = j;\n        }\n        i++;\n        j++;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpxn17nvgr: /tmp/tmpxn17nvgr.cpp:26: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpm9amchv2: /tmp/tmpm9amchv2.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp22b8ugsa: /tmp/tmp22b8ugsa.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            res = i;\n        }\n        i += 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpvpgmcxt8: /tmp/tmpvpgmcxt8.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpb_z30xfb: /tmp/tmpb_z30xfb.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    long j;\n    long factor = 1;\n    long count = 0;\n    for (i = 2; i <=\
    \ n; i++) {\n        factor = i;\n        for (j = 2; j < i; j++) {\n        \
    \    if (i % j == 0) {\n                factor++;\n                break;\n  \
    \          }\n        }\n        if (factor > max_factor) {\n            max_factor\
    \ = factor;\n            max_factor_index = i;\n        }\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpao2646_c: /tmp/tmpao2646_c.cpp:32: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n     \
    \   if (n % i == 0) {\n            i += 2;\n            max_factor *= i;\n   \
    \     }\n        else {\n            i += 1;\n        }\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpxxfn4sf6: /tmp/tmpxxfn4sf6.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i <= n / i) {\n\
    \        if (n % i == 0) {\n            ans = i;\n            break;\n       \
    \ }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmps9u2qvox: /tmp/tmps9u2qvox.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    long max_prime = 1;\n\
    \    long prime = 1;\n    long i = 2;\n    while (i < n) {\n        if (n % i\
    \ == 0) {\n            prime = i;\n            while (n % i == 0) {\n        \
    \        n /= i;\n                factor++;\n            }\n            if (factor\
    \ > max_factor) {\n                max_factor = factor;\n                max_prime\
    \ = prime;\n            }\n        }\n        i++;\n    }\n    return max_prime;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp2qio6xvu: /tmp/tmp2qio6xvu.cpp:32: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            n = n / p;\n        }\n     \
    \   p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpot3gv1wo: /tmp/tmpot3gv1wo.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (q > 0) {\n\
    \        while (r > 0) {\n            if (q % r == 0) {\n                p = q;\n\
    \                break;\n            }\n            r = r / 2;\n        }\n  \
    \      q = q / 2;\n    }\n    return p;\n}\nint main() {\n    auto candidate =\
    \ largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpbmftejss: /tmp/tmpbmftejss.cpp:26: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            break;\n        }\n        i\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpcbzz_vs3: /tmp/tmpcbzz_vs3.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   while (p < q) {\n        while (r % p == 0) {\n            r /= p;\n     \
    \   }\n        while (r % q == 0) {\n            r /= q;\n        }\n        while\
    \ (r % 2 == 0) {\n            r /= 2;\n        }\n        while (r % 3 == 0) {\n\
    \            r /= 3;\n        }\n        while (r % 4 == 0) {\n            r /=\
    \ 4;\n        }\n        while (r % 5 == 0) {\n            r /= 5;\n        }\n\
    \        while (r % 6 == 0) {\n            r /= 6;\n        }\n        while (r\
    \ % 7 == 0) {\n            r /= 7;\n        }\n        while (r % 8 == 0) {\n\
    \            r /= 8;\n        }\n        while (r % 9 == 0) {\n            r /=\
    \ 9;\n        }\n        while (r % 10 == 0) {\n            r /= 10;\n       \
    \ }\n        while (r % 11 == 0) {\n            r /= 11;\n        }\n        while\
    \ (r % 12 == 0) {\n            r /= 12;\n        }\n        while (r % 13 == 0)\
    \ {\n            r /= 13;\n        }\n        while (r % 14 == 0) {\n        \
    \    r /= 14;\n        }\n        while (r % 15 == 0) {\n            r /= 15;\n\
    \        }\n        while (r % 16 == 0) {\n            r /= 16;\n        }\n \
    \       while (r % 17 == 0) {\n            r /= 17;\n        }\n        while\
    \ (r % 18 == 0) {\n            r /= 18;\n        }\n        while (r % 19 == 0)\
    \ {\n            r /= 19;\n        }\n        while (r % 20 == 0) {\n        \
    \    r /= 20;\n        }\n        while (r % 21 == 0) {\n            r /= 21;\n\
    \        }\n        while (r % 22 == 0) {\n            r /= 22;\n        }\n \
    \       while (r % 23 == 0) {\n            r /= 23;\n        }\n        while\
    \ (r % 24 == 0) {\n            r /= 24;\n        }\n        while (r % 25 == 0)\
    \ {\n            r /= 25;\n        }\n        while (r % 26 == 0) {\n        \
    \    r /= 26;\n        }\n        while (r % 27 == 0) {\n            r /= 27;\n\
    \        }\n        while (r % 28 == 0) {\n            r /= 28;\n        }\n \
    \       while (r % 29 == 0) {\n            r /= 29;\n        }\n        while\
    \ (r % 30 == 0) {\n            r /= 30;\n        }\n        while (r % 31 == 0)\
    \ {\n            r /= 31;\n        }\n        while (r % 32 == 0) {\n        \
    \    r /= 32;\n        }\n        while (r % 33 == 0) {\n            r /= 33;\n\
    \        }\n        while (r % 34 == 0) {\n            r /= 34;\n        }\n \
    \       while (r % 35 == 0) {\n            r /= 35;\n        }\n\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp38l0b7z0.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmp38l0b7z0.cpp:124:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  124 | int main() {\n      |     \
    \       ^\n/tmp/tmp38l0b7z0.cpp:131:1: error: expected \u2018}\u2019 at end of\
    \ input\n  131 | }\n      | ^\n/tmp/tmp38l0b7z0.cpp:8:35: note: to match this\
    \ \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |        \
    \                           ^\n/tmp/tmp38l0b7z0.cpp:131:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  131 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n) {\n        if\
    \ (n % i == 0) {\n            largest = i;\n        }\n        ++i;\n    }\n \
    \   return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpeijnl59i: /tmp/tmpeijnl59i.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpkjyzrovi: /tmp/tmpkjyzrovi.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    long p = n;\n    while (i < p)\
    \ {\n        if (n % i == 0) {\n            ans = i;\n            while (ans *\
    \ i < n) {\n                ans *= i;\n                i++;\n            }\n \
    \       }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp2xjwadow: /tmp/tmp2xjwadow.cpp:27: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ while (n % i == 0) {\n            ans = i;\n            n = n / i;\n       \
    \ }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpkh_o6q1u: /tmp/tmpkh_o6q1u.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmphk7qbk6s: /tmp/tmphk7qbk6s.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = n;\n    long i = 2;\n    while (i < res) {\n        if\
    \ (n % i == 0) {\n            res = i;\n        }\n        i++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmps899mf3y: /tmp/tmps899mf3y.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long max_factor = 1;\n    long max_factor_index =\
    \ 0;\n    long i = 2;\n    while (i < m) {\n        if (n % i == 0) {\n      \
    \      m = m / i;\n            max_factor_index = i;\n            max_factor =\
    \ i;\n        }\n        i++;\n    }\n    return max_factor;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpwwrk3fpb: /tmp/tmpwwrk3fpb.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp_p7nb3k0: /tmp/tmp_p7nb3k0.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p * p <= n) {\n       \
    \ if (n % p == 0) {\n            ans = p;\n            break;\n        }\n   \
    \     p += 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpj35cgwer: /tmp/tmpj35cgwer.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long p = 2;\n    while (p < n) {\n        if\
    \ (n % p == 0) {\n            factor = p;\n            break;\n        }\n   \
    \     p += 2;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpznijsnqw: /tmp/tmpznijsnqw.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmphzi8gfx7: /tmp/tmphzi8gfx7.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            break;\n        }\n   \
    \     i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpndmohj15: /tmp/tmpndmohj15.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    while (i < p) {\n        if (n %\
    \ i == 0) {\n            p = p / i;\n        }\n        i++;\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp0zymwlmc: /tmp/tmp0zymwlmc.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n && n % i == 0) {\n        max_factor = i;\n        max_factor_index\
    \ = i;\n        i += 2;\n    }\n    return max_factor;\n}\nint main() {\n    auto\
    \ candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n   \
    \ assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330))\
    \ == (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpkiqmqtx6: /tmp/tmpkiqmqtx6.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 2;\n    long i = 2;\n    long limit = (long) sqrt(n);\n\
    \    while (i <= limit) {\n        if (n % i == 0) {\n            res = i;\n \
    \           limit = limit + 1;\n        }\n        i = i + 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpw53_nz_s: /tmp/tmpw53_nz_s.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp9rja8iol: /tmp/tmp9rja8iol.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    long max_prime = 1;\n\
    \    long prime = 1;\n    long i = 2;\n    while(i <= n && prime <= n) {\n   \
    \     prime = 1;\n        while(i <= n && prime * i <= n) {\n            prime\
    \ = prime * i;\n            i++;\n        }\n        if(prime > max_prime) {\n\
    \            max_prime = prime;\n            max_factor = factor;\n        }\n\
    \        factor = factor * i;\n        i = 2;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    while (true) {\n        if (q %\
    \ p == 0) {\n            return p;\n        }\n        p += 2;\n        q /= p;\n\
    \    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmph34cns4p: /tmp/tmph34cns4p.cpp:21: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            while (n % i == 0) {\n                n /= i;\n   \
    \             ++res;\n            }\n        }\n        ++i;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpv9pzls53: /tmp/tmpv9pzls53.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; ++i) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp1go1r4kp: /tmp/tmp1go1r4kp.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp1ytz13x4: /tmp/tmp1ytz13x4.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n && max_factor < i) {\n        if (n % i == 0) {\n    \
    \        max_factor = i;\n            max_factor_index = i;\n        }\n     \
    \   i += 2;\n    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmptqlpjg_s: /tmp/tmptqlpjg_s.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (true) {\n\
    \        while (q % p == 0) {\n            p += 1;\n        }\n        while (r\
    \ % p == 0) {\n            p += 1;\n        }\n        if (p > q) {\n        \
    \    break;\n        }\n        p += 1;\n        q /= p;\n        r /= p;\n  \
    \  }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp36xzkw1h: /tmp/tmp36xzkw1h.cpp:30: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpqunyb_t2: /tmp/tmpqunyb_t2.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpr_ktctnj: /tmp/tmpr_ktctnj.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (n % j == 0) {\n            \
    \        max_factor = j;\n                    max_factor_index = i;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor_index;\n}\nint main() {\n\
    \    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n\
    \    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n  \
    \  assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpw_do43rb: /tmp/tmpw_do43rb.cpp:31: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            long j\
    \ = i;\n            while (j < n / i) {\n                j += i;\n           \
    \ }\n            if (j > max_factor) {\n                max_factor = j;\n    \
    \            max_factor_index = i;\n            }\n        }\n        i += 2;\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpg_677198: /tmp/tmpg_677198.cpp:29: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    while (i < p) {\n        if (n %\
    \ i == 0) {\n            p /= i;\n        }\n        i++;\n    }\n    return p;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp9ujphlug: /tmp/tmp9ujphlug.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j;\n  \
    \          for (j = i; j < n; j += i) {\n                if (n % j == 0) {\n \
    \                   break;\n                }\n            }\n            if (j\
    \ > i) {\n                max_factor = i;\n                max_factor_index =\
    \ j;\n            }\n        }\n        i += 1;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp3kiwqavx: /tmp/tmp3kiwqavx.cpp:31: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long largest = i;\n    while (i < n && n % i == 0)\
    \ {\n        largest = i;\n        i += 2;\n    }\n    return largest;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpotcr3yrs: /tmp/tmpotcr3yrs.cpp:19: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpk_l1hhg0: /tmp/tmpk_l1hhg0.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long maxFactor = n;\n    long maxFactorPrime\
    \ = 1;\n    long i = 2;\n    while(i <= maxFactor) {\n        if(n % i == 0) {\n\
    \            factor *= i;\n            while(n % i == 0) {\n                n\
    \ /= i;\n            }\n            if(n > 1) {\n                factor *= i;\n\
    \            }\n        }\n        i++;\n    }\n    while(n > 1) {\n        factor\
    \ *= maxFactorPrime;\n        n /= maxFactorPrime;\n        maxFactorPrime++;\n\
    \    }\n    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmporj61500: /tmp/tmporj61500.cpp:34: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i < n) {\n  \
    \      if (n % i == 0) {\n            ans = i;\n            break;\n        }\n\
    \        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp7f77drkd: /tmp/tmp7f77drkd.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 1;\n \
    \   long t = 1;\n    long u = n;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n \
    \   long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p\
    \ = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n \
    \   long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y\
    \ = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n \
    \   long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h\
    \ = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n \
    \   long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q\
    \ = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n \
    \   long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z\
    \ = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n \
    \   long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i\
    \ = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n \
    \   long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r\
    \ = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n \
    \   long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a\
    \ = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n \
    \   long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j\
    \ = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long \n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpag62gjbg.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpag62gjbg.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmpag62gjbg.cpp:35:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   35 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:9:10: note: \u2018long int p\u2019 previously\
    \ declared here\n    9 |     long p = 2;\n      |          ^\n/tmp/tmpag62gjbg.cpp:36:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   36 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:10:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   10 |     long q = n;\n      |          ^\n/tmp/tmpag62gjbg.cpp:37:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   37 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:11:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   11 |     long r = n;\n      |          ^\n/tmp/tmpag62gjbg.cpp:38:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   38 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:12:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   12 |     long s = 1;\n      |          ^\n/tmp/tmpag62gjbg.cpp:39:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   39 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:13:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   13 |     long t = 1;\n      |          ^\n/tmp/tmpag62gjbg.cpp:40:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   40 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:14:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   14 |     long u = n;\n      |          ^\n/tmp/tmpag62gjbg.cpp:41:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   41 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:15:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   15 |     long v = 1;\n      |          ^\n/tmp/tmpag62gjbg.cpp:42:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   42 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpag62gjbg.cpp:16:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   16 |     long w = 1;\n      |          ^\n/tmp/tmpag62gjbg.cpp:43:10:\
    \ error: redeclaration of \u2018long int "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n    \
    \        factor = i;\n            max_factor = factor;\n            max_factor_index\
    \ = i;\n        }\n        i += 2;\n    }\n    return max_factor;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmpss246qr9: /tmp/tmpss246qr9.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpxc15muwt: /tmp/tmpxc15muwt.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp7y94emda: /tmp/tmp7y94emda.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 2;\n    long prime = 2;\n    long p = 2;\n    while\
    \ (n%p == 0) {\n        factor = p;\n        prime = p;\n        p += 2;\n   \
    \ }\n    while (n%prime == 0) {\n        factor++;\n        prime++;\n    }\n\
    \    return factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmppj7qwcua: /tmp/tmppj7qwcua.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long int i = 2;\n    long long int p = n;\n    long long int\
    \ max_factor = 0;\n    while (i < p) {\n        if (n % i == 0) {\n          \
    \  p /= i;\n            max_factor = i;\n        }\n        i++;\n    }\n    return\
    \ max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n \
    \   assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n   \
    \ assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n   \
    \ assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpmqg5zzaf: /tmp/tmpmqg5zzaf.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpuy15eycg: /tmp/tmpuy15eycg.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i < n) {\n  \
    \      if (n % i == 0) {\n            ans = i;\n            break;\n        }\n\
    \        i += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpcfv47is8: /tmp/tmpcfv47is8.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    long limit = sqrt(n);\n    while(i\
    \ <= limit) {\n        if(n%i == 0) {\n            ans = i;\n            break;\n\
    \        }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpy__c9rg7: /tmp/tmpy__c9rg7.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 0;\n    long max_factor_index = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long temp = max_factor;\n\
    \            max_factor = i;\n            max_factor_index = i;\n        }\n \
    \   }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmps_55jc7n: /tmp/tmps_55jc7n.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n \
    \   long t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n \
    \   long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g\
    \ = 1;\n    long h = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n \
    \   long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n \
    \   long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long \n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjbqes07.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpbjbqes07.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 0;\n      |          ^\n/tmp/tmpbjbqes07.cpp:35:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   35 |     long p = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:9:10: note: \u2018long int p\u2019 previously\
    \ declared here\n    9 |     long p = 2;\n      |          ^\n/tmp/tmpbjbqes07.cpp:36:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   36 |     long q = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:10:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   10 |     long q = n;\n      |          ^\n/tmp/tmpbjbqes07.cpp:37:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   37 |     long r = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:11:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   11 |     long r = n;\n      |          ^\n/tmp/tmpbjbqes07.cpp:38:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   38 |     long s = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:12:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   12 |     long s = 2;\n      |          ^\n/tmp/tmpbjbqes07.cpp:39:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   39 |     long t = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:13:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   13 |     long t = 0;\n      |          ^\n/tmp/tmpbjbqes07.cpp:40:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   40 |     long u = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:14:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   14 |     long u = 1;\n      |          ^\n/tmp/tmpbjbqes07.cpp:41:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   41 |     long v = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:15:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   15 |     long v = 1;\n      |          ^\n/tmp/tmpbjbqes07.cpp:42:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   42 |     long w = 0;\n  \
    \    |          ^\n/tmp/tmpbjbqes07.cpp:16:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   16 |     long w = 1;\n      |          ^\n/tmp/tmpbjbqes07.cpp:43:10:\
    \ error: redeclaration of \u2018long int "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long long ans = 1;\n    long long i = 2;\n    while (i <= n / i) {\n\
    \        long long j = 1;\n        while (j * i <= n) {\n            j++;\n  \
    \      }\n        if (j > i) {\n            ans = i;\n            i = j;\n   \
    \     }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpub3d3bkx: /tmp/tmpub3d3bkx.cpp:26: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpxmr2yxbr: /tmp/tmpxmr2yxbr.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp1dq2ee37: /tmp/tmp1dq2ee37.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    while (p < n) {\n        if (n\
    \ % p == 0) {\n            ans = p;\n            break;\n        }\n        p\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpu6j4fk6s: /tmp/tmpu6j4fk6s.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long i = 2;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n      \
    \          n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpwspfg3pr: /tmp/tmpwspfg3pr.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while(i <= n/2) {\n        if(n%i\
    \ == 0) {\n            res = i;\n            n = n/i;\n        }\n        i++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpyeuy7fvm: /tmp/tmpyeuy7fvm.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    while (i <= n / i) {\n       \
    \ if (n % i == 0) {\n            res = i;\n            break;\n        }\n   \
    \     i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpc9tjbks8: /tmp/tmpc9tjbks8.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor\
    \ = i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmps3bhgtrq: /tmp/tmps3bhgtrq.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n  \
    \      if (n % i == 0) {\n            factor = i;\n            break;\n      \
    \  }\n        i += 2;\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp9rg0mb4r: /tmp/tmp9rg0mb4r.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long factor =\
    \ i / max_factor;\n            if (factor > max_factor) {\n                max_factor\
    \ = factor;\n                max_factor_index = i;\n            }\n        }\n\
    \    }\n    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp5yr2902a: /tmp/tmp5yr2902a.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            while (n\
    \ % i == 0) {\n                n /= i;\n                max_factor_index = i;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor_index;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp8zi3yxf5: /tmp/tmp8zi3yxf5.cpp:25: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long p = n;\n    while (p) {\n        if (p % i ==\
    \ 0) {\n            p /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max = 2;\n    long cur = 1;\n    while (cur < n) {\n        if\
    \ (n % cur == 0) {\n            max = cur;\n        }\n        cur++;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpdpy27ui1: /tmp/tmpdpy27ui1.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            long j = max_factor;\n\
    \            while (n % i == 0) {\n                n /= i;\n                j++;\n\
    \            }\n            if (j > max_factor) {\n                max_factor\
    \ = j;\n                max_factor_index = i;\n            }\n        }\n    }\n\
    \    return max_factor_index;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long factor = 1;\n    long prime = 2;\n    long limit = sqrt(n);\n\
    \    for(long i = 2; i <= limit; i++) {\n        if(n % i == 0) {\n          \
    \  factor = i;\n            prime = i;\n        }\n    }\n    return factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpvh5fxc47: /tmp/tmpvh5fxc47.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long p = 2;\n    long q = 3;\n    long r = n;\n\
    \    long m = n;\n    while (p <= r) {\n        while (r % p == 0) {\n       \
    \     ans = p;\n            r /= p;\n        }\n        p += 2;\n    }\n    while\
    \ (m % 2 == 0) {\n        m /= 2;\n    }\n    while (m % 3 == 0) {\n        m\
    \ /= 3;\n    }\n    while (m % 5 == 0) {\n        m /= 5;\n    }\n    while (m\
    \ % 7 == 0) {\n        m /= 7;\n    }\n    while (m % 11 == 0) {\n        m /=\
    \ 11;\n    }\n    while (m % 13 == 0) {\n        m /= 13;\n    }\n    while (m\
    \ % 17 == 0) {\n        m /= 17;\n    }\n    while (m % 19 == 0) {\n        m\
    \ /= 19;\n    }\n    while (m % 23 == 0) {\n        m /= 23;\n    }\n    while\
    \ (m % 29 == 0) {\n        m /= 29;\n    }\n    while (m % 31 == 0) {\n      \
    \  m /= 31;\n    }\n    while (m % 37 == 0) {\n        m /= 37;\n    }\n    while\
    \ (m % 41 == 0) {\n        m /= 41;\n    }\n    while (m % 43 == 0) {\n      \
    \  m /= 43;\n    }\n    while (m % 47 == 0) {\n        m /= 47;\n    }\n    while\
    \ (m % 53 == 0) {\n        m /= 53;\n    }\n    while (m % 59 == 0) {\n      \
    \  m /= 59;\n    }\n    while (m % 61 == 0) {\n        m /= 61;\n    }\n    while\
    \ (m % 67 == 0) {\n        m /= 67;\n    }\n    while (m % 71 == 0) {\n      \
    \  m /= 71;\n    }\n    while (m % 73 == 0) {\n        m /= 73;\n    }\n    while\
    \ (m % 79 == 0) {\n        m /= 79;\n    }\n    while (m % 83 == 0) {\n      \
    \  m /= 83;\n    }\n    while (m % 89 == 0) {\n        m /= 89;\n    }\n    while\
    \ (m % 97 == 0) {\n        m /= 97;\n    }\n    while (m % 103 == 0) {\n     \
    \   m /= 103;\n    }\n    while (m % 107 == 0) {\n        m /= 107;\n    }\n \
    \   while (m % 113 == 0) {\n        m /= 113;\n    }\n    while (m % 119 == 0)\
    \ {\n        m /= 119;\n    }\n    while (m % 127 == 0) {\n        m /= 127;\n\
    \    }\n    while (m % 131 == 0) {\n        m /= 131;\n    }\n    while (m % 137\
    \ == 0) {\n        m /= 137;\n    }\n    while (m % 141 == 0) {\n        m /=\
    \ 141;\n\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbzzsqi23.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpbzzsqi23.cpp:121:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  121 | int main() {\n      |     \
    \       ^\n/tmp/tmpbzzsqi23.cpp:128:1: error: expected \u2018}\u2019 at end of\
    \ input\n  128 | }\n      | ^\n/tmp/tmpbzzsqi23.cpp:8:35: note: to match this\
    \ \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |        \
    \                           ^\n/tmp/tmpbzzsqi23.cpp:128:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  128 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long m = n;\n    long a = 2, b = 2, c = 2, d = 2, e = 2;\n    while\
    \ (m % 2 == 0) {\n        m /= 2;\n        a++;\n    }\n    while (m % 3 == 0)\
    \ {\n        m /= 3;\n        b++;\n    }\n    while (m % 5 == 0) {\n        m\
    \ /= 5;\n        c++;\n    }\n    while (m % 7 == 0) {\n        m /= 7;\n    \
    \    d++;\n    }\n    while (m % 11 == 0) {\n        m /= 11;\n        e++;\n\
    \    }\n    if (m > 1) {\n        return m;\n    }\n    if (a == 2 && b == 2)\
    \ {\n        return 2;\n    }\n    if (a == 2 && b == 1) {\n        return 1;\n\
    \    }\n    if (a == 1 && b == 2) {\n        return 2;\n    }\n    if (a == 1\
    \ && b == 1) {\n        return 1;\n    }\n    if (a == 2 && c == 2) {\n      \
    \  return 2;\n    }\n    if (a == 2 && c == 3) {\n        return 3;\n    }\n \
    \   if (a == 3 && b == 2) {\n        return 2;\n    }\n    if (a == 3 && b ==\
    \ 1) {\n        return 1;\n    }\n    if (a == 1 && c == 2) {\n        return\
    \ 2;\n    }\n    if (a == 1 && c == 3) {\n        return 3;\n    }\n    if (a\
    \ == 2 && d == 2) {\n        return 2;\n    }\n    if (a == 2 && d == 1) {\n \
    \       return 1;\n    }\n    if (a == 1 && d == 2) {\n        return 2;\n   \
    \ }\n    if (a == 1 && d == 1) {\n        return 1;\n    }\n    if (a == 2 &&\
    \ e == 2) {\n        return 2;\n    }\n    if (a == 2 && e == 1) {\n        return\
    \ 1;\n    }\n    if (a == 1 && e == 2) {\n        return 2;\n    }\n    if (a\
    \ == 1 && e == 1) {\n        return 1;\n    }\n    if (a == 3 && f == 2) {\n \
    \       return 2;\n    }\n    if (a == 3 && f == 1) {\n        return 1;\n   \
    \ }\n    if (a == 1 && f == 2) {\n        return 2;\n    }\n    if (a == 1 &&\
    \ f == 1) {\n        return 1;\n    }\n    if (a == 2 && g == 2) {\n        return\
    \ 2;\n    }\n    if (a == 2 && g == 1) {\n        return 1;\n    }\n    if (a\
    \ == 1 && g == 2) {\n        return 2;\n    }\n    if (a == 1 && g == 1) {\n \
    \       return 1;\n    }\n    if (a == 2 && h == 2) {\n        return 2;\n   \
    \ }\n    if (a == 2 && h == 1) {\n        return 1;\n    }\n    if (a == 1 &&\
    \ h == 2) {\n        return 2;\n    }\n    if (a == 1 && h == 1) {\n        return\
    \ 1;\n    }\n    if (a == 3 && i == 2) {\n        return 2;\n    }\n    if (a\
    \ == 3 && i == 1) {\n        return 1;\n    }\n    if (a == 1 && i == 2) {\n \
    \       return 2;\n    }\n    if (a == 1 && i == 1) {\n        return 1;\n   \
    \ }\n\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3j1s4qd.cpp: In function \u2018long int largest_prime_factor(long\
    \ int)\u2019:\n/tmp/tmpl3j1s4qd.cpp:88:19: error: \u2018f\u2019 was not declared\
    \ in this scope\n   88 |     if (a == 3 && f == 2) {\n      |                \
    \   ^\n/tmp/tmpl3j1s4qd.cpp:91:19: error: \u2018f\u2019 was not declared in this\
    \ scope\n   91 |     if (a == 3 && f == 1) {\n      |                   ^\n/tmp/tmpl3j1s4qd.cpp:94:19:\
    \ error: \u2018f\u2019 was not declared in this scope\n   94 |     if (a == 1\
    \ && f == 2) {\n      |                   ^\n/tmp/tmpl3j1s4qd.cpp:97:19: error:\
    \ \u2018f\u2019 was not declared in this scope\n   97 |     if (a == 1 && f ==\
    \ 1) {\n      |                   ^\n/tmp/tmpl3j1s4qd.cpp:100:19: error: \u2018\
    g\u2019 was not declared in this scope\n  100 |     if (a == 2 && g == 2) {\n\
    \      |                   ^\n/tmp/tmpl3j1s4qd.cpp:103:19: error: \u2018g\u2019\
    \ was not declared in this scope\n  103 |     if (a == 2 && g == 1) {\n      |\
    \                   ^\n/tmp/tmpl3j1s4qd.cpp:106:19: error: \u2018g\u2019 was not\
    \ declared in this scope\n  106 |     if (a == 1 && g == 2) {\n      |       \
    \            ^\n/tmp/tmpl3j1s4qd.cpp:109:19: error: \u2018g\u2019 was not declared\
    \ in this scope\n  109 |     if (a == 1 && g == 1) {\n      |                \
    \   ^\n/tmp/tmpl3j1s4qd.cpp:112:19: error: \u2018h\u2019 was not declared in this\
    \ scope\n  112 |     if (a == 2 && h == 2) {\n      |                   ^\n/tmp/tmpl3j1s4qd.cpp:115:19:\
    \ error: \u2018h\u2019 was not declared in this scope\n  115 |     if (a == 2\
    \ && h == 1) {\n      |                   ^\n/tmp/tmpl3j1s4qd.cpp:118:19: error:\
    \ \u2018h\u2019 was not declared in this scope\n  118 |     if (a == 1 && h ==\
    \ 2) {\n      |                   ^\n/tmp/tmpl3j1s4qd.cpp:121:19: error: \u2018\
    h\u2019 was not declared in this scope\n  121 |     if (a == 1 && h == 1) {\n\
    \      |                   ^\n/tmp/tmpl3j1s4qd.cpp:124:19: error: \u2018i\u2019\
    \ was not declared in this scope\n  124 |     if (a == 3 && i == 2) {\n      |\
    \                   ^\n/tmp/tmpl3j1s4qd.cpp:127:19: error: \u2018i\u2019 was not\
    \ declared in this scope\n  127 |     if (a == 3 && i == 1) {\n      |       \
    \            ^\n/tmp/tmpl3j1s4qd.cpp:130:19: error: \u2018i\u2019 was not declared\
    \ in this scope\n  130 |     if"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_i = n;\n    long max_factor = 1;\n    while\
    \ (i < max_i) {\n        if (n % i == 0) {\n            max_factor = i;\n    \
    \        max_i = max_i / i;\n        }\n        ++i;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpk27c1t0n: /tmp/tmpk27c1t0n.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i =\
    \ 2;\n    while (i < n) {\n        if (n % i == 0) {\n            long j = 2;\n\
    \            while (j < i) {\n                if (i % j == 0) {\n            \
    \        break;\n                }\n                j++;\n            }\n    \
    \        if (j > i) {\n                max_factor = i;\n                max_factor_index\
    \ = j;\n            }\n        }\n        i++;\n    }\n    return max_factor;\n\
    }\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmp1nwi_if4: /tmp/tmp1nwi_if4.cpp:32: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long ans = 1;\n    long d = 2;\n    long p = 2;\n    while (p < n)\
    \ {\n        while (n % p == 0) {\n            ans = p;\n            n /= p;\n\
    \        }\n        p += d;\n        d += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) ==\
    \ (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
    \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
    }\n"
  stdout: ''
  stderr: "tmp9r3feeik: /tmp/tmp9r3feeik.cpp:24: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long max_factor = 1;\n    long max_factor_index = 0;\n    long i;\n\
    \    long j;\n    long factor = 1;\n    long factor_index = 0;\n    long prime_factor\
    \ = 1;\n    long prime_factor_index = 0;\n    for (i = 2; i <= n; i++) {\n   \
    \     j = i;\n        while (j > 1) {\n            if (n % j == 0) {\n       \
    \         factor_index++;\n                factor *= j;\n            }\n     \
    \       j--;\n        }\n        if (factor_index > max_factor_index) {\n    \
    \        max_factor_index = factor_index;\n            max_factor = factor;\n\
    \        }\n    }\n    prime_factor_index = max_factor_index;\n    prime_factor\
    \ = max_factor;\n    return prime_factor;\n}\nint main() {\n    auto candidate\
    \ = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27))\
    \ == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) ==\
    \ (11));\n    assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmp2vsion7z: /tmp/tmp2vsion7z.cpp:37: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long res = 1;\n    long i = 2;\n    long limit = (long) sqrt(n);\n\
    \    while (i <= limit) {\n        if (n % i == 0) {\n            res = i;\n \
    \           break;\n        }\n        i += 2;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
    \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) ==\
    \ (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195))\
    \ == (29));\n}\n"
  stdout: ''
  stderr: "tmpmhg45g35: /tmp/tmpmhg45g35.cpp:23: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long p = 2;\n    long q = n;\n    long r = n;\n    while (p < q) {\n\
    \        while (r % p == 0) {\n            r /= p;\n        }\n        p += 1;\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpy1q8w3wm: /tmp/tmpy1q8w3wm.cpp:22: int main(): Assertion `candidate((15))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n\
    // 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long\
    \ n) {\n    long i = 2;\n    long max_factor = 1;\n    while (i < n) {\n     \
    \   if (n % i == 0) {\n            max_factor = i;\n        }\n        ++i;\n\
    \    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n\
    \    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n  \
    \  assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n  \
    \  assert(candidate((13195)) == (29));\n}\n"
  stdout: ''
  stderr: "tmpqzui5mfr: /tmp/tmpqzui5mfr.cpp:22: int main(): Assertion `candidate((27))\
    \ == (3)' failed.\n"
  exit_code: -6
  status: Exception
