language: cpp
name: HumanEval_120_maximum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> result;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n   \
    \ result.push_back(arr[max_idx]);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk3nq1b7m: /tmp/tmpk3nq1b7m.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long max_val = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > max_val) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv7uao9ev: /tmp/tmpv7uao9ev.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] == max) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps1d8vue2: /tmp/tmps1d8vue2.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = max_idx; i >= 0; i--) {\n        if(arr[i]\
    \ > max_val) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp716edy04: /tmp/tmp716edy04.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long int max_so_far = arr[0];\n    std::vector<long>\
    \ max_ending_here;\n    max_ending_here.push_back(max_so_far);\n    for(long long\
    \ int i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_so_far) {\n     \
    \       max_so_far = arr[i];\n        }\n        if(max_so_far >= arr[i]) {\n\
    \            max_ending_here.push_back(max_so_far);\n            max_so_far =\
    \ arr[i];\n        }\n    }\n    if(max_so_far >= arr[k]) {\n        max_ending_here.push_back(max_so_far);\n\
    \    }\n    return max_ending_here;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfvb0upd1: /tmp/tmpfvb0upd1.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        \
    \    ans.clear();\n            ans.push_back(i);\n        }\n        else if (arr[i]\
    \ == max) {\n            ans.push_back(arr[i]);\n        }\n        else if (arr[i]\
    \ < max) {\n            j = i;\n            while (j < n && arr[j] < max) {\n\
    \                j++;\n            }\n            ans.push_back(arr[j]);\n   \
    \         i = j;\n        }\n        i++;\n    }\n    if (k > ans.size()) {\n\
    \        k = ans.size();\n    }\n    ans.resize(k);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp96bk5cl8: /tmp/tmp96bk5cl8.cpp:52: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        i++;\n    }\n    while (j < k) {\n        if (max < arr[j]) {\n     \
    \       max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n \
    \       if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < k) {\n        if (max < arr[j]) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ k) {\n        if (max < arr[j]) {\n            max = arr[j];\n        }\n  \
    \      j++;\n    }\n    while (i < n) {\n        if (arr[i] > max) {\n       \
    \     max = arr[i];\n        }\n        i++;\n    }\n    while (j < k) {\n   \
    \     if (max < arr[j]) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < k) {\n        if (max < arr[j])\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    while (i <\
    \ n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n  \
    \      i++;\n    }\n    while (j < k) {\n        if (max < arr[j]) {\n       \
    \     max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n   \
    \     if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < k) {\n        if (max < arr[j]) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ k) {\n        if (max < arr[j]) {\n            max = arr[j];\n        }\n  \
    \      j++;\n    }\n    while (i < n) {\n        if (arr[i] > max) {\n       \
    \     max = arr[i];\n        }\n        i++;\n    }\n    while (j < k) {\n   \
    \     if (max < arr[j]) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < k) {\n        if (max < arr[j])\
    \ {\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8d1pisyj.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp8d1pisyj.cpp:143:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  143 | int main() {\n     \
    \ |            ^\n/tmp/tmp8d1pisyj.cpp:156:1: error: expected \u2018}\u2019 at\
    \ end of input\n  156 | }\n      | ^\n/tmp/tmp8d1pisyj.cpp:139:19: note: to match\
    \ this \u2018{\u2019\n  139 |     while (j < k) {\n      |                   ^\n\
    /tmp/tmp8d1pisyj.cpp:156:1: error: expected \u2018}\u2019 at end of input\n  156\
    \ | }\n      | ^\n/tmp/tmp8d1pisyj.cpp:18:58: note: to match this \u2018{\u2019\
    \n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n      |\
    \                                                          ^\n/tmp/tmp8d1pisyj.cpp:156:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  156 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    long index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n        }\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > max_num) {\n            max_arr[i]\
    \ = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_r9dbzsw: /tmp/tmp_r9dbzsw.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long size = arr.size();\n    long mid = size / 2;\n\
    \    while (i < size) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            ans.clear();\n        }\n        if (arr[i] == max) {\n         \
    \   ans.push_back(arr[i]);\n        }\n        i++;\n    }\n    while (j < k)\
    \ {\n        if (max < arr[j]) {\n            max = arr[j];\n            ans.clear();\n\
    \        }\n        if (arr[j] == max) {\n            ans.push_back(arr[j]);\n\
    \        }\n        j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmgxqecga: /tmp/tmpmgxqecga.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqssgdiro: /tmp/tmpqssgdiro.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    long n = arr.size();\n    long\
    \ max_size = n;\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n\
    \    long max_pos = 0;\n    for(long i = 1; i < n; i++) {\n        if(arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n            max_pos = i;\n      \
    \  }\n    }\n    max_arr.push_back(max_num);\n    for(long i = max_pos; i < n;\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n    \
    \        max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n   \
    \ for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n      \
    \      max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vxjae53.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp4vxjae53.cpp:113:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  113 | int main() {\n     \
    \ |            ^\n/tmp/tmp4vxjae53.cpp:126:1: error: expected \u2018}\u2019 at\
    \ end of input\n  126 | }\n      | ^\n/tmp/tmp4vxjae53.cpp:109:39: note: to match\
    \ this \u2018{\u2019\n  109 |     for(long i = max_pos; i < n; i++) {\n      |\
    \                                       ^\n/tmp/tmp4vxjae53.cpp:126:1: error:\
    \ expected \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmp4vxjae53.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmp4vxjae53.cpp:126:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  126 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long cur_idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i]\
    \ > arr[cur_idx]) {\n            ans.push_back(arr[i]);\n            cur_idx =\
    \ i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo8osr_ll: /tmp/tmpo8osr_ll.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    while(index < arr.size() && k > 0) {\n        if(arr[index] > max) {\n  \
    \          max = arr[index];\n            ans.push_back(max);\n        }\n   \
    \     index++;\n        k--;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz05dy5ip: /tmp/tmpz05dy5ip.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxje_hvdx: /tmp/tmpxje_hvdx.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < k; i++) {\n        result.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkf_zl4qk: /tmp/tmpkf_zl4qk.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjnr08eei: /tmp/tmpjnr08eei.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    ans.reserve(k);\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        ans.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplmwh4svx: /tmp/tmplmwh4svx.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx; i >=\
    \ 0; i--) {\n        if (i >= k) {\n            break;\n        }\n        ans.push_back(arr[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqebh8iba: /tmp/tmpqebh8iba.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_num) {\n\
    \            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_arr.push_back(max_num);\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_num) {\n            max_arr.push_back(arr[i]);\n        }\n    }\n   \
    \ return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaxywd5n6: /tmp/tmpaxywd5n6.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long ans = arr[0];\n    long long max_val = arr[0];\n\
    \    long long max_idx = 1;\n    for(long long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    std::vector<long> ans_list;\n    for(long long i\
    \ = max_idx; i < k; i++) {\n        ans_list.push_back(arr[i]);\n    }\n    ans_list.push_back(ans);\n\
    \    return ans_list;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp84kwbkaa: /tmp/tmp84kwbkaa.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (i\
    \ == max_idx) {\n            ans.push_back(max_val);\n        } else {\n     \
    \       ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmukfs44j: /tmp/tmpmukfs44j.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        max.push_back(maxVal);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp18ywb5zs: /tmp/tmp18ywb5zs.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqssgdiro: /tmp/tmpqssgdiro.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > max && arr[i] != max) {\n            result.push_back(max);\n\
    \            max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpir55gh9r: /tmp/tmpir55gh9r.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    \n    for (long i = 1; i < n;\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    \n    ans.push_back(max_val);\n\
    \    \n    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > arr[i-max_idx])\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdr9wjcn2: /tmp/tmpdr9wjcn2.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n  \
    \          ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpujof31rn: /tmp/tmpujof31rn.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n         \
    \   max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    while(max_idx\
    \ != -1) {\n        ans.push_back(arr[max_idx]);\n        max_idx = max_idx >\
    \ 0 ? max_idx - 1 : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095785
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            cur = i;\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n        \
    \    ans.push_back(arr[cur]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpllm4pjsp: /tmp/tmpllm4pjsp.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n  \
    \          ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpujof31rn: /tmp/tmpujof31rn.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx])\
    \ {\n            ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpil96gh62: /tmp/tmpil96gh62.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx])\
    \ {\n            ans.push_back(arr[i]);\n            idx = i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7yvs98i6: /tmp/tmp7yvs98i6.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < k; i++) {\n        ans.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps3rfph1g: /tmp/tmps3rfph1g.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095782
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjcrv_v_g.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpjcrv_v_g.cpp:29:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   29 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpjcrv_v_g.cpp:21:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   21 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    long idx = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    ans.push_back(arr[max_idx]);\n    for (long i = max_idx + 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7o6q5tbu: /tmp/tmp7o6q5tbu.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr.size() && j < k)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans.clear();\n\
    \            count = 0;\n        }\n        else if(arr[i] == max) {\n       \
    \     count++;\n        }\n        else {\n            ans.push_back(max);\n \
    \           max = arr[i];\n            count = 0;\n        }\n        i++;\n \
    \       j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] >\
    \ max) {\n            max = arr[i];\n            ans.clear();\n            count\
    \ = 0;\n        }\n        else if(arr[i] == max) {\n            count++;\n  \
    \      }\n        else {\n            ans.push_back(max);\n            max = arr[i];\n\
    \            count = 0;\n        }\n        i++;\n        j++;\n    }\n    while(i\
    \ < arr.size() && count < k) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n            ans.clear();\n            count = 0;\n        }\n     \
    \   else if(arr[i] == max) {\n            count++;\n        }\n        else {\n\
    \            ans.push_back(max);\n            max = arr[i];\n            count\
    \ = 0;\n        }\n        i++;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9gih2a7l: /tmp/tmp9gih2a7l.cpp:78: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095780
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptr7r9ec2: /tmp/tmptr7r9ec2.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max =\
    \ 0;\n    long cur = 0;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max) {\n            max = arr[i];\n            cur = i;\n     \
    \   }\n    }\n    ans.push_back(max);\n    for (long i = cur; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsi9hhmz8: /tmp/tmpsi9hhmz8.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            max.push_back(maxVal);\n            maxVal = arr[i];\n\
    \        }\n        else {\n            max.push_back(arr[i]);\n        }\n  \
    \  }\n    max.push_back(maxVal);\n    return max;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpplkt3c0d: /tmp/tmpplkt3c0d.cpp:38: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        \
    \    ans.clear();\n        }\n        if (arr[i] == max) {\n            ans.push_back(arr[i]);\n\
    \        }\n        i++;\n    }\n    while (j < k) {\n        if (max < arr[j])\
    \ {\n            max = arr[j];\n            ans.clear();\n        }\n        if\
    \ (arr[j] == max) {\n            ans.push_back(arr[j]);\n        }\n        j++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq4p4nerc: /tmp/tmpq4p4nerc.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long cur = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            ans.push_back(arr[cur]);\n\
    \            cur++;\n        }\n    }\n    ans.push_back(arr[cur]);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1s3wh5pz: /tmp/tmp1s3wh5pz.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            res.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        res.push_back(arr[index]);\n\
    \        index++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_ac8ojj8: /tmp/tmp_ac8ojj8.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i > max) {\n            max = i;\n\
    \            index = i;\n        }\n    }\n    ans.push_back(max);\n    for (auto\
    \ i : arr) {\n        if (i == max) {\n            ans.push_back(i);\n       \
    \ }\n    }\n    ans.push_back(arr[index]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpobbb7_3x: /tmp/tmpobbb7_3x.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long cnt = 0;\n    long n = arr.size();\n\
    \    long m = n;\n    long cur = 0;\n    long cnt2 = 0;\n    long cnt3 = 0;\n\
    \    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n\
    \    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 =\
    \ 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n    long\
    \ cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n\
    \    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22\
    \ = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n    long\
    \ cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n\
    \    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33\
    \ = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n    long\
    \ cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n\
    \    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44\
    \ = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n    long\
    \ cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n\
    \    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55\
    \ = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n    long\
    \ cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n\
    \    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66\
    \ = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n    long\
    \ cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n\
    \    long cnt74 = 0;\n    long cnt75 = 0;\n    long cnt76 = 0;\n    long cnt77\
    \ = 0;\n    long cnt78 = 0;\n    long cnt79 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpi_ri_ltc: /tmp/tmpi_ri_ltc.cpp:110: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    while (i < arr.size() && j < k)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    ans.push_back(max);\n    while (i < arr.size()) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n            mid = i;\n   \
    \     }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j] > max) {\n\
    \            max = arr[j];\n            mid = j;\n        }\n        j++;\n  \
    \  }\n    ans.push_back(max);\n    while (i < arr.size()) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            mid = i;\n        }\n     \
    \   i++;\n    }\n    while (j < k) {\n        if (arr[j] > max) {\n          \
    \  max = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n\
    \    while (i < arr.size()) {\n        if (arr[i] > max) {\n            max =\
    \ arr[i];\n            mid = i;\n        }\n        i++;\n    }\n    while (j\
    \ < k) {\n        if (arr[j] > max) {\n            max = arr[j];\n           \
    \ mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n    while\
    \ (i < arr.size()) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            mid = i;\n        }\n        i++;\n    }\n    while (j < k) {\n \
    \       if (arr[j] > max) {\n            max = arr[j];\n            mid = j;\n\
    \        }\n        j++;\n    }\n    ans.push_back(max);\n    while (i < arr.size())\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    ans.push_back(max);\n    while (i < arr.size()) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n            mid = i;\n   \
    \     }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j] > max) {\n\
    \            max = arr[j];\n            mid = j;\n        }\n        j++;\n  \
    \  }\n    ans.push_back(max);\n\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbpzn93cy: /tmp/tmpbpzn93cy.cpp:133: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6o826kvr: /tmp/tmp6o826kvr.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    while (i < arr.size() && j < k)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    while (i < arr.size()) {\n        if (arr[i] > max) {\n \
    \           max = arr[i];\n            mid = i;\n        }\n        i++;\n   \
    \ }\n    while (j < k) {\n        if (arr[j] > max) {\n            max = arr[j];\n\
    \            mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n\
    \    ans.push_back(arr[mid]);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpojp2h6b8: /tmp/tmpojp2h6b8.cpp:58: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppp2uhkf4: /tmp/tmppp2uhkf4.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    \n    long cnt = 0;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n            cnt++;\n\
    \        }\n    }\n    ans.push_back(cnt);\n    \n    sort(ans.begin(), ans.end());\n\
    \    \n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvmj8h0uf: /tmp/tmpvmj8h0uf.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (index == k) {\n            result.push_back(max);\n\
    \            max = i;\n            index = 0;\n        } else {\n            if\
    \ (i > max) {\n                max = i;\n                index++;\n          \
    \  }\n        }\n    }\n    if (index != 0) {\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplme8wmot: /tmp/tmplme8wmot.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long start = 0;\n    long end = arr.size()\
    \ - 1;\n    while (start < end) {\n        long mid = (start + end) / 2;\n   \
    \     if (arr[mid] > max) {\n            end = mid - 1;\n        } else {\n  \
    \          start = mid + 1;\n        }\n    }\n    for (long i = start; i <= end;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = start; i <= end; i++) {\n        if (arr[i] > max) {\n\
    \            res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzynwt_ny: /tmp/tmpzynwt_ny.cpp:50: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ ans.push_back(max);\n    for (long i = index; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            ans.push_back(arr[i]);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnpl2k6ar: /tmp/tmpnpl2k6ar.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum = 0;\n    long count = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n        sum += arr[i];\n        count++;\n    }\n    long mid = sum\
    \ / count;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > mid)\
    \ {\n            ans.push_back(max);\n            max = max * -1;\n        }\n\
    \        if(arr[i] < mid) {\n            ans.push_back(min);\n            min\
    \ = min * -1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp24nm8v82: /tmp/tmp24nm8v82.cpp:50: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        i++;\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n     \
    \       max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n \
    \       if (arr[i] > max) {\n            ans.push_back(arr[i]);\n            i++;\n\
    \        }\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n        \
    \    ans.push_back(arr[j]);\n            j++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4aex3djc: /tmp/tmp4aex3djc.cpp:53: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long n = arr.size();\n    long count\
    \ = 0;\n    long temp = 0;\n    while(i < n) {\n        mid = (i + j)/2;\n   \
    \     if(arr[mid] > max) {\n            max = arr[mid];\n            j = mid;\n\
    \        } else {\n            i = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gmdqgu1.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp8gmdqgu1.cpp:124:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  124 | int main() {\n     \
    \ |            ^\n/tmp/tmp8gmdqgu1.cpp:137:1: error: expected \u2018}\u2019 at\
    \ end of input\n  137 | }\n      | ^\n/tmp/tmp8gmdqgu1.cpp:117:18: note: to match\
    \ this \u2018{\u2019\n  117 |     while(j < n) {\n      |                  ^\n\
    /tmp/tmp8gmdqgu1.cpp:137:1: error: expected \u2018}\u2019 at end of input\n  137\
    \ | }\n      | ^\n/tmp/tmp8gmdqgu1.cpp:18:58: note: to match this \u2018{\u2019\
    \n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n      |\
    \                                                          ^\n/tmp/tmp8gmdqgu1.cpp:137:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  137 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        max = arr[i];\n        while(j < size && arr[j] > max) {\n\
    \            max = arr[j];\n            j++;\n        }\n        if(max > curr)\
    \ {\n            ans.push_back(max);\n            curr = max;\n        }\n   \
    \     i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplylbdkhv: /tmp/tmplylbdkhv.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n      \
    \      max = arr[mid];\n            j = mid;\n        } else {\n            i\
    \ = mid + 1;\n        }\n    }\n    while(j < size) {\n        mid = (i + j) /\
    \ 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n            i\
    \ = mid + 1;\n        } else {\n            j = mid + 1;\n        }\n    }\n \
    \   while(i < size) {\n        mid = (i + j) / 2;\n        if(arr[mid] > max)\
    \ {\n            max = arr[mid];\n            i = mid + 1;\n        } else {\n\
    \            j = mid + 1;\n        }\n    }\n    while(j < size) {\n        mid\
    \ = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(j < size) {\n     \
    \   mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(j < size) {\n     \
    \   mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(j < size) {\n     \
    \   mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwdyhmlc.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpqwdyhmlc.cpp:124:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  124 | int main() {\n     \
    \ |            ^\n/tmp/tmpqwdyhmlc.cpp:137:1: error: expected \u2018}\u2019 at\
    \ end of input\n  137 | }\n      | ^\n/tmp/tmpqwdyhmlc.cpp:115:21: note: to match\
    \ this \u2018{\u2019\n  115 |     while(j < size) {\n      |                 \
    \    ^\n/tmp/tmpqwdyhmlc.cpp:137:1: error: expected \u2018}\u2019 at end of input\n\
    \  137 | }\n      | ^\n/tmp/tmpqwdyhmlc.cpp:18:58: note: to match this \u2018\
    {\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \      |                                                          ^\n/tmp/tmpqwdyhmlc.cpp:137:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  137 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095783
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> result;\n\
    \    long max = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    result.push_back(max);\n    for(long i = index;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    result.push_back(max);\n    for(long i = index; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \   }\n    result.push_back(max);\n    for(long i = index; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n   \
    \ result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    result.push_back(max);\n\
    \    for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    result.push_back(max);\n   \
    \ for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n   \
    \         max = arr[i];\n        }\n    }\n    result.push_back(max);\n    for(long\
    \ i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    result.push_back(max);\n    for(long i = index;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    result.push_back(max);\n    for(long i = index; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \   }\n    result.push_back(max);\n    for(long i = index; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n   \
    \ result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    result.push_back(max);\n\
    \    for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    result.push_back(max);\n   \
    \ for(long i = index; i < arr.size(); i++) {\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvgege7z.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpcvgege7z.cpp:116:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  116 | int main() {\n     \
    \ |            ^\n/tmp/tmpcvgege7z.cpp:129:1: error: expected \u2018}\u2019 at\
    \ end of input\n  129 | }\n      | ^\n/tmp/tmpcvgege7z.cpp:18:58: note: to match\
    \ this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmpcvgege7z.cpp:129:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  129 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++){\n   \
    \     sum += arr[i];\n        if(sum > max){\n            max = sum;\n       \
    \ }\n    }\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i] > max){\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp87sw1409: /tmp/tmp87sw1409.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > max) {\n            max =\
    \ sum;\n        }\n        if (sum < min) {\n            min = sum;\n        }\n\
    \    }\n    long mid = sum / 2;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] > mid) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    ans.push_back(max);\n    ans.push_back(min);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp79ovvswk: /tmp/tmp79ovvswk.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxje_hvdx: /tmp/tmpxje_hvdx.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqssgdiro: /tmp/tmpqssgdiro.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long long max = 0;\n    std::vector<long>\
    \ ans;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            ans.push_back(max);\n      \
    \      max = arr[i];\n        }\n    }\n    ans.push_back(max);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6dij02_5: /tmp/tmp6dij02_5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    long index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n        }\n    }\n    max_arr[0]\
    \ = max_val;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_arr[i] = arr[i];\n        }\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8h9lgc9u: /tmp/tmp8h9lgc9u.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = cur + 1; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            ans.push_back(max);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyo3c2c3_: /tmp/tmpyo3c2c3_.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i > max) {\n            max = i;\n\
    \            index = i;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (i == max) {\n            ans.push_back(index);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpj7c178_r: /tmp/tmpj7c178_r.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_pos = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_pos = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    long max_pos2 = max_pos;\n   \
    \ for (long i = max_pos + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_pos2 = i;\n        }\n   \
    \ }\n    ans.push_back(max_val);\n    long max_pos3 = max_pos2;\n    for (long\
    \ i = max_pos2 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_pos3 = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_pos4 = max_pos3;\n    for (long i =\
    \ max_pos3 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n    \
    \        max_val = arr[i];\n            max_pos4 = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_pos5 = max_pos4;\n    for (long i = max_pos4 + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_pos5 = i;\n        }\n    }\n    ans.push_back(max_val);\n    long\
    \ max_pos6 = max_pos5;\n    for (long i = max_pos5 + 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_pos6\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_pos7 = max_pos6;\n\
    \    for (long i = max_pos6 + 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n            max_pos7 = i;\n     \
    \   }\n    }\n    ans.push_back(max_val);\n    long max_pos8 = max_pos7;\n   \
    \ for (long i = max_pos7 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_pos8 = i;\n        }\n   \
    \ }\n    ans.push_back(max_val);\n    long max_pos9 = max_pos8;\n    for (long\
    \ i = max_pos8 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_pos9 = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_pos10 = max_pos9;\n    for (long i\
    \ = max_pos9 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n  \
    \          max_val = arr[i];\n            max_pos10 = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_pos11 = max_pos10;\n    for (long i\
    \ = max_pos10 + 1\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcf73zh84.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpcf73zh84.cpp:102:32: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  102 |     for (long i = max_pos10 + 1\n\
    \      |                                ^\n      |                           \
    \     ;\n  103 | }\n      | ~                               \n/tmp/tmpcf73zh84.cpp:103:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  103 | }\n \
    \     | ^\n/tmp/tmpcf73zh84.cpp:102:32: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n  102 |     for (long i = max_pos10 + 1\n      |              \
    \                  ^\n      |                                ;\n  103 | }\n  \
    \    | ~                               \n/tmp/tmpcf73zh84.cpp:103:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpcf73zh84.cpp:102:32:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  102 |     for (long\
    \ i = max_pos10 + 1\n      |         ~                      ^\n      |       \
    \                         )\n  103 | }\n      | ~                            \
    \   \n/tmp/tmpcf73zh84.cpp:103:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  103 | }\n      | ^\n/tmp/tmpcf73zh84.cpp:103:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    \n    for (long i = 1; i < n;\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    \n    for (long i = 0; i < k; i++)\
    \ {\n        ans.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    \n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp59ib3u2c: /tmp/tmp59ib3u2c.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i > max) {\n            max = i;\n\
    \            index = i;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (i == max) {\n            result.push_back(index);\n        }\n    }\n    if\
    \ (result.size() < k) {\n        for (auto i : arr) {\n            if (i == max)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnc536sp6: /tmp/tmpnc536sp6.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> result;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n    \
    \    result.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphaicegh4: /tmp/tmphaicegh4.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long max = 0;\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < k; i++) {\n        max = std::max(max, arr[i]);\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbujm_5jm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbujm_5jm.cpp:22:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   22 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbujm_5jm.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpbujm_5jm.cpp:22:35: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         max = std::max(max,\
    \ arr[i]);\n      |                                   ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbujm_5jm.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbujm_5jm.cpp:22:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         max\
    \ = std"
  stdout: ''
  timestamp: 1660095783
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx3cf3izh.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpx3cf3izh.cpp:30:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   30 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpx3cf3izh.cpp:22:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   22 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpegfo5gyq: /tmp/tmpegfo5gyq.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx;\
    \ i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1g_vkn1u: /tmp/tmp1g_vkn1u.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    long curr2 = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   ans.push_back(max);\n            curr2 = max;\n            max = arr[i];\n\
    \        } else if (arr[i] == max) {\n            curr2 = max;\n            max\
    \ = arr[i];\n        }\n    }\n    ans.push_back(max);\n    ans.push_back(curr2);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgv2il1z9: /tmp/tmpgv2il1z9.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzljc53qd: /tmp/tmpzljc53qd.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjnr08eei: /tmp/tmpjnr08eei.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    \n    long max_val_2 = arr[0];\n    long max_idx_2 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_2) {\n           \
    \ max_val_2 = arr[i];\n            max_idx_2 = i;\n        }\n    }\n    ans.push_back(max_val_2);\n\
    \    ans.push_back(arr[max_idx_2]);\n    \n    long max_val_3 = arr[0];\n    long\
    \ max_idx_3 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_3) {\n            max_val_3 = arr[i];\n            max_idx_3 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_3);\n    ans.push_back(arr[max_idx_3]);\n\
    \    \n    long max_val_4 = arr[0];\n    long max_idx_4 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_4) {\n           \
    \ max_val_4 = arr[i];\n            max_idx_4 = i;\n        }\n    }\n    ans.push_back(max_val_4);\n\
    \    ans.push_back(arr[max_idx_4]);\n    \n    long max_val_5 = arr[0];\n    long\
    \ max_idx_5 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_5) {\n            max_val_5 = arr[i];\n            max_idx_5 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_5);\n    ans.push_back(arr[max_idx_5]);\n\
    \    \n    long max_val_6 = arr[0];\n    long max_idx_6 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_6) {\n           \
    \ max_val_6 = arr[i];\n            max_idx_6 = i;\n        }\n    }\n    ans.push_back(max_val_6);\n\
    \    ans.push_back(arr[max_idx_6]);\n    \n    long max_val_7 = arr[0];\n    long\
    \ max_idx_7 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_7) {\n            max_val_7 = arr[i];\n            max_idx_7 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_7);\n    ans.push_back(arr[max_idx_7]);\n\
    \    \n    long max_val_8 = arr[0];\n    long max_idx_8 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_8) {\n           \
    \ max_val_8 = arr[i];\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfht8uoqk.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfht8uoqk.cpp:104:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  104 | int main() {\n     \
    \ |            ^\n/tmp/tmpfht8uoqk.cpp:117:1: error: expected \u2018}\u2019 at\
    \ end of input\n  117 | }\n      | ^\n/tmp/tmpfht8uoqk.cpp:99:43: note: to match\
    \ this \u2018{\u2019\n   99 |     for (long i = 1; i < arr.size(); i++) {\n  \
    \    |                                           ^\n/tmp/tmpfht8uoqk.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpfht8uoqk.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpfht8uoqk.cpp:117:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  117 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095783
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max_arr;\n    long max_num\
    \ = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_num) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        max_arr.push_back(max_num);\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppjzcy3ed: /tmp/tmppjzcy3ed.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptkeb76w1: /tmp/tmptkeb76w1.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptkeb76w1: /tmp/tmptkeb76w1.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    while(i < n && j < k) {\n\
    \        if(arr[i] > arr[j]) {\n            max = arr[i];\n            i++;\n\
    \        } else {\n            max = arr[j];\n            j++;\n        }\n  \
    \  }\n    while(i < n) {\n        max = arr[i];\n        ans.push_back(max);\n\
    \        i++;\n    }\n    while(j < k) {\n        max = arr[j];\n        ans.push_back(max);\n\
    \        j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm0s0q0ka: /tmp/tmpm0s0q0ka.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long long max = 0;\n    std::vector<long>\
    \ arr1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            arr1.push_back(max);\n     \
    \       max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            arr1.push_back(arr[i]);\n       \
    \ }\n    }\n    return arr1;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuesscv2q: /tmp/tmpuesscv2q.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    ans.reserve(n);\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        if (max_idx != i) {\n            ans.push_back(arr[i]);\n       \
    \ }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4aumlmrx: /tmp/tmp4aumlmrx.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < k; i++) {\n        long val = arr[i];\n        long idx = i;\n    \
    \    for(long j = i; j < n; j++) {\n            if(arr[j] > val) {\n         \
    \       val = arr[j];\n                idx = j;\n            }\n        }\n  \
    \      ans.push_back(val);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7joyhntz: /tmp/tmp7joyhntz.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> result;\n    long max\
    \ = 0;\n    long temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n        \
    \    temp = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > temp) {\n            result.push_back(arr[i]);\n   \
    \     }\n    }\n    for (long i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ > k) {\n            result.erase(result.begin() + i);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfa20sub6: /tmp/tmpfa20sub6.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < arr.size(); i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        max.push_back(maxVal);\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy405liqj: /tmp/tmpy405liqj.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        long val = arr[i];\n        long idx = i;\n\
    \        while (idx > 0 && arr[idx - 1] > val) {\n            ans.push_back(val);\n\
    \            idx--;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpff7h0vct: /tmp/tmpff7h0vct.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long cur = 0;\n    for(long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] > max) {\n            max = arr[i];\n            cur = i;\n \
    \       }\n    }\n    ans.push_back(max);\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == max) {\n            ans.push_back(arr[cur]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp04tu9uuf: /tmp/tmp04tu9uuf.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long cur\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            cur = i;\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            res.push_back(arr[cur]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp25pwy4t3: /tmp/tmp25pwy4t3.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv29d1764: /tmp/tmpv29d1764.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> max_arr(n);\n\
    \    long max_num = arr[0];\n    long max_idx = 0;\n    for(long i = 1; i < n;\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[max_idx] = arr[i];\n     \
    \       max_idx++;\n        }\n    }\n    return max_arr;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm7_f7vv6: /tmp/tmpm7_f7vv6.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx])\
    \ {\n            ans.push_back(arr[i]);\n            idx = i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7yvs98i6: /tmp/tmp7yvs98i6.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_index = i;\n  \
    \      }\n    }\n    max_arr[max_index] = max_val;\n    for (long i = 1; i < k;\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_arr[i] = arr[i];\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5w6u176x: /tmp/tmp5w6u176x.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095785
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        if (i != max_idx) {\n            ans.push_back(arr[i]);\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpov59ncna: /tmp/tmpov59ncna.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    long mid = 0;\n    long count\
    \ = 0;\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n   \
    \         max = arr[i];\n            mid = i;\n        }\n        i++;\n    }\n\
    \    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n \
    \           mid = j;\n        }\n        j++;\n    }\n    while(i < arr.size())\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while(j < k) {\n        if(arr[j] >\
    \ max) {\n            max = arr[j];\n            mid = j;\n        }\n       \
    \ j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            mid = i;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n       \
    \     max = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n  \
    \  while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n            max\
    \ = arr[i];\n            mid = i;\n        }\n        i++;\n        j++;\n   \
    \ }\n    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n\
    \            mid = j;\n        }\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     mid = i;\n        }\n        i++;\n        j++;\n    }\n    while(j < k)\
    \ {\n        if(arr[j] > max) {\n            max = arr[j];\n            mid =\
    \ j;\n        }\n        j++;\n    }\n    while(i < arr.size() && j < k) {\n \
    \       if(arr[i] > max) {\n            max = arr[i];\n            mid = i;\n\
    \        }\n        i++;\n        j++;\n    }\n    while(j < k) {\n        if(arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            mid = i;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n       \
    \     max = arr[j];\n            mid = j;\n        }\n        j\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbxl3mlya.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbxl3mlya.cpp:127:10: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  127 |         j\n      |          ^\n  \
    \    |          ;\n  128 | }\n      | ~         \n/tmp/tmpbxl3mlya.cpp:129:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  129 | int main() {\n      |            ^\n/tmp/tmpbxl3mlya.cpp:142:1: error:\
    \ expected \u2018}\u2019 at end of input\n  142 | }\n      | ^\n/tmp/tmpbxl3mlya.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpbxl3mlya.cpp:142:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  142 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ max_val = arr[0];\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > max_val){\n            max_val = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++){\n        max.push_back(max_val);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbvpnaj9p: /tmp/tmpbvpnaj9p.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    for (size_t i =\
    \ max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n     \
    \       result.push_back(arr[i]);\n        }\n    }\n    if (result.size() > k)\
    \ {\n        result.resize(k);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvl66m64o: /tmp/tmpvl66m64o.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    long index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n        }\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > max_num) {\n            max_arr[i]\
    \ = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_r9dbzsw: /tmp/tmp_r9dbzsw.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095782
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_num) {\n\
    \            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max_arr.push_back(max_num);\n    }\n    return max_arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp775q4nas: /tmp/tmp775q4nas.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx])\
    \ {\n            ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpil96gh62: /tmp/tmpil96gh62.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    long long max = 0;\n    std::vector<long>\
    \ ans;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == max) {\n            ans.push_back(max);\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_tz0z4oi: /tmp/tmp_tz0z4oi.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long n = arr.size();\n    long max_element\
    \ = 0;\n    std::vector<long> max_elements(k, 0);\n    for(long i = 0; i < n;\
    \ i++) {\n        if(arr[i] > max_element) {\n            max_element = arr[i];\n\
    \        }\n        if(max_elements[max_elements - 1] < arr[i]) {\n          \
    \  max_elements[max_elements - 1] = arr[i];\n        }\n    }\n    return max_elements;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8mv9puyb.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp8mv9puyb.cpp:27:38: error: no match for \u2018\
    operator-\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    int\u2019)\n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n  \
    \    |                         ~~~~~~~~~~~~ ^ ~\n      |                     \
    \    |              |\n      |                         |              int\n  \
    \    |                         std::vector<long int>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8mv9puyb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8mv9puyb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8mv9puyb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     "
  stdout: ''
  timestamp: 1660095786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long sum = 0;\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > max) {\n            max =\
    \ sum;\n            ans.clear();\n            ans.push_back(i);\n        } else\
    \ if (sum < min) {\n            min = sum;\n            ans.clear();\n       \
    \     ans.push_back(i);\n        } else if (sum == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    if (k == ans.size()) {\n        return ans;\n    }\n  \
    \  long mid = ans.size() / 2;\n    ans.erase(ans.begin() + mid);\n    ans.insert(ans.begin(),\
    \ ans.begin() + mid);\n    ans.insert(ans.begin() + mid, ans.begin() + k);\n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqj0dmb2f.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpqj0dmb2f.cpp:43:46: error: no matching function\
    \ for call to \u2018std::vector<long int>::insert(std::vector<long int>::iterator,\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >)\u2019\n   43\
    \ |     ans.insert(ans.begin(), ans.begin() + mid);\n      |                 \
    \                             ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqj0dmb2f.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:132:57:\
    \ note:   no known conversion for argument 2 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018const value_type&\u2019 {aka \u2018\
    const long int&\u2019}\n  132 |     insert(const_iterator __position, const value_type&\
    \ __x)\n      |                                       ~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/ps"
  stdout: ''
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    for(long i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] > max){\n            max = arr[i];\n            mid\
    \ = i;\n        }\n        if(arr[i] < min){\n            min = arr[i];\n    \
    \        mid = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == max && i != mid){\n            ans.push_back(max);\n   \
    \         max = arr[i];\n        }\n        if(arr[i] == min && i != mid){\n \
    \           ans.push_back(min);\n            min = arr[i];\n        }\n    }\n\
    \    ans.push_back(max);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpowiml8t5: /tmp/tmpowiml8t5.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if (i > max)\
    \ {\n            max = i;\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (auto i : arr) {\n        if (i == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    ans.push_back(arr[index]);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy916mvq_: /tmp/tmpy916mvq_.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans.push_back(arr[cur]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzhog8fy_: /tmp/tmpzhog8fy_.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> max_arr(k);\n\
    \    long max_val = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > max_val) {\n            max_arr[i]\
    \ = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2238d5ad: /tmp/tmp2238d5ad.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    while(i < arr.size() && j < k) {\n        if(arr[i]\
    \ > arr[j]) {\n            max = arr[i];\n            i++;\n        } else {\n\
    \            max = arr[j];\n            j++;\n        }\n    }\n    while(i <\
    \ arr.size()) {\n        max = arr[i];\n        i++;\n        ans.push_back(max);\n\
    \    }\n    while(j < k) {\n        max = arr[j];\n        j++;\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfksu0smi: /tmp/tmpfksu0smi.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> result;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpisbc_zef: /tmp/tmpisbc_zef.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    while(i < n && j < k) {\n\
    \        if(arr[i] > arr[j]) {\n            max = arr[i];\n            i++;\n\
    \        } else {\n            max = arr[j];\n            j++;\n        }\n  \
    \      ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpytzeskew: /tmp/tmpytzeskew.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_val) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqz7b1t1v: /tmp/tmpqz7b1t1v.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> arr1(arr.begin(),\
    \ arr.end());\n    std::sort(arr1.begin(), arr1.end());\n    std::vector<long>\
    \ arr2(arr1.begin(), arr1.begin() + k);\n    return arr2;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjvqxc9m2: /tmp/tmpjvqxc9m2.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            result.push_back(max_val);\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcg314fgk: /tmp/tmpcg314fgk.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    ans.push_back(max);\n    for (long i = 0; i\
    \ < arr.size() - k + 1; i++) {\n        long cur = max;\n        for (long j =\
    \ 0; j < k; j++) {\n            if (arr[i + j] > cur) {\n                cur =\
    \ arr[i + j];\n            }\n        }\n        ans.push_back(cur);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5q0jevy5: /tmp/tmp5q0jevy5.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dpkzl2n.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1dpkzl2n.cpp:29:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   29 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmp1dpkzl2n.cpp:21:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   21 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmp1dpkzl2n.cpp:37:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   37 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmp1dpkzl2n.cpp:21:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   21 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> ans;\n  \
    \  long max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++){\n        if(arr[i] > max_val){\n            max_val = arr[i];\n      \
    \      max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = max_idx; i < k; i++){\n        ans.push_back(arr[i]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdrbjhhkc: /tmp/tmpdrbjhhkc.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        long val = arr[i];\n        long idx = i;\n\
    \        while (idx > 0 && arr[idx - 1] > val) {\n            ans.push_back(arr[idx\
    \ - 1]);\n            idx--;\n        }\n        ans.push_back(val);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprtkn339v: /tmp/tmprtkn339v.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2lvyz25_: /tmp/tmp2lvyz25_.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv29d1764: /tmp/tmpv29d1764.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    long cnt = 0;\n    long\
    \ cur = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n    long cnt2\
    \ = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6\
    \ = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10\
    \ = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long\
    \ cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n\
    \    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21\
    \ = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long\
    \ cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n\
    \    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32\
    \ = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long\
    \ cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n\
    \    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43\
    \ = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long\
    \ cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n\
    \    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54\
    \ = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long\
    \ cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n\
    \    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65\
    \ = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long\
    \ cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n\
    \    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n    long cnt76\
    \ = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvf2nrvzg: /tmp/tmpvf2nrvzg.cpp:110: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max =\
    \ 0;\n    long temp = 0;\n    for(long i = 0; i < arr.size(); i++) {\n       \
    \ if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            temp\
    \ = max;\n            max = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] > temp) {\n            ans.push_back(max);\n\
    \            max = temp;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsxf4bps6: /tmp/tmpsxf4bps6.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> arr2(k);\n \
    \   long max = 0;\n    long i = 0;\n    long j = 0;\n    long k1 = 0;\n    long\
    \ k2 = 0;\n    long k3 = 0;\n    long k4 = 0;\n    long k5 = 0;\n    long k6 =\
    \ 0;\n    long k7 = 0;\n    long k8 = 0;\n    long k9 = 0;\n    long k10 = 0;\n\
    \    long k11 = 0;\n    long k12 = 0;\n    long k13 = 0;\n    long k14 = 0;\n\
    \    long k15 = 0;\n    long k16 = 0;\n    long k17 = 0;\n    long k18 = 0;\n\
    \    long k19 = 0;\n    long k20 = 0;\n    long k21 = 0;\n    long k22 = 0;\n\
    \    long k23 = 0;\n    long k24 = 0;\n    long k25 = 0;\n    long k26 = 0;\n\
    \    long k27 = 0;\n    long k28 = 0;\n    long k29 = 0;\n    long k30 = 0;\n\
    \    long k31 = 0;\n    long k32 = 0;\n    long k33 = 0;\n    long k34 = 0;\n\
    \    long k35 = 0;\n    long k36 = 0;\n    long k37 = 0;\n    long k38 = 0;\n\
    \    long k39 = 0;\n    long k40 = 0;\n    long k41 = 0;\n    long k42 = 0;\n\
    \    long k43 = 0;\n    long k44 = 0;\n    long k45 = 0;\n    long k46 = 0;\n\
    \    long k47 = 0;\n    long k48 = 0;\n    long k49 = 0;\n    long k50 = 0;\n\
    \    long k51 = 0;\n    long k52 = 0;\n    long k53 = 0;\n    long k54 = 0;\n\
    \    long k55 = 0;\n    long k56 = 0;\n    long k57 = 0;\n    long k58 = 0;\n\
    \    long k59 = 0;\n    long k60 = 0;\n    long k61 = 0;\n    long k62 = 0;\n\
    \    long k63 = 0;\n    long k64 = 0;\n    long k65 = 0;\n    long k66 = 0;\n\
    \    long k67 = 0;\n    long k68 = 0;\n    long k69 = 0;\n    long k70 = 0;\n\
    \    long k71 = 0;\n    long k72 = 0;\n    long k73 = 0;\n    long k74 = 0;\n\
    \    long k75 = 0;\n    long k76 = 0;\n    long k77 = 0;\n    long k78 = 0;\n\
    \    long k79 = 0;\n    long k80 = 0;\n    long k81 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6gq_lnz.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpl6gq_lnz.cpp:106:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpl6gq_lnz.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max)\
    \ {\n            result.push_back(max);\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n    \
    \        result.push_back(arr[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw8omkfgw: /tmp/tmpw8omkfgw.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> ans;\n  \
    \  long max = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    ans.push_back(max);\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            ans.push_back(arr[index]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzx841xvp: /tmp/tmpzx841xvp.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (i\
    \ == max_idx) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0ch71rwu: /tmp/tmp0ch71rwu.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    while(ans.size() < k) {\n  \
    \      ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpej469ftj: /tmp/tmpej469ftj.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    long n = arr.size();\n    long\
    \ mid = n / 2;\n    while (i < n) {\n        if (arr[i] > max) {\n           \
    \ max = arr[i];\n        }\n        i++;\n    }\n    while (j < k) {\n       \
    \ if (max < arr[j]) {\n            ans.push_back(max);\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsljy7vel: /tmp/tmpsljy7vel.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        long val = arr[i];\n\
    \        long idx = i;\n        while (idx > 0 && arr[idx - 1] > val) {\n    \
    \        ans.push_back(val);\n            idx--;\n        }\n        ans.push_back(val);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk5ht3ese: /tmp/tmpk5ht3ese.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> arr2(arr.size());\n\
    \    long max = 0;\n    long i = 0;\n    long j = 0;\n    long k1 = 0;\n    long\
    \ k2 = 0;\n    long k3 = 0;\n    long k4 = 0;\n    long k5 = 0;\n    long k6 =\
    \ 0;\n    long k7 = 0;\n    long k8 = 0;\n    long k9 = 0;\n    long k10 = 0;\n\
    \    long k11 = 0;\n    long k12 = 0;\n    long k13 = 0;\n    long k14 = 0;\n\
    \    long k15 = 0;\n    long k16 = 0;\n    long k17 = 0;\n    long k18 = 0;\n\
    \    long k19 = 0;\n    long k20 = 0;\n    long k21 = 0;\n    long k22 = 0;\n\
    \    long k23 = 0;\n    long k24 = 0;\n    long k25 = 0;\n    long k26 = 0;\n\
    \    long k27 = 0;\n    long k28 = 0;\n    long k29 = 0;\n    long k30 = 0;\n\
    \    long k31 = 0;\n    long k32 = 0;\n    long k33 = 0;\n    long k34 = 0;\n\
    \    long k35 = 0;\n    long k36 = 0;\n    long k37 = 0;\n    long k38 = 0;\n\
    \    long k39 = 0;\n    long k40 = 0;\n    long k41 = 0;\n    long k42 = 0;\n\
    \    long k43 = 0;\n    long k44 = 0;\n    long k45 = 0;\n    long k46 = 0;\n\
    \    long k47 = 0;\n    long k48 = 0;\n    long k49 = 0;\n    long k50 = 0;\n\
    \    long k51 = 0;\n    long k52 = 0;\n    long k53 = 0;\n    long k54 = 0;\n\
    \    long k55 = 0;\n    long k56 = 0;\n    long k57 = 0;\n    long k58 = 0;\n\
    \    long k59 = 0;\n    long k60 = 0;\n    long k61 = 0;\n    long k62 = 0;\n\
    \    long k63 = 0;\n    long k64 = 0;\n    long k65 = 0;\n    long k66 = 0;\n\
    \    long k67 = 0;\n    long k68 = 0;\n    long k69 = 0;\n    long k70 = 0;\n\
    \    long k71 = 0;\n    long k72 = 0;\n    long k73 = 0;\n    long k74 = 0;\n\
    \    long k75 = 0;\n    long k76 = 0;\n    long k77 = 0;\n    long k78 = 0;\n\
    \    long k79 = 0;\n    long k80 = 0;\n    long k81 = 0;\n    long k\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7qk10ao.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpd7qk10ao.cpp:106:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpd7qk10ao.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(max.size() == k) {\n \
    \           break;\n        }\n        if(arr[i] > max[k-1]) {\n            max.resize(k);\n\
    \            max[k-1] = arr[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpto46nbyc: /tmp/tmpto46nbyc.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> ans;\n  \
    \  long max = 0;\n    long i = 0;\n    long j = 0;\n    long mid = 0;\n    while(i\
    \ < arr.size() && j < k) {\n        if(arr[i] > arr[j]) {\n            mid = arr[i];\n\
    \            arr[i] = arr[j];\n            arr[j] = mid;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(i < arr.size()) {\n        mid = arr[i];\n   \
    \     ans.push_back(mid);\n        i++;\n    }\n    while(j < k) {\n        mid\
    \ = arr[j];\n        ans.push_back(mid);\n        j++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpow9r5oho: /tmp/tmpow9r5oho.cpp:48: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpegfo5gyq: /tmp/tmpegfo5gyq.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> result;\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcynim_v9: /tmp/tmpcynim_v9.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long cnt = 0;\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           ans.push_back(arr[i]);\n            cnt++;\n        }\n    }\n   \
    \ ans.push_back(cnt);\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0z7xpdh4: /tmp/tmp0z7xpdh4.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long max_val = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > max_val) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv7uao9ev: /tmp/tmpv7uao9ev.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n\
    \            max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpokpyscbu: /tmp/tmpokpyscbu.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long cur_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx])\
    \ {\n            ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[cur_idx]);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0gh6rb3j: /tmp/tmp0gh6rb3j.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095787
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = 1;\n    long idx = 0;\n    \n    // Find\
    \ max element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n    // If k\
    \ is less than max element then find max element and it's index\n    if (k < max_val)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_idx);\n      \
    \  return ans;\n    }\n    \n    // If k is equal to max element then find max\
    \ element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n    // If k\
    \ is less than max element then find max element and it's index\n    if (k < max_val)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_idx);\n      \
    \  return ans;\n    }\n    \n    // If k is equal to max element then find max\
    \ element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n    // If k\
    \ is less than max element then find max element and it's index\n    if (k < max_val)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_idx);\n      \
    \  return ans;\n    }\n    \n    // If k is equal to max element then find max\
    \ element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplbani47z: /tmp/tmplbani47z.cpp:110: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjnr08eei: /tmp/tmpjnr08eei.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ max_val = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        max.push_back(max_val);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqkveurak: /tmp/tmpqkveurak.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(int i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    while(max_idx\
    \ != -1) {\n        ans.push_back(arr[max_idx]);\n        max_idx = max_idx >\
    \ 0 ? max_idx - 1 : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095792
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n\
    \        max_arr[i] = max_val;\n    }\n    return max_arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9fjerdwg: /tmp/tmp9fjerdwg.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdq3pcyb1: /tmp/tmpdq3pcyb1.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    while (curr_idx > 0 && curr_idx - k >= 0) {\n        ans.push_back(arr[curr_idx\
    \ - k]);\n        curr_idx = curr_idx - k;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvl4tjfbt: /tmp/tmpvl4tjfbt.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (size_t i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkwe303iy: /tmp/tmpkwe303iy.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > arr[idx]) {\n            ans.push_back(arr[i]);\n            idx =\
    \ i;\n        }\n    }\n    ans.push_back(arr[idx]);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx733lz1e: /tmp/tmpx733lz1e.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = 0; i < arr.size()\
    \ - k + 1; i++) {\n        long curr = arr[i];\n        for (size_t j = i + 1;\
    \ j < arr.size() && j < i + k; j++) {\n            if (arr[j] > curr) {\n    \
    \            curr = arr[j];\n            }\n        }\n        ans.push_back(curr);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp00lgi8rb: /tmp/tmp00lgi8rb.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095786
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> arr2(arr.size());\n\
    \    long max = 0;\n    long i = 0;\n    long j = 0;\n    long k1 = 0;\n    long\
    \ k2 = 0;\n    long k3 = 0;\n    long k4 = 0;\n    long k5 = 0;\n    long k6 =\
    \ 0;\n    long k7 = 0;\n    long k8 = 0;\n    long k9 = 0;\n    long k10 = 0;\n\
    \    long k11 = 0;\n    long k12 = 0;\n    long k13 = 0;\n    long k14 = 0;\n\
    \    long k15 = 0;\n    long k16 = 0;\n    long k17 = 0;\n    long k18 = 0;\n\
    \    long k19 = 0;\n    long k20 = 0;\n    long k21 = 0;\n    long k22 = 0;\n\
    \    long k23 = 0;\n    long k24 = 0;\n    long k25 = 0;\n    long k26 = 0;\n\
    \    long k27 = 0;\n    long k28 = 0;\n    long k29 = 0;\n    long k30 = 0;\n\
    \    long k31 = 0;\n    long k32 = 0;\n    long k33 = 0;\n    long k34 = 0;\n\
    \    long k35 = 0;\n    long k36 = 0;\n    long k37 = 0;\n    long k38 = 0;\n\
    \    long k39 = 0;\n    long k40 = 0;\n    long k41 = 0;\n    long k42 = 0;\n\
    \    long k43 = 0;\n    long k44 = 0;\n    long k45 = 0;\n    long k46 = 0;\n\
    \    long k47 = 0;\n    long k48 = 0;\n    long k49 = 0;\n    long k50 = 0;\n\
    \    long k51 = 0;\n    long k52 = 0;\n    long k53 = 0;\n    long k54 = 0;\n\
    \    long k55 = 0;\n    long k56 = 0;\n    long k57 = 0;\n    long k58 = 0;\n\
    \    long k59 = 0;\n    long k60 = 0;\n    long k61 = 0;\n    long k62 = 0;\n\
    \    long k63 = 0;\n    long k64 = 0;\n    long k65 = 0;\n    long k66 = 0;\n\
    \    long k67 = 0;\n    long k68 = 0;\n    long k69 = 0;\n    long k70 = 0;\n\
    \    long k71 = 0;\n    long k72 = 0;\n    long k73 = 0;\n    long k74 = 0;\n\
    \    long k75 = 0;\n    long k76 = 0;\n    long k77 = 0;\n    long k78 = 0;\n\
    \    long k79 = 0;\n    long k80 = 0;\n    long k81 = 0;\n    long k82\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe_ksppdr.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpe_ksppdr.cpp:106:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpe_ksppdr.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx])\
    \ {\n            ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[curr_idx]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsmjyeg5l: /tmp/tmpsmjyeg5l.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long\
    \ cur_idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > arr[cur_idx]) {\n            ans.push_back(arr[i]);\n  \
    \          cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpi0whi5xc: /tmp/tmpi0whi5xc.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long cnt = 0;\n    while (i < arr.size())\
    \ {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    mid = (i + j) / 2;\n    ans.push_back(max);\n    while\
    \ (j < arr.size()) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max)\
    \ {\n            max = arr[mid];\n            j = mid;\n        } else {\n   \
    \         i = mid + 1;\n        }\n    }\n    ans.push_back(max);\n    while (j\
    \ < arr.size()) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n\
    \            max = arr[mid];\n            j = mid;\n        } else {\n       \
    \     i = mid + 1;\n        }\n    }\n    ans.push_back(max);\n    while (j <\
    \ arr.size()) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n \
    \           max = arr[mid];\n            j = mid;\n        } else {\n        \
    \    i = mid + 1;\n        }\n    }\n    ans.push_back(max);\n    while (j < arr.size())\
    \ {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    ans.push_back(max);\n    while (j < arr.size()) {\n   \
    \     mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid;\n        } else {\n            i = mid + 1;\n        }\n\
    \    }\n    ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i\
    \ + j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n    \
    \        j = mid;\n        } else {\n            i = mid + 1;\n        }\n   \
    \ }\n    ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i +\
    \ j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n      \
    \      j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n\
    \    ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i + j)\
    \ / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n         \
    \   j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n \
    \   ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i + j) /\
    \ 2;\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40_kfswn.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp40_kfswn.cpp:120:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  120 | int main() {\n     \
    \ |            ^\n/tmp/tmp40_kfswn.cpp:133:1: error: expected \u2018}\u2019 at\
    \ end of input\n  133 | }\n      | ^\n/tmp/tmp40_kfswn.cpp:18:58: note: to match\
    \ this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmp40_kfswn.cpp:133:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  133 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max_arr(k);\n    long\
    \ max_num = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ k; i++) {\n        if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmply_ey945: /tmp/tmply_ey945.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpft63d4o5: /tmp/tmpft63d4o5.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    for(long i = 0; i < arr.size(); i++){\n   \
    \     if(arr[i] > max){\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min){\n            min = arr[i];\n        }\n    }\n    long mid = max;\n\
    \    long count = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ == max){\n            count++;\n        }\n    }\n    while(count < k){\n  \
    \      ans.push_back(mid);\n        mid = mid*2;\n        if(mid > max){\n   \
    \         mid = max;\n        }\n        if(mid < min){\n            mid = min;\n\
    \        }\n        count = 0;\n        for(long i = 0; i < arr.size(); i++){\n\
    \            if(arr[i] == mid){\n                count++;\n            }\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> max_arr(n);\n\
    \    long max_index = 0;\n    long max_val = arr[0];\n    for(long i = 1; i <\
    \ n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n \
    \           max_index = i;\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max_arr[max_index] = arr[i];\n        max_index++;\n    }\n    return\
    \ max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'malloc(): corrupted top size

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ mid = i;\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \            mid = i;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            ans.push_back(arr[mid]);\n\
    \            count++;\n        }\n        if (arr[i] == min) {\n            ans.push_back(arr[mid]);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        ans.push_back(arr[mid]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb656smid: /tmp/tmpb656smid.cpp:51: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long m = n;\n    while(i\
    \ < n && j < k) {\n        if(arr[i] > arr[j]) {\n            max = arr[i];\n\
    \            i++;\n        } else {\n            max = arr[j];\n            j++;\n\
    \        }\n    }\n    while(i < n) {\n        max = arr[i];\n        i++;\n \
    \       ans.push_back(max);\n    }\n    while(j < k) {\n        max = arr[j];\n\
    \        j++;\n        ans.push_back(max);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9vm6lk9e: /tmp/tmp9vm6lk9e.cpp:48: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> max(n);\n  \
    \  long max_val = arr[0];\n    long max_idx = 1;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n         \
    \   max_idx = i;\n        }\n    }\n    for(long i = 0; i < k; i++) {\n      \
    \  max[max_idx] = arr[i];\n        max_idx++;\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'malloc(): corrupted top size

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = cur + 1; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        ans.push_back(max);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpoje_j3o8: /tmp/tmpoje_j3o8.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ mid = i;\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \            mid = i;\n        }\n    }\n    long mid1 = mid - k;\n    long mid2\
    \ = mid + k;\n    long mid3 = mid - 1;\n    long mid4 = mid + 1;\n    long mid5\
    \ = mid - 2;\n    long mid6 = mid + 2;\n    long mid7 = mid - 3;\n    long mid8\
    \ = mid + 3;\n    long mid9 = mid - 4;\n    long mid10 = mid + 4;\n    long mid11\
    \ = mid - 5;\n    long mid12 = mid + 5;\n    long mid13 = mid - 6;\n    long mid14\
    \ = mid + 6;\n    long mid15 = mid - 7;\n    long mid16 = mid + 7;\n    long mid17\
    \ = mid - 8;\n    long mid18 = mid + 8;\n    long mid19 = mid - 9;\n    long mid20\
    \ = mid + 9;\n    long mid21 = mid - 10;\n    long mid22 = mid + 10;\n    long\
    \ mid23 = mid - 11;\n    long mid24 = mid + 11;\n    long mid25 = mid - 12;\n\
    \    long mid26 = mid + 12;\n    long mid27 = mid - 13;\n    long mid28 = mid\
    \ + 13;\n    long mid29 = mid - 14;\n    long mid30 = mid + 14;\n    long mid31\
    \ = mid - 15;\n    long mid32 = mid + 15;\n    long mid33 = mid - 16;\n    long\
    \ mid34 = mid + 16;\n    long mid35 = mid - 17;\n    long mid36 = mid + 17;\n\
    \    long mid37 = mid - 18;\n    long mid38 = mid + 18;\n    long mid39 = mid\
    \ - 19;\n    long mid40 = mid + 19;\n    long mid41 = mid - 20;\n    long mid42\
    \ = mid + 20;\n    long mid43 = mid - 21;\n    long mid44 = mid + 21;\n    long\
    \ mid45 = mid - 22;\n    long mid46 = mid + 22;\n    long mid47 = mid - 23;\n\
    \    long mid48 = mid + 23;\n    long mid49 = mid - 24;\n    long \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpni0lu5oc.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpni0lu5oc.cpp:84:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpni0lu5oc.cpp:84:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660095788
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            count++;\n        }\n    }\n\
    \    if (count == k) {\n        for (long i = 0; i < arr.size(); i++) {\n    \
    \        if (arr[i] == max) {\n                res.push_back(max);\n         \
    \   }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo7ye_91e: /tmp/tmpo7ye_91e.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long cur_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx])\
    \ {\n            ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[cur_idx]);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxewhm2z2: /tmp/tmpxewhm2z2.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ ans.push_back(max);\n    long left = 0;\n    long right = arr.size() - 1;\n\
    \    while (left < right) {\n        long mid = (left + right) / 2;\n        if\
    \ (arr[mid] > max) {\n            ans.push_back(arr[mid]);\n            right\
    \ = mid;\n        } else {\n            left = mid;\n        }\n    }\n    if\
    \ (k > ans.size()) {\n        ans.resize(ans.size() + k);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx; i\
    \ < arr.size(); i++) {\n        ans.push_back(arr[i]);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm76cvaea: /tmp/tmpm76cvaea.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        mid = i + (size - i) / 2;\n        if(arr[mid] > max) {\n\
    \            max = arr[mid];\n            j = mid;\n        }\n        else if(arr[mid]\
    \ == max) {\n            if(j == mid) {\n                ans.push_back(max);\n\
    \                j++;\n            }\n            else {\n                ans.push_back(max);\n\
    \                j = mid;\n            }\n        }\n        else {\n        \
    \    i = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    long\
    \ mid2 = n / 2;\n    while (i < n) {\n        if (arr[i] > max) {\n          \
    \  max = arr[i];\n        }\n        i++;\n    }\n    while (j < n) {\n      \
    \  if (arr[j] > max) {\n            max = arr[j];\n        }\n        j++;\n \
    \   }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < n) {\n        if (arr[j] > max)\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    while (i <\
    \ n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n  \
    \      i++;\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n       \
    \     max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n   \
    \     if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < n) {\n        if (arr[j] > max) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ n) {\n        if (arr[j] > max) {\n            max = arr[j];\n        }\n  \
    \      j++;\n    }\n    while (i < n) {\n        if (arr[i] > max) {\n       \
    \     max = arr[i];\n        }\n        i++;\n    }\n    while (j < n) {\n   \
    \     if (arr[j] > max) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < n) {\n        if (arr[j] > max)\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    while (i <\
    \ n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n  \
    \      i++;\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n       \
    \     max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n   \
    \     if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < n) {\n        if (arr[j] > max) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ n) {\n        if (arr[j] > max) {\n            \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpzyimz3.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmptpzyimz3.cpp:144:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  144 | int main() {\n     \
    \ |            ^\n/tmp/tmptpzyimz3.cpp:157:1: error: expected \u2018}\u2019 at\
    \ end of input\n  157 | }\n      | ^\n/tmp/tmptpzyimz3.cpp:140:19: note: to match\
    \ this \u2018{\u2019\n  140 |     while (j < n) {\n      |                   ^\n\
    /tmp/tmptpzyimz3.cpp:157:1: error: expected \u2018}\u2019 at end of input\n  157\
    \ | }\n      | ^\n/tmp/tmptpzyimz3.cpp:18:58: note: to match this \u2018{\u2019\
    \n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n      |\
    \                                                          ^\n/tmp/tmptpzyimz3.cpp:157:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  157 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx])\
    \ {\n            ans.push_back(arr[i]);\n            idx = i;\n        }\n   \
    \ }\n    ans.push_back(arr[idx]);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph47i19zx: /tmp/tmph47i19zx.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ res.push_back(max);\n    for (long i = index; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    res.push_back(max);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnf4ct2zg: /tmp/tmpnf4ct2zg.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5kc2i1p: /tmp/tmpx5kc2i1p.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095781
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq61qewoo.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpq61qewoo.cpp:29:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   29 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpq61qewoo.cpp:21:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   21 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(maxNum\
    \ < arr[i]) {\n            maxNum = arr[i];\n        }\n    }\n    max.push_back(maxNum);\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(maxNum < arr[i]) {\n \
    \           max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1g650abe: /tmp/tmp1g650abe.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9s3g8zep: /tmp/tmp9s3g8zep.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptkeb76w1: /tmp/tmptkeb76w1.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > maxNum){\n            maxNum = arr[i];\n        }\n    }\n    for(long i =\
    \ 0; i < k; i++){\n        max.push_back(maxNum);\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnk61qd9q: /tmp/tmpnk61qd9q.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long count = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans.clear();\n\
    \            ans.push_back(max);\n            count++;\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n            ans.clear();\n            ans.push_back(min);\n\
    \            count++;\n        }\n        if(arr[i] == max) {\n            ans.push_back(max);\n\
    \            count++;\n        }\n        if(arr[i] == min) {\n            ans.push_back(min);\n\
    \            count++;\n        }\n    }\n    if(count == k) {\n        ans.push_back(max);\n\
    \        ans.push_back(min);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6zy0gwv2: /tmp/tmp6zy0gwv2.cpp:54: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > maxNum){\n            maxNum = arr[i];\n        }\n    }\n    max.push_back(maxNum);\n\
    \    for(long i = 1; i < arr.size(); i++){\n        if(arr[i] > maxNum){\n   \
    \         max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw6de55w0: /tmp/tmpw6de55w0.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long max = 0;\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < k; i++) {\n        max = std::max(max, arr[i]);\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbujm_5jm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbujm_5jm.cpp:22:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   22 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbujm_5jm.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpbujm_5jm.cpp:22:35: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         max = std::max(max,\
    \ arr[i]);\n      |                                   ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbujm_5jm.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbujm_5jm.cpp:22:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         max\
    \ = std"
  stdout: ''
  timestamp: 1660095783
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tya1pmp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5tya1pmp.cpp:130:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  130 | }\n      | ^\n/tmp/tmp5tya1pmp.cpp:131:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  131 | int main() {\n      |            ^\n/tmp/tmp5tya1pmp.cpp:144:1: error:\
    \ expected \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmp5tya1pmp.cpp:123:42:\
    \ note: to match this \u2018{\u2019\n  123 |     for(long i = 0; i < arr.size();\
    \ i++) {\n      |                                          ^\n/tmp/tmp5tya1pmp.cpp:144:1:\
    \ error: expected \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmp5tya1pmp.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmp5tya1pmp.cpp:144:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  144 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660095789
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptkeb76w1: /tmp/tmptkeb76w1.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            ans.push_back(max);\n     \
    \       max = arr[i];\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3wpy208t: /tmp/tmp3wpy208t.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095790
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095786
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprqcd7ll5: /tmp/tmprqcd7ll5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660095784
