name: HumanEval_76_is_simple_power
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjl5b8pu3: /tmp/tmpjl5b8pu3.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, (n - 1) / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdlgu_67c: /tmp/tmpdlgu_67c.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv3keqr4s: /tmp/tmpv3keqr4s.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x % n == 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbrq_hmn7: /tmp/tmpbrq_hmn7.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp801a97c8: /tmp/tmp801a97c8.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpopm4qzmp: /tmp/tmpopm4qzmp.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmph2bbnlvd: /tmp/tmph2bbnlvd.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdn353x4m: /tmp/tmpdn353x4m.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int pow = 1;\n    while (n > pow) {\n\
    \        pow *= x;\n        ans++;\n    }\n    return ans == n;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmprudy3i62: /tmp/tmprudy3i62.cpp:27: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x <= 0)\n        return false;\n    if (x == 1)\n        return true;\n\
    \    if (x == 2)\n        return (x == 1);\n    if (x <= 1)\n        return false;\n\
    \    if (x == 3)\n        return (x == 1);\n    if (x <= 2)\n        return false;\n\
    \    if (x == 4)\n        return (x == 1);\n    if (x <= 3)\n        return false;\n\
    \    if (x == 5)\n        return (x == 1);\n    if (x <= 4)\n        return false;\n\
    \    if (x == 6)\n        return (x == 1);\n    if (x <= 5)\n        return false;\n\
    \    if (x == 7)\n        return (x == 1);\n    if (x <= 6)\n        return false;\n\
    \    if (x == 8)\n        return (x == 1);\n    if (x <= 7)\n        return false;\n\
    \    if (x == 9)\n        return (x == 1);\n    if (x <= 8)\n        return false;\n\
    \    if (x == 10)\n        return (x == 1);\n    if (x <= 9)\n        return false;\n\
    \    if (x == 11)\n        return (x == 1);\n    if (x <= 10)\n        return\
    \ false;\n    if (x == 12)\n        return (x == 1);\n    if (x <= 11)\n     \
    \   return false;\n    if (x == 13)\n        return (x == 1);\n    if (x <= 12)\n\
    \        return false;\n    if (x == 14)\n        return (x == 1);\n    if (x\
    \ <= 13)\n        return false;\n    if (x == 15)\n        return (x == 1);\n\
    \    if (x <= 14)\n        return false;\n    if (x == 16)\n        return (x\
    \ == 1);\n    if (x <= 15)\n        return false;\n    if (x == 17)\n        return\
    \ (x == 1);\n    if (x <= 16)\n        return false;\n    if (x == 18)\n     \
    \   return (x == 1);\n    if (x <= 17)\n        return false;\n    if (x == 19)\n\
    \        return (x == 1);\n    if (x <= 18)\n        return false;\n    if (x\
    \ == 20)\n        return (x == 1);\n    if (x <= 19)\n        return false;\n\
    \    if (x == 21)\n        return (x == 1);\n    if (x <= 20)\n        return\
    \ false;\n    if (x == 22)\n        return (x == 1);\n    if (x <= 21)\n     \
    \   return false;\n    if (x == 23)\n        return (x == 1);\n    if (x <= 22)\n\
    \        return false;\n    if (x == 24)\n        return (x == 1);\n    if (x\
    \ <= 23)\n        return false;\n    if (x == 25)\n        return (x == 1);\n\
    \    if (x <= 24)\n        return false;\n    if (x == 26)\n        return (x\
    \ == 1);\n    if (x <= 25)\n        return false;\n    if (x == 27)\n        return\
    \ (x == 1);\n    if (x <= 26)\n        return false;\n    if (x == 28)\n     \
    \   return (x == 1);\n    if (x <= 27)\n        return false;\n    if (x == 29)\n\
    \        return (x == 1);\n    if (x <= 28)\n        return false;\n    if (x\
    \ == 30)\n        return (x == 1);\n    if (x <= 29)\n        return false;\n\
    \    if (x == 31)\n        return (x == 1);\n    if (x <= 30)\n        return\
    \ false;\n    if (x == 32)\n        return (x == 1);\n    if (x <= 31)\n     \
    \   return false;\n    if (x == 33)\n        return \n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpme7o9tcp.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpme7o9tcp.cpp:148:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  148 | }\n      | ^\n/tmp/tmpme7o9tcp.cpp:147:15:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  147 |         return\n\
    \      |               ^\n      |               ;\n  148 | }\n      | ~      \
    \        \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int temp = x;\n    while(temp != 0) {\n\
    \        ans *= temp;\n        temp /= n;\n    }\n    return ans == x;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq9d7pza7: /tmp/tmpq9d7pza7.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9r7y7f7z: /tmp/tmp9r7y7f7z.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long ans=1;\n    for(int i=0;i<n;i++){\n        ans*=x;\n\
    \    }\n    return ans==x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpr6h8dgsw: /tmp/tmpr6h8dgsw.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn8600zvq: /tmp/tmpn8600zvq.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  if (n % 7 == 0)\n        return is_simple_power(x, n / 7);\n    if (n % 11\
    \ == 0)\n        return is_simple_power(x, n / 11);\n    if (n % 13 == 0)\n  \
    \      return is_simple_power(x, n / 13);\n    if (n % 17 == 0)\n        return\
    \ is_simple_power(x, n / 17);\n    if (n % 19 == 0)\n        return is_simple_power(x,\
    \ n / 19);\n    if (n % 23 == 0)\n        return is_simple_power(x, n / 23);\n\
    \    if (n % 29 == 0)\n        return is_simple_power(x, n / 29);\n    if (n %\
    \ 37 == 0)\n        return is_simple_power(x, n / 37);\n    if (n % 53 == 0)\n\
    \        return is_simple_power(x, n / 53);\n    if (n % 67 == 0)\n        return\
    \ is_simple_power(x, n / 67);\n    if (n % 83 == 0)\n        return is_simple_power(x,\
    \ n / 83);\n    if (n % 99 == 0)\n        return is_simple_power(x, n / 99);\n\
    \    if (n % 111 == 0)\n        return is_simple_power(x, n / 111);\n    if (n\
    \ % 131 == 0)\n        return is_simple_power(x, n / 131);\n    if (n % 151 ==\
    \ 0)\n        return is_simple_power(x, n / 151);\n    if (n % 171 == 0)\n   \
    \     return is_simple_power(x, n / 171);\n    if (n % 191 == 0)\n        return\
    \ is_simple_power(x, n / 191);\n    if (n % 231 == 0)\n        return is_simple_power(x,\
    \ n / 231);\n    if (n % 291 == 0)\n        return is_simple_power(x, n / 291);\n\
    \    if (n % 371 == 0)\n        return is_simple_power(x, n / 371);\n    if (n\
    \ % 531 == 0)\n        return is_simple_power(x, n / 531);\n    if (n % 671 ==\
    \ 0)\n        return is_simple_power(x, n / 671);\n    if (n % 831 == 0)\n   \
    \     return is_simple_power(x, n / 831);\n    if (n % 991 == 0)\n        return\
    \ is_simple_power(x, n / 991);\n    if (n % 1131 == 0)\n        return is_simple_power(x,\
    \ n / 1131);\n    if (n % 1331 == 0)\n        return is_simple_power(x, n / 1331);\n\
    \    if (n % 1531 == 0)\n        return is_simple_power(x, n / 1531);\n    if\
    \ (n % 1731 == 0)\n        return is_simple_power(x, n / 1731);\n    if (\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp63y_jsei.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp63y_jsei.cpp:83:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmp63y_jsei.cpp:82:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   82 |     if (\n\
    \      |        ~^\n      |         )\n   83 | }\n      | ~        \n/tmp/tmp63y_jsei.cpp:83:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   83 | }\n \
    \     | ^\n/tmp/tmp63y_jsei.cpp:83:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans=1;\n    for(int i=1;i<=n;i++){\n     \
    \   ans*=x;\n    }\n    return ans==x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo138zwnu: /tmp/tmpo138zwnu.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg_li4dnl: /tmp/tmpg_li4dnl.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp850tnrb9: /tmp/tmp850tnrb9.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 2 == 1)\n        return is_simple_power(x\
    \ * x, n / 2);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe5dz6akp: /tmp/tmpe5dz6akp.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ remainder;\n    while (n > 1) {\n        remainder = n % 2;\n        power =\
    \ power * x;\n        n = remainder;\n        result = result * power;\n    }\n\
    \    if (n == 1) {\n        return result == x;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmsiyd1oq: /tmp/tmpmsiyd1oq.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv63iytpt: /tmp/tmpv63iytpt.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxarifish: /tmp/tmpxarifish.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9yyhdvuj: /tmp/tmp9yyhdvuj.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7t84uj1s: /tmp/tmp7t84uj1s.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans = 1;\n    long long temp = 1;\n    long\
    \ long power = 1;\n    long long temp2 = 1;\n    long long power2 = 1;\n    long\
    \ long temp3 = 1;\n    long long power3 = 1;\n    long long temp4 = 1;\n    long\
    \ long power4 = 1;\n    long long temp5 = 1;\n    long long power5 = 1;\n    long\
    \ long temp6 = 1;\n    long long power6 = 1;\n    long long temp7 = 1;\n    long\
    \ long power7 = 1;\n    long long temp8 = 1;\n    long long power8 = 1;\n    long\
    \ long temp9 = 1;\n    long long power9 = 1;\n    long long temp10 = 1;\n    long\
    \ long power10 = 1;\n    long long temp11 = 1;\n    long long power11 = 1;\n \
    \   long long temp12 = 1;\n    long long power12 = 1;\n    long long temp13 =\
    \ 1;\n    long long power13 = 1;\n    long long temp14 = 1;\n    long long power14\
    \ = 1;\n    long long temp15 = 1;\n    long long power15 = 1;\n    long long temp16\
    \ = 1;\n    long long power16 = 1;\n    long long temp17 = 1;\n    long long power17\
    \ = 1;\n    long long temp18 = 1;\n    long long power18 = 1;\n    long long temp19\
    \ = 1;\n    long long power19 = 1;\n    long long temp20 = 1;\n    long long power20\
    \ = 1;\n    long long temp21 = 1;\n    long long power21 = 1;\n    long long temp22\
    \ = 1;\n    long long power22 = 1;\n    long long temp23 = 1;\n    long long power23\
    \ = 1;\n    long long temp24 = 1;\n    long long power24 = 1;\n    long long temp25\
    \ = 1;\n    long long power25 = 1;\n    long long temp26 = 1;\n    long long power26\
    \ = 1;\n    long long temp27 = 1;\n    long long power27 = 1;\n    long long temp28\
    \ = 1;\n    long long power28 = 1;\n    long long temp29 = 1;\n    long long power29\
    \ = 1;\n    long long temp30 = 1;\n    long long power30 = 1;\n    long long temp31\
    \ = 1;\n    long long power31 = 1;\n    long long temp32 = 1;\n    long long power32\
    \ = 1;\n    long long temp33 = 1;\n    long long power33 = 1;\n    long long temp34\
    \ = 1;\n    long long power34 = 1;\n    long long temp35 = 1;\n    long long power35\
    \ = 1;\n    long long temp36 = 1;\n    long long power36 = 1;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3fmp7nzn: /tmp/tmp3fmp7nzn.cpp:91: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy0sp2h0m: /tmp/tmpy0sp2h0m.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x * x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, n / 2) || is_simple_power(x * x, n / 2);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfyk3_2u8: /tmp/tmpfyk3_2u8.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n       \
    \ return false;\n    if (n % 5 == 0)\n        return false;\n    if (n % 7 ==\
    \ 0)\n        return false;\n    if (n % 11 == 0)\n        return false;\n   \
    \ if (n % 13 == 0)\n        return false;\n    if (n % 17 == 0)\n        return\
    \ false;\n    if (n % 19 == 0)\n        return false;\n    if (n % 23 == 0)\n\
    \        return false;\n    if (n % 29 == 0)\n        return false;\n    if (n\
    \ % 31 == 0)\n        return false;\n    if (n % 37 == 0)\n        return false;\n\
    \    if (n % 41 == 0)\n        return false;\n    if (n % 47 == 0)\n        return\
    \ false;\n    if (n % 53 == 0)\n        return false;\n    if (n % 59 == 0)\n\
    \        return false;\n    if (n % 61 == 0)\n        return false;\n    if (n\
    \ % 67 == 0)\n        return false;\n    if (n % 71 == 0)\n        return false;\n\
    \    if (n % 73 == 0)\n        return false;\n    if (n % 79 == 0)\n        return\
    \ false;\n    if (n % 83 == 0)\n        return false;\n    if (n % 89 == 0)\n\
    \        return false;\n    if (n % 97 == 0)\n        return false;\n    if (n\
    \ % 101 == 0)\n        return false;\n    if (n % 103 == 0)\n        return false;\n\
    \    if (n % 107 == 0)\n        return false;\n    if (n % 111 == 0)\n       \
    \ return false;\n    if (n % 117 == 0)\n        return false;\n    if (n % 121\
    \ == 0)\n        return false;\n    if (n % 127 == 0)\n        return false;\n\
    \    if (n % 131 == 0)\n        return false;\n    if (n % 137 == 0)\n       \
    \ return false;\n    if (n % 141 == 0)\n        return false;\n    if (n % 147\
    \ == 0)\n        return false;\n    if (n % 151 == 0)\n        return false;\n\
    \    if (n % 157 == 0)\n        return false;\n    if (n % 161 == 0)\n       \
    \ return false;\n    if (n % 167 == 0)\n        return false;\n    if (n % 171\
    \ == 0)\n        return false;\n    if (n % 177 == 0)\n        return false;\n\
    \    if (n % 181 == 0)\n        return false;\n    if (n % 187 == 0)\n       \
    \ return false;\n    if (n % 191 == 0)\n        return false;\n    if (n % 197\
    \ == 0)\n        return false;\n    if (n % 201 == 0)\n        return false;\n\
    \    if (n % 207 == 0)\n        return false;\n    if (n % 211 == 0)\n       \
    \ return false;\n    if (n % 217 == 0)\n        return false;\n    if (n % 221\
    \ == 0)\n        return false;\n    if (n % 227 == 0)\n        return false;\n\
    \    if (n % 231 == 0)\n        return false;\n    if (n % 237 == 0)\n       \
    \ return false;\n    if (n % 241 == 0)\n        return false;\n    if (n % 247\
    \ == 0)\n        return false;\n    if (n % 251 == 0)\n        return false;\n\
    \    if (n % 257 == 0)\n        return false;\n    if (n % 261 == 0)\n       \
    \ return false;\n    if (n % 267 == 0)\n        return false;\n    if (n % 271\
    \ == 0)\n        return false;\n    if (n % 277\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzik0fx5d.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpzik0fx5d.cpp:140:16: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n  140 |     if (n % 277\n      |        ~      \
    \ ^\n      |                )\n  141 | }\n      | ~               \n/tmp/tmpzik0fx5d.cpp:141:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  141 | }\n \
    \     | ^\n/tmp/tmpzik0fx5d.cpp:141:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  141 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    if (n == 1)\n        return true;\n    if (n == 0)\n\
    \        return false;\n    if (n == -1)\n        return false;\n    if (n % 2\
    \ == 0)\n        return false;\n    if (n % 3 == 0)\n        return false;\n \
    \   if (n % 5 == 0)\n        return false;\n    if (n % 7 == 0)\n        return\
    \ false;\n    if (n % 11 == 0)\n        return false;\n    if (n % 13 == 0)\n\
    \        return false;\n    if (n % 17 == 0)\n        return false;\n    if (n\
    \ % 19 == 0)\n        return false;\n    if (n % 23 == 0)\n        return false;\n\
    \    if (n % 29 == 0)\n        return false;\n    if (n % 31 == 0)\n        return\
    \ false;\n    if (n % 37 == 0)\n        return false;\n    if (n % 41 == 0)\n\
    \        return false;\n    if (n % 47 == 0)\n        return false;\n    if (n\
    \ % 53 == 0)\n        return false;\n    if (n % 59 == 0)\n        return false;\n\
    \    if (n % 61 == 0)\n        return false;\n    if (n % 67 == 0)\n        return\
    \ false;\n    if (n % 71 == 0)\n        return false;\n    if (n % 73 == 0)\n\
    \        return false;\n    if (n % 79 == 0)\n        return false;\n    if (n\
    \ % 83 == 0)\n        return false;\n    if (n % 89 == 0)\n        return false;\n\
    \    if (n % 97 == 0)\n        return false;\n    if (n % 101 == 0)\n        return\
    \ false;\n    if (n % 103 == 0)\n        return false;\n    if (n % 107 == 0)\n\
    \        return false;\n    if (n % 111 == 0)\n        return false;\n    if (n\
    \ % 113 == 0)\n        return false;\n    if (n % 117 == 0)\n        return false;\n\
    \    if (n % 121 == 0)\n        return false;\n    if (n % 123 == 0)\n       \
    \ return false;\n    if (n % 127 == 0)\n        return false;\n    if (n % 131\
    \ == 0)\n        return false;\n    if (n % 133 == 0)\n        return false;\n\
    \    if (n % 137 == 0)\n        return false;\n    if (n % 141 == 0)\n       \
    \ return false;\n    if (n % 143 == 0)\n        return false;\n    if (n % 147\
    \ == 0)\n        return false;\n    if (n % 151 == 0)\n        return false;\n\
    \    if (n % 153 == 0)\n        return false;\n    if (n % 157 == 0)\n       \
    \ return false;\n    if (n % 161 == 0)\n        return false;\n    if (n % 163\
    \ == 0)\n        return false;\n    if (n % 167 == 0)\n        return false;\n\
    \    if (n % 171 == 0)\n        return false;\n    if (n % 173 == 0)\n       \
    \ return false;\n    if (n % 177 == 0)\n        return false;\n    if (n % 181\
    \ == 0)\n        return false;\n    if (n % 183 == 0)\n        return false;\n\
    \    if (n % 187 == 0)\n        return false;\n    if (n % 191 == 0)\n       \
    \ return false;\n    if (n % 193 == 0)\n        return false;\n    if (n % 197\
    \ == 0)\n        return false;\n    if (n % 201 == 0)\n        return false;\n\
    \    if (n % 203 == 0)\n        return false;\n    if (n % 207 == 0)\n       \
    \ return false;\n    if (n % 211 == 0)\n        return false;\n    if (n % 213\
    \ == 0)\n        return false;\n    if (n % 217 == 0)\n        return false;\n\
    \    if (n % 221 == 0)\n        return false;\n    if (n % 22\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqw46zw2.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpkqw46zw2.cpp:143:15: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n  143 |     if (n % 22\n      |        ~      ^\n\
    \      |               )\n  144 | }\n      | ~              \n/tmp/tmpkqw46zw2.cpp:144:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  144 | }\n \
    \     | ^\n/tmp/tmpkqw46zw2.cpp:144:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  144 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++){\n\
    \        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg2ap2zhb: /tmp/tmpg2ap2zhb.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long power = 1;\n    while (power < n) {\n   \
    \     ans *= x;\n        power *= x;\n    }\n    return ans == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpydta802b: /tmp/tmpydta802b.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long a = x;\n    long long b = n;\n    while (a\
    \ != 0) {\n        if (a % b == 0) {\n            ans = ans * b;\n        }\n\
    \        a = a / b;\n        b = b;\n    }\n    if (ans == x) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    long ans = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long res = 1;\n    long temp = 1;\n    long res\
    \ = 1;\n    long power = 1;\n    long \n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx738yu8y.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpx738yu8y.cpp:19:10: error: redeclaration of \u2018\
    long int res\u2019\n   19 |     long res = 1;\n      |          ^~~\n/tmp/tmpx738yu8y.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpx738yu8y.cpp:20:10: error: redeclaration\
    \ of \u2018long int temp\u2019\n   20 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpx738yu8y.cpp:16:10: note: \u2018long int temp\u2019 previously declared\
    \ here\n   16 |     long temp = 1;\n      |          ^~~~\n/tmp/tmpx738yu8y.cpp:21:10:\
    \ error: redeclaration of \u2018long int res\u2019\n   21 |     long res = 1;\n\
    \      |          ^~~\n/tmp/tmpx738yu8y.cpp:17:10: note: \u2018long int res\u2019\
    \ previously declared here\n   17 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpx738yu8y.cpp:22:10: error: redeclaration of \u2018long int power\u2019\
    \n   22 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpx738yu8y.cpp:18:10:\
    \ note: \u2018long int power\u2019 previously declared here\n   18 |     long\
    \ power = 1;\n      |          ^~~~~\n/tmp/tmpx738yu8y.cpp:23:10: error: redeclaration\
    \ of \u2018long int res\u2019\n   23 |     long res = 1;\n      |          ^~~\n\
    /tmp/tmpx738yu8y.cpp:17:10: note: \u2018long int res\u2019 previously declared\
    \ here\n   17 |     long res = 1;\n      |          ^~~\n/tmp/tmpx738yu8y.cpp:24:10:\
    \ error: redeclaration of \u2018long int temp\u2019\n   24 |     long temp = 1;\n\
    \      |          ^~~~\n/tmp/tmpx738yu8y.cpp:16:10: note: \u2018long int temp\u2019\
    \ previously declared here\n   16 |     long temp = 1;\n      |          ^~~~\n\
    /tmp/tmpx738yu8y.cpp:25:10: error: redeclaration of \u2018long int res\u2019\n\
    \   25 |     long res = 1;\n      |          ^~~\n/tmp/tmpx738yu8y.cpp:17:10:\
    \ note: \u2018long int res\u2019 previously declared here\n   17 |     long res\
    \ = 1;\n      |          ^~~\n/tmp/tmpx738yu8y.cpp:26:10: error: redeclaration\
    \ of \u2018long int power\u2019\n   26 |     long power = 1;\n      |        \
    \  ^~~~~\n/tmp/tmpx738yu8y.cpp:18:10: note: \u2018long int power\u2019 previously\
    \ declared here\n   18 |     long power = 1;\n      |          ^~~~~\n/tmp/tmpx738yu8y.cpp:27:10:\
    \ error: redeclaration of \u2018l"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1ki39uvs: /tmp/tmp1ki39uvs.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return\
    \ false;\n    long ans = 1;\n    long temp = 1;\n    while (temp <= n) {\n   \
    \     ans *= temp;\n        temp += 2;\n    }\n    if (ans == x) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2rp6t07t: /tmp/tmp2rp6t07t.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgk7g6zuq: /tmp/tmpgk7g6zuq.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 2 == 1)\n        return is_simple_power(x\
    \ * x, n / 2);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpldemypy1: /tmp/tmpldemypy1.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp2 = 1;\n    long long int power2 = 1;\n    long\
    \ long int temp3 = 1;\n    long long int power3 = 1;\n    long long int temp4\
    \ = 1;\n    long long int power4 = 1;\n    long long int temp5 = 1;\n    long\
    \ long int power5 = 1;\n    long long int temp6 = 1;\n    long long int power6\
    \ = 1;\n    long long int temp7 = 1;\n    long long int power7 = 1;\n    long\
    \ long int temp8 = 1;\n    long long int power8 = 1;\n    long long int temp9\
    \ = 1;\n    long long int power9 = 1;\n    long long int temp10 = 1;\n    long\
    \ long int power10 = 1;\n    long long int temp11 = 1;\n    long long int power11\
    \ = 1;\n    long long int temp12 = 1;\n    long long int power12 = 1;\n    long\
    \ long int temp13 = 1;\n    long long int power13 = 1;\n    long long int temp14\
    \ = 1;\n    long long int power14 = 1;\n    long long int temp15 = 1;\n    long\
    \ long int power15 = 1;\n    long long int temp16 = 1;\n    long long int power16\
    \ = 1;\n    long long int temp17 = 1;\n    long long int power17 = 1;\n    long\
    \ long int temp18 = 1;\n    long long int power18 = 1;\n    long long int temp19\
    \ = 1;\n    long long int power19 = 1;\n    long long int temp20 = 1;\n    long\
    \ long int power20 = 1;\n    long long int temp21 = 1;\n    long long int power21\
    \ = 1;\n    long long int temp22 = 1;\n    long long int power22 = 1;\n    long\
    \ long int temp23 = 1;\n    long long int power23 = 1;\n    long long int temp24\
    \ = 1;\n    long long int power24 = 1;\n    long long int temp25 = 1;\n    long\
    \ long int power25 = 1;\n    long long int temp26 = 1;\n    long long int power26\
    \ = 1;\n    long long int temp27 = 1;\n    long long int power27 = 1;\n    long\
    \ long int temp28 = 1;\n    long long int power28 = 1;\n    long long int temp29\
    \ = 1;\n    long long int power29 = 1;\n    long long int temp30 = 1;\n    long\
    \ long int power30 = 1;\n    long long int temp31 = 1;\n    long long int power31\
    \ = 1;\n    long long int temp32 = 1;\n    long \n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xqncnmn.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp7xqncnmn.cpp:79:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmp7xqncnmn.cpp:79:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppk5r6zi3: /tmp/tmppk5r6zi3.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqbwc79_p: /tmp/tmpqbwc79_p.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    return is_simple_power(x, n / 2) && is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsnkr7r6y: /tmp/tmpsnkr7r6y.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2vvbk7x5: /tmp/tmp2vvbk7x5.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5vgdf9m9: /tmp/tmp5vgdf9m9.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n <= 0)\n        return false;\n    if (x == 1)\n        return true;\n\
    \    if (x == 0)\n        return false;\n    if (x == -1)\n        return false;\n\
    \    if (x == -2)\n        return false;\n    if (x == -3)\n        return false;\n\
    \    if (x == -4)\n        return false;\n    if (x == -5)\n        return false;\n\
    \    if (x == -6)\n        return false;\n    if (x == -7)\n        return false;\n\
    \    if (x == -8)\n        return false;\n    if (x == -9)\n        return false;\n\
    \    if (x == -10)\n        return false;\n    if (x == -11)\n        return false;\n\
    \    if (x == -12)\n        return false;\n    if (x == -13)\n        return false;\n\
    \    if (x == -14)\n        return false;\n    if (x == -15)\n        return false;\n\
    \    if (x == -16)\n        return false;\n    if (x == -17)\n        return false;\n\
    \    if (x == -18)\n        return false;\n    if (x == -19)\n        return false;\n\
    \    if (x == -20)\n        return false;\n    if (x == -21)\n        return false;\n\
    \    if (x == -22)\n        return false;\n    if (x == -23)\n        return false;\n\
    \    if (x == -24)\n        return false;\n    if (x == -25)\n        return false;\n\
    \    if (x == -26)\n        return false;\n    if (x == -27)\n        return false;\n\
    \    if (x == -28)\n        return false;\n    if (x == -29)\n        return false;\n\
    \    if (x == -30)\n        return false;\n    if (x == -31)\n        return false;\n\
    \    if (x == -32)\n        return false;\n    if (x == -33)\n        return false;\n\
    \    if (x == -34)\n        return false;\n    if (x == -35)\n        return false;\n\
    \    if (x == -36)\n        return false;\n    if (x == -37)\n        return false;\n\
    \    if (x == -38)\n        return false;\n    if (x == -39)\n        return false;\n\
    \    if (x == -40)\n        return false;\n    if (x == -41)\n        return false;\n\
    \    if (x == -42)\n        return false;\n    if (x == -43)\n        return false;\n\
    \    if (x == -44)\n        return false;\n    if (x == -45)\n        return false;\n\
    \    if (x == -46)\n        return false;\n    if (x == -47)\n        return false;\n\
    \    if (x == -48)\n        return false;\n    if (x == -49)\n        return false;\n\
    \    if (x == -50)\n        return false;\n    if (x == -51)\n        return false;\n\
    \    if (x == -52)\n        return false;\n    if (x == -53)\n        return false;\n\
    \    if (x == -54)\n        return false;\n    if (x == -55)\n        return false;\n\
    \    if (x == -56)\n        return false;\n    if (x == -57)\n        return false;\n\
    \    if (x == -58)\n        return false;\n    if (x == -59)\n        return false;\n\
    \    if (x == -60)\n        return false;\n    if (x == -61)\n        return false;\n\
    \    if (x == -63)\n        return false;\n    if (x == -64)\n        return false;\n\
    \    if (x == -65)\n        return false;\n    if (x == -66)\n        return false;\n\
    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk8c_cuj4: /tmp/tmpk8c_cuj4.cpp:158: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_wu8bks0: /tmp/tmp_wu8bks0.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    long ans=1;\n    for(int i=1;i<=n;i++){\n    \
    \    ans*=x;\n    }\n    if(ans==x){\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoakeq2ew: /tmp/tmpoakeq2ew.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5du2300p: /tmp/tmp5du2300p.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int power = 1;\n    long long int result =\
    \ 1;\n    while(n > 0){\n        power *= x;\n        result *= power;\n     \
    \   n--;\n    }\n    return result == x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7072p2ye: /tmp/tmp7072p2ye.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0t6y0c6a: /tmp/tmp0t6y0c6a.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsxcp_27y: /tmp/tmpsxcp_27y.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwq07rsf9: /tmp/tmpwq07rsf9.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (x == 0)\n        return false;\n\
    \    if (n == 0)\n        return false;\n    if (n == 1)\n        return true;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpocuzlvcb: /tmp/tmpocuzlvcb.cpp:33: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int result = 1;\n    for(int i = 1; i <= n; i++) {\n        result\
    \ *= x;\n    }\n    return result == x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx5vvfec1: /tmp/tmpx5vvfec1.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int res = 1;\n\
    \    long long int power = 1;\n    long long int temp = 1;\n    long long int\
    \ temp2 = 1;\n    long long int temp3 = 1;\n    long long int temp4 = 1;\n   \
    \ long long int temp5 = 1;\n    long long int temp6 = 1;\n    long long int temp7\
    \ = 1;\n    long long int temp8 = 1;\n    long long int temp9 = 1;\n    long long\
    \ int temp10 = 1;\n    long long int temp11 = 1;\n    long long int temp12 = 1;\n\
    \    long long int temp13 = 1;\n    long long int temp14 = 1;\n    long long int\
    \ temp15 = 1;\n    long long int temp16 = 1;\n    long long int temp17 = 1;\n\
    \    long long int temp18 = 1;\n    long long int temp19 = 1;\n    long long int\
    \ temp20 = 1;\n    long long int temp21 = 1;\n    long long int temp22 = 1;\n\
    \    long long int temp23 = 1;\n    long long int temp24 = 1;\n    long long int\
    \ temp25 = 1;\n    long long int temp26 = 1;\n    long long int temp27 = 1;\n\
    \    long long int temp28 = 1;\n    long long int temp29 = 1;\n    long long int\
    \ temp30 = 1;\n    long long int temp31 = 1;\n    long long int temp32 = 1;\n\
    \    long long int temp33 = 1;\n    long long int temp34 = 1;\n    long long int\
    \ temp35 = 1;\n    long long int temp36 = 1;\n    long long int temp37 = 1;\n\
    \    long long int temp38 = 1;\n    long long int temp39 = 1;\n    long long int\
    \ temp40 = 1;\n    long long int temp41 = 1;\n    long long int temp42 = 1;\n\
    \    long long int temp43 = 1;\n    long long int temp44 = 1;\n    long long int\
    \ temp45 = 1;\n    long long int temp46 = 1;\n    long long int temp47 = 1;\n\
    \    long long int temp48 = 1;\n    long long int temp49 = 1;\n    long long int\
    \ temp50 = 1;\n    long long int temp51 = 1;\n    long long int temp52 = 1;\n\
    \    long long int temp53 = 1;\n    long long int temp54 = 1;\n    long long int\
    \ temp55 = 1;\n    long long int temp56 = 1;\n    long long int temp57 = 1;\n\
    \    long long int temp58 = 1;\n    long long int temp59 = 1;\n    long long int\
    \ temp60 = 1;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbun65uzn: /tmp/tmpbun65uzn.cpp:82: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x * x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, n / 2) && is_simple_power(x, n / 2);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1p7n043z: /tmp/tmp1p7n043z.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i <= n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpssapamuz: /tmp/tmpssapamuz.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx3i1ggrz: /tmp/tmpx3i1ggrz.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwnybsj9q: /tmp/tmpwnybsj9q.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe43_x9p8: /tmp/tmpe43_x9p8.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpd5xtf2uy: /tmp/tmpd5xtf2uy.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x == 0)\n\
    \        return false;\n    long y = 1;\n    for (long i = 1; i < n; i++)\n  \
    \      y = y * x;\n    return y == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn441lxup: /tmp/tmpn441lxup.cpp:32: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvuwd8511: /tmp/tmpvuwd8511.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpos14shae: /tmp/tmpos14shae.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphm0rxbrv: /tmp/tmphm0rxbrv.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8x730lo9: /tmp/tmp8x730lo9.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyw12rzxq: /tmp/tmpyw12rzxq.cpp:31: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 0) return false;\n    if (n == 1) return\
    \ true;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n   \
    \ if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    if (n\
    \ % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if (n % 13\
    \ == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n % 19 == 0)\
    \ return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 == 0) return\
    \ false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return false;\n\
    \    if (n % 41) == 0) return false;\n    if (n % 43) == 0) return false;\n  \
    \  if (n % 47) == 0) return false;\n    if (n % 53) == 0) return false;\n    if\
    \ (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n    if (n\
    \ % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n    if (n %\
    \ 73) == 0) return false;\n    if (n % 79) == 0) return false;\n    if (n % 83)\
    \ == 0) return false;\n    if (n % 89) == 0) return false;\n    if (n % 97) ==\
    \ 0) return false;\n    if (n % 103) == 0) return false;\n    if (n % 109) ==\
    \ 0) return false;\n    if (n % 113) == 0) return false;\n    if (n % 127) ==\
    \ 0) return false;\n    if (n % 131) == 0) return false;\n    if (n % 137) ==\
    \ 0) return false;\n    if (n % 141) == 0) return false;\n    if (n % 147) ==\
    \ 0) return false;\n    if (n % 151) == 0) return false;\n    if (n % 157) ==\
    \ 0) return false;\n    if (n % 161) == 0) return false;\n    if (n % 167) ==\
    \ 0) return false;\n    if (n % 173) == 0) return false;\n    if (n % 179) ==\
    \ 0) return false;\n    if (n % 183) == 0) return false;\n    if (n % 189) ==\
    \ 0) return false;\n    if (n % 193) == 0) return false;\n    if (n % 197) ==\
    \ 0) return false;\n    if (n % 201) == 0) return false;\n    if (n % 207) ==\
    \ 0) return false;\n    if (n % 211) == 0) return false;\n    if (n % 215) ==\
    \ 0) return false;\n    if (n % 217) == 0) return false;\n    if (n % 221) ==\
    \ 0) return false;\n    if (n % 227) == 0) return false;\n    if (n % 231) ==\
    \ 0) return false;\n    if (n % 237) == 0) return false;\n    if (n % 241) ==\
    \ 0) return false;\n    if (n % 247) == 0) return false;\n    if (n % 251) ==\
    \ 0) return false;\n    if (n % 257) == 0) return false;\n    if (n % 263) ==\
    \ 0) return false;\n    if (n % 269) == 0) return false;\n    if (n % 273) ==\
    \ 0) return false;\n    if (n % 279) == 0) return false;\n    if (n % 283\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzza1u4lw.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpzza1u4lw.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpzza1u4lw.cpp:42:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 97) == 0) return false;\n \
    \     |              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1bqbabc3: /tmp/tmp1bqbabc3.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4_w7cgwl: /tmp/tmp4_w7cgwl.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp53wyzf2c: /tmp/tmp53wyzf2c.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgp9dsos8: /tmp/tmpgp9dsos8.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (x == 1) return\
    \ true;\n    if (x % n == 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8u4wiueq: /tmp/tmp8u4wiueq.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmph90wi3y9: /tmp/tmph90wi3y9.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long i = 1;\n    while (i <= n) {\n        ans\
    \ *= x;\n        i++;\n    }\n    return ans == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7be88xgp: /tmp/tmp7be88xgp.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy4e4ucqe: /tmp/tmpy4e4ucqe.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu37m86w0: /tmp/tmpu37m86w0.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ (x == 1);\n    if (n == 3) return (x == 1);\n    if (n == 4) return (x == 1);\n\
    \    if (n == 5) return (x == 1);\n    if (n == 6) return (x == 1);\n    if (n\
    \ == 7) return (x == 1);\n    if (n == 8) return (x == 1);\n    if (n == 9) return\
    \ (x == 1);\n    if (n == 10) return (x == 1);\n    if (n == 11) return (x ==\
    \ 1);\n    if (n == 12) return (x == 1);\n    if (n == 13) return (x == 1);\n\
    \    if (n == 14) return (x == 1);\n    if (n == 15) return (x == 1);\n    if\
    \ (n == 16) return (x == 1);\n    if (n == 17) return (x == 1);\n    if (n ==\
    \ 18) return (x == 1);\n    if (n == 19) return (x == 1);\n    if (n == 20) return\
    \ (x == 1);\n    if (n == 21) return (x == 1);\n    if (n == 22) return (x ==\
    \ 1);\n    if (n == 23) return (x == 1);\n    if (n == 24) return (x == 1);\n\
    \    if (n == 25) return (x == 1);\n    if (n == 26) return (x == 1);\n    if\
    \ (n == 27) return (x == 1);\n    if (n == 28) return (x == 1);\n    if (n ==\
    \ 29) return (x == 1);\n    if (n == 30) return (x == 1);\n    if (n == 31) return\
    \ (x == 1);\n    if (n == 32) return (x == 1);\n    if (n == 33) return (x ==\
    \ 1);\n    if (n == 34) return (x == 1);\n    if (n == 35) return (x == 1);\n\
    \    if (n == 36) return (x == 1);\n    if (n == 37) return (x == 1);\n    if\
    \ (n == 38) return (x == 1);\n    if (n == 39) return (x == 1);\n    if (n ==\
    \ 40) return (x == 1);\n    if (n == 41) return (x == 1);\n    if (n == 42) return\
    \ (x == 1);\n    if (n == 43) return (x == 1);\n    if (n == 44) return (x ==\
    \ 1);\n    if (n == 45) return (x == 1);\n    if (n == 46) return (x == 1);\n\
    \    if (n == 47) return (x == 1);\n    if (n == 48) return (x == 1);\n    if\
    \ (n == 49) return (x == 1);\n    if (n == 51) return (x == 1);\n    if (n ==\
    \ 52) return (x == 1);\n    if (n == 53) return (x == 1);\n    if (n == 54) return\
    \ (x == 1);\n    if (n == 55) return (x == 1);\n    if (n == 56) return (x ==\
    \ 1);\n    if (n == 57) return (x == 1);\n    if (n == 58) return (x == 1);\n\
    \    if (n == 59) return (x == 1);\n    if (n == 61) return (x == 1);\n    if\
    \ (n == 62) return (x == 1);\n    if (n == 63) return (x == 1);\n    if (n ==\
    \ 64) return (x == 1);\n    if (n == 65) return (x\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfe7l3p37.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpfe7l3p37.cpp:77:27: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   77 |     if (n == 65) return (x\n      |    \
    \                     ~ ^\n      |                           )\n   78 | }\n  \
    \    | ~                          \n/tmp/tmpfe7l3p37.cpp:77:27: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   77 |     if (n == 65) return (x\n\
    \      |                           ^\n      |                           ;\n  \
    \ 78 | }\n      | ~                          \n/tmp/tmpfe7l3p37.cpp:78:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   78 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe7i3urfn: /tmp/tmpe7i3urfn.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int power = 1;\n    long long int result =\
    \ 1;\n    long long int power = 1;\n    long long int result = 1;\n    long long\
    \ int power = 1;\n    long long int result = 1;\n    long long int power = 1;\n\
    \    long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int \n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplyuixn0d.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmplyuixn0d.cpp:17:19: error: redeclaration of \u2018\
    long long int power\u2019\n   17 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmplyuixn0d.cpp:15:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   15 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmplyuixn0d.cpp:18:19: error: redeclaration of \u2018\
    long long int result\u2019\n   18 |     long long int result = 1;\n      |   \
    \                ^~~~~~\n/tmp/tmplyuixn0d.cpp:16:19: note: \u2018long long int\
    \ result\u2019 previously declared here\n   16 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplyuixn0d.cpp:19:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   19 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplyuixn0d.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplyuixn0d.cpp:20:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   20 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplyuixn0d.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplyuixn0d.cpp:21:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   21 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplyuixn0d.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmplyuixn0d.cpp:22:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   22 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmplyuixn0d.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmplyuixn0d.cpp:23:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   23 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmplyuixn0d.cpp:15:19: note: \u2018long\
    \ long int po"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int res = 1;\n    for(int i = 1; i < n; i++) {\n        res = res\
    \ * x;\n    }\n    return (res == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjlzvp8pi: /tmp/tmpjlzvp8pi.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv37qjj7l: /tmp/tmpv37qjj7l.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x == n) return true;\n    if (x % n == 0) return false;\n  \
    \  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsxtwdkg8: /tmp/tmpsxtwdkg8.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxlsexnev: /tmp/tmpxlsexnev.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x % n == 0) return false;\n    if (x % n == 1) return true;\n\
    \    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp41lcdnup: /tmp/tmp41lcdnup.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_nus0s5o: /tmp/tmp_nus0s5o.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0_i6f15d: /tmp/tmp0_i6f15d.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    for(int i = 1; i <= n; i++)\
    \ {\n        ans *= x;\n    }\n    return ans == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa09aq4dd: /tmp/tmpa09aq4dd.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpszju_b7e: /tmp/tmpszju_b7e.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long y = x;\n    long m = n;\n    while\
    \ (m > 1) {\n        if (m % 2 == 1) return false;\n        y = y * y;\n     \
    \   m = m / 2;\n    }\n    return y == x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpugcrkntd: /tmp/tmpugcrkntd.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n    else return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3jftfy2a: /tmp/tmp3jftfy2a.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return x == 1;\n    if (x == 1)\n        return true;\n    if (x == 2)\n\
    \        return x == 4;\n    if (x == 4)\n        return true;\n    if (x == 8)\n\
    \        return x == 16;\n    if (x == 16)\n        return true;\n    if (x ==\
    \ 32)\n        return x == 64;\n    if (x == 64)\n        return true;\n    if\
    \ (x == 128)\n        return x == 256;\n    if (x == 256)\n        return true;\n\
    \    if (x == 512)\n        return x == 1024;\n    if (x == 1024)\n        return\
    \ true;\n    if (x == 2048)\n        return x == 4096;\n    if (x == 4096)\n \
    \       return true;\n    if (x == 8192)\n        return x == 16384;\n    if (x\
    \ == 16384)\n        return true;\n    if (x == 32768)\n        return x == 65536;\n\
    \    if (x == 65536)\n        return true;\n    if (x == 131072)\n        return\
    \ x == 262144;\n    if (x == 262144)\n        return true;\n    if (x == 524288)\n\
    \        return x == 1048576;\n    if (x == 1048576)\n        return true;\n \
    \   if (x == 2097152)\n        return x == 4194304;\n    if (x == 4194304)\n \
    \       return true;\n    if (x == 8388608)\n        return x == 16777216;\n \
    \   if (x == 16777216)\n        return true;\n    if (x == 33554432)\n       \
    \ return x == 67108864;\n    if (x == 67108864)\n        return true;\n    if\
    \ (x == 134217728)\n        return x == 268435456;\n    if (x == 268435456)\n\
    \        return true;\n    if (x == 67108864)\n        return x == 134217728;\n\
    \    if (x == 134217728)\n        return true;\n    if (x == 268435456)\n    \
    \    return x == 67108864;\n    if (x == 67108864)\n        return true;\n   \
    \ if (x == 134217728)\n        return x == 268435456;\n    if (x == 268435456)\n\
    \        return true;\n    if (x == 67108864)\n        return x == 134217728;\n\
    \    if (x == 134217728)\n        return true;\n    if (x == 268435456)\n    \
    \    return x == 67108864;\n    if (x == 67108864)\n        return true;\n   \
    \ if (x == 134217728)\n        return x == 268435456;\n    if (x == 268435456)\n\
    \        return true;\n    if (x == 67108864)\n        return x == 134217728;\n\
    \    if (x == 134217728)\n        return true;\n    if (x == 268435456)\n    \
    \    return x == 67108864;\n    if (x == 67108864)\n        return true;\n   \
    \ if (x == 134217728)\n        return x == 268435456;\n    if (x == 2684354\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwkfbt40o.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpwkfbt40o.cpp:111:21: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n  111 |     if (x == 2684354\n      |        ~ \
    \           ^\n      |                     )\n  112 | }\n      | ~           \
    \         \n/tmp/tmpwkfbt40o.cpp:112:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmpwkfbt40o.cpp:112:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  112 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 0) {\n        return\
    \ false;\n    }\n    if (n == 1) {\n        return is_simple_power(x, n - 1);\n\
    \    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n / 2);\n   \
    \ }\n    return is_simple_power(x, n / 2) && is_simple_power(x, n / 2);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp91p_n9rh: /tmp/tmp91p_n9rh.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int pow = 1;\n    long long int temp\
    \ = 1;\n    long long int temp2 = 1;\n    long long int temp3 = 1;\n    long long\
    \ int temp4 = 1;\n    long long int temp5 = 1;\n    long long int temp6 = 1;\n\
    \    long long int temp7 = 1;\n    long long int temp8 = 1;\n    long long int\
    \ temp9 = 1;\n    long long int temp10 = 1;\n    long long int temp11 = 1;\n \
    \   long long int temp12 = 1;\n    long long int temp13 = 1;\n    long long int\
    \ temp14 = 1;\n    long long int temp15 = 1;\n    long long int temp16 = 1;\n\
    \    long long int temp17 = 1;\n    long long int temp18 = 1;\n    long long int\
    \ temp19 = 1;\n    long long int temp20 = 1;\n    long long int temp21 = 1;\n\
    \    long long int temp22 = 1;\n    long long int temp23 = 1;\n    long long int\
    \ temp24 = 1;\n    long long int temp25 = 1;\n    long long int temp26 = 1;\n\
    \    long long int temp27 = 1;\n    long long int temp28 = 1;\n    long long int\
    \ temp29 = 1;\n    long long int temp30 = 1;\n    long long int temp31 = 1;\n\
    \    long long int temp32 = 1;\n    long long int temp33 = 1;\n    long long int\
    \ temp34 = 1;\n    long long int temp35 = 1;\n    long long int temp36 = 1;\n\
    \    long long int temp37 = 1;\n    long long int temp38 = 1;\n    long long int\
    \ temp39 = 1;\n    long long int temp40 = 1;\n    long long int temp41 = 1;\n\
    \    long long int temp42 = 1;\n    long long int temp43 = 1;\n    long long int\
    \ temp44 = 1;\n    long long int temp45 = 1;\n    long long int temp46 = 1;\n\
    \    long long int temp47 = 1;\n    long long int temp48 = 1;\n    long long int\
    \ temp49 = 1;\n    long long int temp50 = 1;\n    long long int temp51 = 1;\n\
    \    long long int temp52 = 1;\n    long long int temp53 = 1;\n    long long int\
    \ temp54 = 1;\n    long long int temp55 = 1;\n    long long int temp56 = 1;\n\
    \    long long int temp57 = 1;\n    long long int temp58 = 1;\n    long long int\
    \ temp59 = 1;\n    long long int temp60 = 1;\n    long long int temp61 = 1;\n\
    \    long long int temp62 = \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdbrv8xjj.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpdbrv8xjj.cpp:78:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   78 | }\n      | ^\n/tmp/tmpdbrv8xjj.cpp:78:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    else return is_simple_power(x * x, n\
    \ / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppcvu1cvk: /tmp/tmppcvu1cvk.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuz7qz4bw: /tmp/tmpuz7qz4bw.cpp:26: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans = 1;\n    long long temp = 1;\n    long\
    \ long power = 1;\n    long long sum = 0;\n    long long count = 0;\n    while(temp\
    \ < x){\n        sum += temp;\n        count++;\n        temp *= n;\n    }\n \
    \   while(sum != x){\n        ans *= power;\n        power *= n;\n        sum\
    \ -= power;\n        count--;\n    }\n    if(count == 0){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n\
    \    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return false;\n  \
    \  if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n    if\
    \ (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n    if (n\
    \ % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if (n %\
    \ 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n % 89)\
    \ == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103) ==\
    \ 0) return false;\n    if (n % 109) == 0) return false;\n    if (n % 113) ==\
    \ 0) return false;\n    if (n % 127) == 0) return false;\n    if (n % 131) ==\
    \ 0) return false;\n    if (n % 137) == 0) return false;\n    if (n % 141) ==\
    \ 0) return false;\n    if (n % 147) == 0) return false;\n    if (n % 151) ==\
    \ 0) return false;\n    if (n % 157) == 0) return false;\n    if (n % 161) ==\
    \ 0) return false;\n    if (n % 167) == 0) return false;\n    if (n % 173) ==\
    \ 0) return false;\n    if (n % 179) == 0) return false;\n    if (n % 183) ==\
    \ 0) return false;\n    if (n % 189) == 0) return false;\n    if (n % 193) ==\
    \ 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 201) ==\
    \ 0) return false;\n    if (n % 207) == 0) return false;\n    if (n % 211) ==\
    \ 0) return false;\n    if (n % 215) == 0) return false;\n    if (n % 217) ==\
    \ 0) return false;\n    if (n % 221) == 0) return false;\n    if (n % 227) ==\
    \ 0) return false;\n    if (n % 231) == 0) return false;\n    if (n % 237) ==\
    \ 0) return false;\n    if (n % 241) == 0) return false;\n    if (n % 247) ==\
    \ 0) return false;\n    if (n % 251) == 0) return false;\n    if (n % 257) ==\
    \ 0) return false;\n    if (n % 263) == 0) return false;\n    if (n % 269) ==\
    \ 0) return false;\n    if (n % 273) == 0) return false;\n    if (n % 279) ==\
    \ 0) return false;\n    if (n % 283) == 0) return false;\n\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplhzimxtz.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmplhzimxtz.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmplhzimxtz.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 97) == 0) return false;\n \
    \     |              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long power = 1;\n   \
    \ long long sum = 0;\n    long long count = 0;\n    long long temp2 = 1;\n   \
    \ long long power2 = 1;\n    long long sum2 = 0;\n    long long count2 = 0;\n\
    \    long long temp3 = 1;\n    long long power3 = 1;\n    long long sum3 = 0;\n\
    \    long long count3 = 0;\n    long long temp4 = 1;\n    long long power4 = 1;\n\
    \    long long sum4 = 0;\n    long long count4 = 0;\n    long long temp5 = 1;\n\
    \    long long power5 = 1;\n    long long sum5 = 0;\n    long long count5 = 0;\n\
    \    long long temp6 = 1;\n    long long power6 = 1;\n    long long sum6 = 0;\n\
    \    long long count6 = 0;\n    long long temp7 = 1;\n    long long power7 = 1;\n\
    \    long long sum7 = 0;\n    long long count7 = 0;\n    long long temp8 = 1;\n\
    \    long long power8 = 1;\n    long long sum8 = 0;\n    long long count8 = 0;\n\
    \    long long temp9 = 1;\n    long long power9 = 1;\n    long long sum9 = 0;\n\
    \    long long count9 = 0;\n    long long temp10 = 1;\n    long long power10 =\
    \ 1;\n    long long sum10 = 0;\n    long long count10 = 0;\n    long long temp11\
    \ = 1;\n    long long power11 = 1;\n    long long sum11 = 0;\n    long long count11\
    \ = 0;\n    long long temp12 = 1;\n    long long power12 = 1;\n    long long sum12\
    \ = 0;\n    long long count12 = 0;\n    long long temp13 = 1;\n    long long power13\
    \ = 1;\n    long long sum13 = 0;\n    long long count13 = 0;\n    long long temp14\
    \ = 1;\n    long long power14 = 1;\n    long long sum14 = 0;\n    long long count14\
    \ = 0;\n    long long temp15 = 1;\n    long long power15 = 1;\n    long long sum15\
    \ = 0;\n    long long count15 = 0;\n    long long temp16 = 1;\n    long long power16\
    \ = 1;\n    long long sum16 = 0;\n    long long count16 = 0;\n    long long temp17\
    \ = 1;\n    long long power17 = 1;\n    long long sum17 = 0;\n    long long count17\
    \ = 0;\n    long long temp18 = 1;\n    long long power18 = 1;\n    long long sum18\
    \ = 0;\n    long long count18 = 0;\n    long long temp19 = 1;\n    long long power19\
    \ = 1;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp99hfm691: /tmp/tmp99hfm691.cpp:93: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, (n - 1) / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp_he5vrj: /tmp/tmpp_he5vrj.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqs01u8jf: /tmp/tmpqs01u8jf.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcjlneo8w: /tmp/tmpcjlneo8w.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int result = 1;\n    for(long long int i = 1; i <= n; i++) {\n  \
    \      result *= x;\n    }\n    return result == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmbrjk9t1: /tmp/tmpmbrjk9t1.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long temp2 = 1;\n   \
    \ long long temp3 = 1;\n    long long temp4 = 1;\n    long long temp5 = 1;\n \
    \   long long temp6 = 1;\n    long long temp7 = 1;\n    long long temp8 = 1;\n\
    \    long long temp9 = 1;\n    long long temp10 = 1;\n    long long temp11 = 1;\n\
    \    long long temp12 = 1;\n    long long temp13 = 1;\n    long long temp14 =\
    \ 1;\n    long long temp15 = 1;\n    long long temp16 = 1;\n    long long temp17\
    \ = 1;\n    long long temp18 = 1;\n    long long temp19 = 1;\n    long long temp20\
    \ = 1;\n    long long temp21 = 1;\n    long long temp22 = 1;\n    long long temp23\
    \ = 1;\n    long long temp24 = 1;\n    long long temp25 = 1;\n    long long temp26\
    \ = 1;\n    long long temp27 = 1;\n    long long temp28 = 1;\n    long long temp29\
    \ = 1;\n    long long temp30 = 1;\n    long long temp31 = 1;\n    long long temp32\
    \ = 1;\n    long long temp33 = 1;\n    long long temp34 = 1;\n    long long temp35\
    \ = 1;\n    long long temp36 = 1;\n    long long temp37 = 1;\n    long long temp38\
    \ = 1;\n    long long temp39 = 1;\n    long long temp40 = 1;\n    long long temp41\
    \ = 1;\n    long long temp42 = 1;\n    long long temp43 = 1;\n    long long temp44\
    \ = 1;\n    long long temp45 = 1;\n    long long temp46 = 1;\n    long long temp47\
    \ = 1;\n    long long temp48 = 1;\n    long long temp49 = 1;\n    long long temp50\
    \ = 1;\n    long long temp51 = 1;\n    long long temp52 = 1;\n    long long temp53\
    \ = 1;\n    long long temp54 = 1;\n    long long temp55 = 1;\n    long long temp56\
    \ = 1;\n    long long temp57 = 1;\n    long long temp58 = 1;\n    long long temp59\
    \ = 1;\n    long long temp60 = 1;\n    long long temp61 = 1;\n    long long temp62\
    \ = 1;\n    long long temp63 = 1;\n    long long temp64 = 1;\n    long long temp65\
    \ = 1;\n    long long temp66 = 1;\n    long long temp67 = 1;\n    long long temp68\
    \ = 1;\n    long long temp69 = 1;\n    long long temp70 = 1;\n    long long temp71\
    \ = 1;\n    long long temp7\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwutovk58.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpwutovk58.cpp:87:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmpwutovk58.cpp:87:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int pow = 1;\n\
    \    long long int pow2 = 1;\n    long long int pow3 = 1;\n    long long int pow4\
    \ = 0;\n    long long int pow5 = 0;\n    long long int pow6 = 0;\n    long long\
    \ int pow7 = 0;\n    long long int pow8 = 0;\n    long long int pow9 = 0;\n  \
    \  long long int pow10 = 0;\n    long long int pow11 = 0;\n    long long int pow12\
    \ = 0;\n    long long int pow13 = 0;\n    long long int pow14 = 0;\n    long long\
    \ int pow15 = 0;\n    long long int pow16 = 0;\n    long long int pow17 = 0;\n\
    \    long long int pow18 = 0;\n    long long int pow19 = 0;\n    long long int\
    \ pow20 = 0;\n    long long int pow21 = 0;\n    long long int pow22 = 0;\n   \
    \ long long int pow23 = 0;\n    long long int pow24 = 0;\n    long long int pow25\
    \ = 0;\n    long long int pow26 = 0;\n    long long int pow27 = 0;\n    long long\
    \ int pow28 = 0;\n    long long int pow29 = 0;\n    long long int pow30 = 0;\n\
    \    long long int pow31 = 0;\n    long long int pow32 = 0;\n    long long int\
    \ pow33 = 0;\n    long long int pow34 = 0;\n    long long int pow35 = 0;\n   \
    \ long long int pow36 = 0;\n    long long int pow37 = 0;\n    long long int pow38\
    \ = 0;\n    long long int pow39 = 0;\n    long long int pow40 = 0;\n    long long\
    \ int pow41 = 0;\n    long long int pow42 = 0;\n    long long int pow43 = 0;\n\
    \    long long int pow44 = 0;\n    long long int pow45 = 0;\n    long long int\
    \ pow46 = 0;\n    long long int pow47 = 0;\n    long long int pow48 = 0;\n   \
    \ long long int pow49 = 0;\n    long long int pow50 = 0;\n    long long int pow51\
    \ = 0;\n    long long int pow52 = 0;\n    long long int pow53 = 0;\n    long long\
    \ int pow54 = 0;\n    long long int pow55 = 0;\n    long long int pow56 = 0;\n\
    \    long long int pow57 = 0;\n    long long int pow58 = 0;\n    long long int\
    \ pow59 = 0;\n    long long int pow60 = 0;\n    long long int pow61 = 0;\n   \
    \ long long int pow62 = 0;\n    long long int pow63 = 0;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_t3st3f1: /tmp/tmp_t3st3f1.cpp:82: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    long long ans = 1;\n    for (long long\
    \ i = 3; i <= n; i += 2) {\n        ans *= i;\n    }\n    return (x == ans);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqvyjlpks: /tmp/tmpqvyjlpks.cpp:31: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long power = 1;\n   \
    \ long long counter = 1;\n    while (power < n) {\n        temp = temp * x;\n\
    \        counter++;\n        power++;\n    }\n    while (counter > 0) {\n    \
    \    ans = ans * temp;\n        counter--;\n        temp = temp * x;\n    }\n\
    \    if (ans == x) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpf5x3e8aj: /tmp/tmpf5x3e8aj.cpp:36: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int ans = 1;\n    long long int temp = 1;\n    long long int res\
    \ = 1;\n    long long int power = 1;\n    long long int temp2 = 1;\n    long long\
    \ int res2 = 1;\n    long long int power2 = 1;\n    long long int temp3 = 1;\n\
    \    long long int res3 = 1;\n    long long int power3 = 1;\n    long long int\
    \ temp4 = 1;\n    long long int res4 = 1;\n    long long int power4 = 1;\n   \
    \ long long int temp5 = 1;\n    long long int res5 = 1;\n    long long int power5\
    \ = 1;\n    long long int temp6 = 1;\n    long long int res6 = 1;\n    long long\
    \ int power6 = 1;\n    long long int temp7 = 1;\n    long long int res7 = 1;\n\
    \    long long int power7 = 1;\n    long long int temp8 = 1;\n    long long int\
    \ res8 = 1;\n    long long int power8 = 1;\n    long long int temp9 = 1;\n   \
    \ long long int res9 = 1;\n    long long int power9 = 1;\n    long long int temp10\
    \ = 1;\n    long long int res10 = 1;\n    long long int power10 = 1;\n    long\
    \ long int temp11 = 1;\n    long long int res11 = 1;\n    long long int power11\
    \ = 1;\n    long long int temp12 = 1;\n    long long int res12 = 1;\n    long\
    \ long int power12 = 1;\n    long long int temp13 = 1;\n    long long int res13\
    \ = 1;\n    long long int power13 = 1;\n    long long int temp14 = 1;\n    long\
    \ long int res14 = 1;\n    long long int power14 = 1;\n    long long int temp15\
    \ = 1;\n    long long int res15 = 1;\n    long long int power15 = 1;\n    long\
    \ long int temp16 = 1;\n    long long int res16 = 1;\n    long long int power16\
    \ = 1;\n    long long int temp17 = 1;\n    long long int res17 = 1;\n    long\
    \ long int power17 = 1;\n    long long int temp18 = 1;\n    long long int res18\
    \ = 1;\n    long long int power18 = 1;\n    long long int temp19 = 1;\n    long\
    \ long int res19 = 1;\n    long long int power19 = 1;\n    long long int temp20\
    \ = 1;\n    long long int res20 = 1;\n    long long int power20 = 1;\n    long\
    \ long int temp21 = 1;\n    long long int res21 = 1;\n    long long int power21\
    \ = 1;\n    long long int temp\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5lcc2na.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpg5lcc2na.cpp:79:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmpg5lcc2na.cpp:79:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp950a6scf: /tmp/tmp950a6scf.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x * x, n / 2);\n    else\n        return\
    \ is_simple_power(x * x, (n - 1) / 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvarsxn63: /tmp/tmpvarsxn63.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvm6djte8: /tmp/tmpvm6djte8.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int temp = 1;\n\
    \    long long int power = 1;\n    long long int sum = 0;\n    long long int sum2\
    \ = 0;\n    long long int sum3 = 0;\n    long long int sum4 = 0;\n    long long\
    \ int sum5 = 0;\n    long long int sum6 = 0;\n    long long int sum7 = 0;\n  \
    \  long long int sum8 = 0;\n    long long int sum9 = 0;\n    long long int sum10\
    \ = 0;\n    long long int sum11 = 0;\n    long long int sum12 = 0;\n    long long\
    \ int sum13 = 0;\n    long long int sum14 = 0;\n    long long int sum15 = 0;\n\
    \    long long int sum16 = 0;\n    long long int sum17 = 0;\n    long long int\
    \ sum18 = 0;\n    long long int sum19 = 0;\n    long long int sum20 = 0;\n   \
    \ long long int sum21 = 0;\n    long long int sum22 = 0;\n    long long int sum23\
    \ = 0;\n    long long int sum24 = 0;\n    long long int sum25 = 0;\n    long long\
    \ int sum26 = 0;\n    long long int sum27 = 0;\n    long long int sum28 = 0;\n\
    \    long long int sum29 = 0;\n    long long int sum30 = 0;\n    long long int\
    \ sum31 = 0;\n    long long int sum32 = 0;\n    long long int sum33 = 0;\n   \
    \ long long int sum34 = 0;\n    long long int sum35 = 0;\n    long long int sum36\
    \ = 0;\n    long long int sum37 = 0;\n    long long int sum38 = 0;\n    long long\
    \ int sum39 = 0;\n    long long int sum40 = 0;\n    long long int sum41 = 0;\n\
    \    long long int sum42 = 0;\n    long long int sum43 = 0;\n    long long int\
    \ sum44 = 0;\n    long long int sum45 = 0;\n    long long int sum46 = 0;\n   \
    \ long long int sum47 = 0;\n    long long int sum48 = 0;\n    long long int sum49\
    \ = 0;\n    long long int sum50 = 0;\n    long long int sum51 = 0;\n    long long\
    \ int sum52 = 0;\n    long long int sum53 = 0;\n    long long int sum54 = 0;\n\
    \    long long int sum55 = 0;\n    long long int sum56 = 0;\n    long long int\
    \ sum57 = 0;\n    long long int sum58 = 0;\n    long long int sum59 = 0;\n   \
    \ long long int sum60 = 0;\n    long long int sum61 = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg10cfkuu: /tmp/tmpg10cfkuu.cpp:83: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 1) return\
    \ false;\n    if (x == n) return true;\n    if (n % 2 == 0) return false;\n  \
    \  if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    if (n\
    \ % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if (n % 13\
    \ == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n % 19 == 0)\
    \ return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 == 0) return\
    \ false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return false;\n\
    \    if (n % 41 == 0) return false;\n    if (n % 47 == 0) return false;\n    if\
    \ (n % 53 == 0) return false;\n    if (n % 59 == 0) return false;\n    if (n %\
    \ 61 == 0) return false;\n    if (n % 67 == 0) return false;\n    if (n % 71 ==\
    \ 0) return false;\n    if (n % 73 == 0) return false;\n    if (n % 79 == 0) return\
    \ false;\n    if (n % 83 == 0) return false;\n    if (n % 89 == 0) return false;\n\
    \    if (n % 97 == 0) return false;\n    if (n % 101 == 0) return false;\n   \
    \ if (n % 103 == 0) return false;\n    if (n % 107 == 0) return false;\n    if\
    \ (n % 111 == 0) return false;\n    if (n % 113 == 0) return false;\n    if (n\
    \ % 117 == 0) return false;\n    if (n % 121 == 0) return false;\n    if (n %\
    \ 123 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n % 131\
    \ == 0) return false;\n    if (n % 133 == 0) return false;\n    if (n % 137 ==\
    \ 0) return false;\n    if (n % 141 == 0) return false;\n    if (n % 143 == 0)\
    \ return false;\n    if (n % 147 == 0) return false;\n    if (n % 151 == 0) return\
    \ false;\n    if (n % 153 == 0) return false;\n    if (n % 157 == 0) return false;\n\
    \    if (n % 161 == 0) return false;\n    if (n % 163 == 0) return false;\n  \
    \  if (n % 167 == 0) return false;\n    if (n % 171 == 0) return false;\n    if\
    \ (n % 173 == 0) return false;\n    if (n % 177 == 0) return false;\n    if (n\
    \ % 181 == 0) return false;\n    if (n % 183 == 0) return false;\n    if (n %\
    \ 187 == 0) return false;\n    if (n % 191 == 0) return false;\n    if (n % 193\
    \ == 0) return false;\n    if (n % 197 == 0) return false;\n    if (n % 201 ==\
    \ 0) return false;\n    if (n % 203 == 0) return false;\n    if (n % 207 == 0)\
    \ return false;\n    if (n % 211 == 0) return false;\n    if (n % 213 == 0) return\
    \ false;\n    if (n % 217 == 0) return false;\n    if (n % 221 == 0) return false;\n\
    \    if (n % \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ddfu2x9.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp6ddfu2x9.cpp:80:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmp6ddfu2x9.cpp:79:12:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   79 |     if (n\
    \ %\n      |        ~   ^\n      |            )\n   80 | }\n      | ~        \
    \   \n/tmp/tmp6ddfu2x9.cpp:80:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   80 | }\n      | ^\n/tmp/tmp6ddfu2x9.cpp:80:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   80 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    long y = x % n;\n    if (y !=\
    \ 0) return false;\n    return is_simple_power(x, n / 2);\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfh8r_30q: /tmp/tmpfh8r_30q.cpp:27: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long temp2 = 1;\n   \
    \ long long temp3 = 1;\n    long long temp4 = 1;\n    long long temp5 = 1;\n \
    \   long long temp6 = 1;\n    long long temp7 = 1;\n    long long temp8 = 1;\n\
    \    long long temp9 = 1;\n    long long temp10 = 1;\n    long long temp11 = 1;\n\
    \    long long temp12 = 1;\n    long long temp13 = 1;\n    long long temp14 =\
    \ 1;\n    long long temp15 = 1;\n    long long temp16 = 1;\n    long long temp17\
    \ = 1;\n    long long temp18 = 1;\n    long long temp19 = 1;\n    long long temp20\
    \ = 1;\n    long long temp21 = 1;\n    long long temp22 = 1;\n    long long temp23\
    \ = 1;\n    long long temp24 = 1;\n    long long temp25 = 1;\n    long long temp26\
    \ = 1;\n    long long temp27 = 1;\n    long long temp28 = 1;\n    long long temp29\
    \ = 1;\n    long long temp30 = 1;\n    long long temp31 = 1;\n    long long temp32\
    \ = 1;\n    long long temp33 = 1;\n    long long temp34 = 1;\n    long long temp35\
    \ = 1;\n    long long temp36 = 1;\n    long long temp37 = 1;\n    long long temp38\
    \ = 1;\n    long long temp39 = 1;\n    long long temp40 = 1;\n    long long temp41\
    \ = 1;\n    long long temp42 = 1;\n    long long temp43 = 1;\n    long long temp44\
    \ = 1;\n    long long temp45 = 1;\n    long long temp46 = 1;\n    long long temp47\
    \ = 1;\n    long long temp48 = 1;\n    long long temp49 = 1;\n    long long temp50\
    \ = 1;\n    long long temp51 = 1;\n    long long temp52 = 1;\n    long long temp53\
    \ = 1;\n    long long temp54 = 1;\n    long long temp55 = 1;\n    long long temp56\
    \ = 1;\n    long long temp57 = 1;\n    long long temp58 = 1;\n    long long temp59\
    \ = 1;\n    long long temp60 = 1;\n    long long temp61 = 1;\n    long long temp62\
    \ = 1;\n    long long temp63 = 1;\n    long long temp64 = 1;\n    long long temp65\
    \ = 1;\n    long long temp66 = 1;\n    long long temp67 = 1;\n    long long temp68\
    \ = 1;\n    long long temp69 = 1;\n    long long temp70 = 1;\n    long long temp71\
    \ = 1;\n    long long temp7\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyvg_mvf3.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpyvg_mvf3.cpp:87:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmpyvg_mvf3.cpp:87:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    if\
    \ (x % n == 0) return is_simple_power(x, n / 2);\n    if (x % n == 1) return false;\n\
    \    return is_simple_power(x, n / 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyruj5uec: /tmp/tmpyruj5uec.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjbh3cv5p: /tmp/tmpjbh3cv5p.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    if\
    \ (x % n == 0) return is_simple_power(x, n / 2);\n    if (x % n == 1) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpws9wu4xw: /tmp/tmpws9wu4xw.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (n == 19) return x == 1;\n    if (n == 20) return x == 1;\n    if (n == 21)\
    \ return x == 1;\n    if (n == 22) return x == 1;\n    if (n == 23) return x ==\
    \ 1;\n    if (n == 24) return x == 1;\n    if (n == 25) return x == 1;\n    if\
    \ (n == 26) return x == 1;\n    if (n == 27) return x == 1;\n    if (n == 28)\
    \ return x == 1;\n    if (n == 29) return x == 1;\n    if (n == 3) return x ==\
    \ 1;\n    if (n == 4) return x == 1;\n    if (n == 5) return x == 1;\n    if (n\
    \ == 6) return x == 1;\n    if (n == 7) return x == 1;\n    if (n == 8) return\
    \ x == 1;\n    if (n == 9) return x == 1;\n    if (n == 10) return x == 1;\n \
    \   if (n == 11) return x == 1;\n    if (n == 12) return x == 1;\n    if (n ==\
    \ 13) return x == 1;\n    if (n == 14) return x == 1;\n    if (n == 15) return\
    \ x == 1;\n    if (n == 16) return x == 1;\n    if (n == 17) return x == 1;\n\
    \    if (n == 18) return x == 1;\n    if (n == 19) return x == 1;\n    if (n ==\
    \ 20) return x == 1;\n    if (n == 21) return x == 1;\n    if (n == 22) return\
    \ x == 1;\n    if (n == 23) return x == 1;\n    if (n == 24) return x == 1;\n\
    \    if (n == 25) return x == 1;\n    if (n == 26) return x == 1;\n    if (n ==\
    \ 27) return x == 1;\n    if (n == 28) return x == 1;\n    if (n == 29) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwo6p93ta.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpwo6p93ta.cpp:88:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpwo6p93ta.cpp:87:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |     if (\n\
    \      |        ~^\n      |         )\n   88 | }\n      | ~        \n/tmp/tmpwo6p93ta.cpp:88:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n \
    \     | ^\n/tmp/tmpwo6p93ta.cpp:88:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   88 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_0is4jzn: /tmp/tmp_0is4jzn.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long mid = n / 2;\n    return is_simple_power(x,\
    \ mid) && is_simple_power(x, mid * 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp53lwnhy0: /tmp/tmp53lwnhy0.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long r = x;\n    while (r != 1) {\n \
    \       if (r % n == 0) return false;\n        r /= n;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7sxfgep7: /tmp/tmp7sxfgep7.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int res = 1;\n    for(int i = 1; i<=n; i++) {\n        res = res\
    \ * x;\n    }\n    return res == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsmktgj99: /tmp/tmpsmktgj99.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    else\n        return is_simple_power(x * x, n / 2);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp379yreq0: /tmp/tmp379yreq0.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpso5se68o: /tmp/tmpso5se68o.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy3ni3mkk: /tmp/tmpy3ni3mkk.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (n % 2 == 0)\
    \ return false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return\
    \ false;\n    if (n % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n\
    \    if (n % 13 == 0) return false;\n    if (n % 17 == 0) return false;\n    if\
    \ (n % 19 == 0) return false;\n    if (n % 23 == 0) return false;\n    if (n %\
    \ 29 == 0) return false;\n    if (n % 31 == 0) return false;\n    if (n % 37 ==\
    \ 0) return false;\n    if (n % 41) == 0) return false;\n    if (n % 43) == 0)\
    \ return false;\n    if (n % 47) == 0) return false;\n    if (n % 53) == 0) return\
    \ false;\n    if (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n\
    \    if (n % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n  \
    \  if (n % 73) == 0) return false;\n    if (n % 79) == 0) return false;\n    if\
    \ (n % 83) == 0) return false;\n    if (n % 89) == 0) return false;\n    if (n\
    \ % 97) == 0) return false;\n    if (n % 103) == 0) return false;\n    if (n %\
    \ 109) == 0) return false;\n    if (n % 113) == 0) return false;\n    if (n %\
    \ 127) == 0) return false;\n    if (n % 131) == 0) return false;\n    if (n %\
    \ 137) == 0) return false;\n    if (n % 141) == 0) return false;\n    if (n %\
    \ 147) == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n %\
    \ 157) == 0) return false;\n    if (n % 161) == 0) return false;\n    if (n %\
    \ 167) == 0) return false;\n    if (n % 171) == 0) return false;\n    if (n %\
    \ 177) == 0) return false;\n    if (n % 181) == 0) return false;\n    if (n %\
    \ 187) == 0) return false;\n    if (n % 191) == 0) return false;\n    if (n %\
    \ 197) == 0) return false;\n    if (n % 201) == 0) return false;\n    if (n %\
    \ 207) == 0) return false;\n    if (n % 211) == 0) return false;\n    if (n %\
    \ 217) == 0) return false;\n    if (n % 221) == 0) return false;\n    if (n %\
    \ 227) == 0) return false;\n    if (n % 231) == 0) return false;\n    if (n %\
    \ 237) == 0) return false;\n    if (n % 241) == 0) return false;\n    if (n %\
    \ 247) == 0) return false;\n    if (n % 251) == 0) return false;\n    if (n %\
    \ 257) == 0) return false;\n    if (n % 261) == 0) return false;\n    if (n %\
    \ 267) == 0) return false;\n    if (n % 271) == 0) return false;\n    if (n %\
    \ 277) == 0) return false;\n    if (n % 281) == 0) return false;\n    if (n %\
    \ 287) == 0) return false;\n    if (n % 291) == 0) return false;\n    if (n %\
    \ 297) == 0) \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnysujr23.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpnysujr23.cpp:28:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   28 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpnysujr23.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 97) == 0) return false;\n \
    \     |              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9ty2lg4o: /tmp/tmp9ty2lg4o.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ remainder;\n    while(n > 0){\n        remainder = n % power;\n        power\
    \ = power * x;\n        result = result + remainder;\n        n = n / power;\n\
    \    }\n    return (result == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpasbvb1b5: /tmp/tmpasbvb1b5.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (x % n == 0)\n        return is_simple_power(x\
    \ / n, n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpl29ehh6y: /tmp/tmpl29ehh6y.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n    return is_simple_power(x,\
    \ n / 2) && is_simple_power(x, (n - 1) / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp182jgzuw: /tmp/tmp182jgzuw.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (x == 0) return\
    \ false;\n    if (x == 1) return true;\n    if (x % n == 0) return false;\n  \
    \  if (x % n == 1) return true;\n    long y = x / n;\n    return is_simple_power(y,\
    \ n) && is_simple_power(x, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt67g91v0: /tmp/tmpt67g91v0.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2ro2ova8: /tmp/tmp2ro2ova8.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpubqj0onm: /tmp/tmpubqj0onm.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n    \
    \    return is_simple_power(x, n / 5);\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyyepc7bb: /tmp/tmpyyepc7bb.cpp:29: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (n % 2 == 0)\n        return is_simple_power(x\
    \ * x, n / 2);\n    else\n        return is_simple_power(x * x, (n - 1) / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsf_1m6w1: /tmp/tmpsf_1m6w1.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp19jnhhbp: /tmp/tmp19jnhhbp.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9wkd34cn: /tmp/tmp9wkd34cn.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i<=n; i++){\n\
    \        res = res * x;\n    }\n    return (res == x);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxruddcvo: /tmp/tmpxruddcvo.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmprpi_jhah: /tmp/tmprpi_jhah.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n\
    \    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return false;\n  \
    \  if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n    if\
    \ (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n    if (n\
    \ % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if (n %\
    \ 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n % 89)\
    \ == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103) ==\
    \ 0) return false;\n    if (n % 109) == 0) return false;\n    if (n % 113) ==\
    \ 0) return false;\n    if (n % 127) == 0) return false;\n    if (n % 131) ==\
    \ 0) return false;\n    if (n % 137) == 0) return false;\n    if (n % 141) ==\
    \ 0) return false;\n    if (n % 147) == 0) return false;\n    if (n % 151) ==\
    \ 0) return false;\n    if (n % 157) == 0) return false;\n    if (n % 161) ==\
    \ 0) return false;\n    if (n % 167) == 0) return false;\n    if (n % 173) ==\
    \ 0) return false;\n    if (n % 179) == 0) return false;\n    if (n % 183) ==\
    \ 0) return false;\n    if (n % 189) == 0) return false;\n    if (n % 193) ==\
    \ 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 201) ==\
    \ 0) return false;\n    if (n % 207) == 0) return false;\n    if (n % 211) ==\
    \ 0) return false;\n    if (n % 215) == 0) return false;\n    if (n % 217) ==\
    \ 0) return false;\n    if (n % 221) == 0) return false;\n    if (n % 227) ==\
    \ 0) return false;\n    if (n % 231) == 0) return false;\n    if (n % 237) ==\
    \ 0) return false;\n    if (n % 241) == 0) return false;\n    if (n % 247) ==\
    \ 0) return false;\n    if (n % 251) == 0) return false;\n    if (n % 257) ==\
    \ 0) return false;\n    if (n % 263) == 0) return false;\n    if (n % 269) ==\
    \ 0) return false;\n    if (n % 273) == 0) return false;\n    if (n % 279) ==\
    \ 0) return false;\n    if (n % 283) == 0) return false;\n    if (\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcm7af6_n.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpcm7af6_n.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 43) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpcm7af6_n.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 97) == 0) return false;\n \
    \     |              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdug864s2: /tmp/tmpdug864s2.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4y7j5kfz.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp4y7j5kfz.cpp:16:19: error: redeclaration of \u2018\
    long long int power\u2019\n   16 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmp4y7j5kfz.cpp:14:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   14 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmp4y7j5kfz.cpp:17:19: error: redeclaration of \u2018\
    long long int result\u2019\n   17 |     long long int result = 1;\n      |   \
    \                ^~~~~~\n/tmp/tmp4y7j5kfz.cpp:15:19: note: \u2018long long int\
    \ result\u2019 previously declared here\n   15 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp4y7j5kfz.cpp:18:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   18 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp4y7j5kfz.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp4y7j5kfz.cpp:19:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   19 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp4y7j5kfz.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp4y7j5kfz.cpp:20:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   20 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp4y7j5kfz.cpp:14:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   14 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp4y7j5kfz.cpp:21:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   21 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp4y7j5kfz.cpp:15:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   15 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp4y7j5kfz.cpp:22:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   22 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp4y7j5kfz.cpp:14:19: note: \u2018long\
    \ long int po"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x / n, n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkb6h3x0k: /tmp/tmpkb6h3x0k.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x == 2)\n\
    \        return is_simple_power(x, n - 2);\n    if (x == 4)\n        return is_simple_power(x,\
    \ n - 4);\n    if (x == 8)\n        return is_simple_power(x, n - 8);\n    if\
    \ (x == 16)\n        return is_simple_power(x, n - 16);\n    if (x == 32)\n  \
    \      return is_simple_power(x, n - 32);\n    if (x == 64)\n        return is_simple_power(x,\
    \ n - 64);\n    if (x == 128)\n        return is_simple_power(x, n - 128);\n \
    \   if (x == 256)\n        return is_simple_power(x, n - 256);\n    if (x == 512)\n\
    \        return is_simple_power(x, n - 512);\n    if (x == 1024)\n        return\
    \ is_simple_power(x, n - 1024);\n    if (x == 2048)\n        return is_simple_power(x,\
    \ n - 2048);\n    if (x == 4096)\n        return is_simple_power(x, n - 4096);\n\
    \    if (x == 8192)\n        return is_simple_power(x, n - 8192);\n    if (x ==\
    \ 16384)\n        return is_simple_power(x, n - 16384);\n    if (x == 32768)\n\
    \        return is_simple_power(x, n - 32768);\n    if (x == 65536)\n        return\
    \ is_simple_power(x, n - 65536);\n    if (x == 131072)\n        return is_simple_power(x,\
    \ n - 131072);\n    if (x == 262144)\n        return is_simple_power(x, n - 262144);\n\
    \    if (x == 524288)\n        return is_simple_power(x, n - 524288);\n    if\
    \ (x == 1048576)\n        return is_simple_power(x, n - 1048576);\n    if (x ==\
    \ 2097152)\n        return is_simple_power(x, n - 2097152);\n    if (x == 4194304)\n\
    \        return is_simple_power(x, n - 4194304);\n    if (x == 819192)\n     \
    \   return is_simple_power(x, n - 819192);\n    if (x == 1638104)\n        return\
    \ is_simple_power(x, n - 1638104);\n    if (x == 3276784)\n        return is_simple_power(x,\
    \ n - 3276784);\n    if (x == 6553664)\n        return is_simple_power(x, n -\
    \ 6553664);\n    if (x == 1310712)\n        return is_simple_power(x, n - 1310712);\n\
    \    if (x == 2621440)\n        return is_simple_power(x, n - 2621440);\n    if\
    \ (x == 5242880)\n        return is_simple_power(x, n - 5242880);\n    if (x ==\
    \ 10485760)\n        return is_simple_power(x, n - 10485760);\n    if (x == 20971520)\n\
    \        return is_simple_power(x, n - 20971520);\n    if (x == 41943040)\n  \
    \      return \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph84684l6.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmph84684l6.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmph84684l6.cpp:83:15:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n\
    \      |               ^\n      |               ;\n   84 | }\n      | ~      \
    \        \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuges2zb1: /tmp/tmpuges2zb1.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long y = x * x;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n\
    \    long yy = y * y;\n    long yy = y * y;\n    long yy = y * y;\n    long yy\
    \ = y * y;\n    long yy = y * \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5elgv9qv.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp5elgv9qv.cpp:19:10: error: redeclaration of \u2018\
    long int yy\u2019\n   19 |     long yy = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:20:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   20 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp5elgv9qv.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:21:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   21 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp5elgv9qv.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp5elgv9qv.cpp:22:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   22 |     long yy = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:23:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   23 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp5elgv9qv.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:24:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   24 |     long yy = y * y;\n\
    \      |          ^~\n/tmp/tmp5elgv9qv.cpp:18:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   18 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp5elgv9qv.cpp:25:10: error: redeclaration of \u2018long int yy\u2019\n\
    \   25 |     long yy = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:18:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   18 |     long yy\
    \ = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:26:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   26 |     long yy = y * y;\n      |          ^~\n\
    /tmp/tmp5elgv9qv.cpp:18:10: note: \u2018long int yy\u2019 previously declared\
    \ here\n   18 |     long yy = y * y;\n      |          ^~\n/tmp/tmp5elgv9qv.cpp:27:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   27 | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int power = 1;\n    long long int result =\
    \ 1;\n    long long int power = 1;\n    long long int result = 1;\n    long long\
    \ int power = 1;\n    long long int result = 1;\n    long long int power = 1;\n\
    \    long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int result = 1;\n    long long int power = 1;\n    long long int\
    \ result = 1;\n    long long int power = 1;\n    long long int result = 1;\n \
    \   long long int power = 1;\n    long long int result = 1;\n    long long int\
    \ power = 1;\n    long long int result = 1;\n    long long int power = 1;\n  \
    \  long long int \n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6q5cnjfc.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp6q5cnjfc.cpp:17:19: error: redeclaration of \u2018\
    long long int power\u2019\n   17 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmp6q5cnjfc.cpp:15:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   15 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmp6q5cnjfc.cpp:18:19: error: redeclaration of \u2018\
    long long int result\u2019\n   18 |     long long int result = 1;\n      |   \
    \                ^~~~~~\n/tmp/tmp6q5cnjfc.cpp:16:19: note: \u2018long long int\
    \ result\u2019 previously declared here\n   16 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp6q5cnjfc.cpp:19:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   19 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp6q5cnjfc.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp6q5cnjfc.cpp:20:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   20 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp6q5cnjfc.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp6q5cnjfc.cpp:21:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   21 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp6q5cnjfc.cpp:15:19: note: \u2018long\
    \ long int power\u2019 previously declared here\n   15 |     long long int power\
    \ = 1;\n      |                   ^~~~~\n/tmp/tmp6q5cnjfc.cpp:22:19: error: redeclaration\
    \ of \u2018long long int result\u2019\n   22 |     long long int result = 1;\n\
    \      |                   ^~~~~~\n/tmp/tmp6q5cnjfc.cpp:16:19: note: \u2018long\
    \ long int result\u2019 previously declared here\n   16 |     long long int result\
    \ = 1;\n      |                   ^~~~~~\n/tmp/tmp6q5cnjfc.cpp:23:19: error: redeclaration\
    \ of \u2018long long int power\u2019\n   23 |     long long int power = 1;\n \
    \     |                   ^~~~~\n/tmp/tmp6q5cnjfc.cpp:15:19: note: \u2018long\
    \ long int po"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    if (n == 0)\n        return true;\n    if (n == 1)\n\
    \        return (x == 1);\n    if (n == 2)\n        return (x == 1);\n    if (n\
    \ % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 2 == 1)\n\
    \        return is_simple_power(x * x, n / 2);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqw6wnxtp: /tmp/tmpqw6wnxtp.cpp:29: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpl72_fcgv: /tmp/tmpl72_fcgv.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans=1;\n    for(int i=0;i<n;i++){\n  \
    \      ans*=x;\n    }\n    return ans==x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjh870h7x: /tmp/tmpjh870h7x.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpl2_smx1c: /tmp/tmpl2_smx1c.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long ans = 1;\n    long long temp = 1;\n    long\
    \ long power = 1;\n    long long sum = 0;\n    long long count = 0;\n    long\
    \ long sum2 = 0;\n    long long count2 = 0;\n    long long sum3 = 0;\n    long\
    \ long count3 = 0;\n    long long sum4 = 0;\n    long long count4 = 0;\n    long\
    \ long sum5 = 0;\n    long long count5 = 0;\n    long long sum6 = 0;\n    long\
    \ long count6 = 0;\n    long long sum7 = 0;\n    long long count7 = 0;\n    long\
    \ long sum8 = 0;\n    long long count8 = 0;\n    long long sum9 = 0;\n    long\
    \ long count9 = 0;\n    long long sum10 = 0;\n    long long count10 = 0;\n   \
    \ long long sum11 = 0;\n    long long count11 = 0;\n    long long sum12 = 0;\n\
    \    long long count12 = 0;\n    long long sum13 = 0;\n    long long count13 =\
    \ 0;\n    long long sum14 = 0;\n    long long count14 = 0;\n    long long sum15\
    \ = 0;\n    long long count15 = 0;\n    long long sum16 = 0;\n    long long count16\
    \ = 0;\n    long long sum17 = 0;\n    long long count17 = 0;\n    long long sum18\
    \ = 0;\n    long long count18 = 0;\n    long long sum19 = 0;\n    long long count19\
    \ = 0;\n    long long sum20 = 0;\n    long long count20 = 0;\n    long long sum21\
    \ = 0;\n    long long count21 = 0;\n    long long sum22 = 0;\n    long long count22\
    \ = 0;\n    long long sum23 = 0;\n    long long count23 = 0;\n    long long sum24\
    \ = 0;\n    long long count24 = 0;\n    long long sum25 = 0;\n    long long count25\
    \ = 0;\n    long long sum26 = 0;\n    long long count26 = 0;\n    long long sum27\
    \ = 0;\n    long long count27 = 0;\n    long long sum28 = 0;\n    long long count28\
    \ = 0;\n    long long sum29 = 0;\n    long long count29 = 0;\n    long long sum30\
    \ = 0;\n    long long count30 = 0;\n    long long sum31 = 0;\n    long long count31\
    \ = 0;\n    long long sum32 = 0;\n    long long count32 = 0;\n    long long sum33\
    \ = 0;\n    long long count33 = 0;\n    long long sum34 = 0;\n    long long count34\
    \ = 0;\n    long long sum35 = 0;\n    long long count35 = 0;\n    long long sum36\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq4a82hfn: /tmp/tmpq4a82hfn.cpp:93: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvndfx80z: /tmp/tmpvndfx80z.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    return is_simple_power(x\
    \ * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsdpmip4v: /tmp/tmpsdpmip4v.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    while(n > 0){\n        res\
    \ *= x;\n        n--;\n    }\n    return res == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp597gtpnf: /tmp/tmp597gtpnf.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return is_simple_power(x, n / 2);\n    else return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa0prhsho: /tmp/tmpa0prhsho.cpp:23: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long power = 1;\n   \
    \ while (n > 1) {\n        temp = temp * x;\n        power++;\n        n--;\n\
    \    }\n    while (power > 1) {\n        ans = ans * temp;\n        power--;\n\
    \    }\n    if (ans == x) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx28hgi8t: /tmp/tmpx28hgi8t.cpp:36: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6k3d7wqw: /tmp/tmp6k3d7wqw.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long ans = 1;\n    long long temp = 1;\n    long long counter = 0;\n \
    \   while (temp < n) {\n        ans *= temp;\n        temp++;\n        counter++;\n\
    \    }\n    if (ans == x) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_7xt23pj: /tmp/tmp_7xt23pj.cpp:29: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n == -2)\n        return false;\n\
    \    if (n == -3)\n        return false;\n    if (n == -4)\n        return false;\n\
    \    if (n == -5)\n        return false;\n    if (n == -6)\n        return false;\n\
    \    if (n == -7)\n        return false;\n    if (n == -8)\n        return false;\n\
    \    if (n == -9)\n        return false;\n    if (n == -10)\n        return false;\n\
    \    if (n == -11)\n        return false;\n    if (n == -12)\n        return false;\n\
    \    if (n == -13)\n        return false;\n    if (n == -14)\n        return false;\n\
    \    if (n == -15)\n        return false;\n    if (n == -16)\n        return false;\n\
    \    if (n == -17)\n        return false;\n    if (n == -18)\n        return false;\n\
    \    if (n == -19)\n        return false;\n    if (n == -20)\n        return false;\n\
    \    if (n == -21)\n        return false;\n    if (n == -22)\n        return false;\n\
    \    if (n == -23)\n        return false;\n    if (n == -24)\n        return false;\n\
    \    if (n == -25)\n        return false;\n    if (n == -26)\n        return false;\n\
    \    if (n == -27)\n        return false;\n    if (n == -28)\n        return false;\n\
    \    if (n == -29)\n        return false;\n    if (n == -30)\n        return false;\n\
    \    if (n == -31)\n        return false;\n    if (n == -32)\n        return false;\n\
    \    if (n == -33)\n        return false;\n    if (n == -34)\n        return false;\n\
    \    if (n == -35)\n        return false;\n    if (n == -36)\n        return false;\n\
    \    if (n == -37)\n        return false;\n    if (n == -38)\n        return false;\n\
    \    if (n == -39)\n        return false;\n    if (n == -40)\n        return false;\n\
    \    if (n == -41)\n        return false;\n    if (n == -42)\n        return false;\n\
    \    if (n == -43)\n        return false;\n    if (n == -44)\n        return false;\n\
    \    if (n == -45)\n        return false;\n    if (n == -46)\n        return false;\n\
    \    if (n == -47)\n        return false;\n    if (n == -48)\n        return false;\n\
    \    if (n == -49)\n        return false;\n    if (n == -50)\n        return false;\n\
    \    if (n == -51)\n        return false;\n    if (n == -52)\n        return false;\n\
    \    if (n == -53)\n        return false;\n    if (n == -54)\n        return false;\n\
    \    if (n == -55)\n        return false;\n    if (n == -56)\n        return false;\n\
    \    if (n == -57)\n        return false;\n    if (n == -58)\n        return false;\n\
    \    if (n == -59)\n        return false;\n    if (n == -60)\n        return false;\n\
    \    if (n == -61)\n        return false;\n    if (n == -63)\n        return false;\n\
    \    if (n == -64)\n        return false;\n    if (n == -65)\n        return false;\n\
    \    if (n == -66)\n        return false;\n    if (n == -67)\n        return false;\n\
    \    if (n == -68)\n        return false;\n    if (n == -\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1sllrqex.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmp1sllrqex.cpp:153:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  153 | }\n      | ^\n/tmp/tmp1sllrqex.cpp:152:15:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  152 |     if (n\
    \ == -\n      |        ~      ^\n      |               )\n  153 | }\n      | ~\
    \              \n/tmp/tmp1sllrqex.cpp:153:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  153 | }\n      | ^\n/tmp/tmp1sllrqex.cpp:153:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  153 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpykd0_1qg: /tmp/tmpykd0_1qg.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41 == 0) return false;\n\
    \    if (n % 47 == 0) return false;\n    if (n % 53 == 0) return false;\n    if\
    \ (n % 59 == 0) return false;\n    if (n % 61 == 0) return false;\n    if (n %\
    \ 67 == 0) return false;\n    if (n % 71 == 0) return false;\n    if (n % 73 ==\
    \ 0) return false;\n    if (n % 79 == 0) return false;\n    if (n % 83 == 0) return\
    \ false;\n    if (n % 89 == 0) return false;\n    if (n % 97 == 0) return false;\n\
    \    if (n % 103 == 0) return false;\n    if (n % 109 == 0) return false;\n  \
    \  if (n % 113 == 0) return false;\n    if (n % 127 == 0) return false;\n    if\
    \ (n % 131 == 0) return false;\n    if (n % 137 == 0) return false;\n    if (n\
    \ % 141 == 0) return false;\n    if (n % 147 == 0) return false;\n    if (n %\
    \ 151 == 0) return false;\n    if (n % 157 == 0) return false;\n    if (n % 161\
    \ == 0) return false;\n    if (n % 167 == 0) return false;\n    if (n % 171 ==\
    \ 0) return false;\n    if (n % 177 == 0) return false;\n    if (n % 181 == 0)\
    \ return false;\n    if (n % 187 == 0) return false;\n    if (n % 191 == 0) return\
    \ false;\n    if (n % 197 == 0) return false;\n    if (n % 201 == 0) return false;\n\
    \    if (n % 207 == 0) return false;\n    if (n % 211 == 0) return false;\n  \
    \  if (n % 217 == 0) return false;\n    if (n % 221 == 0) return false;\n    if\
    \ (n % 227 == 0) return false;\n    if (n % 231 == 0) return false;\n    if (n\
    \ % 237 == 0) return false;\n    if (n % 241 == 0) return false;\n    if (n %\
    \ 247 == 0) return false;\n    if (n % 251 == 0) return false;\n    if (n % 257\
    \ == 0) return false;\n    if (n % 261 == 0) return false;\n    if (n % 267 ==\
    \ 0) return false;\n    if (n % 271 == 0) return false;\n    if (n % 277 == 0)\
    \ return false;\n    if (n % 281 == 0) return false;\n    if (n % 287 == 0) return\
    \ false;\n    if (n % 291 == 0) return false;\n    if (n % 297 == 0) return false;\n\
    \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpl0u2_akb: /tmp/tmpl0u2_akb.cpp:86: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 0) return false;\n    if (n == 1) return\
    \ true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n\
    \    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if\
    \ (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n %\
    \ 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 ==\
    \ 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return\
    \ false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0) return false;\n\
    \    if (n % 47) == 0) return false;\n    if (n % 53) == 0) return false;\n  \
    \  if (n % 59) == 0) return false;\n    if (n % 61) == 0) return false;\n    if\
    \ (n % 67) == 0) return false;\n    if (n % 71) == 0) return false;\n    if (n\
    \ % 77) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n %\
    \ 89) == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n % 103)\
    \ == 0) return false;\n    if (n % 107) == 0) return false;\n    if (n % 113)\
    \ == 0) return false;\n    if (n % 121) == 0) return false;\n    if (n % 127)\
    \ == 0) return false;\n    if (n % 131) == 0) return false;\n    if (n % 137)\
    \ == 0) return false;\n    if (n % 141) == 0) return false;\n    if (n % 147)\
    \ == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n % 157)\
    \ == 0) return false;\n    if (n % 161) == 0) return false;\n    if (n % 167)\
    \ == 0) return false;\n    if (n % 173) == 0) return false;\n    if (n % 179)\
    \ == 0) return false;\n    if (n % 185) == 0) return false;\n    if (n % 191)\
    \ == 0) return false;\n    if (n % 197) == 0) return false;\n    if (n % 203)\
    \ == 0) return false;\n    if (n % 209) == 0) return false;\n    if (n % 215)\
    \ == 0) return false;\n    if (n % 221) == 0) return false;\n    if (n % 227)\
    \ == 0) return false;\n    if (n % 233) == 0) return false;\n    if (n % 239)\
    \ == 0) return false;\n    if (n % 243) == 0) return false;\n    if (n % 249)\
    \ == 0) return false;\n    if (n % 253) == 0) return false;\n    if (n % 259)\
    \ == 0) return false;\n    if (n % 263) == 0) return false;\n    if (n % 269)\
    \ == 0) return false;\n    if (n % 273) == 0) return false;\n    if (n % 279)\
    \ == 0) return false;\n    if (n % 283) == 0) return false;\n    if (n % 289)\
    \ == 0) return false;\n    if (n % 293) == 0) return false;\n    if (n % 299)\
    \ == 0) return false;\n    if (n % 303) == 0) \n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpji10qybn.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpji10qybn.cpp:29:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   29 |     if (n % 41) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:30:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   30 |     if (n % 47) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:31:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   31 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:32:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   32 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:33:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   33 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:34:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   34 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:35:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   35 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 77) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpji10qybn.cpp:40:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpji10qybn.cpp:41:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 107) == 0) return false;\n\
    \      |           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x * x,\
    \ n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp062gc291: /tmp/tmp062gc291.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x, n / 3);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_rb1coiu: /tmp/tmp_rb1coiu.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpd8x1cdbf: /tmp/tmpd8x1cdbf.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n == 2)\n        return (x == 1);\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    else\n        return is_simple_power(x, n /\
    \ 2) && is_simple_power(x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn9nlxj3d: /tmp/tmpn9nlxj3d.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqqr47nop: /tmp/tmpqqr47nop.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int result = 1;\n    for(int i = 1; i < n; i++) {\n        result\
    \ *= x;\n    }\n    return result == x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa05avo2z: /tmp/tmpa05avo2z.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (n == 19) return x == 1;\n    if (n == 20) return x == 1;\n    if (n == 21)\
    \ return x == 1;\n    if (n == 22) return x == 1;\n    if (n == 23) return x ==\
    \ 1;\n    if (n == 24) return x == 1;\n    if (n == 25) return x == 1;\n    if\
    \ (n == 26) return x == 1;\n    if (n == 27) return x == 1;\n    if (n == 28)\
    \ return x == 1;\n    if (n == 29) return x == 1;\n    if (n == 3) return x ==\
    \ 1;\n    if (n == 4) return x == 1;\n    if (n == 5) return x == 1;\n    if (n\
    \ == 6) return x == 1;\n    if (n == 7) return x == 1;\n    if (n == 8) return\
    \ x == 1;\n    if (n == 9) return x == 1;\n    if (n == 10) return x == 1;\n \
    \   if (n == 11) return x == 1;\n    if (n == 12) return x == 1;\n    if (n ==\
    \ 13) return x == 1;\n    if (n == 14) return x == 1;\n    if (n == 15) return\
    \ x == 1;\n    if (n == 16) return x == 1;\n    if (n == 17) return x == 1;\n\
    \    if (n == 18) return x == 1;\n    if (n == 19) return x == 1;\n    if (n ==\
    \ 20) return x == 1;\n    if (n == 21) return x == 1;\n    if (n == 22) return\
    \ x == 1;\n    if (n == 23) return x == 1;\n    if (n == 24) return x == 1;\n\
    \    if (n == 25) return x == 1;\n    if (n == 26) return x == 1;\n    if (n ==\
    \ 27) return x == 1;\n    if (n == 28) return x == 1;\n    if (n == 29) return\
    \ x == 1;\n    if (n == 3) return x == 1;\n    if (n == 4) return x == 1;\n  \
    \  if (n == 5) return x == 1;\n    if (n == 6) return x == 1;\n    if (n == 7)\
    \ return x == 1;\n    if (n == 8) return x == 1;\n    if (n == 9) return x ==\
    \ 1;\n    if (n == 10) return x == 1;\n    if (n == 11) return x == 1;\n    if\
    \ (n == 12) return x == 1;\n    if (n == 13) return x == 1;\n    if (n == 14)\
    \ return x == 1;\n    if (n == 15) return x == 1;\n    if (n == 16) return x ==\
    \ 1;\n    if (n == 17) return x == 1;\n    if (n == 18) return x == 1;\n    if\
    \ (\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaprptn9v.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpaprptn9v.cpp:88:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpaprptn9v.cpp:87:9:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |     if (\n\
    \      |        ~^\n      |         )\n   88 | }\n      | ~        \n/tmp/tmpaprptn9v.cpp:88:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n \
    \     | ^\n/tmp/tmpaprptn9v.cpp:88:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   88 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    long mid = n / 2;\n    return is_simple_power(x,\
    \ mid) && is_simple_power(x, mid * 2);\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp74jr54m7: /tmp/tmp74jr54m7.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  if (n % 7 == 0)\n        return is_simple_power(x, n / 7);\n    if (n % 11\
    \ == 0)\n        return is_simple_power(x, n / 11);\n    if (n % 13 == 0)\n  \
    \      return is_simple_power(x, n / 13);\n    if (n % 17 == 0)\n        return\
    \ is_simple_power(x, n / 17);\n    if (n % 19 == 0)\n        return is_simple_power(x,\
    \ n / 19);\n    if (n % 23 == 0)\n        return is_simple_power(x, n / 23);\n\
    \    if (n % 29 == 0)\n        return is_simple_power(x, n / 29);\n    if (n %\
    \ 31 == 0)\n        return is_simple_power(x, n / 31);\n    if (n % 37 == 0)\n\
    \        return is_simple_power(x, n / 37);\n    if (n % 41 == 0)\n        return\
    \ is_simple_power(x, n / 41);\n    if (n % 47 == 0)\n        return is_simple_power(x,\
    \ n / 47);\n    if (n % 53 == 0)\n        return is_simple_power(x, n / 53);\n\
    \    if (n % 59 == 0)\n        return is_simple_power(x, n / 59);\n    if (n %\
    \ 61 == 0)\n        return is_simple_power(x, n / 61);\n    if (n % 67 == 0)\n\
    \        return is_simple_power(x, n / 67);\n    if (n % 71 == 0)\n        return\
    \ is_simple_power(x, n / 71);\n    if (n % 73 == 0)\n        return is_simple_power(x,\
    \ n / 73);\n    if (n % 79 == 0)\n        return is_simple_power(x, n / 79);\n\
    \    if (n % 83 == 0)\n        return is_simple_power(x, n / 83);\n    if (n %\
    \ 89 == 0)\n        return is_simple_power(x, n / 89);\n    if (n % 97 == 0)\n\
    \        return is_simple_power(x, n / 97);\n    if (n % 101 == 0)\n        return\
    \ is_simple_power(x, n / 101);\n    if (n % 103 == 0)\n        return is_simple_power(x,\
    \ n / 103);\n    if (n % 107 == 0)\n        return is_simple_power(x, n / 107);\n\
    \    if (n % 111 == 0)\n        return is_simple_power(x, n / 111);\n    if (n\
    \ % 113 == 0)\n        return is_simple_power(x, n / 113);\n    if (n % 117 ==\
    \ 0)\n        return is_simple_power(x, n / 117);\n    if (n % 121 == 0)\n   \
    \     return is_simple_power(x, n / 121);\n    if (n % 123 == 0)\n        return\
    \ \n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzkrta6wr.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpzkrta6wr.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpzkrta6wr.cpp:83:15:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |         return\n\
    \      |               ^\n      |               ;\n   84 | }\n      | ~      \
    \        \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    return is_simple_power(x * x, n / 2);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6vfrmqkm: /tmp/tmp6vfrmqkm.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans=1;\n    for(int i=0;i<n;i++)\n   \
    \ {\n        ans*=x;\n    }\n    return ans==x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxhhu4cr0: /tmp/tmpxhhu4cr0.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    long long int temp = x;\n\
    \    while (temp > 0) {\n        res *= temp;\n        temp--;\n    }\n    if\
    \ (res == x) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphto3941z: /tmp/tmphto3941z.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8o4alueo: /tmp/tmp8o4alueo.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvyg8246s: /tmp/tmpvyg8246s.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == -1) return\
    \ false;\n    if (n == -2) return false;\n    if (n == -3) return false;\n   \
    \ if (n == -4) return false;\n    if (n == -5) return false;\n    if (n == -6)\
    \ return false;\n    if (n == -7) return false;\n    if (n == -8) return false;\n\
    \    if (n == -9) return false;\n    if (n == -10) return false;\n    if (n ==\
    \ -11) return false;\n    if (n == -12) return false;\n    if (n == -13) return\
    \ false;\n    if (n == -14) return false;\n    if (n == -15) return false;\n \
    \   if (n == -16) return false;\n    if (n == -17) return false;\n    if (n ==\
    \ -18) return false;\n    if (n == -19) return false;\n    if (n == -20) return\
    \ false;\n    if (n == -21) return false;\n    if (n == -22) return false;\n \
    \   if (n == -23) return false;\n    if (n == -24) return false;\n    if (n ==\
    \ -25) return false;\n    if (n == -26) return false;\n    if (n == -27) return\
    \ false;\n    if (n == -28) return false;\n    if (n == -29) return false;\n \
    \   if (n == -30) return false;\n    if (n == -31) return false;\n    if (n ==\
    \ -32) return false;\n    if (n == -33) return false;\n    if (n == -34) return\
    \ false;\n    if (n == -35) return false;\n    if (n == -36) return false;\n \
    \   if (n == -37) return false;\n    if (n == -38) return false;\n    if (n ==\
    \ -39) return false;\n    if (n == -40) return false;\n    if (n == -41) return\
    \ false;\n    if (n == -42) return false;\n    if (n == -43) return false;\n \
    \   if (n == -44) return false;\n    if (n == -45) return false;\n    if (n ==\
    \ -46) return false;\n    if (n == -47) return false;\n    if (n == -48) return\
    \ false;\n    if (n == -49) return false;\n    if (n == -50) return false;\n \
    \   if (n == -51) return false;\n    if (n == -52) return false;\n    if (n ==\
    \ -53) return false;\n    if (n == -54) return false;\n    if (n == -55) return\
    \ false;\n    if (n == -56) return false;\n    if (n == -57) return false;\n \
    \   if (n == -58) return false;\n    if (n == -59) return false;\n    if (n ==\
    \ -60) return false;\n    if (n == -61) return false;\n    if (n == -62) return\
    \ false;\n    if (n == -63) return false;\n    if (n == -64) return false;\n \
    \   if (n == -65) return false;\n    if (n == -66) return false;\n    if (n ==\
    \ -67) return false;\n    if (n == -68) return false;\n    if (n == -69) return\
    \ false;\n    if (n == -70) return false;\n    if (n == -71) return false;\n \
    \   if (n == -72) return false;\n    if (n == -73) return false;\n    if (n ==\
    \ -74) return false;\n    if (n == -75) return false;\n    if (n == -76) return\
    \ false;\n    if (n == -77) return false;\n    if (n == -78) return false;\n \
    \   if (n == -79) return false;\n    if (n == -80) return false;\n    if (n ==\
    \ -81) return false;\n    if (n == -82) return false;\n    if (n == -83) return\
    \ false;\n    if (n == -84) return false;\n    if (n == -85) return false;\n \
    \   if (n == -86) return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1ptvplx1: /tmp/tmp1ptvplx1.cpp:105: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpzp053lcq: /tmp/tmpzp053lcq.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int res = 1;\n    for(int i = 1; i < n; i++)\
    \ {\n        res = res * x;\n    }\n    return res == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdusv5nta: /tmp/tmpdusv5nta.cpp:26: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3\
    \ == 0)\n        return is_simple_power(x, n / 3);\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpef2nxwfz: /tmp/tmpef2nxwfz.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int a = 1;\n    long long int b = 1;\n   \
    \ long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n \
    \   long long int f = 1;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    long long int v = 1;\n    long long int w = 1;\n\
    \    long long int x = 1;\n    long long int y = 1;\n    long long int z = 1;\n\
    \    long long int A = 1;\n    long long int B = 1;\n    long long int C = 1;\n\
    \    long long int D = 1;\n    long long int E = 1;\n    long long int F = 1;\n\
    \    long long int G = 1;\n    long long int H = 1;\n    long long int I = 1;\n\
    \    long long int J = 1;\n    long long int K = 1;\n    long long int L = 1;\n\
    \    long long int M = 1;\n    long long int N = 1;\n    long long int O = 1;\n\
    \    long long int P = 1;\n    long long int Q = 1;\n    long long int R = 1;\n\
    \    long long int S = 1;\n    long long int T = 1;\n    long long int U = 1;\n\
    \    long long int V = 1;\n    long long int W = 1;\n    long long int X = 1;\n\
    \    long long int Y = 1;\n    long long int Z = 1;\n    long long int A1 = 1;\n\
    \    long long int B1 = 1;\n    long long int C1 = 1;\n    long long int D1 =\
    \ 1;\n    long long int E1 = 1;\n    long long int F1 = 1;\n    long long int\
    \ G1 = 1;\n    long long int H1 = 1;\n    long long int I1 = 1;\n    long long\
    \ int J1 = 1;\n    long long int K1 = 1;\n    long long int L1 = 1;\n    long\
    \ long int M1 = 1;\n    long long int N1 = 1;\n    long long int O1 = 1;\n   \
    \ long long int P1 = 1;\n    long long int Q1 = 1;\n    long long int R1 = 1;\n\
    \    long long int S1 = 1;\n    long long int T1 = 1;\n    long long \n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqvp9r4u2.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpqvp9r4u2.cpp:28:19: error: declaration of \u2018long\
    \ long int n\u2019 shadows a parameter\n   28 |     long long int n = 1;\n   \
    \   |                   ^\n/tmp/tmpqvp9r4u2.cpp:38:19: error: declaration of \u2018\
    long long int x\u2019 shadows a parameter\n   38 |     long long int x = 1;\n\
    \      |                   ^\n/tmp/tmpqvp9r4u2.cpp:88:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpqvp9r4u2.cpp:88:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (x % n ==\
    \ 0)\n        return is_simple_power(x, n / n);\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0shwk2j1: /tmp/tmp0shwk2j1.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == -1)\n        return false;\n    if (n % 2 == 0)\n        return\
    \ is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x, n / 5);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppk84e1_b: /tmp/tmppk84e1_b.cpp:31: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    long long ans = 1;\n    long long temp = 1;\n\
    \    long long power = 1;\n    long long count = 0;\n    while(temp <= x){\n \
    \       power = power * temp;\n        count++;\n        temp = power;\n    }\n\
    \    if(count == n){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n       \
    \ return is_simple_power(x, n / 3);\n    if (n % 5 == 0)\n        return is_simple_power(x,\
    \ n / 5);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphokkm4cp: /tmp/tmphokkm4cp.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n    long long int ans = 1;\n    long long int power = 1;\n\
    \    long long int temp = 1;\n    long long int power = 1;\n    long long int\
    \ temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n    long\
    \ long int power = 1;\n    long long int temp = 1;\n    long long int power =\
    \ 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int power = 1;\n    long long\
    \ int temp = 1;\n    long long int power = 1;\n    long long int temp = 1;\n \
    \   long long int power = 1;\n    long long int temp = 1;\n    long long int power\
    \ = 1;\n    long long int temp = 1;\n    long long int \n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5aub1lm.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpg5aub1lm.cpp:18:19: error: redeclaration of \u2018\
    long long int power\u2019\n   18 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpg5aub1lm.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpg5aub1lm.cpp:19:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   19 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpg5aub1lm.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpg5aub1lm.cpp:20:19: error: redeclaration of \u2018\
    long long int power\u2019\n   20 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpg5aub1lm.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpg5aub1lm.cpp:21:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   21 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpg5aub1lm.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpg5aub1lm.cpp:22:19: error: redeclaration of \u2018\
    long long int power\u2019\n   22 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpg5aub1lm.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 |     long long int power = 1;\n      |    \
    \               ^~~~~\n/tmp/tmpg5aub1lm.cpp:23:19: error: redeclaration of \u2018\
    long long int temp\u2019\n   23 |     long long int temp = 1;\n      |       \
    \            ^~~~\n/tmp/tmpg5aub1lm.cpp:17:19: note: \u2018long long int temp\u2019\
    \ previously declared here\n   17 |     long long int temp = 1;\n      |     \
    \              ^~~~\n/tmp/tmpg5aub1lm.cpp:24:19: error: redeclaration of \u2018\
    long long int power\u2019\n   24 |     long long int power = 1;\n      |     \
    \              ^~~~~\n/tmp/tmpg5aub1lm.cpp:16:19: note: \u2018long long int power\u2019\
    \ previously declared here\n   16 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 0) {\n        return\
    \ false;\n    }\n    if (n % 2 == 0) {\n        return is_simple_power(x, n /\
    \ 2);\n    }\n    return is_simple_power(x * x, n / 2);\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn1ng3ige: /tmp/tmpn1ng3ige.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 2 == 1) return false;\n    return\
    \ is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_e3ky_hk: /tmp/tmp_e3ky_hk.cpp:22: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk1ngmap5: /tmp/tmpk1ngmap5.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return is_simple_power(x, n - 1);\n    if (n % 2 ==\
    \ 0)\n        return is_simple_power(x, n / 2);\n    if (n % 3 == 0)\n       \
    \ return is_simple_power(x, n / 3);\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdfis36vn: /tmp/tmpdfis36vn.cpp:28: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpm7z3qqu6: /tmp/tmpm7z3qqu6.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (x % n == 0)\n        return is_simple_power(x\
    \ / n, n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpub350kz6: /tmp/tmpub350kz6.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1)\n        return true;\n    if (n % 2 == 0)\n        return is_simple_power(x,\
    \ n / 2);\n    if (n % 3 == 0)\n        return is_simple_power(x, n / 3);\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg6gfz6nc: /tmp/tmpg6gfz6nc.cpp:25: int main(): Assertion `candidate((143214),\
    \ (16)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long long int a = 1;\n    long long int b = 1;\n    long long int c = 1;\n\
    \    long long int d = 1;\n    long long int e = 1;\n    long long int f = 0;\n\
    \    long long int g = 1;\n    long long int h = 1;\n    long long int i = 1;\n\
    \    long long int j = 1;\n    long long int k = 1;\n    long long int l = 1;\n\
    \    long long int m = 1;\n    long long int n = 1;\n    long long int o = 1;\n\
    \    long long int p = 1;\n    long long int q = 1;\n    long long int r = 1;\n\
    \    long long int s = 1;\n    long long int t = 1;\n    long long int u = 1;\n\
    \    long long int v = 1;\n    long long int w = 1;\n    long long int x = 1;\n\
    \    long long int y = 1;\n    long long int z = 1;\n    long long int a = 1;\n\
    \    long long int b = 1;\n    long long int c = 1;\n    long long int d = 1;\n\
    \    long long int e = 1;\n    long long int f = 0;\n    long long int g = 1;\n\
    \    long long int h = 1;\n    long long int i = 1;\n    long long int j = 1;\n\
    \    long long int k = 1;\n    long long int l = 1;\n    long long int m = 1;\n\
    \    long long int n = 1;\n    long long int o = 1;\n    long long int p = 1;\n\
    \    long long int q = 1;\n    long long int r = 1;\n    long long int s = 1;\n\
    \    long long int t = 1;\n    long long int u = 1;\n    long long int v = 1;\n\
    \    long long int w = 1;\n    long long int x = 1;\n    long long int y = 1;\n\
    \    long long int z = 1;\n    long long int a = 1;\n    long long int b = 1;\n\
    \    long long int c = 1;\n    long long int d = 1;\n    long long int e = 1;\n\
    \    long long int f = 0;\n    long long int g = 1;\n    long long int h = 1;\n\
    \    long long int i = 1;\n    long long int j = 1;\n    long long int k = 1;\n\
    \    long long int l = 1;\n    long long int m = 1;\n    long long int n = 1;\n\
    \    long long int o = 1;\n    long long int p = 1;\n    long long int q = 1;\n\
    \    long long int r = 1;\n    long long int s = 1;\n    long long int t = 1;\n\
    \    long long int u = 1;\n    \n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp761vrx5.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpp761vrx5.cpp:27:19: error: declaration of \u2018long\
    \ long int n\u2019 shadows a parameter\n   27 |     long long int n = 1;\n   \
    \   |                   ^\n/tmp/tmpp761vrx5.cpp:37:19: error: declaration of \u2018\
    long long int x\u2019 shadows a parameter\n   37 |     long long int x = 1;\n\
    \      |                   ^\n/tmp/tmpp761vrx5.cpp:40:19: error: redeclaration\
    \ of \u2018long long int a\u2019\n   40 |     long long int a = 1;\n      |  \
    \                 ^\n/tmp/tmpp761vrx5.cpp:14:19: note: \u2018long long int a\u2019\
    \ previously declared here\n   14 |     long long int a = 1;\n      |        \
    \           ^\n/tmp/tmpp761vrx5.cpp:41:19: error: redeclaration of \u2018long\
    \ long int b\u2019\n   41 |     long long int b = 1;\n      |                \
    \   ^\n/tmp/tmpp761vrx5.cpp:15:19: note: \u2018long long int b\u2019 previously\
    \ declared here\n   15 |     long long int b = 1;\n      |                   ^\n\
    /tmp/tmpp761vrx5.cpp:42:19: error: redeclaration of \u2018long long int c\u2019\
    \n   42 |     long long int c = 1;\n      |                   ^\n/tmp/tmpp761vrx5.cpp:16:19:\
    \ note: \u2018long long int c\u2019 previously declared here\n   16 |     long\
    \ long int c = 1;\n      |                   ^\n/tmp/tmpp761vrx5.cpp:43:19: error:\
    \ redeclaration of \u2018long long int d\u2019\n   43 |     long long int d =\
    \ 1;\n      |                   ^\n/tmp/tmpp761vrx5.cpp:17:19: note: \u2018long\
    \ long int d\u2019 previously declared here\n   17 |     long long int d = 1;\n\
    \      |                   ^\n/tmp/tmpp761vrx5.cpp:44:19: error: redeclaration\
    \ of \u2018long long int e\u2019\n   44 |     long long int e = 1;\n      |  \
    \                 ^\n/tmp/tmpp761vrx5.cpp:18:19: note: \u2018long long int e\u2019\
    \ previously declared here\n   18 |     long long int e = 1;\n      |        \
    \           ^\n/tmp/tmpp761vrx5.cpp:45:19: error: redeclaration of \u2018long\
    \ long int f\u2019\n   45 |     long long int f = 0;\n      |                \
    \   ^\n/tmp/tmpp761vrx5.cpp:19:19: note: \u2018long long int f\u2019 previously\
    \ declared here\n   19 |     long long int f = 0;\n      |                   ^\n\
    /tmp/tmpp761vrx5.cpp:46:19: error: redeclaration of \u2018long "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return true;\n    if (n % 2 == 0)\
    \ return false;\n    long a = x;\n    long b = n;\n    while (b > 0) {\n     \
    \   if (b % 2 == 0) {\n            a = a * x;\n        }\n        b = b >> 1;\n\
    \    }\n    return a == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqtkw5g6d: /tmp/tmpqtkw5g6d.cpp:29: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x % n == 0)\n        return is_simple_power(x, n / n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcf60to50: /tmp/tmpcf60to50.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x, n / 2);\n    else\n  \
    \      return is_simple_power(x * x, n / 2);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuqfw6lny: /tmp/tmpuqfw6lny.cpp:25: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0)\n        return true;\n    if (n == 1)\n        return (x == 1);\n\
    \    if (x == 1)\n        return false;\n    if (x % n == 0)\n        return is_simple_power(x\
    \ / n, n);\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1qapraec: /tmp/tmp1qapraec.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0)\
    \ return is_simple_power(x, n / 2);\n    if (n % 3 == 0) return is_simple_power(x,\
    \ n / 3);\n    if (n % 5 == 0) return is_simple_power(x, n / 5);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfmki0od4: /tmp/tmpfmki0od4.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
