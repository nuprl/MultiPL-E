name: HumanEval_30_get_positive
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx96tsc5d: /tmp/tmpx96tsc5d.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnwl54x51: /tmp/tmpnwl54x51.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp91ui99cm: /tmp/tmp91ui99cm.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3c_mbr8i: /tmp/tmp3c_mbr8i.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1_t01y70: /tmp/tmp1_t01y70.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmprh4dg3nf: /tmp/tmprh4dg3nf.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpl9dcb8hf: /tmp/tmpl9dcb8hf.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphbzusvrc: /tmp/tmphbzusvrc.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8xq8my_0: /tmp/tmp8xq8my_0.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n  \
    \  }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsp9_bf_p: /tmp/tmpsp9_bf_p.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpf9didghv: /tmp/tmpf9didghv.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq81osrxe: /tmp/tmpq81osrxe.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbnsiz8ea: /tmp/tmpbnsiz8ea.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpreg3hlgr: /tmp/tmpreg3hlgr.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkzk3quxo: /tmp/tmpkzk3quxo.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7g5lhg82: /tmp/tmp7g5lhg82.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqoa4j6ee: /tmp/tmpqoa4j6ee.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxvxp_1ez: /tmp/tmpxvxp_1ez.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp657otr4a: /tmp/tmp657otr4a.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbeqdxjn9: /tmp/tmpbeqdxjn9.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqv3vwvil: /tmp/tmpqv3vwvil.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbxck9ckg: /tmp/tmpbxck9ckg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx2ydtqat: /tmp/tmpx2ydtqat.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpcgd5rym_: /tmp/tmpcgd5rym_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq0u4awzx: /tmp/tmpq0u4awzx.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmg1lr1rq: /tmp/tmpmg1lr1rq.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > 0) {\n            sum += l[i];\n            positive.push_back(l[i]);\n  \
    \      }\n    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpe_j4d2o7: /tmp/tmpe_j4d2o7.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr18sbe6m: /tmp/tmpr18sbe6m.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps90tpkdh: /tmp/tmps90tpkdh.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy7kpbabk: /tmp/tmpy7kpbabk.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_xh96t35: /tmp/tmp_xh96t35.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfxnas__t: /tmp/tmpfxnas__t.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwcvuqpxj: /tmp/tmpwcvuqpxj.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7r10ywff: /tmp/tmp7r10ywff.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpm0owsjne: /tmp/tmpm0owsjne.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmph6lnc5xx: /tmp/tmph6lnc5xx.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5hiceubs: /tmp/tmp5hiceubs.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8jlprm9r: /tmp/tmp8jlprm9r.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpazxgjcg2: /tmp/tmpazxgjcg2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1izfo47f: /tmp/tmp1izfo47f.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpaqe2lqom: /tmp/tmpaqe2lqom.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqphg0189: /tmp/tmpqphg0189.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpotr2oj92: /tmp/tmpotr2oj92.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwz0tzpde: /tmp/tmpwz0tzpde.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsw8m0u11: /tmp/tmpsw8m0u11.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzqqotobf: /tmp/tmpzqqotobf.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplo25seec: /tmp/tmplo25seec.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwlcos_8g: /tmp/tmpwlcos_8g.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw8bv5qbf: /tmp/tmpw8bv5qbf.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphq0r7z8x: /tmp/tmphq0r7z8x.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqlqemnb3: /tmp/tmpqlqemnb3.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8fov6raz: /tmp/tmp8fov6raz.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmph4_pv9yq: /tmp/tmph4_pv9yq.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_jf_67lw: /tmp/tmp_jf_67lw.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplxvs3qk6: /tmp/tmplxvs3qk6.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpacy2p_og: /tmp/tmpacy2p_og.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_x3alb2f: /tmp/tmp_x3alb2f.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpeube6r2u: /tmp/tmpeube6r2u.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    if (sum\
    \ < 0) {\n        std::reverse(positive.begin(), positive.end());\n    }\n   \
    \ return positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1l8644l3: /tmp/tmp1l8644l3.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5m60iebd: /tmp/tmp5m60iebd.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdm67_8sd: /tmp/tmpdm67_8sd.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_t_tb2al: /tmp/tmp_t_tb2al.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpb3icpcb2: /tmp/tmpb3icpcb2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzw_g_csv: /tmp/tmpzw_g_csv.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpb3vv9kur: /tmp/tmpb3vv9kur.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphkcbgc59: /tmp/tmphkcbgc59.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6a2hmx76: /tmp/tmp6a2hmx76.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2y3_5uft: /tmp/tmp2y3_5uft.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdeh_9_nu: /tmp/tmpdeh_9_nu.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpu4cxuzij: /tmp/tmpu4cxuzij.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmporif6mwq: /tmp/tmporif6mwq.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfcbi7d_s: /tmp/tmpfcbi7d_s.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpag64d52i: /tmp/tmpag64d52i.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa90rtu6q: /tmp/tmpa90rtu6q.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9bxm8mst: /tmp/tmp9bxm8mst.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0fdr2dj_: /tmp/tmp0fdr2dj_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr_grsvp_: /tmp/tmpr_grsvp_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvpo05xzy: /tmp/tmpvpo05xzy.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8kz69wr5: /tmp/tmp8kz69wr5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgm3yif76: /tmp/tmpgm3yif76.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwpkyboba: /tmp/tmpwpkyboba.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbxl23gtx: /tmp/tmpbxl23gtx.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo7h0yknv: /tmp/tmpo7h0yknv.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        sum += i;\n        if (sum\
    \ >= 0) {\n            positive.push_back(i);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5xq249bw: /tmp/tmp5xq249bw.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzdz31y34: /tmp/tmpzdz31y34.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvo9qbs5z: /tmp/tmpvo9qbs5z.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvz8_23de: /tmp/tmpvz8_23de.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk10_eknt: /tmp/tmpk10_eknt.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpadtm3mrw: /tmp/tmpadtm3mrw.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpra4m6ma5: /tmp/tmpra4m6ma5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphnrm7od0: /tmp/tmphnrm7od0.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvcuqhbdy: /tmp/tmpvcuqhbdy.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxb_o3v_4: /tmp/tmpxb_o3v_4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ temp;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpu3wtf59u: /tmp/tmpu3wtf59u.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdomdci87: /tmp/tmpdomdci87.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_du6s3_o: /tmp/tmp_du6s3_o.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpakymdjm7: /tmp/tmpakymdjm7.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3a_fmyzf: /tmp/tmp3a_fmyzf.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpm0ayylys: /tmp/tmpm0ayylys.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6d4d39pw: /tmp/tmp6d4d39pw.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpikyy3l7b: /tmp/tmpikyy3l7b.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsu106793: /tmp/tmpsu106793.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2ywqvw_q: /tmp/tmp2ywqvw_q.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpcm500i90: /tmp/tmpcm500i90.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3wi4bf7p: /tmp/tmp3wi4bf7p.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3wn1wpde: /tmp/tmp3wn1wpde.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq3otck4y: /tmp/tmpq3otck4y.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfnkpwca4: /tmp/tmpfnkpwca4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnwfbb6xx: /tmp/tmpnwfbb6xx.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd4p8n921: /tmp/tmpd4p8n921.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnt47o8vq: /tmp/tmpnt47o8vq.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    return\
    \ positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy5tx04sv: /tmp/tmpy5tx04sv.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmcb0t_e5: /tmp/tmpmcb0t_e5.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_mcgmq6p: /tmp/tmp_mcgmq6p.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1d1inwah: /tmp/tmp1d1inwah.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzv2bkk80: /tmp/tmpzv2bkk80.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8kzfbikl: /tmp/tmp8kzfbikl.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa7a9ibiv: /tmp/tmpa7a9ibiv.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0qnh5yf2: /tmp/tmp0qnh5yf2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo1knfwd_: /tmp/tmpo1knfwd_.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpciv0r823: /tmp/tmpciv0r823.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9xbqa40k: /tmp/tmp9xbqa40k.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpev0hid70: /tmp/tmpev0hid70.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpev1b538t: /tmp/tmpev1b538t.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppsxednoj: /tmp/tmppsxednoj.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp17xlmz6z: /tmp/tmp17xlmz6z.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbwa8ih8a: /tmp/tmpbwa8ih8a.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0jjlbg4o: /tmp/tmp0jjlbg4o.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpktt1bq1n: /tmp/tmpktt1bq1n.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp57l6lbum: /tmp/tmp57l6lbum.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptzpi9gjj: /tmp/tmptzpi9gjj.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoxpax9yk: /tmp/tmpoxpax9yk.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv5tomdp9: /tmp/tmpv5tomdp9.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyc6n_j55: /tmp/tmpyc6n_j55.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7sb79t6x: /tmp/tmp7sb79t6x.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq11k_wo6: /tmp/tmpq11k_wo6.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzkrqb5af: /tmp/tmpzkrqb5af.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9jkjdwn8: /tmp/tmp9jkjdwn8.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuzz4sixg: /tmp/tmpuzz4sixg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    if (sum\
    \ > 0) {\n        positive.push_back(sum);\n    }\n    return positive;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0y3t738m: /tmp/tmp0y3t738m.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps_wtyhwd: /tmp/tmps_wtyhwd.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq550mpzs: /tmp/tmpq550mpzs.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6bftfvqg: /tmp/tmp6bftfvqg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzeqg7v_q: /tmp/tmpzeqg7v_q.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpm9gugarp: /tmp/tmpm9gugarp.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfjkwvds0: /tmp/tmpfjkwvds0.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvy6rjmr_: /tmp/tmpvy6rjmr_.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbwaawi0y: /tmp/tmpbwaawi0y.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp60s8w1iz: /tmp/tmp60s8w1iz.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmmmdd7nc: /tmp/tmpmmmdd7nc.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmple65p0hx: /tmp/tmple65p0hx.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3r40an4s: /tmp/tmp3r40an4s.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0w8994n0: /tmp/tmp0w8994n0.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5f4dk8e2: /tmp/tmp5f4dk8e2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9q8fvvqn: /tmp/tmp9q8fvvqn.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1fuc0aqy: /tmp/tmp1fuc0aqy.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpj8f3yio2: /tmp/tmpj8f3yio2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpogrksvci: /tmp/tmpogrksvci.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplyz6qbtq: /tmp/tmplyz6qbtq.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw819sjwk: /tmp/tmpw819sjwk.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjz87hpip: /tmp/tmpjz87hpip.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9gnipqc5: /tmp/tmp9gnipqc5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr821ruv9: /tmp/tmpr821ruv9.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp99x4amif: /tmp/tmp99x4amif.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3qfb4yj1: /tmp/tmp3qfb4yj1.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8q15z7zd: /tmp/tmp8q15z7zd.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmtxi2845: /tmp/tmpmtxi2845.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp363_4_07: /tmp/tmp363_4_07.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnxvc3neh: /tmp/tmpnxvc3neh.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuehx6962: /tmp/tmpuehx6962.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqpne9imt: /tmp/tmpqpne9imt.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn6wuhtui: /tmp/tmpn6wuhtui.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq2kwpa50: /tmp/tmpq2kwpa50.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpao0ep606: /tmp/tmpao0ep606.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9ze5wmel: /tmp/tmp9ze5wmel.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo0fh6_vo: /tmp/tmpo0fh6_vo.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        sum += i;\n        if (sum\
    \ >= 0) {\n            positive.push_back(i);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgi6del9q: /tmp/tmpgi6del9q.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3tcovecp: /tmp/tmp3tcovecp.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1vq7qqnk: /tmp/tmp1vq7qqnk.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5kam8cv5: /tmp/tmp5kam8cv5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn5afz52a: /tmp/tmpn5afz52a.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
