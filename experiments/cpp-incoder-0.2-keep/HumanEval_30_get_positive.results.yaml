name: HumanEval_30_get_positive
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppagz8dw5: /tmp/tmppagz8dw5.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpovdzbphv: /tmp/tmpovdzbphv.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpg6r3adfh: /tmp/tmpg6r3adfh.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxqtbu0vs: /tmp/tmpxqtbu0vs.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp275vhov8: /tmp/tmp275vhov8.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpz7qvj8d7: /tmp/tmpz7qvj8d7.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7eoqd_xr: /tmp/tmp7eoqd_xr.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpiz__do0w: /tmp/tmpiz__do0w.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpydfa48eu: /tmp/tmpydfa48eu.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n  \
    \  }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8h8mmt50: /tmp/tmp8h8mmt50.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1h_x4cy_: /tmp/tmp1h_x4cy_.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpncwhy_tf: /tmp/tmpncwhy_tf.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp71jz9uc0: /tmp/tmp71jz9uc0.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp51o04h84: /tmp/tmp51o04h84.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_uo8k723: /tmp/tmp_uo8k723.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdz47_3d3: /tmp/tmpdz47_3d3.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoepr8mie: /tmp/tmpoepr8mie.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpthckda96: /tmp/tmpthckda96.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwrp_6xz7: /tmp/tmpwrp_6xz7.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphyy965j_: /tmp/tmphyy965j_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9jq_jc2p: /tmp/tmp9jq_jc2p.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnt4iunur: /tmp/tmpnt4iunur.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8dhtgy91: /tmp/tmp8dhtgy91.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5xc2f2tz: /tmp/tmp5xc2f2tz.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmz0rmfiz: /tmp/tmpmz0rmfiz.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyeyx9qnq: /tmp/tmpyeyx9qnq.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > 0) {\n            sum += l[i];\n            positive.push_back(l[i]);\n  \
    \      }\n    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsa_dmwox: /tmp/tmpsa_dmwox.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx0ij2l1_: /tmp/tmpx0ij2l1_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsteckh51: /tmp/tmpsteckh51.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4xzlbvk_: /tmp/tmp4xzlbvk_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfa9ap_ot: /tmp/tmpfa9ap_ot.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpii0oh721: /tmp/tmpii0oh721.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0npvnriw: /tmp/tmp0npvnriw.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4d62qh1z: /tmp/tmp4d62qh1z.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsyg4lix7: /tmp/tmpsyg4lix7.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjhk86ryy: /tmp/tmpjhk86ryy.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvy0w7u5v: /tmp/tmpvy0w7u5v.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw1ls4mx5: /tmp/tmpw1ls4mx5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbsn_xn8n: /tmp/tmpbsn_xn8n.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfpbtt2pg: /tmp/tmpfpbtt2pg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpenfsunn4: /tmp/tmpenfsunn4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8we9qnwa: /tmp/tmp8we9qnwa.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwltm5ctp: /tmp/tmpwltm5ctp.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgwt8td3r: /tmp/tmpgwt8td3r.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn1oayf4s: /tmp/tmpn1oayf4s.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwnqz_w26: /tmp/tmpwnqz_w26.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpnoanjg0y: /tmp/tmpnoanjg0y.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa56l20_l: /tmp/tmpa56l20_l.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0l8ewwpo: /tmp/tmp0l8ewwpo.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk31n2lto: /tmp/tmpk31n2lto.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx0lo3aph: /tmp/tmpx0lo3aph.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa78r2fig: /tmp/tmpa78r2fig.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp33bno1on: /tmp/tmp33bno1on.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3pr18kbd: /tmp/tmp3pr18kbd.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgahtj7sj: /tmp/tmpgahtj7sj.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdnidhksk: /tmp/tmpdnidhksk.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphy73z_4h: /tmp/tmphy73z_4h.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmprck5arb2: /tmp/tmprck5arb2.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    if (sum\
    \ < 0) {\n        std::reverse(positive.begin(), positive.end());\n    }\n   \
    \ return positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpu_obqctk: /tmp/tmpu_obqctk.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwv5gx87u: /tmp/tmpwv5gx87u.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfmb26i5i: /tmp/tmpfmb26i5i.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkk_tfxhl: /tmp/tmpkk_tfxhl.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9vlchyyt: /tmp/tmp9vlchyyt.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpew4mald4: /tmp/tmpew4mald4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfrq22st1: /tmp/tmpfrq22st1.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp42zzrccl: /tmp/tmp42zzrccl.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp89ks_ta_: /tmp/tmp89ks_ta_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyvg3ch6b: /tmp/tmpyvg3ch6b.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_bd7eh5x: /tmp/tmp_bd7eh5x.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpotika8fb: /tmp/tmpotika8fb.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqjw0i9mi: /tmp/tmpqjw0i9mi.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdamb7i1x: /tmp/tmpdamb7i1x.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmazxk9ho: /tmp/tmpmazxk9ho.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuf73ayik: /tmp/tmpuf73ayik.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd_baws1w: /tmp/tmpd_baws1w.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsc_2mo3x: /tmp/tmpsc_2mo3x.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpny6tueq_: /tmp/tmpny6tueq_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwcxe6fh_: /tmp/tmpwcxe6fh_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphkaqjl3n: /tmp/tmphkaqjl3n.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp79ghc7tb: /tmp/tmp79ghc7tb.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpizkkh01s: /tmp/tmpizkkh01s.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx6fncen_: /tmp/tmpx6fncen_.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5hs3qx6r: /tmp/tmp5hs3qx6r.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        sum += i;\n        if (sum\
    \ >= 0) {\n            positive.push_back(i);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpudxolnd5: /tmp/tmpudxolnd5.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpj2wjbrp7: /tmp/tmpj2wjbrp7.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgfvatbjz: /tmp/tmpgfvatbjz.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp74di0viz: /tmp/tmp74di0viz.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpblxgfvnw: /tmp/tmpblxgfvnw.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplug94bin: /tmp/tmplug94bin.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpegeyc916: /tmp/tmpegeyc916.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx_g0orjl: /tmp/tmpx_g0orjl.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo1sokgt4: /tmp/tmpo1sokgt4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpab3srwzm: /tmp/tmpab3srwzm.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ temp;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n\
    \            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps42y1rqu: /tmp/tmps42y1rqu.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxu1_h90g: /tmp/tmpxu1_h90g.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkyuaeenn: /tmp/tmpkyuaeenn.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy086w7ol: /tmp/tmpy086w7ol.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3t8bu94s: /tmp/tmp3t8bu94s.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzzkirqht: /tmp/tmpzzkirqht.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplxujbsz2: /tmp/tmplxujbsz2.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjgyjrx63: /tmp/tmpjgyjrx63.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8riqk6zt: /tmp/tmp8riqk6zt.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmo9qru9t: /tmp/tmpmo9qru9t.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplf11iy00: /tmp/tmplf11iy00.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp93y88k57: /tmp/tmp93y88k57.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa5d7gf_2: /tmp/tmpa5d7gf_2.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplw8u_wy9: /tmp/tmplw8u_wy9.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvzwtfyk0: /tmp/tmpvzwtfyk0.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsxk4_b28: /tmp/tmpsxk4_b28.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpj0xxpdi6: /tmp/tmpj0xxpdi6.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfq3bl4fq: /tmp/tmpfq3bl4fq.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    return\
    \ positive;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8kkjxme_: /tmp/tmp8kkjxme_.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjm2smm0p: /tmp/tmpjm2smm0p.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpb2tq3zel: /tmp/tmpb2tq3zel.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpog0dntui: /tmp/tmpog0dntui.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzk_o0r3l: /tmp/tmpzk_o0r3l.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i > 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2kf9dka8: /tmp/tmp2kf9dka8.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqzhzihnh: /tmp/tmpqzhzihnh.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2joimhw6: /tmp/tmp2joimhw6.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp_ovf_b7: /tmp/tmpp_ovf_b7.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy6zk7hyk: /tmp/tmpy6zk7hyk.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk5fhigyh: /tmp/tmpk5fhigyh.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn5eahhio: /tmp/tmpn5eahhio.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp44275azg: /tmp/tmp44275azg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbczzsyoq: /tmp/tmpbczzsyoq.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp05luz0ck: /tmp/tmp05luz0ck.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) {\n            res.push_back(i);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphzshzfc5: /tmp/tmphzshzfc5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_gsx6gmc: /tmp/tmp_gsx6gmc.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpz9s2_rlx: /tmp/tmpz9s2_rlx.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0c1n_f9h: /tmp/tmp0c1n_f9h.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    positive.reserve(l.size());\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpykqc9q8d: /tmp/tmpykqc9q8d.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsr5a1ov4: /tmp/tmpsr5a1ov4.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp142ax_91: /tmp/tmp142ax_91.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7frkq92t: /tmp/tmp7frkq92t.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp78cv7a8r: /tmp/tmp78cv7a8r.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8t7g7lt8: /tmp/tmp8t7g7lt8.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpc044p46a: /tmp/tmpc044p46a.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn7cpgpwo: /tmp/tmpn7cpgpwo.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps_w59d6c: /tmp/tmps_w59d6c.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        if (i >= 0) {\n        \
    \    sum += i;\n            positive.push_back(i);\n        }\n    }\n    if (sum\
    \ > 0) {\n        positive.push_back(sum);\n    }\n    return positive;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpavhd6w_g: /tmp/tmpavhd6w_g.cpp:24: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpliw__gtg: /tmp/tmpliw__gtg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i = 0; i < l.size(); i++) {\n        if(l[i] > 0) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgv0z7aje: /tmp/tmpgv0z7aje.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpamskvudk: /tmp/tmpamskvudk.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw1z5acg5: /tmp/tmpw1z5acg5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwq4w75sz: /tmp/tmpwq4w75sz.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxdpt19xa: /tmp/tmpxdpt19xa.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfnulz90e: /tmp/tmpfnulz90e.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpcrwqhm4t: /tmp/tmpcrwqhm4t.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq277856_: /tmp/tmpq277856_.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa99hanen: /tmp/tmpa99hanen.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy11fw7ml: /tmp/tmpy11fw7ml.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpphbwr4fj: /tmp/tmpphbwr4fj.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvcdta9c5: /tmp/tmpvcdta9c5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9z6dl5x1: /tmp/tmp9z6dl5x1.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn3ni3u5c: /tmp/tmpn3ni3u5c.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2t3eh_fe: /tmp/tmp2t3eh_fe.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfh1hvq8l: /tmp/tmpfh1hvq8l.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7r9xk25h: /tmp/tmp7r9xk25h.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpl7gi6q1d: /tmp/tmpl7gi6q1d.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpikjly8q5: /tmp/tmpikjly8q5.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw3lxmoy8: /tmp/tmpw3lxmoy8.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2h2zd65o: /tmp/tmp2h2zd65o.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5rf0_iq7: /tmp/tmp5rf0_iq7.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4hgxj8qn: /tmp/tmp4hgxj8qn.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp58tucpa3: /tmp/tmp58tucpa3.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for(long\
    \ i : l) {\n        if(i>0) {\n            res.push_back(i);\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoywspwcg: /tmp/tmpoywspwcg.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjd61rw84: /tmp/tmpjd61rw84.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpccj779n8: /tmp/tmpccj779n8.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzn9jg9lt: /tmp/tmpzn9jg9lt.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9w4x8osq: /tmp/tmp9w4x8osq.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptwcjrgxm: /tmp/tmptwcjrgxm.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6843hyxg: /tmp/tmp6843hyxg.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqjadxx92: /tmp/tmpqjadxx92.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1v6hiygv: /tmp/tmp1v6hiygv.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (i >= 0) res.push_back(i);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq45qkopn: /tmp/tmpq45qkopn.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvhghuzf2: /tmp/tmpvhghuzf2.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    long\
    \ long sum = 0;\n    for (long long i : l) {\n        sum += i;\n        if (sum\
    \ >= 0) {\n            positive.push_back(i);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpeqylsrft: /tmp/tmpeqylsrft.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpb4vzzf8u: /tmp/tmpb4vzzf8u.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6}))) == (std::vector<long>({4,\
    \ 5, 6})));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3, 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1,\
    \ -2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3fl8s3dc: /tmp/tmp3fl8s3dc.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> positive;\n    for\
    \ (long i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({-1, -2, 4, 5, 6})))\
    \ == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv2b1hwwd: /tmp/tmpv2b1hwwd.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nstd::vector<long>\
    \ get_positive(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l) {\n        if (i >= 0)\n            res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({-1,\
    \ -2, 4, 5, 6}))) == (std::vector<long>({4, 5, 6})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1})));\n    assert(candidate((std::vector<long>({-1, -2}))) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdtrva0wu: /tmp/tmpdtrva0wu.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}))) == (std::vector<long>({5, 3, 2, 3, 3,\
    \ 9, 123, 1}))' failed.\n"
  exit_code: -6
  status: Exception
