name: HumanEval_9_rolling_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
  \ generate a list of rolling maximum element found until given moment\n// in the\
  \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\n\
  std::vector<long> rolling_max(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
  \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
  \ 3, 2, 1}))) == (std::vector<long>({4, 4, 4, 4})));\n    assert(candidate((std::vector<long>({3,\
  \ 2, 3, 100, 3}))) == (std::vector<long>({3, 3, 3, 100, 100})));\n}\n"
completions: ["    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] == max_element) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_val) {\n  \
    \          result.push_back(max_val);\n            max_val = i;\n        } else\
    \ {\n            max_val = std::max(max_val, i);\n        }\n    }\n    result.push_back(max_val);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_so_far) {\n\
    \            result.push_back(max_so_far);\n            max_so_far = i;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, i);\n        }\n\
    \    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > current_element) {\n  \
    \          current_element = numbers[i];\n        }\n        if (current_element\
    \ > max_element) {\n            max_element = current_element;\n        }\n  \
    \      result.push_back(max_element);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (long i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_max = max_element;\n    for (long i : numbers)\
    \ {\n        if (i > current_max) {\n            result.push_back(current_max);\n\
    \            current_max = i;\n        } else {\n            current_max = i;\n\
    \        }\n    }\n    result.push_back(current_max);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long index = 0; index < numbers.size();\
    \ index++) {\n        if (numbers[index] > max_element) {\n            max_element\
    \ = numbers[index];\n            max_index = index;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long index = max_index + 1; index < numbers.size(); index++) {\n   \
    \     result.push_back(numbers[index]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            result.push_back(max_element);\n            max_element\
    \ = numbers[i];\n        } else {\n            max_element = max(max_element,\
    \ numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    long current_index = max_index;\n    while (current_index > 0) {\n      \
    \  long current_element = numbers[current_index];\n        long current_max_element\
    \ = numbers[current_index - 1];\n        if (current_element > current_max_element)\
    \ {\n            result.push_back(current_element);\n            current_index--;\n\
    \        } else {\n            break;\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long index = 0; index < numbers.size();\
    \ index++) {\n        if (numbers[index] > max_element) {\n            max_element\
    \ = numbers[index];\n            max_index = index;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long index = max_index + 1; index < numbers.size(); index++) {\n   \
    \     result.push_back(numbers[index]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos\
    \ = 0;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_so_far) {\n            max_so_far = numbers[i];\n            max_so_far_pos\
    \ = i;\n        }\n    }\n    result.push_back(max_so_far);\n    for (size_t i\
    \ = max_so_far_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_so_far) {\n\
    \            result.push_back(max_so_far);\n            max_so_far = i;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, i);\n        }\n\
    \    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    long max_so_far_pos = 0;\n    for (size_t i = 1; i < numbers.size(); ++i)\
    \ {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    for (size_t i = max_so_far_pos + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = i;\n        } else {\n            max_so_far = i;\n\
    \        }\n    }\n    result.push_back(max_so_far);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    long current_element\
    \ = numbers[max_index];\n    for (long i = max_index + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(current_element);\n        current_element\
    \ = numbers[i];\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long max_element = numbers[0];\n    for (long i : numbers) {\n        if\
    \ (i > max_element) {\n            result.push_back(max_element);\n          \
    \  max_element = i;\n        } else {\n            max_element = std::max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > current_element) {\n  \
    \          result.push_back(current_element);\n            current_element = numbers[i];\n\
    \        } else {\n            current_element = max(current_element, numbers[i]);\n\
    \        }\n    }\n    result.push_back(current_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long current_max\
    \ = max_element;\n    for (long number : numbers) {\n        if (number > current_max)\
    \ {\n            result.push_back(current_max);\n            current_max = number;\n\
    \        } else {\n            current_max = std::max(current_max, number);\n\
    \        }\n    }\n    result.push_back(current_max);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = numbers[i];\n\
    \        } else {\n            max_element = max(max_element, numbers[i]);\n \
    \       }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_so_far = numbers[0];\n    for (long\
    \ number : numbers) {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    long max_so_far_index = 0;\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_index = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    result.push_back(numbers[max_so_far_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = 0;\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    long current_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = numbers[i];\n        }\n    }\n    result.push_back(current_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = std::max(max_element, i);\n       \
    \ }\n    }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = -1;\n\
    \    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_element_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            result.push_back(max_element);\n            max_element\
    \ = numbers[i];\n        } else {\n            max_element = max(max_element,\
    \ numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); ++i) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \        }\n    }\n    for (long i = 0; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] == max_element) {\n            result.push_back(numbers[i]);\n \
    \       }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ max_element = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1;\
    \ i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n      \
    \      max_element = numbers[i];\n            max_index = i;\n        }\n    }\n\
    \    result.push_back(max_element);\n    for (size_t i = max_index + 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long index = 0; index < numbers.size(); index++) {\n       \
    \ if (numbers[index] > max_element) {\n            max_element = numbers[index];\n\
    \            max_index = index;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long index = max_index + 1; index < numbers.size(); index++) {\n   \
    \     result.push_back(numbers[index]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            result.push_back(max_element);\n            max_element\
    \ = numbers[i];\n        } else {\n            max_element = max(max_element,\
    \ numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n    return\
    \ result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long current_max = max_element;\n    for (long i : numbers) {\n        if\
    \ (i > current_max) {\n            result.push_back(current_max);\n          \
    \  current_max = i;\n        } else {\n            current_max = i;\n        }\n\
    \    }\n    result.push_back(current_max);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n            max_so_far_pos = i;\n \
    \       }\n    }\n    result.push_back(max_so_far);\n    for (long i = max_so_far_pos\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_so_far) {\n\
    \            result.push_back(max_so_far);\n            max_so_far = i;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, i);\n        }\n\
    \    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long current_max\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > current_max) {\n\
    \            result.push_back(current_max);\n            current_max = i;\n  \
    \      } else {\n            current_max = i;\n        }\n    }\n    result.push_back(current_max);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (auto i : numbers) {\n       \
    \ if (i > max_val) {\n            result.push_back(max_val);\n            max_val\
    \ = i;\n            max_pos = 0;\n        } else if (i == max_val) {\n       \
    \     max_pos++;\n        }\n    }\n    if (max_pos == 0) {\n        result.push_back(max_val);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_element_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_element_index + 1; i < numbers.size(); ++i) {\n     \
    \   result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long number : numbers)\
    \ {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n        }\n    }\n    for (long i\
    \ = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n \
    \           result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    result.push_back(numbers[max_index]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long current_element = numbers[0];\n    for (auto i : numbers) {\n      \
    \  if (current_element > i) {\n            current_element = i;\n        }\n \
    \       if (current_element > max_element) {\n            max_element = current_element;\n\
    \        }\n    }\n    result.push_back(max_element);\n    for (auto i : numbers)\
    \ {\n        if (current_element > i) {\n            current_element = i;\n  \
    \      }\n        if (current_element > max_element) {\n            max_element\
    \ = current_element;\n        }\n        result.push_back(max_element);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(max_element);\n            max_element = numbers[i];\n\
    \        } else {\n            result.push_back(numbers[i]);\n        }\n    }\n\
    \    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n \
    \   for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        } else if (numbers[i] == max_so_far)\
    \ {\n            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long current_element = numbers[0];\n    for (long i : numbers)\
    \ {\n        if (i > current_element) {\n            result.push_back(current_element);\n\
    \            current_element = i;\n        } else {\n            current_element\
    \ = i;\n        }\n        if (current_element > max_element) {\n            result.push_back(current_element);\n\
    \            max_element = current_element;\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    long max_so_far_pos = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    for (long i = max_so_far_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long index = 1; index < numbers.size();\
    \ index++) {\n        if (numbers[index] > max_element) {\n            max_element\
    \ = numbers[index];\n            max_index = index;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long index = max_index + 1; index < numbers.size(); index++) {\n   \
    \     result.push_back(numbers[index]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_element_index = -1;\n\
    \    for (size_t i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_element_index = i;\n\
    \        }\n    }\n    for (size_t i = max_element_index + 1; i < numbers.size();\
    \ ++i) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_element_index\
    \ = 0;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_element_index\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max_element) {\n            result.push_back(numbers[i]);\n\
    \            result.push_back(numbers[max_element_index]);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (auto i : numbers) {\n       \
    \ if (i > max_val) {\n            result.push_back(max_val);\n            max_val\
    \ = i;\n            max_pos = 0;\n        } else {\n            max_pos = std::max(max_pos,\
    \ i);\n        }\n    }\n    result.push_back(max_val);\n    result.insert(result.end(),\
    \ max_pos, max_val);\n    return result;", "    std::vector<long> result;\n  \
    \  long max_so_far = numbers[0];\n    long max_so_far_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n\
    \            max_so_far = numbers[i];\n            max_so_far_pos = i;\n     \
    \   }\n    }\n    result.push_back(max_so_far);\n    result.push_back(max_so_far_pos);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \            max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    for (size_t i = max_pos + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \            max_pos = i;\n        }\n    }\n    for (long i = max_pos; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \            max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    result.push_back(max_pos);\n    return result;", "    std::vector<long> result;\n\
    \    long max_element = numbers[0];\n    long max_index = -1;\n    for (long i\
    \ = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n \
    \           max_element = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push_back(max_element);\n    for (long i = max_index + 1; i\
    \ < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 1; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    for (long\
    \ number : numbers) {\n        if (number > max_so_far) {\n            result.push_back(max_so_far);\n\
    \            max_so_far = number;\n        } else {\n            max_so_far =\
    \ std::max(max_so_far, number);\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_so_far) {\n     \
    \       result.push_back(max_so_far);\n            max_so_far = number;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, number);\n      \
    \  }\n    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    long max_so_far_pos = 0;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    for (long i = max_so_far_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = numbers[i];\n        } else {\n            max_element\
    \ = max(max_element, numbers[i]);\n        }\n    }\n    result.push_back(max_element);\n\
    \    return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_val) {\n            max_val = numbers[i];\n        \
    \    max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n    for (long\
    \ i = max_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long max_so_far = numbers[0];\n    long max_so_far_index\
    \ = 0;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_so_far) {\n            max_so_far = numbers[i];\n            max_so_far_index\
    \ = i;\n        }\n    }\n    result.push_back(max_so_far);\n    for (size_t i\
    \ = max_so_far_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    long max_so_far_pos = 0;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_so_far) {\n            max_so_far = numbers[i];\n\
    \            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    for (long i = max_so_far_pos + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_element_index + 1; i < numbers.size(); i++) {\n     \
    \   result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    long max_pos = 0;\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val) {\n   \
    \         max_val = numbers[i];\n            max_pos = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(numbers[max_pos]);\n   \
    \ return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(max_element);\n            max_element = numbers[i];\n\
    \        } else {\n            max_element = max(max_element, numbers[i]);\n \
    \       }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_element = numbers[0];\n\
    \    long current_max = numbers[0];\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        current_element = numbers[i];\n        if (current_element >\
    \ current_max) {\n            result.push_back(current_max);\n            current_max\
    \ = current_element;\n        } else {\n            current_max = std::max(current_max,\
    \ current_element);\n        }\n    }\n    result.push_back(current_max);\n  \
    \  return result;", "    std::vector<long> result;\n    long max_val = numbers[0];\n\
    \    long max_pos = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n    \
    \    if (numbers[i] > max_val) {\n            max_val = numbers[i];\n        \
    \    max_pos = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(numbers[max_pos]);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    long max_index = -1;\n    for (long i = 0; i < numbers.size(); i++) {\n \
    \       if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 0; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    result.push_back(numbers[max_index]);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (long i : numbers) {\n \
    \       if (i > max_so_far) {\n            result.push_back(max_so_far);\n   \
    \         max_so_far = i;\n        } else {\n            max_so_far = std::max(max_so_far,\
    \ i);\n        }\n    }\n    result.push_back(max_so_far);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = numbers[i];\n\
    \        } else {\n            max_element = max(max_element, numbers[i]);\n \
    \       }\n    }\n    result.push_back(max_element);\n    return result;", " \
    \   std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i : numbers) {\n        if (i > max_element) {\n\
    \            result.push_back(max_element);\n            max_element = i;\n  \
    \      } else {\n            max_element = max(max_element, i);\n        }\n \
    \   }\n    result.push_back(max_element);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long current_max = max_element;\n\
    \    for (long number : numbers) {\n        if (number > current_max) {\n    \
    \        result.push_back(current_max);\n            current_max = number;\n \
    \       } else {\n            current_max = number;\n        }\n    }\n    result.push_back(current_max);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long current_max\
    \ = max_element;\n    long current_min = max_element;\n    long current_sum =\
    \ 0;\n    long current_count = 0;\n    for (long i : numbers) {\n        current_sum\
    \ += i;\n        current_count++;\n        if (current_sum > current_max) {\n\
    \            current_max = current_sum;\n        }\n        if (current_sum <\
    \ current_min) {\n            current_min = current_sum;\n        }\n    }\n \
    \   result.push_back(current_max);\n    result.push_back(current_min);\n    for\
    \ (long i : numbers) {\n        if (current_count > 0) {\n            current_sum\
    \ -= i;\n            current_count--;\n            if (current_sum < current_min)\
    \ {\n                current_min = current_sum;\n            }\n            if\
    \ (current_sum > current_max) {\n                current_max = current_sum;\n\
    \            }\n        }\n    }\n    result.push_back(current_max);\n    result.push_back(current_min);\n\
    \    return result;", "    std::vector<long> result;\n    long max_so_far = numbers[0];\n\
    \    for (long number : numbers) {\n        if (number > max_so_far) {\n     \
    \       result.push_back(max_so_far);\n            max_so_far = number;\n    \
    \    } else {\n            max_so_far = std::max(max_so_far, number);\n      \
    \  }\n    }\n    result.push_back(max_so_far);\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    for (long i : numbers) {\n\
    \        if (i > max_element) {\n            result.push_back(max_element);\n\
    \            max_element = i;\n        } else {\n            max_element = max(max_element,\
    \ i);\n        }\n    }\n    result.push_back(max_element);\n    return result;",
  "    std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (long i = 1; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (long i\
    \ = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_so_far = numbers[0];\n    long max_so_far_pos\
    \ = 0;\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_so_far) {\n            result.push_back(max_so_far);\n            max_so_far\
    \ = numbers[i];\n            max_so_far_pos = i;\n        } else if (numbers[i]\
    \ == max_so_far) {\n            max_so_far_pos = i;\n        }\n    }\n    result.push_back(max_so_far);\n\
    \    return result;", "    std::vector<long> result;\n    long max_element = numbers[0];\n\
    \    for (long i : numbers) {\n        if (i > max_element) {\n            max_element\
    \ = i;\n        }\n    }\n    for (long i : numbers) {\n        if (i > max_element)\
    \ {\n            result.push_back(i);\n            max_element = i;\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long index = 0; index < numbers.size();\
    \ index++) {\n        if (numbers[index] > max_element) {\n            max_element\
    \ = numbers[index];\n            max_index = index;\n        }\n    }\n    for\
    \ (long index = max_index; index >= 0; index--) {\n        result.push_back(numbers[index]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_val\
    \ = numbers[0];\n    long max_pos = 0;\n    for (auto i : numbers) {\n       \
    \ if (i > max_val) {\n            result.push_back(max_val);\n            max_val\
    \ = i;\n            max_pos = 0;\n        } else {\n            max_pos = max_pos\
    \ + 1;\n        }\n    }\n    if (max_pos == 0) {\n        result.push_back(max_val);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_index = -1;\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (size_t i = max_index + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_so_far\
    \ = numbers[0];\n    for (long number : numbers) {\n        if (number > max_so_far)\
    \ {\n            result.push_back(max_so_far);\n            max_so_far = number;\n\
    \        } else {\n            max_so_far = std::max(max_so_far, number);\n  \
    \      }\n    }\n    result.push_back(max_so_far);\n    return result;", "   \
    \ std::vector<long> result;\n    long max_element = numbers[0];\n    long max_index\
    \ = -1;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    result.push_back(max_element);\n    for (size_t\
    \ i = max_index + 1; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    long max_element_index = 0;\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max_element) {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    result.push_back(max_element);\n\
    \    for (long i = max_element_index + 1; i < numbers.size(); i++) {\n       \
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    long max_index = -1;\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n            max_index = i;\n     \
    \   }\n    }\n    result.push_back(max_element);\n    for (size_t i = max_index\
    \ + 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long max_element\
    \ = numbers[0];\n    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ > max_element) {\n            max_element = numbers[i];\n        }\n    }\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
