name: HumanEval_141_file_name_check
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string pattern = \"^[0-9]{1,3}\\\\.[a-zA-Z]+$\"\
    ;\n    std::regex regex(pattern);\n    std::smatch match;\n    if (std::regex_match(file_name,\
    \ match, regex)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpk32s1133: /tmp/tmpk32s1133.cpp:27: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() <= 3 || file_name.find_last_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0,\
    \ 1) != \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) !=\
    \ \"d\" && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"f\"\
    \ && file_name.substr(0, 1) != \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0,\
    \ 1) != \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) !=\
    \ \"k\" && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) != \"m\"\
    \ && file_name.substr(0, 1) != \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0,\
    \ 1) != \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) !=\
    \ \"r\" && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) != \"t\"\
    \ && file_name.substr(0, 1) != \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0,\
    \ 1) != \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) !=\
    \ \"y\" && file_name.substr(0, 1) != \"z\") {\n        return \"No\";\n    }\n\
    \    \n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmprym6j1nh: /tmp/tmprym6j1nh.cpp:37: int main(): Assertion `candidate((\"\
    K.dll\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() > 3 && file_name.find_last_of(\"\
    .\") > 0 && file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[1] >= 'a'\
    \ && file_name[1] <= 'z') {\n        if (file_extension == \"txt\" || file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n            return \"Yes\";\n  \
    \      } else {\n            return \"No\";\n        }\n    } else {\n       \
    \ return \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpn7dlu901: /tmp/tmpn7dlu901.cpp:35: int main(): Assertion `candidate((\"\
    K.dll\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = file_name.length();\n    if (num_digits > 3) {\n   \
    \     return \"No\";\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n        return \"No\";\n    }\n    if (file_name[file_name.length()-1]\
    \ < 'a' || file_name[file_name.length()-1] > 'z') {\n        return \"No\";\n\
    \    }\n    if (file_name.substr(0, 1) != \".\") {\n        return \"No\";\n \
    \   }\n    if (file_name.substr(0, 2) == \"..\") {\n        return \"No\";\n \
    \   }\n    if (file_name.substr(0, 3) != \".txt\" && file_name.substr(0, 3) !=\
    \ \".exe\" && file_name.substr(0, 3) != \".dll\") {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp7j67enze: /tmp/tmp7j67enze.cpp:42: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpibsnnc0k: /tmp/tmpibsnnc0k.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    bool is_valid = true;\n    \n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(!((file_name[i] >= 'a' &&\
    \ file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))) {\n \
    \           is_valid = false;\n            break;\n        }\n    }\n    \n  \
    \  if(!is_valid) {\n        return \"No\";\n    }\n    \n    std::string extension\
    \ = file_name.substr(file_name.find_last_of('.'));\n    \n    if(extension ==\
    \ \"exe\" || extension == \"dll\" || extension == \"txt\") {\n        return \"\
    Yes\";\n    }\n    \n    return \"No\";\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptost0a_i.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmptost0a_i.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name_check;\n    \n\
    \    int count = 0;\n    \n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    \n    if (count > 3) {\n        file_name_check = \"No\"\
    ;\n    }\n    else if (file_name.find(\".\") == -1) {\n        file_name_check\
    \ = \"No\";\n    }\n    else if (file_name.substr(0, 1) >= 'a' && file_name.substr(0,\
    \ 1) <= 'z') {\n        file_name_check = \"No\";\n    }\n    else if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        file_name_check\
    \ = \"No\";\n    }\n    else {\n        file_name_check = \"Yes\";\n    }\n  \
    \  \n    return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4j66jpmd.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp4j66jpmd.cpp:34:37: error: no match for \u2018operator>=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   34 |     else if (file_name.substr(0, 1) >= 'a' && file_name.substr(0, 1)\
    \ <= 'z') {\n      |              ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~\n      |     \
    \                         |         |\n      |                              |\
    \         char\n      |                              std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4j66jpmd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1070:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4j66jpmd.cpp:34:40:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   34 |     else if (file_name.substr(0,\
    \ 1) >= 'a' && file_name.substr(0, 1) <= 'z') {\n      |                     \
    \                   ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4j66jpmd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operato"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp7z52yfso: /tmp/tmp7z52yfso.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    bool flag = true;\n    \n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] < 'a' || file_name[i]\
    \ > 'z') {\n            flag = false;\n            break;\n        }\n    }\n\
    \    \n    if (flag == false) {\n        flag = true;\n        for (int i = 0;\
    \ i < file_name.length(); i++) {\n            if (file_name[i] < 'A' || file_name[i]\
    \ > 'Z') {\n                flag = false;\n                break;\n          \
    \  }\n        }\n    }\n    \n    if (flag == true) {\n        for (int i = 0;\
    \ i < file_name.length(); i++) {\n            if (file_name[i] < '0' || file_name[i]\
    \ > '9') {\n                flag = false;\n                break;\n          \
    \  }\n        }\n    }\n    \n    if (flag == true) {\n        for (int i = 0;\
    \ i < file_name.length(); i++) {\n            if (file_name[i] == '.') {\n   \
    \             flag = false;\n                break;\n            }\n        }\n\
    \    }\n    \n    if (flag == true) {\n        for (int i = 0; i < file_name.length();\
    \ i++) {\n            if (file_name[i] != 'a' && file_name[i] != 'b' && file_name[i]\
    \ != 'c' && file_name[i] != 'd' && file_name[i] != 'e' && file_name[i] != 'f'\
    \ && file_name[i] != 'g' && file_name[i] != 'h' && file_name[i] != 'i' && file_name[i]\
    \ != 'j' && file_name[i] != 'k' && file_name[i] != 'l' && file_name[i] != 'm'\
    \ && file_name[i] != 'n' && file_name[i] != 'o' && file_name[i] != 'p' && file_name[i]\
    \ != 'q' && file_name[i] != 'r' && file_name[i] != 's' && file_name[i] != 't'\
    \ && file_name[i] != 'u' && file_name[i] != 'v' && file_name[i] != 'w' && file_name[i]\
    \ != 'x' && file_name[i] != 'y' && file_name[i] != 'z') {\n                flag\
    \ = false;\n                break;\n            }\n        }\n    }\n    \n  \
    \  if (flag == true) {\n        for (int i = 0; i < file_name.length(); i++) {\n\
    \            if (file_name[i] == '.') {\n                flag = false;\n     \
    \           break;\n            }\n        }\n    }\n    \n    if (flag == true)\
    \ {\n        for (int i = 0; i < file_name.length(); i++) {\n            if (file_name[i]\
    \ != 'txt' && file_name[i] != 'exe' && file_name[i] != 'dll') {\n            \
    \    flag = false;\n                break;\n            }\n        }\n    }\n\
    \    \n    return file_name;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1oqa9vgm.cpp:77:33: warning: multi-character character constant\
    \ [-Wmultichar]\n   77 |             if (file_name[i] != 'txt' && file_name[i]\
    \ != 'exe' && file_name[i] != 'dll') {\n      |                              \
    \   ^~~~~\n/tmp/tmp1oqa9vgm.cpp:77:58: warning: multi-character character constant\
    \ [-Wmultichar]\n   77 |             if (file_name[i] != 'txt' && file_name[i]\
    \ != 'exe' && file_name[i] != 'dll') {\n      |                              \
    \                            ^~~~~\n/tmp/tmp1oqa9vgm.cpp:77:83: warning: multi-character\
    \ character constant [-Wmultichar]\n   77 |             if (file_name[i] != 'txt'\
    \ && file_name[i] != 'exe' && file_name[i] != 'dll') {\n      |              \
    \                                                                     ^~~~~\n\
    /tmp/tmp1oqa9vgm.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp1oqa9vgm.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // return 'Yes' if all conditions are\
    \ met\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp0egwrcqf: /tmp/tmp0egwrcqf.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmppac7bn4b: /tmp/tmppac7bn4b.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp0ivpr9d8: /tmp/tmp0ivpr9d8.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpsqvp3hkr: /tmp/tmpsqvp3hkr.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return 'Yes' if and only if the file's\
    \ name is valid\n    if (file_name.size() > 3 && file_name.find(\".\") == file_name\
    \ && file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[file_name.size()\
    \ - 1] >= 'a' && file_name[file_name.size() - 1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzzidop4c.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpzzidop4c.cpp:19:53: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   19 |     if (file_name.size() > 3 && file_name.find(\".\") == file_name\
    \ && file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[file_name.size()\
    \ - 1] >= 'a' && file_name[file_name.size() - 1] <= 'z') {\n      |          \
    \                       ~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~\n      |            \
    \                                   |        |\n      |                      \
    \                         |        std::string {aka std::__cxx11::basic_string<char>}\n\
    \      |                                               std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzzidop4c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzzidop4c.cpp:19:56:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n   19 |     if (file_name.size() > 3 && file_name.find(\"\
    .\") == file_name && file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[file_name.size()\
    \ - 1] >= 'a' && file_name[file_name.size() - 1] <= 'z') {\n      |          \
    \                                              ^~~~~~~~~\nIn file included f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name_check;\n    \n\
    \    return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpsqm7z690: /tmp/tmpsqm7z690.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmwax1nn6: /tmp/tmpmwax1nn6.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpzka8le_r: /tmp/tmpzka8le_r.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    int counter = 0;\n    std::string file_name_without_extension;\n\
    \    std::string file_name_without_extension_without_dot;\n    std::string file_name_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_nox7cc_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_nox7cc_.cpp:30:1: error: expected initializer before \u2018}\u2019\
    \ token\n   30 | }\n      | ^\n/tmp/tmp_nox7cc_.cpp:30:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    int count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.length()\
    \ - 1) != std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) != 'a' && file_name.substr(0, 1) != 'A') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != 't' && file_name.substr(0, 1) != 'T') {\n \
    \       return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'e' && file_name.substr(0,\
    \ 1) != 'E') {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != 'd' && file_name.substr(0, 1) != 'D') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != 'l' && file_name.substr(0, 1) != 'L') {\n \
    \       return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'l' && file_name.substr(0,\
    \ 1) != 'L') {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != 'o' && file_name.substr(0, 1) != 'O') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != 'x' && file_name.substr(0, 1) != 'X') {\n \
    \       return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'e' && file_name.substr(0,\
    \ 1) != 'E') {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != 'd' && file_name.substr(0, 1) != 'D') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != 'd' && file_name.substr(0, 1) != 'D') {\n \
    \       return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'd' && file_name.substr(0,\
    \ 1) != 'D') {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != 'd' && file_name.substr(0, 1) != 'D') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != 'd' && file_name.substr(0, 1) != 'D') {\n \
    \       return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'd' && file_name.substr(0,\
    \ 1) != 'D') {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != 'd' && file_name.substr(0, 1) != 'D') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != 'd' && file_name.substr(0, 1) != 'D') {\n \
    \       return \"No\";\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0z6w4hvf.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp0z6w4hvf.cpp:29:32: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   29 |     if (file_name.substr(0,\
    \ 1) != std::string::npos) {\n      |         ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n\
    \      |                         |                      |\n      |           \
    \              |                      const size_type {aka const long unsigned\
    \ int}\n      |                         std::__cxx11::basic_string<char>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0z6w4hvf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0z6w4hvf.cpp:29:48:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   29 |     if (file_name.substr(0,\
    \ 1) != std::string::npos) {\n      |                                        \
    \        ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0z6w4hvf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpp3f2vztu: /tmp/tmpp3f2vztu.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    int count = 0;\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n         \
    \   count++;\n        }\n    }\n    if(count > 3 || file_name.find(\".\") == -1\
    \ || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n       \
    \ return \"No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n \
    \       if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >=\
    \ 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n    if(count\
    \ > 3 || file_name.find(\".\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        return \"No\";\n    }\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n         \
    \   count++;\n        }\n    }\n    if(count > 3 || file_name.find(\".\") == -1\
    \ || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n       \
    \ return \"No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n \
    \       if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >=\
    \ 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n    if(count\
    \ > 3 || file_name.find(\".\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        return \"No\";\n    }\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n         \
    \   count++;\n        }\n    }\n    if(count > 3 || file_name.find(\".\") == -1\
    \ || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n       \
    \ return \"No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n \
    \       if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    if(count > 3 || file_name.find(\".\") == -1 || file_name\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpime9pv2h.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpime9pv2h.cpp:23:73: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   23 |     if(count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      |                       \
    \                           ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |            \
    \                                                      |        |\n      |   \
    \                                                               |        char\n\
    \      |                                                                  std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpime9pv2h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpime9pv2h.cpp:23:75:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |     if(count > 3 || file_name.find(\"\
    .\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \      |                                                                     \
    \      ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpime9pv2h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1124"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_name_check;\n    int counter = 0;\n    while(counter\
    \ < file_name.size()) {\n        if(file_name[counter] >= '0' && file_name[counter]\
    \ <= '9') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'a' && file_name[counter]\
    \ <= 'z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'A' && file_name[counter] <= 'Z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] == '.') {\n \
    \           counter++;\n            continue;\n        }\n        if(file_name[counter]\
    \ == '_') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'a' && file_name[counter] <= 'z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'A' && file_name[counter]\
    \ <= 'Z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'a' && file_name[counter]\
    \ <= 'z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'A' && file_name[counter] <= 'Z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] == '.') {\n \
    \           counter++;\n            continue;\n        }\n        if(file_name[counter]\
    \ == '_') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'a' && file_name[counter] <= 'z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'A' && file_name[counter]\
    \ <= 'Z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'a' && file_name[counter]\
    \ <= 'z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'A' && file_name[counter] <= 'Z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] == '.') {\n \
    \           counter++;\n            continue;\n        }\n        if(file_name[counter]\
    \ == '_') {\n            \n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7aejnhya.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp7aejnhya.cpp:110:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  110 | int main() {\n      |            ^\n/tmp/tmp7aejnhya.cpp:138:1:\
    \ error: expected \u2018}\u2019 at end of input\n  138 | }\n      | ^\n/tmp/tmp7aejnhya.cpp:18:39:\
    \ note: to match this \u2018{\u2019\n   18 |     while(counter < file_name.size())\
    \ {\n      |                                       ^\n/tmp/tmp7aejnhya.cpp:138:1:\
    \ error: expected \u2018}\u2019 at end of input\n  138 | }\n      | ^\n/tmp/tmp7aejnhya.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmp7aejnhya.cpp:138:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  138 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (file_name.length() == 0 || count > 3\
    \ || file_name.find_first_not_of(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0 && file_name.find_first_not_of(\"\
    .\") > file_name.length() - 1) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0 && file_name.find_first_not_of(\"\
    .\") - 1 < file_name.length()) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0 && file_name.find_first_not_of(\"\
    .\") - 1 < file_name.length()) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0 && file_name.find_first_not_of(\"\
    .\") - 1 < file_name.length()) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0 && file_name.find_first_not_of(\"\
    .\") - 1 < file_name.length()) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcd1_v42_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpcd1_v42_.cpp:68:46: error: no match for \u2018operator&&\u2019 (operand\
    \ types are \u2018bool\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   68 |     if (file_name.find_first_not_of(\".\") > 0 && file_name\n    \
    \  |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~\n      |      \
    \                                    |      |\n      |                       \
    \                   bool   std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpcd1_v42_.cpp:68:46: note: candidate: \u2018operator&&(bool, bool)\u2019\
    \ <built-in>\n   68 |     if (file_name.find_first_not_of(\".\") > 0 && file_name\n\
    \      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpcd1_v42_.cpp:68:46:\
    \ note:   no known conversion for argument 2 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpcd1_v42_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:415:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__logical_and,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__logical_and,\
    \ typename _Dom1::value_type>::result_type> std::operator&&(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  415 |     _DEFINE_EXPR_BINARY_OPERATOR(&&, __logical_and)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcd1_v42_.cpp:68:49:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018bool\u2019\n   68 |     if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name\n      |                                                 ^~~~~~~~~\n\
    In"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        } else if (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            count++;\n        } else if (file_name[i] == '.') {\n       \
    \     count++;\n        } else if (file_name[i] == ' ') {\n            count++;\n\
    \        } else if (file_name[i] >= '0' && file_name[i] <= '9') {\n          \
    \  count++;\n        }\n    }\n    if (count == 3) {\n        if (file_name.substr(0,\
    \ 1) == \"1\") {\n            return \"No\";\n        } else {\n            return\
    \ \"Yes\";\n        }\n    } else {\n        return \"No\";\n    }\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp3bdxtt98: /tmp/tmp3bdxtt98.cpp:43: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmptnqb6bqg: /tmp/tmptnqb6bqg.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    std::string file_prefix_letter = file_prefix.substr(0, 1);\n    std::string\
    \ file_prefix_number = file_prefix.substr(1, 1);\n    std::string file_prefix_letter_capital\
    \ = file_prefix.substr(0, 2);\n    std::string file_prefix_number_capital = file_prefix.substr(2,\
    \ 1);\n    std::string file_prefix_number_capital_capital1 = file_prefix.substr(3,\
    \ 1);\n    std::string file_prefix_number_capital_capital2 = file_prefix.substr(4,\
    \ 1);\n    std::string file_prefix_number_capital_capital3 = file_prefix.substr(5,\
    \ 1);\n    std::string file_prefix_number_capital_capital4 = file_prefix.substr(6,\
    \ 1);\n    std::string file_prefix_number_capital_capital5 = file_prefix.substr(7,\
    \ 1);\n    std::string file_prefix_number_capital_capital6 = file_prefix.substr(8,\
    \ 1);\n    std::string file_prefix_number_capital_capital7 = file_prefix.substr(9,\
    \ 1);\n    std::string file_prefix_number_capital_capital8 = file_prefix.substr(10,\
    \ 1);\n    std::string file_prefix_number_capital_capital9 = file_prefix.substr(11,\
    \ 1);\n    std::string file_prefix_number_capital_capital10 = file_prefix.substr(12,\
    \ 1);\n    std::string file_prefix_number_capital_capital11 = file_prefix.substr(13,\
    \ 1);\n    std::string file_prefix_number_capital_capital12 = file_prefix.substr(14,\
    \ 1);\n    std::string file_prefix_number_capital_capital13 = file_prefix.substr(15,\
    \ 1);\n    std::string file_prefix_number_capital_capital14 = file_prefix.substr(16,\
    \ 1);\n    std::string file_prefix_number_capital_capital15 = file_prefix.substr(17,\
    \ 1);\n    std::string file_prefix_number_capital_capital16 = file_prefix.substr(18,\
    \ 1);\n    std::string file_prefix_number_capital_capital17 = file_prefix.substr(19,\
    \ 1);\n    std::string file_prefix_number_capital_capital18 = file_prefix.substr(20,\
    \ 1);\n    std::string file_prefix_number_capital_capital19 = file_prefix.substr(21,\
    \ 1);\n    std::string file_prefix_number_capital_capital20 = file_prefix.substr(22,\
    \ 1);\n    std::string file_prefix_number_capital_capital21 = file_prefix.substr(23,\
    \ 1);\n    std::string file_prefix_number_capital_capital22 = file_prefix.substr(24,\
    \ 1);\n    std::string file_prefix_number_capital_capital23 = file_prefix.substr(25,\
    \ 1);\n    std::string file_prefix_number_capital_capital24 = file_prefix.substr(26,\
    \ 1);\n    std::string file_prefix_number_capital_capital25 = file_prefix.substr(27,\
    \ 1);\n    std::string file_prefix_number_capital_capital26 = file_prefix.substr(28,\
    \ \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf788huyx.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpf788huyx.cpp:48:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   48 | }\n      | ^\n/tmp/tmpf788huyx.cpp:48:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpf788huyx.cpp:48:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return 'Yes' if all conditions are met\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp5z0v_l8r: /tmp/tmp5z0v_l8r.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            num_digits++;\n\
    \        }\n    }\n    if (num_digits > 3) {\n        return \"No\";\n    }\n\
    \    if (file_name.find(\".\") == std::string::npos) {\n        return \"No\"\
    ;\n    }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z')\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplcsd8jud.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmplcsd8jud.cpp:28:32: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   28 |     if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z')\
    \ {\n      |         ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |                   \
    \      |        |\n      |                         |        char\n      |    \
    \                     std::__cxx11::basic_string<char>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplcsd8jud.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplcsd8jud.cpp:28:34:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   28 |     if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      |                       \
    \           ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplcsd8jud.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_trait"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmps9t0swcb: /tmp/tmps9t0swcb.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1); \n    std::string file_extension_lowercase_copy = file_extension;\n  \
    \  std::transform(file_extension_lowercase_copy.begin(), file_extension_lowercase_copy.end(),\
    \ file_extension_lowercase_copy.begin(), ::tolower);\n    \n    std::string file_extension_lowercase\
    \ = file_extension_lowercase_copy;\n    \n    if (file_extension_lowercase ==\
    \ \"txt\" || file_extension_lowercase == \"exe\" || file_extension_lowercase ==\
    \ \"dll\") {\n        return \"Yes\";\n    } else {\n        return \"No\";\n\
    \    }\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpsncrrlmv: /tmp/tmpsncrrlmv.cpp:32: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.size() > 3 || file_name.find_last_of(\".\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    \n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z' || file_name.substr(0, 1) < 'A' || file_name.substr(0, 1) > 'Z') {\n\
    \        return \"No\";\n    }\n    \n    if (file_name.find_last_of(\".\") >\
    \ 0) {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeivreafb.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpeivreafb.cpp:28:32: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   28 |     if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z'\
    \ || file_name.substr(0, 1) < 'A' || file_name.substr(0, 1) > 'Z') {\n      |\
    \         ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |                         |    \
    \    |\n      |                         |        char\n      |               \
    \          std::__cxx11::basic_string<char>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpeivreafb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpeivreafb.cpp:28:34:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   28 |     if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z' || file_name.substr(0, 1) < 'A' ||\
    \ file_name.substr(0, 1) > 'Z') {\n      |                                  ^~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpeivreafb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp401b1bo9: /tmp/tmp401b1bo9.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpbv1wsmuq: /tmp/tmpbv1wsmuq.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp328hw1x6: /tmp/tmp328hw1x6.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\"));\n    \n    bool is_valid = true;\n    \n  \
    \  for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] < 'a'\
    \ || file_name[i] > 'z' || file_name[i] < 'A' || file_name[i] > 'Z') {\n     \
    \       is_valid = false;\n        }\n    }\n    \n    if(!is_valid) {\n     \
    \   return \"No\";\n    }\n    \n    for(int i = 0; i < file_name.length(); i++)\
    \ {\n        if(file_name[i] == '.') {\n            if(i == 0) {\n           \
    \     return \"No\";\n            }\n            \n            if(i == file_name.length()\
    \ - 1) {\n                return \"No\";\n            }\n            \n      \
    \      if(file_name[i - 1] == '.') {\n                return \"No\";\n       \
    \     }\n            \n            if(file_name[i + 1] != '.') {\n           \
    \     return \"No\";\n            }\n        }\n    }\n    \n    return \"Yes\"\
    ;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp79y4pk4f.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp79y4pk4f.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\"));\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    std::string file_name_without_extension;\n\
    \    std::string file_name_without_extension_without_dot;\n    std::string file_name_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc60158ps.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpc60158ps.cpp:26:17: error: redeclaration of \u2018std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension\u2019\
    \n   26 |     std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc60158ps.cpp:25:17: note: \u2018std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension\u2019\
    \ previously declared here\n   25 |     std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc60158ps.cpp:28:17: error: redeclaration of \u2018std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension\u2019\
    \n   28 |     std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc60158ps.cpp:27:17: note: \u2018std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension\u2019\
    \ previously declared here\n   27 |     std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \      |                 ^~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpd1lusbop: /tmp/tmpd1lusbop.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\"));\n    \n    std::string extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    std::string valid_extensions[] = {\"txt\", \"exe\", \"dll\"\
    };\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") != std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n            return \"No\";\n        }\n\
    \    }\n    \n    for (int i = 0; i < 3; i++) {\n        if (file_name.find_first_not_of(\"\
    0123456789\") == \n}\nint main() {\n    auto candidate = file_name_check;\n  \
    \  assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt1aatz1n.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpt1aatz1n.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\"));\n      |                 ^~~~~~~~~\n/tmp/tmpt1aatz1n.cpp:110:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  110 | }\n \
    \     | ^\n/tmp/tmpt1aatz1n.cpp:109:57: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  109 |         if (file_name.find_first_not_of(\"0123456789\"\
    ) ==\n      |            ~                                            ^\n    \
    \  |                                                         )\n  110 | }\n  \
    \    | ~                                                        \n/tmp/tmpt1aatz1n.cpp:110:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  110 | }\n \
    \     | ^\n/tmp/tmpt1aatz1n.cpp:111:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  111 | int main() {\n      |            ^\n\
    /tmp/tmpt1aatz1n.cpp:139:1: error: expected \u2018}\u2019 at end of input\n  139\
    \ | }\n      | ^\n/tmp/tmpt1aatz1n.cpp:15:52: note: to match this \u2018{\u2019\
    \n   15 | std::string file_name_check(std::string file_name) {\n      |      \
    \                                              ^\n/tmp/tmpt1aatz1n.cpp:139:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  139 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    if (file_name.length() > 3 || file_name.find_first_of('.')\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_name.find_first_of('.')\
    \ != std::string::npos) {\n        if (file_name.substr(0, 1) != 'a' && file_name.substr(0,\
    \ 1) != 'A' && file_name.substr(0, 1) != 'b' && file_name.substr(0, 1) != 'B'\
    \ && file_name.substr(0, 1) != 'c' && file_name.substr(0, 1) != 'C' && file_name.substr(0,\
    \ 1) != 'd' && file_name.substr(0, 1) != 'D' && file_name.substr(0, 1) != 'e'\
    \ && file_name.substr(0, 1) != 'E' && file_name.substr(0, 1) != 'f' && file_name.substr(0,\
    \ 1) != 'F' && file_name.substr(0, 1) != 'g' && file_name.substr(0, 1) != 'G'\
    \ && file_name.substr(0, 1) != 'h' && file_name.substr(0, 1) != 'H' && file_name.substr(0,\
    \ 1) != 'i' && file_name.substr(0, 1) != 'I' && file_name.substr(0, 1) != 'j'\
    \ && file_name.substr(0, 1) != 'J' && file_name.substr(0, 1) != 'k' && file_name.substr(0,\
    \ 1) != 'K' && file_name.substr(0, 1) != 'l' && file_name.substr(0, 1) != 'L'\
    \ && file_name.substr(0, 1) != 'm' && file_name.substr(0, 1) != 'M' && file_name.substr(0,\
    \ 1) != 'n' && file_name.substr(0, 1) != 'N' && file_name.substr(0, 1) != 'o'\
    \ && file_name.substr(0, 1) != 'O' && file_name.substr(0, 1) != 'p' && file_name.substr(0,\
    \ 1) != 'P' && file_name.substr(0, 1) != 'q' && file_name.substr(0, 1) != 'Q'\
    \ && file_name.substr(0, 1) != 'r' && file_name.substr(0, 1) != 'R' && file_name.substr(0,\
    \ 1) != 's' && file_name.substr(0, 1) != 'S' && file_name.substr(0, 1) != 't'\
    \ && file_name.substr(0, 1) != 'T' && file_name.substr(0, 1) != 'u' && file_name.substr(0,\
    \ 1) != 'U' && file_name.substr(0, 1) != 'v' && file_name.substr(0, 1) != 'V'\
    \ && file_name.substr(0, 1) != 'w' && file_name.substr(0, 1) != 'W' && file_name.substr(0,\
    \ 1) != 'x' && file_name.substr(0, 1) != 'X' && file_name.substr(0, 1) != 'y'\
    \ && file_name.substr(0, 1) != 'Y' && file_name.substr(0, 1) != 'z' && file_name.substr(0,\
    \ 1) != 'Z') {\n            return \"No\";\n        }\n    }\n    \n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgbgvx2r9.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpgbgvx2r9.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n      |                 ^~~~~~~~~\n/tmp/tmpgbgvx2r9.cpp:25:36:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   25 |         if (file_name.substr(0, 1) != 'a' &&\
    \ file_name.substr(0, 1) != 'A' && file_name.substr(0, 1) != 'b' && file_name.substr(0,\
    \ 1) != 'B' && file_name.substr(0, 1) != 'c' && file_name.substr(0, 1) != 'C'\
    \ && file_name.substr(0, 1) != 'd' && file_name.substr(0, 1) != 'D' && file_name.substr(0,\
    \ 1) != 'e' && file_name.substr(0, 1) != 'E' && file_name.substr(0, 1) != 'f'\
    \ && file_name.substr(0, 1) != 'F' && file_name.substr(0, 1) != 'g' && file_name.substr(0,\
    \ 1) != 'G' && file_name.substr(0, 1) != 'h' && file_name.substr(0, 1) != 'H'\
    \ && file_name.substr(0, 1) != 'i' && file_name.substr(0, 1) != 'I' && file_name.substr(0,\
    \ 1) != 'j' && file_name.substr(0, 1) != 'J' && file_name.substr(0, 1) != 'k'\
    \ && file_name.substr(0, 1) != 'K' && file_name.substr(0, 1) != 'l' && file_name.substr(0,\
    \ 1) != 'L' && file_name.substr(0, 1) != 'm' && file_name.substr(0, 1) != 'M'\
    \ && file_name.substr(0, 1) != 'n' && file_name.substr(0, 1) != 'N' && file_name.substr(0,\
    \ 1) != 'o' && file_name.substr(0, 1) != 'O' && file_name.substr(0, 1) != 'p'\
    \ && file_name.substr(0, 1) != 'P' && file_name.substr(0, 1) != 'q' && file_name.substr(0,\
    \ 1) != 'Q' && file_name.substr(0, 1) != 'r' && file_name.substr(0, 1) != 'R'\
    \ && file_name.substr(0, 1) != 's' && file_name.substr(0, 1) != 'S' && file_name.substr(0,\
    \ 1) != 't' && file_name.substr(0, 1) != 'T' && file_name.substr(0, 1) != 'u'\
    \ && file_name.substr(0, 1) != 'U' && file_name.substr(0, 1) != 'v' && file_name.substr(0,\
    \ 1) != 'V' && file_name.substr(0, 1) != 'w' && file_name.substr(0, 1) != 'W'\
    \ && file_name.substr(0, 1) != 'x' && file_name.substr(0, 1) != 'X' && file_name.substr(0,\
    \ 1) !"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmh7a_wyo: /tmp/tmpmh7a_wyo.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp1h7j5uvi: /tmp/tmp1h7j5uvi.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmrae4o22: /tmp/tmpmrae4o22.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    \n    // return 'Yes' if file name is valid\n\
    \    return file_name;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpyajtbcpt: /tmp/tmpyajtbcpt.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp97u7lquc: /tmp/tmp97u7lquc.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    \n    if(file_name.length() > 3 && file_name.find_last_of('.') !=\
    \ std::string::npos) {\n        return \"No\";\n    }\n    \n    if(file_extension\
    \ == \"txt\" || file_extension == \"exe\" || file_extension == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    \n    return \"No\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp17jbahnl: /tmp/tmp17jbahnl.cpp:32: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp5rdlygdl: /tmp/tmp5rdlygdl.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp0q37trui: /tmp/tmp0q37trui.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    \n    // return 'Yes' if all conditions\
    \ are met\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp9_0uc8it: /tmp/tmp9_0uc8it.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp9qcf4o1p: /tmp/tmp9qcf4o1p.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    \n    \n    return file_name;\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpjgt16p2e: /tmp/tmpjgt16p2e.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpo_034ak0: /tmp/tmpo_034ak0.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name_check;\n    \n\
    \    return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp_182lh0p: /tmp/tmp_182lh0p.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3 || file_name.find(\".\") ==\
    \ -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n    \
    \    return \"No\";\n    }\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n \
    \   if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0, 1) < 'a'\
    \ || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find(\"\
    .\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n \
    \   if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0, 1) < 'a'\
    \ || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find(\"\
    .\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprwnymc4a.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmprwnymc4a.cpp:23:74: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   23 |     if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      |                       \
    \                            ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |           \
    \                                                        |        |\n      | \
    \                                                                  |        char\n\
    \      |                                                                   std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmprwnymc4a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprwnymc4a.cpp:23:76:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |     if (count > 3 || file_name.find(\"\
    .\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \      |                                                                     \
    \       ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmprwnymc4a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpj1khykyj: /tmp/tmpj1khykyj.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpnvje_064: /tmp/tmpnvje_064.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name_check;\n    \n\
    \    if (file_name.size() > 3 || file_name.find(\".\") != file_name.begin() ||\
    \ file_name.substr(0, 1) != tolower(file_name[0]) || file_name.find(\".txt\")\
    \ != file_name.end() || file_name.find(\".exe\") != file_name.end() || file_name.find(\"\
    .dll\") != file_name.end()) {\n        file_name_check = \"No\";\n    }\n    else\
    \ {\n        file_name_check = \"Yes\";\n    }\n    return file_name_check;\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpskrvef1v.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpskrvef1v.cpp:20:53: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   20 |     if (file_name.size() > 3 || file_name.find(\".\") !=\
    \ file_name.begin() || file_name.substr(0, 1) != tolower(file_name[0]) || file_name.find(\"\
    .txt\") != file_name.end() || file_name.find(\".exe\") != file_name.end() || file_name.find(\"\
    .dll\") != file_name.end()) {\n      |                                 ~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~\n      |                                              \
    \ |                       |\n      |                                         \
    \      |                       std::__cxx11::basic_string<char>::iterator {aka\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n  \
    \    |                                               std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpskrvef1v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:900:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    int dot_count = 0;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n    \
    \        dot_count++;\n        }\n    }\n    if (dot_count == 1) {\n        if\
    \ (file_name[0] == 'a' || file_name[0] == 'A') {\n            file_extension =\
    \ \"txt\";\n        } else if (file_name[0] == 'b' || file_name[0] == 'B') {\n\
    \            file_extension = \"exe\";\n        } else if (file_name[0] == 'c'\
    \ || file_name[0] == 'C') {\n            file_extension = \"dll\";\n        }\
    \ else {\n            file_extension = \"unknown\";\n        }\n    } else {\n\
    \        file_extension = \"unknown\";\n    }\n    if (dot_count > 3) {\n    \
    \    return \"No\";\n    } else if (dot_count == 3) {\n        if (file_name[0]\
    \ == 'a' || file_name[0] == 'A') {\n            if (file_name[1] == 'b' || file_name[1]\
    \ == 'B') {\n                if (file_name[2] == 'c' || file_name[2] == 'C') {\n\
    \                    return \"Yes\";\n                } else {\n             \
    \       return \"No\";\n                }\n            } else {\n            \
    \    return \"No\";\n            }\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n        return \"No\";\n    }\n}\nint main() {\n \
    \   auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmprqyhmweh: /tmp/tmprqyhmweh.cpp:58: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp23_r03n5: /tmp/tmp23_r03n5.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() > 3 && file_name.find_last_of(\"\
    .\") > 0 && file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[file_name.length()\
    \ - 1] >= 'a' && file_name[file_name.length() - 1] <= 'z') {\n        if (file_extension\
    \ == \"txt\" || file_extension == \"exe\" || file_extension == \"dll\") {\n  \
    \          return \"Yes\";\n        } else {\n            return \"No\";\n   \
    \     }\n    } else {\n        return \"No\";\n    }\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmppn_08hx5: /tmp/tmppn_08hx5.cpp:35: int main(): Assertion `candidate((\"\
    K.dll\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    int dot_pos = file_name.find_last_of(\"\
    .\");\n    if (dot_pos == std::string::npos) {\n        return \"No\";\n    }\n\
    \    file_extension = file_name.substr(dot_pos);\n    if (file_extension.length()\
    \ != 3 || file_extension[0] != 'a' || file_extension[1] != 'b' || file_extension[2]\
    \ != 'c') {\n        return \"No\";\n    }\n    if (file_name.substr(0, dot_pos)\
    \ != \"0\" && file_name.substr(0, dot_pos) != \"1\" && file_name.substr(0, dot_pos)\
    \ != \"2\" && file_name.substr(0, dot_pos) != \"3\" && file_name.substr(0, dot_pos)\
    \ != \"4\" && file_name.substr(0, dot_pos) != \"5\" && file_name.substr(0, dot_pos)\
    \ != \"6\" && file_name.substr(0, dot_pos) != \"7\" && file_name.substr(0, dot_pos)\
    \ != \"8\" && file_name.substr(0, dot_pos) != \"9\") {\n        return \"No\"\
    ;\n    }\n    if (file_name.substr(dot_pos) != \".txt\" && file_name.substr(dot_pos)\
    \ != \".exe\" && file_name.substr(dot_pos) != \".dll\") {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp98f5027k: /tmp/tmp98f5027k.cpp:35: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_name_check;\n    // Your code goes here\n    \n    return\
    \ file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpyn3pti6z: /tmp/tmpyn3pti6z.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string pattern = \"^[0-9]{3}\\.txt$\";\n\
    \    std::string pattern2 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string pattern3\
    \ = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string pattern4 = \"^[a-zA-Z]{1}\\\
    .exe$\";\n    std::string pattern5 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string\
    \ pattern6 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string pattern7 = \"^[a-zA-Z]{1}\\\
    .dll$\";\n    \n    std::string pattern8 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string\
    \ pattern9 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string pattern10 = \"^[a-zA-Z]{1}\\\
    .exe$\";\n    std::string pattern11 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string\
    \ pattern12 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string pattern13 = \"^[a-zA-Z]{1}\\\
    .dll$\";\n    \n    std::string pattern14 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string\
    \ pattern15 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string pattern16 = \"^[a-zA-Z]{1}\\\
    .exe$\";\n    std::string pattern17 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string\
    \ pattern18 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string pattern19 = \"^[a-zA-Z]{1}\\\
    .dll$\";\n    \n    std::string pattern20 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string\
    \ pattern21 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string pattern22 = \"^[a-zA-Z]{1}\\\
    .exe$\";\n    std::string pattern23 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string\
    \ pattern24 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string pattern25 = \"^[a-zA-Z]{1}\\\
    .dll$\";\n    \n    std::string pattern26 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string\
    \ pattern27 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string pattern28 = \"^[a-zA-Z]{1}\\\
    .exe$\";\n    std::string pattern29 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string\
    \ pattern30 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string pattern31 = \"^[a-zA-Z]{1}\\\
    .dll$\";\n    \n    std::string pattern32 = \"^[a-zA-Z]{1}\\.exe$\";\n    std::string\
    \ pattern33 = \"^[a-zA-Z]{1}\\.dll$\";\n    \n    std::string pattern34 = \"^[a-zA-Z]{1}\\\
    .exe$\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cbwk02q.cpp:66:29: warning: missing terminating \" character\n\
    \   66 |     std::string pattern34 = \"^[a-zA-Z]{1}\\.exe$\n      |          \
    \                   ^\n/tmp/tmp3cbwk02q.cpp:66:29: error: missing terminating\
    \ \" character\n   66 |     std::string pattern34 = \"^[a-zA-Z]{1}\\.exe$\n  \
    \    |                             ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q.cpp:\
    \ In function \u2018std::string file_name_check(std::string)\u2019:\n/tmp/tmp3cbwk02q.cpp:17:27:\
    \ warning: unknown escape sequence: '\\.'\n   17 |     std::string pattern = \"\
    ^[0-9]{3}\\.txt$\";\n      |                           ^~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q.cpp:18:28:\
    \ warning: unknown escape sequence: '\\.'\n   18 |     std::string pattern2 =\
    \ \"^[a-zA-Z]{1}\\.exe$\";\n      |                            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3cbwk02q.cpp:19:28: warning: unknown escape sequence: '\\.'\n   19 | \
    \    std::string pattern3 = \"^[a-zA-Z]{1}\\.dll$\";\n      |                \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q.cpp:21:28: warning: unknown\
    \ escape sequence: '\\.'\n   21 |     std::string pattern4 = \"^[a-zA-Z]{1}\\\
    .exe$\";\n      |                            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q.cpp:22:28:\
    \ warning: unknown escape sequence: '\\.'\n   22 |     std::string pattern5 =\
    \ \"^[a-zA-Z]{1}\\.dll$\";\n      |                            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3cbwk02q.cpp:24:28: warning: unknown escape sequence: '\\.'\n   24 | \
    \    std::string pattern6 = \"^[a-zA-Z]{1}\\.exe$\";\n      |                \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q.cpp:25:28: warning: unknown\
    \ escape sequence: '\\.'\n   25 |     std::string pattern7 = \"^[a-zA-Z]{1}\\\
    .dll$\";\n      |                            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q.cpp:27:28:\
    \ warning: unknown escape sequence: '\\.'\n   27 |     std::string pattern8 =\
    \ \"^[a-zA-Z]{1}\\.exe$\";\n      |                            ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3cbwk02q.cpp:28:28: warning: unknown escape sequence: '\\.'\n   28 | \
    \    std::string pattern9 = \"^[a-zA-Z]{1}\\.dll$\";\n      |                \
    \            ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cbwk02q"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    \n    // Write your code here\n    \n  \
    \  // Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // \n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpooqaunfo: /tmp/tmpooqaunfo.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpch2q4_2c: /tmp/tmpch2q4_2c.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpwzzvgd4t: /tmp/tmpwzzvgd4t.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmplp0t6p39: /tmp/tmplp0t6p39.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpzlozhsp0: /tmp/tmpzlozhsp0.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphvcbm1sk.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmphvcbm1sk.cpp:24:148: error: \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\u2019\
    \ was not declared in this scope; did you mean \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\u2019\
    ?\n   24 |     std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n      |                                                              \
    \                                                                            \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \   file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\n\
    /tmp/tmphvcbm1sk.cpp:25:179: error: \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\u2019\
    \ was not declared in this scope; did you mean \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\u2019\
    ?\n   25 |     std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_do"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpto7ot956: /tmp/tmpto7ot956.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= '\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0yqz6mmn.cpp:91:52: warning: missing terminating ' character\n\
    \   91 |         if (file_name[i] >= 'a' && file_name[i] <= '\n      |       \
    \                                             ^\n/tmp/tmp0yqz6mmn.cpp:91:52: error:\
    \ missing terminating ' character\n/tmp/tmp0yqz6mmn.cpp: In function \u2018std::string\
    \ file_name_check(std::string)\u2019:\n/tmp/tmp0yqz6mmn.cpp:92:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   92 | }\n      | ^\n/tmp/tmp0yqz6mmn.cpp:91:51:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   91 |         if\
    \ (file_name[i] >= 'a' && file_name[i] <= '\n      |            ~            \
    \                          ^\n      |                                        \
    \           )\n   92 | }\n      | ~                                          \
    \        \n/tmp/tmp0yqz6mmn.cpp:92:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   92 | }\n      | ^\n/tmp/tmp0yqz6mmn.cpp:93:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   93\
    \ | int main() {\n      |            ^\n/tmp/tmp0yqz6mmn.cpp:121:1: error: expected\
    \ \u2018}\u2019 at end of input\n  121 | }\n      | ^\n/tmp/tmp0yqz6mmn.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmp0yqz6mmn.cpp:121:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  121 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    std::string file_extension_check;\n\
    \    std::string file_name_check;\n    std::string file_name_check_2;\n    std::string\
    \ file_name_check_3;\n    std::string file_name_check_4;\n    std::string file_name_check_5;\n\
    \    std::string file_name_check_6;\n    std::string file_name_check_7;\n    std::string\
    \ file_name_check_8;\n    std::string file_name_check_9;\n    std::string file_name_check_10;\n\
    \    std::string file_name_check_11;\n    std::string file_name_check_12;\n  \
    \  std::string file_name_check_13;\n    std::string file_name_check_14;\n    std::string\
    \ file_name_check_15;\n    std::string file_name_check_16;\n    std::string file_name_check_17;\n\
    \    std::string file_name_check_18;\n    std::string file_name_check_19;\n  \
    \  std::string file_name_check_20;\n    std::string file_name_check_21;\n    std::string\
    \ file_name_check_22;\n    std::string file_name_check_23;\n    std::string file_name_check_24;\n\
    \    std::string file_name_check_25;\n    std::string file_name_check_26;\n  \
    \  std::string file_name_check_27;\n    std::string file_name_check_28;\n    std::string\
    \ file_name_check_29;\n    std::string file_name_check_30;\n    std::string file_name_check_31;\n\
    \    std::string file_name_check_32;\n    std::string file_name_check_33;\n  \
    \  std::string file_name_check_34;\n    std::string file_name_check_35;\n    std::string\
    \ file_name_check_36;\n    std::string file_name_check_37;\n    std::string file_name_check_38;\n\
    \    std::string file_name_check_39;\n    std::string file_name_check_40;\n  \
    \  std::string file_name_check_41;\n    std::string file_name_check_42;\n    std::string\
    \ file_name_check_43;\n    std::string file_name_check_44;\n    std::string file_name_check_45;\n\
    \    std::string file_name_check_46;\n    std::string file_name_check_47;\n  \
    \  std::string file_name_check_48;\n    std::string file_name_check_49;\n    std::string\
    \ file_name_check_50;\n    std::string file_name_check_51;\n    std::string file_name_check_52;\n\
    \    std::string file_name_check_53;\n    std::string file_name_check_54;\n  \
    \  std::string file_name_check_55;\n    std::string file_name_check_56;\n    std::string\
    \ file_name_check_57;\n    std::string file_name_check_58;\n    std::string file_name_check_59;\n\
    \    std::string file_name_check_60;\n    std::string file_name_check_61;\n  \
    \  std::string file_name_check_62;\n    std::string file_name_check_63;\n    std::string\
    \ file_name_check_64;\n    std::string file_name_check_65\n}\nint main() {\n \
    \   auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbrtcimwy.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpbrtcimwy.cpp:83:1: error: expected initializer before \u2018}\u2019\
    \ token\n   83 | }\n      | ^\n/tmp/tmpbrtcimwy.cpp:83:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() < 3 || file_name.find_last_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n        return \"Yes\";\n    }\n\
    \    if (file_name.find_first_not_of(\"0123456789\") == std::string::npos) {\n\
    \        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"abcdefghijklmnopqrstuvwxyz\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == std::string::npos) {\n        return \"No\";\n\
    \    }\n    if (file_name.find_first_not_of(\"._\") == std::string::npos) {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpdidu6lk6: /tmp/tmpdidu6lk6.cpp:43: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_extension_lower;\n    file_extension_lower.reserve(file_extension.size());\n\
    \    for (char &c : file_extension) {\n        if (c >= 'a' && c <= 'z') {\n \
    \           file_extension_lower += c;\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            file_extension_lower += c;\n        } else {\n            file_extension_lower\
    \ += '_';\n        }\n    }\n    if (file_extension_lower == \"txt\" || file_extension_lower\
    \ == \"exe\" || file_extension_lower == \"dll\") {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpr42g_rx_: /tmp/tmpr42g_rx_.cpp:38: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    int dot_pos = file_name.find_first_of(\"\
    .\");\n    if (dot_pos == std::string::npos) return \"No\";\n    file_extension\
    \ = file_name.substr(dot_pos);\n    if (file_extension.length() > 3) return \"\
    No\";\n    if (file_name.find_first_not_of(\"0123456789\") == std::string::npos)\
    \ return \"No\";\n    if (file_name.find_first_not_of(\"aAaZz\") == std::string::npos)\
    \ return \"No\";\n    if (file_name.substr(0, 1) != file_name.substr(0, 1).to_lower())\n\
    \        return \"No\";\n    if (file_extension == \"txt\" || file_extension ==\
    \ \"exe\" || file_extension == \"dll\")\n        return \"Yes\";\n    return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7zq08c7_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp7zq08c7_.cpp:23:58: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018to_lower\u2019\n   23 |     if (file_name.substr(0,\
    \ 1) != file_name.substr(0, 1).to_lower())\n      |                          \
    \                                ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpim70bs4n: /tmp/tmpim70bs4n.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3) {\n        return \"No\";\n\
    \    }\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n                if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n\
    \                    if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n     \
    \                   if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n      \
    \                      if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n   \
    \                             if (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ {\n                                    if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n                                        if (file_name[i] >= 'a' &&\
    \ file_name[i] <= 'z') {\n                                            if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \       if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n                  \
    \                                  if (file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') {\n                                                        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                   if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n      \
    \                                                          if (file_name[i] >=\
    \ 'a' && file_name[i] <= 'z') {\n                                            \
    \                        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n \
    \                                                                       if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                       if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n  \
    \                                                                  if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                               if (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ {\n                                                                if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                           if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n\
    \                                                                        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                       if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n  \
    \                                                                  if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                               if (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ {\n                                                                if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                           if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n\
    \                                                                        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                                         \
    \                       if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n  \
    \                              \n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpou3yi8oz.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpou3yi8oz.cpp:59:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n/tmp/tmpou3yi8oz.cpp:87:1:\
    \ error: expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmpou3yi8oz.cpp:55:121:\
    \ note: to match this \u2018{\u2019\n   55 |                                 \
    \                                        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n      |                                                         \
    \                                                                ^\n/tmp/tmpou3yi8oz.cpp:87:1:\
    \ error: expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmpou3yi8oz.cpp:54:117:\
    \ note: to match this \u2018{\u2019\n   54 |                                 \
    \                                    if (file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') {\n      |                                                            \
    \                                                         ^\n/tmp/tmpou3yi8oz.cpp:87:1:\
    \ error: expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmpou3yi8oz.cpp:53:113:\
    \ note: to match this \u2018{\u2019\n   53 |                                 \
    \                                if (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ {\n      |                                                                 \
    \                                                ^\n/tmp/tmpou3yi8oz.cpp:87:1:\
    \ error: expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmpou3yi8oz.cpp:52:121:\
    \ note: to match this \u2018{\u2019\n   52 |                                 \
    \                                        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n      |                                                         \
    \                                                                ^\n/tmp/tmpou3yi8oz.cpp:87:1:\
    \ error: expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmpou3yi8oz.cpp:51:117:\
    \ note: to match this \u2018{\u2019\n   51 |                                 \
    \                                    if (file_name[i] >= 'a' && file_name[i] <=\
    \ 'z') {\n      |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return 'Yes' if and only if all the conditions\
    \ above are met\n    \n    return file_name;\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpez2_1yoa: /tmp/tmpez2_1yoa.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    \n    return \"\";\n}\nint main() {\n  \
    \  auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp2yu0975i: /tmp/tmp2yu0975i.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n        if (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            count++;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if (file_name[i] == '.')\
    \ {\n            count++;\n        }\n        if (count == 3) {\n            count--;\n\
    \        }\n    }\n    if (count == 1) {\n        return \"Yes\";\n    }\n   \
    \ return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n   \
    \ assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpfzwfwrac: /tmp/tmpfzwfwrac.cpp:42: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp1jyiz3dx: /tmp/tmp1jyiz3dx.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.') - 1);\n    \n    bool is_valid = false;\n    \n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            is_valid = true;\n           \
    \ break;\n        }\n    }\n    \n    if (!is_valid) {\n        return \"No\"\
    ;\n    }\n    \n    for (int i = 0; i < file_name.length(); i++) {\n        if\
    \ (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            is_valid = true;\n\
    \            break;\n        }\n    }\n    \n    if (!is_valid) {\n        return\
    \ \"No\";\n    }\n    \n    if (file_name.find_first_of('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    if (file_name.find_first_of('.')\
    \ - 1 != 0) {\n        return \"No\";\n    }\n    \n    if (file_name.substr(0,\
    \ 1) != \"a\" && file_name.substr(0, 1) != \"A\") {\n        return \"No\";\n\
    \    }\n    \n    if (file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"t\" && file_name.substr(file_name.find_first_of('.') - 1, 1) != \"T\") {\n\
    \        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"e\" && file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"E\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"d\" && file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"D\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"l\" && file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"L\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"l\" && file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"L\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"d\" && file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"D\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"d\" && file_name.substr(file_name.find_first_of('.') - 1, 1) !=\
    \ \"D\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"d\" && file_name.substr(file_name.find_first_of\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpad4_zv0t.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpad4_zv0t.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.') - 1);\n      |                 ^~~~~~~~~\n/tmp/tmpad4_zv0t.cpp:84:113:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   84 |     if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"d\" && file_name.substr(file_name.find_first_of\n      |      \
    \                                                                            \
    \       ~                       ^\n      |                                   \
    \                                                                            \
    \  )\n   85 | }\n      | ~                                                   \
    \                                                             \n/tmp/tmpad4_zv0t.cpp:84:113:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   84 |     if (file_name.substr(file_name.find_first_of('.')\
    \ - 1, 1) != \"d\" && file_name.substr(file_name.find_first_of\n      |      \
    \  ~                                                                         \
    \                               ^\n      |                                   \
    \                                                                            \
    \  )\n   85 | }\n      | ~                                                   \
    \                                                             \n/tmp/tmpad4_zv0t.cpp:85:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   85 | }\n \
    \     | ^\n/tmp/tmpad4_zv0t.cpp:85:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   85 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpqm_64bwx: /tmp/tmpqm_64bwx.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\"));\n    \n    bool is_valid = true;\n    \n  \
    \  if (file_name.size() > 3) {\n        is_valid = false;\n    }\n    \n    if\
    \ (file_name.find_first_of(\".\") == std::string::npos) {\n        is_valid =\
    \ false;\n    }\n    \n    if (file_name[0] < 'a' || file_name[0] > 'z') {\n \
    \       is_valid = false;\n    }\n    \n    if (file_name[file_name.size() - 1]\
    \ < 'a' || file_name[file_name.size() - 1] > 'z') {\n        is_valid = false;\n\
    \    }\n    \n    if (file_name.find_first_of(\".\") > 0) {\n        if (file_name.substr(0,\
    \ 1) != \".\") {\n            is_valid = false;\n        }\n    }\n    \n    if\
    \ (file_name.find_first_of(\".\") > 0) {\n        if (file_name.substr(file_name.find_first_of(\"\
    .\") - 1, 1) != \".\") {\n            is_valid = false;\n        }\n    }\n  \
    \  \n    if (is_valid) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n   \
    \ assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse0vbje5.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpse0vbje5.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\"));\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    std::string file_extension;\n    std::string\
    \ file_extension_check;\n    std::string file_name_check;\n    std::string file_name_check_2;\n\
    \    std::string file_name_check_3;\n    std::string file_name_check_4;\n    std::string\
    \ file_name_check_5;\n    std::string file_name_check_6;\n    std::string file_name_check_7;\n\
    \    std::string file_name_check_8;\n    std::string file_name_check_9;\n    std::string\
    \ file_name_check_10;\n    std::string file_name_check_11;\n    std::string file_name_check_12;\n\
    \    std::string file_name_check_13;\n    std::string file_name_check_14;\n  \
    \  std::string file_name_check_15;\n    std::string file_name_check_16;\n    std::string\
    \ file_name_check_17;\n    std::string file_name_check_18;\n    std::string file_name_check_19;\n\
    \    std::string file_name_check_20;\n    std::string file_name_check_21;\n  \
    \  std::string file_name_check_22;\n    std::string file_name_check_23;\n    std::string\
    \ file_name_check_24;\n    std::string file_name_check_25;\n    std::string file_name_check_26;\n\
    \    std::string file_name_check_27;\n    std::string file_name_check_28;\n  \
    \  std::string file_name_check_29;\n    std::string file_name_check_30;\n    std::string\
    \ file_name_check_31;\n    std::string file_name_check_32;\n    std::string file_name_check_33;\n\
    \    std::string file_name_check_34;\n    std::string file_name_check_35;\n  \
    \  std::string file_name_check_36;\n    std::string file_name_check_37;\n    std::string\
    \ file_name_check_38;\n    std::string file_name_check_39;\n    std::string file_name_check_40;\n\
    \    std::string file_name_check_41;\n    std::string file_name_check_42;\n  \
    \  std::string file_name_check_43;\n    std::string file_name_check_44;\n    std::string\
    \ file_name_check_45;\n    std::string file_name_check_46;\n    std::string file_name_check_47;\n\
    \    std::string file_name_check_48;\n    std::string file_name_check_49;\n  \
    \  std::string file_name_check_50;\n    std::string file_name_check_51;\n    std::string\
    \ file_name_check_52;\n    std::string file_name_check_53;\n    std::string file_name_check_54;\n\
    \    std::string file_name_check_55;\n    std::string file_name_check_56;\n  \
    \  std::string file_name_check_57;\n    std::string file_name_check_58;\n    std::string\
    \ file_name_check_59;\n    std::string file_name_check_60;\n    std::string file_name_check_61;\n\
    \    std::string file_name_check_62;\n    std::string file_name_check_63;\n  \
    \  std::string file_name_check_64;\n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp3_zjkqb2: /tmp/tmp3_zjkqb2.cpp:87: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            num_digits++;\n\
    \        }\n    }\n    if (num_digits > 3) {\n        return \"No\";\n    }\n\
    \    if (file_name.find_first_not_of(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") < file_name.find_first_of(\"\
    0123456789\")) {\n        return \"No\";\n    }\n    if (file_name.find_first_of(\"\
    .\") > file_name.find_first_not_of(\".\") || \n        file_name.find_first_of(\"\
    .\") > file_name.find_first_of(\"0123456789\")) {\n        return \"No\";\n  \
    \  }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmq88s7y7: /tmp/tmpmq88s7y7.cpp:42: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmppekc77qg: /tmp/tmppekc77qg.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n        if (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            count++;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if (file_name[i] == '.')\
    \ {\n            count++;\n        }\n    }\n    if (count > 3) {\n        return\
    \ \"No\";\n    }\n    if (count == 1) {\n        return \"Yes\";\n    }\n    if\
    \ (file_name.substr(0, 1) == \"1\") {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) != \"a\" && file_name.substr(0, 1) != \"A\") {\n        return \"No\";\n\
    \    }\n    if (file_name.substr(file_name.find_first_of('.') + 1, 4) != \"txt\"\
    \ && file_name.substr(file_name.find_first_of('.') + 1, 4) != \"exe\" && file_name.substr(file_name.find_first_of('.')\
    \ + 1, 4) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpjzpoxvfe: /tmp/tmpjzpoxvfe.cpp:51: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    std::string extension = file_name.substr(file_name.find_last_of('.'));\n\
    \    \n    std::string file_extension;\n    \n    if (extension == \"txt\") {\n\
    \        file_extension = \"txt\";\n    }\n    else if (extension == \"exe\")\
    \ {\n        file_extension = \"exe\";\n    }\n    else if (extension == \"dll\"\
    ) {\n        file_extension = \"dll\";\n    }\n    else {\n        file_extension\
    \ = \"unknown\";\n    }\n    \n    if (file_name.find_first_not_of(\"0123456789\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") == 0) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 0) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 1) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 2) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 3) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 4) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 5) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 6) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 7) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 8) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 9) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 10) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 11) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 12) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 13) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 14) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 15) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 16) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > 17) {\n        return \"No\";\n    }\n    else if (file_name.find_first_not_of(\"\
    0123456789\") > \n}\nint main() {\n    auto candidate = file_name_check;\n   \
    \ assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpih6htj_k.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpih6htj_k.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n      |                 ^~~~~~~~~\n/tmp/tmpih6htj_k.cpp:98:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   98 | }\n \
    \     | ^\n/tmp/tmpih6htj_k.cpp:97:57: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   97 |     else if (file_name.find_first_not_of(\"0123456789\"\
    ) >\n      |             ~                                           ^\n     \
    \ |                                                         )\n   98 | }\n   \
    \   | ~                                                        \n/tmp/tmpih6htj_k.cpp:98:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   98 | }\n \
    \     | ^\n/tmp/tmpih6htj_k.cpp:98:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   98 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return \"Yes\";\n    return \"No\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpq18y9rkv: /tmp/tmpq18y9rkv.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp7jumvb83: /tmp/tmp7jumvb83.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmppxsk55ks: /tmp/tmppxsk55ks.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (file_name.length() == 0 || count > 3\
    \ || file_name.substr(0, 1) != \".\" || \n        file_name.substr(0, 1) != 'a'\
    \ || file_name.substr(0, 1) != 'b' || file_name.substr(0, 1) != 'c' || \n    \
    \    file_name.substr(0, 1) != 'd' || file_name.substr(0, 1) != 'e' || file_name.substr(0,\
    \ 1) != 'f' || \n        file_name.substr(0, 1) != 'g' || file_name.substr(0,\
    \ 1) != 'h' || file_name.substr(0, 1) != 'i' || \n        file_name.substr(0,\
    \ 1) != 'j' || file_name.substr(0, 1) != 'k' || file_name.substr(0, 1) != 'l'\
    \ || \n        file_name.substr(0, 1) != 'm' || file_name.substr(0, 1) != 'n'\
    \ || file_name.substr(0, 1) != 'o' || \n        file_name.substr(0, 1) != 'p'\
    \ || file_name.substr(0, 1) != 'q' || file_name.substr(0, 1) != 'r' || \n    \
    \    file_name.substr(0, 1) != 's' || file_name.substr(0, 1) != 't' || file_name.substr(0,\
    \ 1) != 'u' || \n        file_name.substr(0, 1) != 'v' || file_name.substr(0,\
    \ 1) != 'w' || file_name.substr(0, 1) != 'x' || \n        file_name.substr(0,\
    \ 1) != 'y' || file_name.substr(0, 1) != 'z') {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpud6d_cmm.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpud6d_cmm.cpp:24:32: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   24 |         file_name.substr(0, 1) != 'a' || file_name.substr(0, 1) !=\
    \ 'b' || file_name.substr(0, 1) != 'c' ||\n      |         ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~\n      |                         |         |\n      |               \
    \          |         char\n      |                         std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpud6d_cmm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpud6d_cmm.cpp:24:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   24 |         file_name.substr(0,\
    \ 1) != 'a' || file_name.substr(0, 1) != 'b' || file_name.substr(0, 1) != 'c'\
    \ ||\n      |                                   ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpud6d_cmm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpect6763f: /tmp/tmpect6763f.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] < '0' || file_name[i] > '9') {\n          \
    \  count++;\n        }\n    }\n    if (count > 3) {\n        return \"No\";\n\
    \    }\n    if (file_name.find(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqvu7yvk4.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpqvu7yvk4.cpp:29:32: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   29 |     if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z')\
    \ {\n      |         ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |                   \
    \      |        |\n      |                         |        char\n      |    \
    \                     std::__cxx11::basic_string<char>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqvu7yvk4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqvu7yvk4.cpp:29:34:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   29 |     if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      |                       \
    \           ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqvu7yvk4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_trait"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    bool is_valid = true;\n    \n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] < 'a' ||\
    \ file_name[i] > 'z' || file_name[i] < 'A' || file_name[i] > 'Z') {\n        \
    \    is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '.') {\n            is_valid = false;\n\
    \            break;\n        }\n    }\n    \n    if (!is_valid) {\n        return\
    \ \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length(); i++) {\n \
    \       if (file_name[i] != '\\0' && file_name[i] != '.') {\n            is_valid\
    \ = false;\n            break;\n        }\n    }\n    \n    if (!is_valid) {\n\
    \        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n    \n    if (!is_valid)\
    \ {\n        return \"No\";\n    }\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] != '\\0' && file_name[i] != '.') {\n      \
    \      is_valid = false;\n            break;\n        }\n    }\n\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplcv6x5o9.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmplcv6x5o9.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n      |                 ^~~~~~~~~\n/tmp/tmplcv6x5o9.cpp:139:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  139 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check = \"No\";\n\
    \    \n    int count = 0;\n    \n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    \n    if (count > 3) {\n        file_name_check = \"Yes\"\
    ;\n    }\n    \n    if (file_name_check == \"Yes\" && file_name.find(\".\") ==\
    \ -1 && file_name[0] >= 'a' && file_name[0] <= 'z') {\n        file_name_check\
    \ = \"No\";\n    }\n    \n    if (file_name_check == \"Yes\" && file_name.find(\"\
    .\") == -1 && file_name[0] >= 'A' && file_name[0] <= 'Z') {\n        file_name_check\
    \ = \"No\";\n    }\n    \n    return file_name_check;\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpu743nyan: /tmp/tmpu743nyan.cpp:45: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_name = file_name;\n    int count\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    if (file_name[i] != 'a' && file_name[i] != 'z' && file_name[i] != 'A' &&\
    \ file_name[i] != 'Z') {\n                return \"No\";\n            }\n    \
    \    }\n    }\n    if (file_name.find(\".\") != std::string::npos) {\n       \
    \ return \"No\";\n    }\n    if (file_name.substr(0, 1) != std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.find_first_not_of(\"\
    0123456789.\") != std::string::npos) {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptvpgupm9.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmptvpgupm9.cpp:17:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   17 |     std::string file_name = file_name;\n      |\
    \                 ^~~~~~~~~\n/tmp/tmptvpgupm9.cpp:37:32: error: no match for \u2018\
    operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018const size_type\u2019 {aka \u2018const long unsigned int\u2019})\n\
    \   37 |     if (file_name.substr(0, 1) != std::string::npos) {\n      |     \
    \    ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |                    \
    \     |                      |\n      |                         |            \
    \          const size_type {aka const long unsigned int}\n      |            \
    \             std::__cxx11::basic_string<char>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptvpgupm9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmptvpgupm9.cpp:37:48:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   37 |     if (file_name.substr(0,\
    \ 1) != std::string::npos) {\n      |                                        \
    \        ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptvpgupm9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpy6i33jn5: /tmp/tmpy6i33jn5.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    std::string result;\n    size_t pos = file_name.find('.');\n\
    \    if (pos == std::string::npos) {\n        result = \"No\";\n    }\n    else\
    \ {\n        std::string extension = file_name.substr(pos + 1);\n        if (extension\
    \ == \"exe\" || extension == \"dll\" || extension == \"txt\") {\n            result\
    \ = \"Yes\";\n        }\n        else {\n            result = \"No\";\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp2cx80fvm: /tmp/tmp2cx80fvm.cpp:36: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpjgpxmu_l: /tmp/tmpjgpxmu_l.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpht_71u7u: /tmp/tmpht_71u7u.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpcsj92bpq: /tmp/tmpcsj92bpq.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name = file_name;\n\
    \    \n    // Your code goes here\n    \n    return file_name;\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5io0rkch.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp5io0rkch.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name;\n      |\
    \                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    bool is_valid = true;\n    \n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] < 'a' ||\
    \ file_name[i] > 'z') {\n            is_valid = false;\n            break;\n \
    \       }\n    }\n    \n    if (file_name.find_first_of('.') == std::string::npos)\
    \ {\n        is_valid = false;\n    }\n    \n    if (file_name.find_first_not_of('.txt')\
    \ == std::string::npos) {\n        is_valid = false;\n    }\n    \n    if (file_name.find_first_not_of('.exe')\
    \ == std::string::npos) {\n        is_valid = false;\n    }\n    \n    if (file_name.find_first_not_of('.dll')\
    \ == std::string::npos) {\n        is_valid = false;\n    }\n    \n    return\
    \ is_valid ? \"Yes\" : \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv6rcr0yo.cpp:33:37: warning: multi-character character constant\
    \ [-Wmultichar]\n   33 |     if (file_name.find_first_not_of('.txt') == std::string::npos)\
    \ {\n      |                                     ^~~~~~\n/tmp/tmpv6rcr0yo.cpp:37:37:\
    \ warning: multi-character character constant [-Wmultichar]\n   37 |     if (file_name.find_first_not_of('.exe')\
    \ == std::string::npos) {\n      |                                     ^~~~~~\n\
    /tmp/tmpv6rcr0yo.cpp:41:37: warning: multi-character character constant [-Wmultichar]\n\
    \   41 |     if (file_name.find_first_not_of('.dll') == std::string::npos) {\n\
    \      |                                     ^~~~~~\n/tmp/tmpv6rcr0yo.cpp: In\
    \ function \u2018std::string file_name_check(std::string)\u2019:\n/tmp/tmpv6rcr0yo.cpp:18:17:\
    \ error: declaration of \u2018std::string file_name\u2019 shadows a parameter\n\
    \   18 |     std::string file_name = file_name.substr(0, file_name.find_first_of('.'));\n\
    \      |                 ^~~~~~~~~\n/tmp/tmpv6rcr0yo.cpp:33:37: warning: overflow\
    \ in conversion from \u2018int\u2019 to \u2018char\u2019 changes value from \u2018\
    779384948\u2019 to \u2018't'\u2019 [-Woverflow]\n   33 |     if (file_name.find_first_not_of('.txt')\
    \ == std::string::npos) {\n      |                                     ^~~~~~\n\
    /tmp/tmpv6rcr0yo.cpp:37:37: warning: overflow in conversion from \u2018int\u2019\
    \ to \u2018char\u2019 changes value from \u2018778401893\u2019 to \u2018'e'\u2019\
    \ [-Woverflow]\n   37 |     if (file_name.find_first_not_of('.exe') == std::string::npos)\
    \ {\n      |                                     ^~~~~~\n/tmp/tmpv6rcr0yo.cpp:41:37:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u2018778333292\u2019 to \u2018'l'\u2019 [-Woverflow]\n   41 |  \
    \   if (file_name.find_first_not_of('.dll') == std::string::npos) {\n      | \
    \                                    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension;\n    int count\
    \ = 0;\n    for(int i = 0; i<file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            count++;\n        }\n    }\n    if(count == 1) {\n  \
    \      for(int i = 0; i<file_name.length(); i++) {\n            if(file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n                file_extension += file_name[i];\n\
    \            }\n        }\n        if(file_extension == \"exe\" || file_extension\
    \ == \"dll\") {\n            return \"Yes\";\n        }\n    }\n    return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmnykovz9: /tmp/tmpmnykovz9.cpp:39: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_name_check;\n    int counter = 0;\n    while(counter\
    \ < file_name.size()) {\n        if(file_name[counter] >= '0' && file_name[counter]\
    \ <= '9') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'a' && file_name[counter]\
    \ <= 'z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'A' && file_name[counter] <= 'Z') {\n            counter++;\n\
    \            continue;\n        }\n        file_name_check = \"No\";\n       \
    \ break;\n    }\n    return file_name_check;\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpw8110dek: /tmp/tmpw8110dek.cpp:46: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    if (file_extension == \"txt\" || file_extension == \"exe\" ||\
    \ file_extension == \"dll\") {\n        return \"Yes\";\n    } else {\n      \
    \  return \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpwj4mugvc: /tmp/tmpwj4mugvc.cpp:26: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp9gry2s_4: /tmp/tmp9gry2s_4.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension;\n    \n    std::string\
    \ file_extension_check = file_name.substr(file_name.find_last_of('.') + 1);\n\
    \    \n    std::string file_extension_check2 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check3 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check4 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check5 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check6 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check7 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check8 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check9 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check10 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check11 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check12 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check13 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check14 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check15 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check16 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check17 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check18 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check19 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check20 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check21 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_check22 = file_name.substr(0, file_name.find_last_of('.')\
    \ + 1);\n    \n    std::string file_extension_\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxkd3mx5_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpxkd3mx5_.cpp:65:1: error: expected initializer before \u2018}\u2019\
    \ token\n   65 | }\n      | ^\n/tmp/tmpxkd3mx5_.cpp:65:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ if (file_name.length() > 3 && file_name.substr(0, 3) != \"0\" && file_name.substr(0,\
    \ 3) != \"1\" && file_name.substr(0, 3) != \"2\" && file_name.substr(0, 3) !=\
    \ \"3\" && file_name.substr(0, 3) != \"4\" && file_name.substr(0, 3) != \"5\"\
    \ && file_name.substr(0, 3) != \"6\" && file_name.substr(0, 3) != \"7\" && file_name.substr(0,\
    \ 3) != \"8\" && file_name.substr(0, 3) != \"9\" && file_name.substr(0, 1) !=\
    \ \".\" && file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"b\"\
    \ && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\" && file_name.substr(0, 1) != \"A\" && file_name.substr(0, 1) !=\
    \ \"B\" && file_name.substr(0, 1) != \"C\" && file_name.substr(0, 1) != \"D\"\
    \ && file_name.substr(0, 1) != \"E\" && file_name.substr(0, 1) != \"F\" && file_name.substr(0,\
    \ 1) != \"G\" && file_name.substr(0, 1) != \"H\" && file_name.substr(0, 1) !=\
    \ \"I\" && file_name.substr(0, 1) != \"J\" && file_name.substr(0, 1) != \"K\"\
    \ && file_name.substr(0, 1) != \"L\" && file_name.substr(0, 1) != \"M\" && file_name.substr(0,\
    \ 1) != \"N\" && file_name.substr(0, 1) != \"O\" && file_name.substr(0, 1) !=\
    \ \"P\" && file_name.substr(0, 1) != \"Q\" && file_name.substr(0, 1) != \"R\"\
    \ && file_name.substr(0, 1) != \"S\" && file_name.substr(0, 1) != \"T\" && file_name.substr(0,\
    \ 1) != \"U\" && file_name.substr(0, 1) != \"V\" && file_name.substr(0, 1) !=\
    \ \"W\" && \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23s3l7dq.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp23s3l7dq.cpp:21:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   21 | }\n      | ^\n/tmp/tmp23s3l7dq.cpp:20:2014: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   20 |     if (file_name.length()\
    \ > 3 && file_name.substr(0, 3) != \"0\" && file_name.substr(0, 3) != \"1\" &&\
    \ file_name.substr(0, 3) != \"2\" && file_name.substr(0, 3) != \"3\" && file_name.substr(0,\
    \ 3) != \"4\" && file_name.substr(0, 3) != \"5\" && file_name.substr(0, 3) !=\
    \ \"6\" && file_name.substr(0, 3) != \"7\" && file_name.substr(0, 3) != \"8\"\
    \ && file_name.substr(0, 3) != \"9\" && file_name.substr(0, 1) != \".\" && file_name.substr(0,\
    \ 1) != \"a\" && file_name.substr(0, 1) != \"b\" && file_name.substr(0, 1) !=\
    \ \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0, 1) != \"e\"\
    \ && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) != \"g\" && file_name.substr(0,\
    \ 1) != \"h\" && file_name.substr(0, 1) != \"i\" && file_name.substr(0, 1) !=\
    \ \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0, 1) != \"l\"\
    \ && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) != \"n\" && file_name.substr(0,\
    \ 1) != \"o\" && file_name.substr(0, 1) != \"p\" && file_name.substr(0, 1) !=\
    \ \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0, 1) != \"s\"\
    \ && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) != \"u\" && file_name.substr(0,\
    \ 1) != \"v\" && file_name.substr(0, 1) != \"w\" && file_name.substr(0, 1) !=\
    \ \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0, 1) != \"z\"\
    \ && file_name.substr(0, 1) != \"A\" && file_name.substr(0, 1) != \"B\" && file_name.substr(0,\
    \ 1) != \"C\" && file_name.substr(0, 1) != \"D\" && file_name.substr(0, 1) !=\
    \ \"E\" && file_name.substr(0, 1) != \"F\" && file_name.substr(0, 1) != \"G\"\
    \ && file_name.substr(0, 1) != \"H\" && file_name.substr(0, 1) != \"I\" && file_name.substr(0,\
    \ 1) != \"J\" && file_name.substr(0, 1) != \"K\" && file_name.substr(0, 1) !=\
    \ \"L\" && file_name.substr(0, 1) != \"M\" && file_name.substr(0, 1) != \"N\"\
    \ && file_name.substr(0, 1) != \"O\" && file_name.substr(0, 1) != \"P\" && file_name.sub"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpjz6sry5b: /tmp/tmpjz6sry5b.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return \"Yes\";\n    return \"No\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpiirsga0o: /tmp/tmpiirsga0o.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check = file_name;\n\
    \    \n    int count = 0;\n    \n    for (int i = 0; i < file_name_check.size();\
    \ i++) {\n        if (file_name_check[i] == '.') {\n            count++;\n   \
    \     }\n    }\n    \n    if (count > 3) {\n        return \"No\";\n    }\n  \
    \  \n    for (int i = 0; i < file_name_check.size(); i++) {\n        if (file_name_check[i]\
    \ >= 'a' && file_name_check[i] <= 'z') {\n            continue;\n        }\n \
    \       if (file_name_check[i] >= 'A' && file_name_check[i] <= 'Z') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == ' ') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == '.') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == '_') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == '-') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == '.') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == '/') {\n      \
    \      continue;\n        }\n        if (file_name_check[i] == '\\\\') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '~') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check[i] == '.') {\n   \
    \         continue;\n        }\n        if (file_name_check\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwz1b2h5.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpfwz1b2h5.cpp:123:28: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  123 |         if (file_name_check\n      |            ~           \
    \    ^\n      |                            )\n  124 | }\n      | ~           \
    \                \n/tmp/tmpfwz1b2h5.cpp:123:13: error: could not convert \u2018\
    file_name_check\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n  123 |         if (file_name_check\n      |          \
    \   ^~~~~~~~~~~~~~~\n      |             |\n      |             std::string {aka\
    \ std::__cxx11::basic_string<char>}\n/tmp/tmpfwz1b2h5.cpp:124:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  124 | }\n      | ^\n/tmp/tmpfwz1b2h5.cpp:125:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  125 | int main() {\n      |            ^\n/tmp/tmpfwz1b2h5.cpp:153:1: error:\
    \ expected \u2018}\u2019 at end of input\n  153 | }\n      | ^\n/tmp/tmpfwz1b2h5.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmpfwz1b2h5.cpp:153:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  153 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp289jjhqv: /tmp/tmp289jjhqv.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    \n    if (file_name.size() > 3 && file_name.find_last_of('.') !=\
    \ std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    \n \
    \   if (file_extension != \"txt\" && file_extension != \"exe\" && file_extension\
    \ != \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n\
    int main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpl9ak08w5: /tmp/tmpl9ak08w5.cpp:36: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() > 3 && file_name.find_last_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_name.find_last_of(\"\
    .\") != std::string::npos) {\n        if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n            return \"No\";\n        }\n        if (file_name.substr(1,\
    \ 1) < 'a' || file_name.substr(1, 1) > 'z') {\n            return \"No\";\n  \
    \      }\n        if (file_name.substr(2, 1) < 'a' || file_name.substr(2, 1) >\
    \ 'z') {\n            return \"No\";\n        }\n    }\n    \n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    \n    return \"Yes\";\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64eu23to.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp64eu23to.cpp:25:36: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   25 |         if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1)\
    \ > 'z') {\n      |             ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |        \
    \                     |        |\n      |                             |      \
    \  char\n      |                             std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp64eu23to.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp64eu23to.cpp:25:38:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   25 |         if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      |                       \
    \               ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp64eu23to.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_matc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_extension_lowercase_copy = file_extension;\n\
    \    std::transform(file_extension_lowercase_copy.begin(), file_extension_lowercase_copy.end(),\
    \ file_extension_lowercase_copy.begin(), ::tolower);\n    if (file_extension_lowercase_copy\
    \ == \"exe\" || file_extension_lowercase_copy == \"dll\" || file_extension_lowercase_copy\
    \ == \"txt\") {\n        return \"Yes\";\n    } else {\n        return \"No\"\
    ;\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp6jp2z3iw: /tmp/tmp6jp2z3iw.cpp:29: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return 'Yes' if all the conditions are\
    \ met\n    return file_name;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpeincburf: /tmp/tmpeincburf.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            num_digits++;\n\
    \        }\n    }\n    if (num_digits > 3) {\n        return \"No\";\n    }\n\
    \    if (file_name.find(\".\") == std::string::npos) {\n        return \"No\"\
    ;\n    }\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            continue;\n        }\n       \
    \ if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            continue;\n \
    \       }\n        if (file_name[i] == '.') {\n            std::string sub_string\
    \ = file_name.substr(0, i);\n            if (sub_string.empty()) {\n         \
    \       return \"No\";\n            }\n            if (sub_string[0] >= 'a' &&\
    \ sub_string[0] <=  'z') {\n                continue;\n            }\n       \
    \     if (sub_string[0] >= 'A' && sub_string[0] <=  'Z') {\n                continue;\n\
    \            }\n            if (sub_string[0] == '.') {\n                std::string\
    \ sub_string2 = file_name.substr(i + 1);\n                if (sub_string2.find(\"\
    txt\") != std::string::npos || sub_string2.find(\"exe\") != std::string::npos\
    \ || sub_string2.find(\"dll\") != std::string::npos) {\n                    return\
    \ \"Yes\";\n                }\n            }\n        }\n    }\n    return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp42u8zawc: /tmp/tmp42u8zawc.cpp:58: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp19scfls6: /tmp/tmp19scfls6.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpv47ovl09: /tmp/tmpv47ovl09.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp6_el6x3u: /tmp/tmp6_el6x3u.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpsur25etb: /tmp/tmpsur25etb.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    if (file_name.length() < 3 || file_name.find_last_of('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"b\" &&\
    \ file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpzs4nfjx3: /tmp/tmpzs4nfjx3.cpp:33: int main(): Assertion `candidate((\"\
    K.dll\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n        if (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            count++;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if (file_name[i] == '.')\
    \ {\n            count++;\n        }\n        if (count == 3) {\n            count--;\n\
    \        }\n    }\n    if (count == 1) {\n        if (file_name[0] == '.') {\n\
    \            return \"No\";\n        }\n        return \"Yes\";\n    }\n    if\
    \ (count == 2) {\n        if (file_name[0] == '.') {\n            return \"No\"\
    ;\n        }\n        if (file_name[1] == '.') {\n            return \"No\";\n\
    \        }\n        return \"Yes\";\n    }\n    if (count == 3) {\n        if\
    \ (file_name[0] == '.') {\n            return \"No\";\n        }\n        if (file_name[1]\
    \ == '.') {\n            return \"No\";\n        }\n        if (file_name[2] ==\
    \ '.') {\n            return \"No\";\n        }\n        return \"Yes\";\n   \
    \ }\n    if (count == 4) {\n        if (file_name[0] == '.') {\n            return\
    \ \"No\";\n        }\n        if (file_name[1] == '.') {\n            return \"\
    No\";\n        }\n        if (file_name[2] == '.') {\n            return \"No\"\
    ;\n        }\n        if (file_name[3] == '.') {\n            return \"No\";\n\
    \        }\n        return \"Yes\";\n    }\n    if (count == 5) {\n        if\
    \ (file_name[0] == '.') {\n            return \"No\";\n        }\n        if (file_name[1]\
    \ == '.') {\n            return \"No\";\n        }\n        if (file_name[2] ==\
    \ '.') {\n            return \"No\";\n        }\n        if (file_name[3] == '.')\
    \ {\n            return \"No\";\n        }\n        if (file_name[4] == '.') {\n\
    \            return \"No\";\n        }\n        return \"Yes\";\n    }\n    if\
    \ (count == 6) {\n        if (file_name[0] == '.') {\n            return \"No\"\
    ;\n        }\n        if (file_name[1] == '.') {\n            return \"No\";\n\
    \        }\n        if (file_name[2] == '.') {\n            return \"No\";\n \
    \       }\n        if (file_name[3] == '.') {\n            return \"No\";\n  \
    \      }\n        if (file_name[4] == '.') {\n            return \"No\";\n   \
    \     }\n        if (file_name[5] == '.') {\n            return \"No\";\n    \
    \    }\n        return \"Yes\";\n    }\n    if (count == 7) {\n        if (file_name[0]\
    \ == '.') {\n            return \"No\";\n        }\n        if (file_name[1] ==\
    \ '.') {\n            return \"No\";\n        }\n        if (file_name[2] == '.')\
    \ {\n            return \"No\";\n        }\n        if (file_name[3] == '.') {\n\
    \            return \"No\";\n        }\n        if (file_name[4] == '.') {\n \
    \           return \"No\";\n        }\n        if (file_name[5] == '.') {\n  \
    \          return \"No\";\n        }\n\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplch9g54s.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmplch9g54s.cpp:137:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  137 | int main() {\n      |            ^\n/tmp/tmplch9g54s.cpp:165:1:\
    \ error: expected \u2018}\u2019 at end of input\n  165 | }\n      | ^\n/tmp/tmplch9g54s.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmplch9g54s.cpp:165:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  165 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n \
    \   if (count > 3 || file_name.find(\".\") != -1 || file_name.substr(0, 1) < 'a'\
    \ || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find(\"\
    .\") != -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8lc2wcor.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp8lc2wcor.cpp:22:74: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   22 |     if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      |                       \
    \                            ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |           \
    \                                                        |        |\n      | \
    \                                                                  |        char\n\
    \      |                                                                   std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8lc2wcor.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8lc2wcor.cpp:22:76:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   22 |     if (count > 3 || file_name.find(\"\
    .\") == -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \      |                                                                     \
    \       ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8lc2wcor.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    size_t dot_pos = file_name.find('.');\n\
    \    if (dot_pos == std::string::npos) {\n        file_extension = file_name;\n\
    \    } else {\n        file_extension = file_name.substr(dot_pos);\n    }\n  \
    \  if (file_name.size() > 3 || file_extension.size() != 3 || file_extension.substr(0,\
    \ 1) != 'a' || file_extension.substr(0, 1) != 'b' || file_extension.substr(0,\
    \ 1) != 'c' || file_extension.substr(0, 1) != 'd' || file_extension.substr(0,\
    \ 1) != 'e' || file_extension.substr(0, 1) != 'f' || file_extension.substr(0,\
    \ 1) != 'g' || file_extension.substr(0, 1) != 'h' || file_extension.substr(0,\
    \ 1) != 'i' || file_extension.substr(0, 1) != 'j' || file_extension.substr(0,\
    \ 1) != 'k' || file_extension.substr(0, 1) != 'l' || file_extension.substr(0,\
    \ 1) != 'm' || file_extension.substr(0, 1) != 'n' || file_extension.substr(0,\
    \ 1) != 'o' || file_extension.substr(0, 1) != 'p' || file_extension.substr(0,\
    \ 1) != 'q' || file_extension.substr(0, 1) != 'r' || file_extension.substr(0,\
    \ 1) != 's' || file_extension.substr(0, 1) != 't' || file_extension.substr(0,\
    \ 1) != 'u' || file_extension.substr(0, 1) != 'v' || file_extension.substr(0,\
    \ 1) != 'w' || file_extension.substr(0, 1) != 'x' || file_extension.substr(0,\
    \ 1) != 'y' || file_extension.substr(0, 1) != 'z') {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9ifw2zi.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpx9ifw2zi.cpp:23:91: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   23 |     if (file_name.size() > 3 || file_extension.size() != 3 || file_extension.substr(0,\
    \ 1) != 'a' || file_extension.substr(0, 1) != 'b' || file_extension.substr(0,\
    \ 1) != 'c' || file_extension.substr(0, 1) != 'd' || file_extension.substr(0,\
    \ 1) != 'e' || file_extension.substr(0, 1) != 'f' || file_extension.substr(0,\
    \ 1) != 'g' || file_extension.substr(0, 1) != 'h' || file_extension.substr(0,\
    \ 1) != 'i' || file_extension.substr(0, 1) != 'j' || file_extension.substr(0,\
    \ 1) != 'k' || file_extension.substr(0, 1) != 'l' || file_extension.substr(0,\
    \ 1) != 'm' || file_extension.substr(0, 1) != 'n' || file_extension.substr(0,\
    \ 1) != 'o' || file_extension.substr(0, 1) != 'p' || file_extension.substr(0,\
    \ 1) != 'q' || file_extension.substr(0, 1) != 'r' || file_extension.substr(0,\
    \ 1) != 's' || file_extension.substr(0, 1) != 't' || file_extension.substr(0,\
    \ 1) != 'u' || file_extension.substr(0, 1) != 'v' || file_extension.substr(0,\
    \ 1) != 'w' || file_extension.substr(0, 1) != 'x' || file_extension.substr(0,\
    \ 1) != 'y' || file_extension.substr(0, 1) != 'z') {\n      |                \
    \                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~\
    \ ~~~\n      |                                                               \
    \                     |         |\n      |                                   \
    \                                                 |         char\n      |    \
    \                                                                            \
    \    std::__cxx11::basic_string<char>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpx9ifw2zi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<clas"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp42ne1aff: /tmp/tmp42ne1aff.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpw8uijaef: /tmp/tmpw8uijaef.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name;\n   \
    \ \n    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n \
    \       if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    \n    if (count > 3) {\n        return \"No\";\n    }\n\
    \    \n    if (file_name.find(\".\") == std::string::npos) {\n        return \"\
    No\";\n    }\n    \n    if (file_name.substr(0, 1) != file_name[0]) {\n      \
    \  return \"No\";\n    }\n    \n    if (file_name.substr(file_name.length() -\
    \ 1, 1) != \"exe\" && file_name.substr(file_name.length() - 1, 1) != \"dll\")\
    \ {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrjk_pll.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpnrjk_pll.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name;\n      |\
    \                 ^~~~~~~~~\n/tmp/tmpnrjk_pll.cpp:35:32: error: no match for \u2018\
    operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   35 |     if (file_name.substr(0, 1) != file_name[0])\
    \ {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnrjk_pll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnrjk_pll.cpp:35:46:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   35 |     if (file_name.substr(0,\
    \ 1) != file_name[0]) {\n      |                                             \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnrjk_pll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_strin"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ return file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpxvf27o5f: /tmp/tmpxvf27o5f.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpar3vjn8l: /tmp/tmpar3vjn8l.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_name = file_name;\n    std::string\
    \ file_name_check = \"No\";\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3) {\n        file_name_check\
    \ = \"Yes\";\n    }\n    if (file_name.find(\".\") == -1) {\n        file_name_check\
    \ = \"No\";\n    }\n    if (file_name_check == \"Yes\") {\n        for (int i\
    \ = 0; i < file_name.length(); i++) {\n            if (file_name[i] >= 'a' &&\
    \ file_name[i] <= 'z') {\n                for (int j = 0; j < 3; j++) {\n    \
    \                if (file_name[i] == file_name[j]) {\n                       \
    \ file_name_check = \"No\";\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return file_name_check;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy6j_6049.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpy6j_6049.cpp:17:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   17 |     std::string file_name = file_name;\n      |\
    \                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() > 3 || file_name.find_last_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0,\
    \ 1) != \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) !=\
    \ \"d\" && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"f\"\
    \ && file_name.substr(0, 1) != \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0,\
    \ 1) != \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) !=\
    \ \"k\" && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) != \"m\"\
    \ && file_name.substr(0, 1) != \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0,\
    \ 1) != \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) !=\
    \ \"r\" && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) != \"t\"\
    \ && file_name.substr(0, 1) != \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0,\
    \ 1) != \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) !=\
    \ \"y\" && file_name.substr(0, 1) != \"z\") {\n        return \"No\";\n    }\n\
    \    \n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmkhh2mdr: /tmp/tmpmkhh2mdr.cpp:34: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpn35joxy3: /tmp/tmpn35joxy3.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    \n    // Your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpom_dcq88: /tmp/tmpom_dcq88.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix_without_extension = file_prefix.substr(0,\
    \ file_prefix.find_last_of(\".\"));\n    std::string file_prefix_with_extension\
    \ = file_prefix.substr(0, file_prefix.find_last_of(\".\"));\n    std::string file_prefix_with_extension_without_dot\
    \ = file_prefix_with_extension.substr(0, file_prefix_with_extension.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot = file_prefix_with_extension.substr(0,\
    \ file_prefix_with_extension.find_last_of(\".\"));\n    std::string file_prefix_with_extension_with_dot_without_dot\
    \ = file_prefix_with_extension_with_dot.substr(0, file_prefix_with_extension_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot = file_prefix_with_extension_with_dot.substr(0,\
    \ file_prefix_with_extension_with_dot.find_last_of(\".\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_without_dot\
    \ = file_prefix_with_extension_with_dot_with_dot.substr(0, file_prefix_with_extension_with_dot_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_with_dot\
    \ = file_prefix_with_extension_with_dot_with_dot.substr(0, file_prefix_with_extension_with_dot_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_with_dot_without_dot\
    \ = file_prefix_with_extension_with_dot_with_dot_with_dot.substr(0, file_prefix_with_extension_with_dot_with_dot_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot\
    \ = file_prefix_with_extension_with_dot_with_dot_with_dot.substr(0, file_prefix_with_extension_with_dot_with_dot_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot_without_dot\
    \ = file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot.substr(0, file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot_with_dot\
    \ = file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot.substr(0, file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot_with_dot_without_dot\
    \ = file_prefix_with_extension_with_dot_with_dot_with_dot_with_dot_with_dot.substr(0,\
    \ \n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqlqqqas_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpqlqqqas_.cpp:31:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   31 | }\n      | ^\n/tmp/tmpqlqqqas_.cpp:31:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpqlqqqas_.cpp:31:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n        else if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n \
    \           count++;\n        }\n        else if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        else if (file_name[i] ==\
    \ '.') {\n            count++;\n        }\n        else if (file_name[i] == '\
    \ ') {\n            count++;\n        }\n        else if (file_name[i] == '/')\
    \ {\n            count++;\n        }\n        else if (file_name[i] == '\\\\')\
    \ {\n            count++;\n        }\n        else if (file_name[i] == '.') {\n\
    \            count++;\n        }\n        else if (file_name[i] == '/') {\n  \
    \          count++;\n        }\n        else if (file_name[i] == '\\\\') {\n \
    \           count++;\n        }\n        else if (file_name[i] == '.') {\n   \
    \         count++;\n        }\n        else if (file_name[i] == '/') {\n     \
    \       count++;\n        }\n        else if (file_name[i] == '\\\\') {\n    \
    \        count++;\n        }\n        else if (file_name[i] == '.') {\n      \
    \      count++;\n        }\n        else if (file_name[i] == '/') {\n        \
    \    count++;\n        }\n        else if (file_name[i] == '\\\\') {\n       \
    \     count++;\n        }\n        else if (file_name[i] == '.') {\n         \
    \   count++;\n        }\n        else if (file_name[i] == '/') {\n           \
    \ count++;\n        }\n        else if (file_name[i] == '\\\\') {\n          \
    \  count++;\n        }\n        else if (file_name[i] == '.') {\n            count++;\n\
    \        }\n        else if (file_name[i] == '/') {\n            count++;\n  \
    \      }\n        else if (file_name[i] == '\\\\') {\n            count++;\n \
    \       }\n        else if (file_name[i] == '.') {\n            count++;\n   \
    \     }\n        else if (file_name[i] == '/') {\n            count++;\n     \
    \   }\n        else if (file_name[i] == '\\\\') {\n            count++;\n    \
    \    }\n        else if (file_name[i] == '.') {\n            count++;\n      \
    \  }\n        else if (file_name[i] == '/') {\n            count++;\n        }\n\
    \        else if (file_name[i] == '\\\\') {\n            count++;\n        }\n\
    \        else if (file_name[i] == '.') {\n            count++;\n        }\n  \
    \      else if (file_name[i] == '/') {\n            count++;\n        }\n    \
    \    else if (file_name[i] == '\\\\') {\n            count++;\n        }\n   \
    \     else if (file_name[i] == '.') {\n            count++;\n        }\n     \
    \   else if (file_name[i] == '/') {\n            count++;\n        }\n       \
    \ else if (file_name[i] == '\\\\') {\n            count++;\n        }\n      \
    \  else if (file_name[i] == '.') {\n            count++;\n        }\n        else\
    \ if (file_name[i] == '/') {\n            count++;\n        }\n        else if\
    \ (file_name[i] == '\\\\') {\n            count++;\n        }\n        else if\
    \ (\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzgnygpb7.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpzgnygpb7.cpp:130:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  130 | }\n      | ^\n/tmp/tmpzgnygpb7.cpp:129:18: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  129 |         else if (\n      |\
    \                 ~^\n      |                  )\n  130 | }\n      | ~       \
    \          \n/tmp/tmpzgnygpb7.cpp:130:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  130 | }\n      | ^\n/tmp/tmpzgnygpb7.cpp:131:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  131\
    \ | int main() {\n      |            ^\n/tmp/tmpzgnygpb7.cpp:159:1: error: expected\
    \ \u2018}\u2019 at end of input\n  159 | }\n      | ^\n/tmp/tmpzgnygpb7.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n\
    /tmp/tmpzgnygpb7.cpp:159:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  159 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp740nc_cj: /tmp/tmp740nc_cj.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp7rkc9ylw: /tmp/tmp7rkc9ylw.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpmtocmzkx: /tmp/tmpmtocmzkx.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpucc78s95: /tmp/tmpucc78s95.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    int dot_count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            num_digits++;\n        }\n        if (file_name[i] ==\
    \ '.') {\n            dot_count++;\n        }\n    }\n    if (dot_count > 1) {\n\
    \        return \"No\";\n    }\n    if (dot_count == 1 && num_digits > 3) {\n\
    \        return \"No\";\n    }\n    if (dot_count == 1 && num_digits == 3) {\n\
    \        if (file_name[0] >= 'a' && file_name[0] <= 'z') {\n            if (file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n                if (file_name[2] >= 'a' &&\
    \ file_name[2] <= 'z') {\n                    return \"Yes\";\n              \
    \  }\n            }\n        }\n    }\n    return \"No\";\n}\nint main() {\n \
    \   auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"))\
    \ == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n   \
    \ assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\"\
    )) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n\
    \    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmphd1gj1nx: /tmp/tmphd1gj1nx.cpp:45: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    int dot_count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            num_digits++;\n        }\n        if (file_name[i] ==\
    \ '.') {\n            dot_count++;\n        }\n    }\n    if (dot_count > 1) {\n\
    \        return \"No\";\n    }\n    if (dot_count == 1) {\n        if (file_name[0]\
    \ >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z')\
    \ {\n            return \"Yes\";\n        }\n    }\n    if (num_digits > 3) {\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpdj_qzqf6: /tmp/tmpdj_qzqf6.cpp:42: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpkdeuoodh: /tmp/tmpkdeuoodh.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpg7nx4aya: /tmp/tmpg7nx4aya.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return 'Yes' if all conditions are met\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp8lqii4oo: /tmp/tmp8lqii4oo.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpdj1gmlr2: /tmp/tmpdj1gmlr2.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ if (file_name.size() > 3 || file_name.find(\".\") == std::string::npos) {\n\
    \        file_name_check = \"No\";\n    }\n    else if (file_name.find(\".\")\
    \ == std::string::npos) {\n        file_name_check = \"No\";\n    }\n    else\
    \ if (file_name.substr(0, 1) != 'a' && file_name.substr(0, 1) != 'A' && file_name.substr(0,\
    \ 1) != 'b' && file_name.substr(0, 1) != 'B' && file_name.substr(0, 1) != 'c'\
    \ && file_name.substr(0, 1) != 'C' && file_name.substr(0, 1) != 'd' && file_name.substr(0,\
    \ 1) != 'D' && file_name.substr(0, 1) != 'e' && file_name.substr(0, 1) != 'E'\
    \ && file_name.substr(0, 1) != 'f' && file_name.substr(0, 1) != 'F' && file_name.substr(0,\
    \ 1) != 'g' && file_name.substr(0, 1) != 'G' && file_name.substr(0, 1) != 'h'\
    \ && file_name.substr(0, 1) != 'H' && file_name.substr(0, 1) != 'i' && file_name.substr(0,\
    \ 1) != 'I' && file_name.substr(0, 1) != 'j' && file_name.substr(0, 1) != 'J'\
    \ && file_name.substr(0, 1) != 'k' && file_name.substr(0, 1) != 'K' && file_name.substr(0,\
    \ 1) != 'l' && file_name.substr(0, 1) != 'L' && file_name.substr(0, 1) != 'm'\
    \ && file_name.substr(0, 1) != 'M' && file_name.substr(0, 1) != 'n' && file_name.substr(0,\
    \ 1) != 'N' && file_name.substr(0, 1) != 'o' && file_name.substr(0, 1) != 'O'\
    \ && file_name.substr(0, 1) != 'p' && file_name.substr(0, 1) != 'P' && file_name.substr(0,\
    \ 1) != 'q' && file_name.substr(0, 1) != 'Q' && file_name.substr(0, 1) != 'r'\
    \ && file_name.substr(0, 1) != 'R' && file_name.substr(0, 1) != 's' && file_name.substr(0,\
    \ 1) != 'S' && file_name.substr(0, 1) != 't' && file_name.substr(0, 1) != 'T'\
    \ && file_name.substr(0, 1) != 'u' && file_name.substr(0, 1) != 'U' && file_name.substr(0,\
    \ 1) != 'v' && file_name.substr(0, 1) != 'V' && file_name.substr(0, 1) != 'w'\
    \ && file_name.substr(0, 1) != 'W' && file_name.substr(0, 1) != 'x' && file_name.substr(0,\
    \ 1) != 'X' && file_name.substr(0, 1) != 'y' && file_name.substr(0, 1) != 'Y'\
    \ && file_name.substr(0, 1) != 'z' && file_name.substr(0, 1) != 'Z') {\n     \
    \   file_name_check = \"No\";\n    }\n    else {\n        file_name_check = \"\
    Yes\";\n    }\n    return file_name_check;\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_bb9_977.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_bb9_977.cpp:26:37: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   26 |     else if (file_name.substr(0, 1) != 'a' && file_name.substr(0, 1)\
    \ != 'A' && file_name.substr(0, 1) != 'b' && file_name.substr(0, 1) != 'B' &&\
    \ file_name.substr(0, 1) != 'c' && file_name.substr(0, 1) != 'C' && file_name.substr(0,\
    \ 1) != 'd' && file_name.substr(0, 1) != 'D' && file_name.substr(0, 1) != 'e'\
    \ && file_name.substr(0, 1) != 'E' && file_name.substr(0, 1) != 'f' && file_name.substr(0,\
    \ 1) != 'F' && file_name.substr(0, 1) != 'g' && file_name.substr(0, 1) != 'G'\
    \ && file_name.substr(0, 1) != 'h' && file_name.substr(0, 1) != 'H' && file_name.substr(0,\
    \ 1) != 'i' && file_name.substr(0, 1) != 'I' && file_name.substr(0, 1) != 'j'\
    \ && file_name.substr(0, 1) != 'J' && file_name.substr(0, 1) != 'k' && file_name.substr(0,\
    \ 1) != 'K' && file_name.substr(0, 1) != 'l' && file_name.substr(0, 1) != 'L'\
    \ && file_name.substr(0, 1) != 'm' && file_name.substr(0, 1) != 'M' && file_name.substr(0,\
    \ 1) != 'n' && file_name.substr(0, 1) != 'N' && file_name.substr(0, 1) != 'o'\
    \ && file_name.substr(0, 1) != 'O' && file_name.substr(0, 1) != 'p' && file_name.substr(0,\
    \ 1) != 'P' && file_name.substr(0, 1) != 'q' && file_name.substr(0, 1) != 'Q'\
    \ && file_name.substr(0, 1) != 'r' && file_name.substr(0, 1) != 'R' && file_name.substr(0,\
    \ 1) != 's' && file_name.substr(0, 1) != 'S' && file_name.substr(0, 1) != 't'\
    \ && file_name.substr(0, 1) != 'T' && file_name.substr(0, 1) != 'u' && file_name.substr(0,\
    \ 1) != 'U' && file_name.substr(0, 1) != 'v' && file_name.substr(0, 1) != 'V'\
    \ && file_name.substr(0, 1) != 'w' && file_name.substr(0, 1) != 'W' && file_name.substr(0,\
    \ 1) != 'x' && file_name.substr(0, 1) != 'X' && file_name.substr(0, 1) != 'y'\
    \ && file_name.substr(0, 1) != 'Y' && file_name.substr(0, 1) != 'z' && file_name.substr(0,\
    \ 1) != 'Z') {\n      |              ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~\n      |  \
    \                            |         |\n      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n    }\n    if (file_name.length() == 0 || count > 3\
    \ || file_name.find_first_not_of(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > file_name.length()\
    \ - 1) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 >= 0) {\n        if (file_name[file_name.find_first_not_of(\"\
    .\") - 1] == '.') {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 >= 0) {\n        if (file_name[file_name.find_first_not_of(\"\
    .\") - 1] == '.') {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 >= 0) {\n        if (file_name[file_name.find_first_not_of(\"\
    .\") - 1] == '.') {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 >= 0) {\n        if (file_name[file_name.find_first_not_of(\"\
    .\") - 1] == '.') {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n    if (file_name.find_first_not_of(\".\") > 0\
    \ && file_name.find_first_not_of(\".\") - 1 >= 0) {\n        if (file_name[file_name.find_first_not_of(\"\
    .\") - 1] == '.') {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") - 1 < file_name.length()) {\n \
    \       return \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpdgkyfk1h: /tmp/tmpdgkyfk1h.cpp:75: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    std::string file_prefix_letter = file_prefix.substr(0, 1);\n    std::string\
    \ file_prefix_number = file_prefix.substr(1, 1);\n    std::string file_prefix_letter2\
    \ = file_prefix.substr(0, 2);\n    std::string file_prefix_number2 = file_prefix.substr(2,\
    \ 1);\n    std::string file_prefix_letter3 = file_prefix.substr(0, 3);\n    std::string\
    \ file_prefix_number3 = file_prefix.substr(3, 1);\n    std::string file_prefix_letter4\
    \ = file_prefix.substr(0, 4);\n    std::string file_prefix_number4 = file_prefix.substr(4,\
    \ 1);\n    std::string file_prefix_letter5 = file_prefix.substr(0, 5);\n    std::string\
    \ file_prefix_number5 = file_prefix.substr(5, 1);\n    std::string file_prefix_letter6\
    \ = file_prefix.substr(0, 6);\n    std::string file_prefix_number6 = file_prefix.substr(6,\
    \ 1);\n    std::string file_prefix_letter7 = file_prefix.substr(0, 7);\n    std::string\
    \ file_prefix_number7 = file_prefix.substr(7, 1);\n    std::string file_prefix_letter8\
    \ = file_prefix.substr(0, 8);\n    std::string file_prefix_number8 = file_prefix.substr(8,\
    \ 1);\n    std::string file_prefix_letter9 = file_prefix.substr(0, 9);\n    std::string\
    \ file_prefix_number9 = file_prefix.substr(9, 1);\n    std::string file_prefix_letter10\
    \ = file_prefix.substr(0, 10);\n    std::string file_prefix_number10 = file_prefix.substr(10,\
    \ 1);\n    std::string file_prefix_letter11 = file_prefix.substr(0, 11);\n   \
    \ std::string file_prefix_number11 = file_prefix.substr(11, 1);\n    std::string\
    \ file_prefix_letter12 = file_prefix.substr(0, 12);\n    std::string file_prefix_number12\
    \ = file_prefix.substr(12, 1);\n    std::string file_prefix_letter13 = file_prefix.substr(0,\
    \ 13);\n    std::string file_prefix_number13 = file_prefix.substr(13, 1);\n  \
    \  std::string file_prefix_letter14 = file_prefix.substr(0, 14);\n    std::string\
    \ file_prefix_number14 = file_prefix.substr(14, 1);\n    std::string file_prefix_letter15\
    \ = file_prefix.substr(0, 15);\n    std::string file_prefix_number15 = file_prefix.substr(15,\
    \ 1);\n    std::string file_prefix_letter16 = file_prefix.substr(0, 16);\n   \
    \ std::string file_prefix_number16 = file_prefix.substr(16, 1);\n    std::string\
    \ file_prefix_letter17 = file_prefix.substr(0, 17);\n    std::string file_prefix_number17\
    \ = file_prefix.substr(17, 1);\n    std::string file_prefix_letter18 = file_prefix.substr(0,\
    \ 18);\n    std::string file_prefix_number18 = file_prefix.substr(18, 1);\n  \
    \  std::string file_prefix_letter19 = file_prefix.substr(0, 19);\n    std::string\
    \ file_prefix_number19 = file_prefix.substr(19, 1);\n    std::string \n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6d1n3qn7.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp6d1n3qn7.cpp:58:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   58 | }\n      | ^\n/tmp/tmp6d1n3qn7.cpp:58:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    \n    return file_name;\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp8p871hi7: /tmp/tmp8p871hi7.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            num_digits++;\n\
    \        }\n    }\n    if (file_name.length() > 3 || num_digits > 1 || file_name.substr(0,\
    \ 1) != \".\" || \n        file_name.substr(file_name.find_first_not_of(\"0123456789.\"\
    ) != std::string::npos) {\n        return \"No\";\n    }\n    std::string extension\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    if (extension ==\
    \ \"txt\" || extension == \"exe\" || extension == \"dll\") {\n        return \"\
    Yes\";\n    }\n    return \"No\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_8o2gnm6.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_8o2gnm6.cpp:22:9: warning: init-statement in selection statements\
    \ only available with \u2018-std=c++17\u2019 or \u2018-std=gnu++17\u2019\n   22\
    \ |     if (file_name.length() > 3 || num_digits > 1 || file_name.substr(0, 1)\
    \ != \".\" ||\n      |         ^~~~~~~~~\n/tmp/tmp_8o2gnm6.cpp:22:83: error: no\
    \ match for \u2018operator||\u2019 (operand types are \u2018bool\u2019 and \u2018\
    std::__cxx11::basic_string<char>\u2019)\n   22 |     if (file_name.length() >\
    \ 3 || num_digits > 1 || file_name.substr(0, 1) != \".\" ||\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~\n      |                                                  |\n      |    \
    \                                              bool\n   23 |         file_name.substr(file_name.find_first_not_of(\"\
    0123456789.\") != std::string::npos) {\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::__cxx11::basic_string<char>\n\
    /tmp/tmp_8o2gnm6.cpp:22:83: note: candidate: \u2018operator||(bool, bool)\u2019\
    \ <built-in>\n   22 |     if (file_name.length() > 3 || num_digits > 1 || file_name.substr(0,\
    \ 1) != \".\" ||\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n\
    \   23 |         file_name.substr(file_name.find_first_not_of(\"0123456789.\"\
    ) != std::string::npos) {\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_8o2gnm6.cpp:22:83: note:   no known conversion for argument 2 from \u2018\
    std::__cxx11::basic_string<char>\u2019 to \u2018bool\u2019\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n        \
    \         from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp_8o2gnm6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_B"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpopd29we4.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpopd29we4.cpp:24:148: error: \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\u2019\
    \ was not declared in this scope; did you mean \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\u2019\
    ?\n   24 |     std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n      |                                                              \
    \                                                                            \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \   file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\n\
    /tmp/tmpopd29we4.cpp:25:179: error: \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\u2019\
    \ was not declared in this scope; did you mean \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\u2019\
    ?\n   25 |     std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_do"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpo52a2krr: /tmp/tmpo52a2krr.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    \n    return file_name;\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpyr5xu_pn: /tmp/tmpyr5xu_pn.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    int count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            count++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            count++;\n        }\n        if (count > 3) {\n     \
    \       return \"No\";\n        }\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) >= 'a' && file_name.substr(0,\
    \ 1) <= 'z') {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ >= 'A' && file_name.substr(0, 1) <= 'Z') {\n        return \"No\";\n    }\n\
    \    if (file_name.find(\"exe\") == std::string::npos) {\n        return \"No\"\
    ;\n    }\n    if (file_name.find(\"dll\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz4vzol2_.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpz4vzol2_.cpp:35:32: error: no match for \u2018operator>=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   35 |     if (file_name.substr(0, 1) >= 'a' && file_name.substr(0, 1) <=\
    \ 'z') {\n      |         ~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~\n      |             \
    \            |         |\n      |                         |         char\n   \
    \   |                         std::__cxx11::basic_string<char>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz4vzol2_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1070:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1070 |     operator>=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1070:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpz4vzol2_.cpp:35:35:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   35 |     if (file_name.substr(0,\
    \ 1) >= 'a' && file_name.substr(0, 1) <= 'z') {\n      |                     \
    \              ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz4vzol2_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1148:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1148 |     operator>=(const\
    \ __sub_match_string<_Bi_it"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    int num_digits = 0;\n    int num_dots = 0;\n    int num_letters = 0;\n\
    \    std::string first_letter = \"\";\n    std::string last_letter = \"\";\n \
    \   std::string extension = \"\";\n    std::string first_dot_found = \"\";\n \
    \   std::string last_dot_found = \"\";\n    std::string first_letter_in_filename\
    \ = \"\";\n    std::string last_letter_in_filename = \"\";\n    std::string extension_in_filename\
    \ = \"\";\n    \n    // Count number of digits in file's name\n    for (int i\
    \ = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            num_digits++;\n        }\n    }\n    \n    // Count number\
    \ of dots in file's name\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] == '.') {\n            num_dots++;\n        }\n    }\n\
    \    \n    // Count number of letters in file's name\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            num_letters++;\n\
    \        }\n    }\n    \n    // Count number of letters in file's name\n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.')\
    \ {\n            num_dots++;\n        }\n    }\n    \n    // Count number of letters\
    \ in file's name\n    for (int i = 0; i < file_name.length(); i++) {\n       \
    \ if (file_name[i] == '.') {\n            num_dots++;\n        }\n    }\n    \n\
    \    // Count number of letters in file's name\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            num_dots++;\n      \
    \  }\n    }\n    \n    // Count number of letters in file's name\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            num_dots++;\n        }\n    }\n    \n    // Count number of letters\
    \ in file's name\n    for (int i = 0; i < file_name.length(); i++) {\n       \
    \ if (file_name[i] == '.') {\n            num_dots++;\n        }\n    }\n    \n\
    \    // Count number of letters in file's name\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            num_dots++;\n      \
    \  }\n    }\n    \n    // Count number of letters in file's name\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            num_dots++;\n        }\n    }\n    \n    // Count number of letters\
    \ in file's name\n    for (int i = 0; i < file_name.length(); i++) {\n       \
    \ if (file_name[i] == '.') {\n            num_dots++;\n        }\n    }\n    \n\
    \    // Count number of letters in file's name\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            num_dots++;\n      \
    \  }\n    }\n    \n    // Count number of letters in file's name\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprbk9n2kn.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmprbk9n2kn.cpp:114:25: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  114 |         if (file_name[i]\n      |            ~            ^\n\
    \      |                         )\n  115 | }\n      | ~                     \
    \   \n/tmp/tmprbk9n2kn.cpp:115:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  115 | }\n      | ^\n/tmp/tmprbk9n2kn.cpp:116:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  116 | int main() {\n     \
    \ |            ^\n/tmp/tmprbk9n2kn.cpp:144:1: error: expected \u2018}\u2019 at\
    \ end of input\n  144 | }\n      | ^\n/tmp/tmprbk9n2kn.cpp:15:52: note: to match\
    \ this \u2018{\u2019\n   15 | std::string file_name_check(std::string file_name)\
    \ {\n      |                                                    ^\n/tmp/tmprbk9n2kn.cpp:144:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  144 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    std::string file_name_without_extension;\n\
    \    std::string file_name_without_extension_without_dot;\n    std::string file_name_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcx5g9kcd.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpcx5g9kcd.cpp:33:1: error: expected initializer before \u2018}\u2019\
    \ token\n   33 | }\n      | ^\n/tmp/tmpcx5g9kcd.cpp:33:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Write your code here\n    \n   \
    \ return \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmppn0ami95: /tmp/tmppn0ami95.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.length() > 3 && file_name.find_last_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_name.find_last_of(\"\
    .\") > 0 && file_name[0] < 'a' || file_name[0] > 'z') {\n        return \"No\"\
    ;\n    }\n    \n    if (file_extension != \"txt\" && file_extension != \"exe\"\
    \ && file_extension != \"dll\") {\n        return \"No\";\n    }\n    \n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp9tm3z78q: /tmp/tmp9tm3z78q.cpp:39: int main(): Assertion `candidate((\"\
    K.dll\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp60ydpn2d: /tmp/tmp60ydpn2d.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpn2use9ss: /tmp/tmpn2use9ss.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\") + 1);\n    \n    if (file_name.size() > 3 ||\
    \ file_name.find_first_of(\".\") == std::string::npos) {\n        return \"No\"\
    ;\n    }\n    \n    if (file_name.find_first_not_of(\"0123456789\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    if (file_name.substr(0, 1) != std::to_string(std::toupper(file_name[0])))\
    \ {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find_first_of(\".\") + 1) !=\
    \ \"exe\" && file_name.substr(file_name.find_first_of(\".\") + 1) != \"dll\")\
    \ {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa81zsvw9.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpa81zsvw9.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of(\".\") + 1);\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp5myxk5rp: /tmp/tmp5myxk5rp.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.size() > 3 || file_name.find_last_of(\".\"\
    ) == std::string::npos ||\n        file_name[0] < 'a' || file_name[0] > 'z' ||\
    \ file_name[1] < 'a' || file_name[1] > 'z' ||\n        file_name[2] < 'a' || file_name[2]\
    \ > 'z' || file_name[3] < 'a' || file_name[3] > 'z' ||\n        file_name.substr(0,\
    \ 1) != file_name[0] || file_extension != \"txt\" || file_extension != \"exe\"\
    \ || file_extension != \"dll\") {\n        return \"No\";\n    }\n    \n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8jq17n_f.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp8jq17n_f.cpp:23:32: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019})\n   23 |         file_name.substr(0,\
    \ 1) != file_name[0] || file_extension != \"txt\" || file_extension != \"exe\"\
    \ || file_extension != \"dll\") {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8jq17n_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8jq17n_f.cpp:23:46:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   23 |         file_name.substr(0,\
    \ 1) != file_name[0] || file_extension != \"txt\" || file_extension != \"exe\"\
    \ || file_extension != \"dll\") {\n      |                                   \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8jq17n_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    if (file_name.length() <= 3 || file_name.find_last_of(\".\") ==\
    \ std::string::npos) {\n        return \"No\";\n    }\n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0,\
    \ 1) != \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) !=\
    \ \"d\" && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"f\"\
    \ && file_name.substr(0, 1) != \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0,\
    \ 1) != \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) !=\
    \ \"k\" && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) != \"m\"\
    \ && file_name.substr(0, 1) != \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0,\
    \ 1) != \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) !=\
    \ \"r\" && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) != \"t\"\
    \ && file_name.substr(0, 1) != \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0,\
    \ 1) != \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) !=\
    \ \"y\" && file_name.substr(0, 1) != \"z\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmptwowggz7: /tmp/tmptwowggz7.cpp:34: int main(): Assertion `candidate((\"\
    K.dll\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpjqerlv8r: /tmp/tmpjqerlv8r.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_name_check;\n    \n    return\
    \ file_name_check;\n}\nint main() {\n    auto candidate = file_name_check;\n \
    \   assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp_e46ny_6: /tmp/tmp_e46ny_6.cpp:23: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension;\n    int dot_count = 0;\n    for (int i =\
    \ 0; i < file_name.size(); i++) {\n        if (file_name[i] == '.') {\n      \
    \      dot_count++;\n        }\n    }\n    if (dot_count > 1) {\n        return\
    \ \"No\";\n    }\n    if (dot_count == 0) {\n        return \"No\";\n    }\n \
    \   if (file_name[0] == 'a' || file_name[0] == 'A') {\n        return \"No\";\n\
    \    }\n    if (file_name[0] == '0' || file_name[0] == '9') {\n        return\
    \ \"No\";\n    }\n    if (file_name.size() < 3) {\n        return \"No\";\n  \
    \  }\n    if (file_name.substr(0, 1) == \"_\") {\n        return \"No\";\n   \
    \ }\n    if (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) == \"_\") {\n        return \"No\";\n    }\n \
    \   if (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n    }\n  \
    \  if (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n    }\n   \
    \ if (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n    }\n    if\
    \ (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) != \"_\") {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != \"_\") {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) !=\
    \ \"_\") {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"\
    _\") {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\"\
    ) {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n\
    \        return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n \
    \       return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n  \
    \      return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n   \
    \     return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n    \
    \    return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n     \
    \   return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n      \
    \  return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n       \
    \ return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n        return \"\
    No\";\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n        return \"No\"\
    ;\n    }\n    if (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n\
    \    }\n    if (file_name.substr(0, 1) != \"_\") {\n        return \"No\";\n \
    \   }\n    if (file_name.substr(0, 1) != \"_\") {\n        return \"\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk6fmxovn.cpp:114:16: warning: missing terminating \" character\n\
    \  114 |         return \"\n      |                ^\n/tmp/tmpk6fmxovn.cpp:114:16:\
    \ error: missing terminating \" character\n/tmp/tmpk6fmxovn.cpp: In function \u2018\
    std::string file_name_check(std::string)\u2019:\n/tmp/tmpk6fmxovn.cpp:115:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  115 | }\n      | ^\n\
    /tmp/tmpk6fmxovn.cpp:114:15: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  114 |         return \"\n      |               ^\n      |         \
    \      ;\n  115 | }\n      | ~              \n/tmp/tmpk6fmxovn.cpp:116:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  116\
    \ | int main() {\n      |            ^\n/tmp/tmpk6fmxovn.cpp:144:1: error: expected\
    \ \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmpk6fmxovn.cpp:15:52:\
    \ note: to match this \u2018{\u2019\n   15 | std::string file_name_check(std::string\
    \ file_name) {\n      |                                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpvhfw_mxz: /tmp/tmpvhfw_mxz.cpp:148: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    std::string result;\n    int count = 0;\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >=\
    \ 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n        if(file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n            count++;\n        }\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if(file_name[i]\
    \ == '.') {\n            count++;\n        }\n        if(count > 3) {\n      \
    \      result = \"No\";\n            break;\n        }\n    }\n    if(count !=\
    \ 1) {\n        result = \"No\";\n    }\n    if(result == \"No\") {\n        result\
    \ = \"Yes\";\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp83z1wctc: /tmp/tmp83z1wctc.cpp:48: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpm8ogbt8k: /tmp/tmpm8ogbt8k.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_extension;\n    int dot_count\
    \ = 0;\n    int dot_pos = file_name.find('.');\n    if (dot_pos == std::string::npos)\
    \ {\n        file_extension = file_name;\n    } else {\n        file_extension\
    \ = file_name.substr(dot_pos + 1);\n    }\n    \n    std::string file_extension_lower;\n\
    \    file_extension_lower.reserve(file_extension.length());\n    for (auto &c\
    \ : file_extension) {\n        file_extension_lower += std::tolower(c);\n    }\n\
    \    \n    if (file_extension_lower == \"txt\" || file_extension_lower == \"exe\"\
    \ || file_extension_lower == \"dll\") {\n        return \"Yes\";\n    } else {\n\
    \        return \"No\";\n    }\n}\nint main() {\n    auto candidate = file_name_check;\n\
    \    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"\
    No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
    MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\"))\
    \ == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"\
    ?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) ==\
    \ (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n  \
    \  assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"\
    this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\"\
    )) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"\
    ));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n   \
    \ assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp2y548y2q: /tmp/tmp2y548y2q.cpp:41: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Write your code here\n    int count = 0;\n    for (int i = 0; i <\
    \ file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            count++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            count++;\n        }\n        if (file_name[i] == ' ')\
    \ {\n            count++;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    if (count == 3) {\n        if (file_name.substr(0,\
    \ 1) == \"1\") {\n            return \"No\";\n        }\n    }\n    if (count\
    \ == 2) {\n        if (file_name.substr(0, 1) == \"1\") {\n            if (file_name.substr(1,\
    \ 3) == \"exe\") {\n                return \"Yes\";\n            }\n        }\n\
    \    }\n    if (count == 1) {\n        if (file_name.substr(0, 1) == \"1\") {\n\
    \            if (file_name.substr(1, 3) == \"exe\") {\n                if (file_name.substr(2,\
    \ 4) == \"dll\") {\n                    return \"Yes\";\n                }\n \
    \           }\n        }\n    }\n    return \"No\";\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpub1m7e92: /tmp/tmpub1m7e92.cpp:63: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpr6q_svsw: /tmp/tmpr6q_svsw.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return \"Yes\" if all conditions are\
    \ met\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpc29gzi0b: /tmp/tmpc29gzi0b.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name_check;\n    \n   \
    \ if (file_name.size() > 3 || file_name.find(\".\") == 0 || file_name.substr(0,\
    \ 1) != ('A'-'Z') || file_name.substr(file_name.size()-1, 1) != ('a'-'z')) {\n\
    \        file_name_check = \"No\";\n    }\n    else {\n        file_name_check\
    \ = \"Yes\";\n    }\n    \n    return file_name_check;\n}\nint main() {\n    auto\
    \ candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"\
    Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp81en6doa.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp81en6doa.cpp:20:84: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019)\n\
    \   20 |     if (file_name.size() > 3 || file_name.find(\".\") == 0 || file_name.substr(0,\
    \ 1) != ('A'-'Z') || file_name.substr(file_name.size()-1, 1) != ('a'-'z')) {\n\
    \      |                                                             ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~\n      |                                                      \
    \                       |             |\n      |                             \
    \                                                |             int\n      |  \
    \                                                                           std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp81en6doa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp81en6doa.cpp:20:95:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   20 |     if (file_name.size()\
    \ > 3 || file_name.find(\".\") == 0 || file_name.substr(0, 1) != ('A'-'Z') ||\
    \ file_name.substr(file_name.size()-1, 1) != ('a'-'z')) {\n      |           \
    \                                                                            \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    count++;\n        }\n        if (file_name[i] >= 'A' && file_name[i] <= 'Z')\
    \ {\n            count++;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n        if (file_name[i] == '.')\
    \ {\n            count++;\n        }\n    }\n    if (count > 3) {\n        return\
    \ \"No\";\n    }\n    if (count == 1) {\n        return \"Yes\";\n    }\n    if\
    \ (file_name[0] == '.') {\n        return \"No\";\n    }\n    if (file_name[0]\
    \ == 'a' || file_name[0] == 'A') {\n        return \"No\";\n    }\n    if (file_name[0]\
    \ == '0' || file_name[0] == '9') {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpg8idps5z: /tmp/tmpg8idps5z.cpp:51: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpjrtra3g4: /tmp/tmpjrtra3g4.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ file_name;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpphpw7aw0: /tmp/tmpphpw7aw0.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ file_name;\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmppfivajuj: /tmp/tmppfivajuj.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpt81japws: /tmp/tmpt81japws.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmprhkb0uy_: /tmp/tmprhkb0uy_.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code goes here\n    \n    std::string file_name_check = \"No\"\
    ;\n    \n    if (file_name.size() > 3 || file_name.find(\".\") == std::string::npos)\
    \ {\n        file_name_check = \"No\";\n    }\n    else if (file_name.find(\"\
    .\") == std::string::npos) {\n        file_name_check = \"No\";\n    }\n    else\
    \ if (file_name.substr(0, 1) == \"a\" || file_name.substr(0, 1) == \"b\" || file_name.substr(0,\
    \ 1) == \"c\" || file_name.substr(0, 1) == \"d\" || file_name.substr(0, 1) ==\
    \ \"e\" || file_name.substr(0, 1) == \"f\" || file_name.substr(0, 1) == \"g\"\
    \ || file_name.substr(0, 1) == \"h\" || file_name.substr(0, 1) == \"i\" || file_name.substr(0,\
    \ 1) == \"j\" || file_name.substr(0, 1) == \"k\" || file_name.substr(0, 1) ==\
    \ \"l\" || file_name.substr(0, 1) == \"m\" || file_name.substr(0, 1) == \"n\"\
    \ || file_name.substr(0, 1) == \"o\" || file_name.substr(0, 1) == \"p\" || file_name.substr(0,\
    \ 1) == \"q\" || file_name.substr(0, 1) == \"r\" || file_name.substr(0, 1) ==\
    \ \"s\" || file_name.substr(0, 1) == \"t\" || file_name.substr(0, 1) == \"u\"\
    \ || file_name.substr(0, 1) == \"v\" || file_name.substr(0, 1) == \"w\" || file_name.substr(0,\
    \ 1) == \"x\" || file_name.substr(0, 1) == \"y\" || file_name.substr(0, 1) ==\
    \ \"z\") {\n        file_name_check = \"No\";\n    }\n    else if (file_name.substr(0,\
    \ 1) != \"\" && file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"\
    b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\") {\n        file_name_check = \"No\n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1e9llojq.cpp:30:27: warning: missing terminating \" character\n\
    \   30 |         file_name_check = \"No\n      |                           ^\n\
    /tmp/tmp1e9llojq.cpp:30:27: error: missing terminating \" character\n   30 | \
    \        file_name_check = \"No\n      |                           ^~~\n/tmp/tmp1e9llojq.cpp:\
    \ In function \u2018std::string file_name_check(std::string)\u2019:\n/tmp/tmp1e9llojq.cpp:31:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   31 | }\n \
    \     | ^\n/tmp/tmp1e9llojq.cpp:32:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   32 | int main() {\n      |            ^\n\
    /tmp/tmp1e9llojq.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60\
    \ | }\n      | ^\n/tmp/tmp1e9llojq.cpp:15:52: note: to match this \u2018{\u2019\
    \n   15 | std::string file_name_check(std::string file_name) {\n      |      \
    \                                              ^\n/tmp/tmp1e9llojq.cpp:60:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   60 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp4bzcudtb: /tmp/tmp4bzcudtb.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmprw7cuaj0: /tmp/tmprw7cuaj0.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // return 'Yes' if all the conditions are\
    \ met\n    if (file_name.size() > 3 && file_name.find(\".\") == std::string::npos\
    \ &&\n        file_name[0] >= 'a' && file_name[0] <= 'z' &&\n        file_name[file_name.size()\
    \ - 1] >= 'a' && file_name[file_name.size() - 1] <= 'z' &&\n        file_name.substr(0,\
    \ 1) != \".\") {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nint main()\
    \ {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpl0l_c3q6: /tmp/tmpl0l_c3q6.cpp:29: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmph59ahd2o: /tmp/tmph59ahd2o.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpgcf1eyhs: /tmp/tmpgcf1eyhs.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.size() > 3 || file_name.find_last_of(\".\"\
    ) == std::string::npos ||\n        file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z' ||\n        file_name.substr(file_name.find_last_of(\".\") + 1) !=\
    \ \"txt\" && \n        file_name.substr(file_name.find_last_of(\".\") + 1) !=\
    \ \"exe\" && \n        file_name.substr(file_name.find_last_of(\".\") + 1) !=\
    \ \"dll\") {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\nint\
    \ main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq2b77h1l.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpq2b77h1l.cpp:21:32: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   21 |         file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z'\
    \ ||\n      |         ~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~\n      |                  \
    \       |        |\n      |                         |        char\n      |   \
    \                      std::__cxx11::basic_string<char>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq2b77h1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1048:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq2b77h1l.cpp:21:34:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   21 |         file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z' ||\n      |                       \
    \           ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq2b77h1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_trait"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name;\n   \
    \ \n    if (file_name.size() > 3 || file_name.find(\".\") == 0 || file_name.substr(0,\
    \ 1) != ('A'-'Z') || file_name.substr(file_name.find_first_of(\".\") + 1) != \"\
    txt\" || file_name.substr(file_name.find_first_of(\".\") + 1) != \"exe\" || file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgs2rfo17.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpgs2rfo17.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name;\n      |\
    \                 ^~~~~~~~~\n/tmp/tmpgs2rfo17.cpp:20:84: error: no match for \u2018\
    operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   20 |     if (file_name.size() > 3 || file_name.find(\"\
    .\") == 0 || file_name.substr(0, 1) != ('A'-'Z') || file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"txt\" || file_name.substr(file_name.find_first_of(\".\") + 1) !=\
    \ \"exe\" || file_name.substr(file_name.find_first_of(\".\") + 1) != \"dll\")\
    \ {\n      |                                                             ~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~\n      |                                                      \
    \                       |             |\n      |                             \
    \                                                |             int\n      |  \
    \                                                                           std::__cxx11::basic_string<char>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgs2rfo17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgs2rfo17.cpp:20:95:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   20 |     if (file_name.size()\
    \ > 3 || file_name.find(\".\") == 0 || file_name.substr(0, 1) != ('A'-'Z') || "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    std::string file_name = file_name;\n   \
    \ \n    int count = 0;\n    \n    for (int i = 0; i < file_name.length(); i++)\
    \ {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    \n    if (count > 3) {\n        return \"No\";\n    }\n\
    \    \n    if (file_name.find(\".\") == std::string::npos) {\n        return \"\
    No\";\n    }\n    \n    if (file_name.substr(0, 1) != file_name[0]) {\n      \
    \  return \"No\";\n    }\n    \n    if (file_name.substr(file_name.length() -\
    \ 1) != \".\") {\n        return \"No\";\n    }\n    \n    if (file_name.substr(0,\
    \ 1) != \"a\" && file_name.substr(0, 1) != \"b\" && file_name.substr(0, 1) !=\
    \ \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0, 1) != \"e\"\
    \ && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) != \"g\" && file_name.substr(0,\
    \ 1) != \"h\" && file_name.substr(0, 1) != \"i\" && file_name.substr(0, 1) !=\
    \ \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0, 1) != \"l\"\
    \ && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) != \"n\" && file_name.substr(0,\
    \ 1) != \"o\" && file_name.substr(0, 1) != \"p\" && file_name.substr(0, 1) !=\
    \ \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0, 1) != \"s\"\
    \ && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) != \"u\" && file_name.substr(0,\
    \ 1) != \"v\" && file_name.substr(0, 1) != \"w\" && file_name.substr(0, 1) !=\
    \ \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0, 1) != \"z\"\
    ) {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\nint main() {\n\
    \    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n  \
    \  assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_cns8owd.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp_cns8owd.cpp:18:17: error: declaration of \u2018std::string file_name\u2019\
    \ shadows a parameter\n   18 |     std::string file_name = file_name;\n      |\
    \                 ^~~~~~~~~\n/tmp/tmp_cns8owd.cpp:36:32: error: no match for \u2018\
    operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   36 |     if (file_name.substr(0, 1) != file_name[0])\
    \ {\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_cns8owd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_cns8owd.cpp:36:46:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   36 |     if (file_name.substr(0,\
    \ 1) != file_name[0]) {\n      |                                             \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_cns8owd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_strin"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    if (file_name.size() > 3 && file_extension == \"exe\") {\n   \
    \     return \"Yes\";\n    }\n    if (file_name.size() > 3 && file_extension ==\
    \ \"dll\") {\n        return \"Yes\";\n    }\n    if (file_name.size() > 3 &&\
    \ file_extension == \"txt\") {\n        return \"Yes\";\n    }\n    return \"\
    No\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpv8s6ygke: /tmp/tmpv8s6ygke.cpp:32: int main(): Assertion `candidate((\"\
    1example.dll\")) == (\"No\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Write your code here\n    \n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpyelkeup9: /tmp/tmpyelkeup9.cpp:24: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmpe8h71evf: /tmp/tmpe8h71evf.cpp:166: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    \n    return file_name;\n}\nint main() {\n   \
    \ auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"\
    s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n\
    \    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"\
    His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"\
    ));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"\
    /this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n\
    \    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"\
    #this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\"\
    )) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"\
    No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp5zbc6jkc: /tmp/tmp5zbc6jkc.cpp:22: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    // Your code here\n    int counter = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n        \
    \    counter++;\n        }\n        if (file_name[i] >= 'A' && file_name[i] <=\
    \ 'Z') {\n            counter++;\n        }\n        if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n            counter++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            counter++;\n        }\n        if (counter > 3) {\n \
    \           return \"No\";\n        }\n    }\n    if (file_name.length() == 1)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) == \"1\") {\n\
    \        return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0,\
    \ 1) != \"A\") {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1)\
    \ != \"t\" && file_name.substr(0, 1) != \"T\") {\n        return \"No\";\n   \
    \ }\n    if (file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"E\"\
    ) {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != \"d\" &&\
    \ file_name.substr(0, 1) != \"D\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "tmp71dtr0wv: /tmp/tmp71dtr0wv.cpp:57: int main(): Assertion `candidate((\"\
    example.txt\")) == (\"Yes\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of('.'));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dot\n\
    }\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp75rqns03.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmp75rqns03.cpp:24:148: error: \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\u2019\
    \ was not declared in this scope; did you mean \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\u2019\
    ?\n   24 |     std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \      |                                                                     \
    \                                                                            \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \   file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\n\
    /tmp/tmp75rqns03.cpp:25:179: error: \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\u2019\
    \ was not declared in this scope; did you mean \u2018file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\u2019\
    ?\n   25 |     std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_do"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ takes a string representing a file's name, and returns\n// 'Yes' if the the\
    \ file's name is valid, and returns 'No' otherwise.\n// A file's name is considered\
    \ to be valid if and only if all the following conditions \n// are met:\n// -\
    \ There should not be more than three digits ('0'-'9') in the file's name.\n//\
    \ - The file's name contains exactly one dot '.'\n// - The substring before the\
    \ dot should not be empty, and it starts with a letter from \n// the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\") # =>\
    \ 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
    \ with a latin alphapet letter)\nstd::string file_name_check(std::string file_name)\
    \ {\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_content = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    \n    if (file_content.find_first_not_of(\"0123456789\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == 0) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 1) {\n        return \"No\";\n    }\n \
    \   if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 2) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 3) {\n        return \"No\";\n    }\n \
    \   if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 4) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 5) {\n        return \"No\";\n    }\n \
    \   if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 6) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 7) {\n        return \"No\";\n    }\n \
    \   if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 8) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 9) {\n        return \"No\";\n    }\n \
    \   if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 10) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 11) {\n        return \"No\";\n    }\n\
    \    if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 12) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 13) {\n        return \"No\";\n    }\n\
    \    if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 14) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 15) {\n        return \"No\";\n    }\n\
    \    if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 16) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 17) {\n        return \"No\";\n    }\n\
    \    if (file_content.find_first_not_of(\"0123456789\") == file_content.size()\
    \ - 18) {\n        return \"No\";\n    }\n    if (file_content.find_first_not_of(\"\
    0123456789\") == file_content.size() - 19) {\n        return \"No\";\n    }\n\
    \    if (file_\n}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
    example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
    No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
    K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
    ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
    _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
    \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
    this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
    )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"\
    ));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
    @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
    )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
    I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) ==\
    \ (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n \
    \   assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"\
    I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"\
    No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"\
    _f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"\
    ));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiuf1jdbw.cpp: In function \u2018std::string file_name_check(std::string)\u2019\
    :\n/tmp/tmpiuf1jdbw.cpp:82:9: error: \u2018file_\u2019 was not declared in this\
    \ scope; did you mean \u2018fileno\u2019?\n   82 |     if (file_\n      |    \
    \     ^~~~~\n      |         fileno\n/tmp/tmpiuf1jdbw.cpp:82:14: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   82 |     if (file_\n      |   \
    \     ~     ^\n      |              )\n   83 | }\n      | ~             \n/tmp/tmpiuf1jdbw.cpp:83:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   83 | }\n \
    \     | ^\n/tmp/tmpiuf1jdbw.cpp:83:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
