name: HumanEval_58_common
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
  \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
  \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
  std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n"
tests: "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
  \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
  \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
  \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
  \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
  \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    std::vector<long> result;\n    long temp;\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        temp = l1[i];\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (temp == l2[j]) {\n                result.push_back(temp);\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> l3;\n    l3.reserve(l1.size() + l2.size());\n    for (auto\
    \ i : l1) {\n        for (auto j : l2) {\n            if (i == j) continue;\n\
    \            if (l3.size() == 0 || l3[l3.size() - 1] != i) {\n               \
    \ l3.push_back(i);\n            }\n        }\n    }\n    return l3;", "    std::vector<long>\
    \ l3;\n    long min1 = l1[0], min2 = l2[0], max1 = l1[0], max2 = l2[0];\n    for\
    \ (long i = 1; i < l1.size(); i++) {\n        if (l1[i] < min1) min1 = l1[i];\n\
    \        if (l2[i] < min2) min2 = l2[i];\n        if (l1[i] > max1) max1 = l1[i];\n\
    \        if (l2[i] > max2) max2 = l2[i];\n    }\n    if (min1 < min2) std::swap(min1,\
    \ min2);\n    if (max1 > max2) std::swap(max1, max2);\n    if (min1 == max1) return\
    \ l1;\n    if (min2 == max2) return l2;\n    std::vector<long> l4;\n    l4.push_back(min1);\n\
    \    l4.push_back(min2);\n    l4.push_back(max1);\n    l4.push_back(max2);\n \
    \   l4.push_back(l1[0]);\n    l4.push_back(l2[0]);\n    std::vector<long> l5;\n\
    \    l5.push_back(l1[0]);\n    l5.push_back(l2[0]);\n    for (long i = 1; i <\
    \ l1.size(); i++) {\n        for (long j = 1; j < l2.size(); j++) {\n        \
    \    if (l1[i] == l2[j]) {\n                l4.push_back(l1[i]);\n           \
    \     l5.push_back(l2[j]);\n            }\n        }\n    }\n    l4.push_back(l1[0]);\n\
    \    l5.push_back(l2[0]);\n    l4.push_back(l1[0]);\n    l5.push_back(l2[0]);\n\
    \    for (long i = 2; i < l1.size(); i++) {\n        for (long j = 2; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                l4.push_back(l1[i]);\n\
    \                l5.push_back(l2[j]);\n            }\n        }\n    }\n    l4.push_back(l1[0]);\n\
    \    l5.push_back(l2[0]);\n    l4.push_back(l1[0]);\n    l5.push_back(l2[0]);\n\
    \    for (long i = 3; i < l1.size(); i++) {\n        for (long j = 3; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                l4.push_back(l1[i]);\n\
    \                l5.push_back(l2[j]);\n            }\n        }\n    }\n    l4.push_back(l1[0]);\n\
    \    l5.push_back(l2[0]);\n    l4.push_back(l1[0]);\n    l5.push_back(l2[0]);\n\
    \    for (long i = 4; i < l1.size(); i++) {\n        for (long j = 4; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                l4.push_back(l1[i]);\n\
    \                l5.push_back(l2[j]);\n            }\n        }\n    }\n    l4.push_back(l1[0]);\n\
    \    l5.push_back(l2[0]);\n    l4.push_back(l1[0]);\n    l5.push_back(l2[0]);\n\
    \    for (long i = 5; i < l1.size(); i++) {\n        for (long j = 5", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (common != 0) {\n            if (l1[i]\
    \ != common) {\n                result.push_back(l1[i]);\n            }\n    \
    \    }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    long common = 0;\n \
    \   for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1.size() == common) {\n            result.push_back(l1[i]);\n      \
    \  }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ == common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long min1\
    \ = l1[0], min2 = l2[0];\n    long max1 = l1[0], max2 = l2[0];\n    for (int i\
    \ = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) min1 = l1[i];\n      \
    \  if (l2[i] < min2) min2 = l2[i];\n        if (l1[i] > max1) max1 = l1[i];\n\
    \        if (l2[i] > max2) max2 = l2[i];\n    }\n    for (int i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] == min1) common++;\n        if (l2[i] == min2) common++;\n\
    \        if (l1[i] == max1) common++;\n        if (l2[i] == max2) common++;\n\
    \    }\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1)\
    \ common++;\n        if (l2[i] == min2) common++;\n        if (l1[i] == max1)\
    \ common++;\n        if (l2[i] == max2) common++;\n    }\n    for (int i = 0;\
    \ i < l1.size(); i++) {\n        if (l1[i] == min1) common++;\n        if (l2[i]\
    \ == min2) common++;\n        if (l1[i] == max1) common++;\n        if (l2[i]\
    \ == max2) common++;\n    }\n    for (int i = 0; i < l1.size(); i++) {\n     \
    \   if (l1[i] == min1) common++;\n        if (l2[i] == min2) common++;\n     \
    \   if (l1[i] == max1) common++;\n        if (l2[i] == max2) common++;\n    }\n\
    \    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1) common++;\n\
    \        if (l2[i] == min2) common++;\n        if (l1[i] == max1) common++;\n\
    \        if (l2[i] == max2) common++;\n    }\n    for (int i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] == min1) common++;\n        if (l2[i] == min2) common++;\n\
    \        if (l1[i] == max1) common++;\n        if (l2[i] == max2) common++;\n\
    \    }\n    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1)\
    \ common++;\n        if (l2[i] == min2) common++;\n        if (l1[i] == max1)\
    \ common++;\n        if (l2[i] == max2) common++;\n    }\n    for (int i = 0;\
    \ i < l1.size(); i++) {\n        if (l1[i] == min1) common++;\n        if (l2[i]\
    \ == min2) common++;\n        if (l1[i] == max1) common++;\n        if (l2[i]\
    \ == max2) common++;\n    }\n    for (int i = 0; i < l1.size(); i++) {\n     \
    \   if (l1[i] == min1) common++;\n        if (l2[i] == min2) common++;\n     \
    \   if (l1[i] == max1) common++;\n        if (l2[i] == max2) common++;\n    }\n\
    \    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1) common++;\n\
    \        if (l2[i] == min2) common++;\n        if (l1[i] == max1) common++;\n\
    \        if (l2[i] == max2) common++;\n    }\n    for (int i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] == min1) common++;\n        if (", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.size() - common < result.size())\
    \ {\n            result.push_back(l1[i]);\n        }\n    }\n    for (long i =\
    \ 0; i < l2.size(); i++) {\n        if (l2.size() - common < result.size()) {\n\
    \            result.push_back(l2[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common != 0) {\n      \
    \      if (l1[i] != common) {\n                result.push_back(l1[i]);\n    \
    \        }\n        } else {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long long common\
    \ = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j\
    \ < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (common != 0) {\n            if (l1[i] != common) {\n            \
    \    result.push_back(l1[i]);\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min1 = std::numeric_limits<long>::min();\n    long max1\
    \ = std::numeric_limits<long>::max();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    long max2 = std::numeric_limits<long>::max();\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n\
    \        if (l1[i] > max1) {\n            max1 = l1[i];\n        }\n        if\
    \ (l2[i] < min2) {\n            min2 = l2[i];\n        }\n        if (l2[i] >\
    \ max2) {\n            max2 = l2[i];\n        }\n    }\n    for (long i = 0; i\
    \ < l1.size(); i++) {\n        if (l1[i] == max1 && l2[i] == max2) {\n       \
    \     result.push_back(l1[i]);\n        }\n        if (l1[i] == min1 && l2[i]\
    \ == min2) {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long min1\
    \ = std::numeric_limits<long>::min();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    long max1 = std::numeric_limits<long>::max();\n    long max2 = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) {\n   \
    \         min1 = l1[i];\n        }\n        if (l1[i] > max1) {\n            max1\
    \ = l1[i];\n        }\n        if (l2[i] < min2) {\n            min2 = l2[i];\n\
    \        }\n        if (l2[i] > max2) {\n            max2 = l2[i];\n        }\n\
    \    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1\
    \ && l2[i] == min2) {\n            common++;\n        } else if (l1[i] == min1\
    \ && l2[i] == max2) {\n            common++;\n        } else if (l1[i] == max1\
    \ && l2[i] == min2) {\n            common++;\n        } else if (l1[i] == max1\
    \ && l2[i] == max2) {\n            common++;\n        } else if (l1[i] == min2\
    \ && l2[i] == min1) {\n            common++;\n        } else if (l1[i] == min2\
    \ && l2[i] == max1) {\n            common++;\n        } else if (l1[i] == max2\
    \ && l2[i] == min1) {\n            common++;\n        } else if (l1[i] == max2\
    \ && l2[i] == max1) {\n            common++;\n        } else if (l1[i] == min1\
    \ && l2[i] == max2) {\n            common++;\n        } else if (l1[i] == max1\
    \ && l2[i] == min2) {\n            common++;\n        } else if (l1[i] == max1\
    \ && l2[i] == max2) {\n            common++;\n        } else if (l1[i] == min2\
    \ && l2[i] == max2) {\n            common++;\n        } else if (l1[i] == max2\
    \ && l2[i] == min2) {\n            common++;\n        } else if (l1[i] == max2\
    \ && l2[i] == max2) {\n            common++;\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1[i] != common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i]\
    \ != common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ == l2.size()) {\n            res.push_back(l1[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    long common = 0;\n    long min1 =\
    \ l1[0], min2 = l2[0];\n    for (long i = 0; i < l1.size(); i++) {\n        if\
    \ (l1[i] == min1) {\n            common++;\n        }\n        if (l2[i] == min2)\
    \ {\n            common++;\n        }\n        if (common > result.size()) {\n\
    \            common = result.size();\n        }\n        if (common > 1) {\n \
    \           result.push_back(min1);\n            result.push_back(min2);\n   \
    \     }\n        min1 = l1[i];\n        min2 = l2[i];\n    }\n    if (min1 !=\
    \ min2) {\n        result.push_back(min1);\n        result.push_back(min2);\n\
    \    }\n    return result;", "    std::vector<long> l3;\n    long n1 = l1.size();\n\
    \    long n2 = l2.size();\n    long m1 = 0, m2 = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    while (i<n1 && j<n2) {\n        if (l1[i] == l2[j]) {\n        \
    \    m1++;\n            i++;\n            j++;\n        } else if (l1[i] < l2[j])\
    \ {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\
    \    while (i<n1) {\n        l3.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j<n2) {\n        l3.push_back(l2[j]);\n        j++;\n    }\n    l3.shrink_to_fit();\n\
    \    return l3;", "    std::vector<long> result;\n    long common = 0;\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \           break;\n            }\n        }\n    }\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        if (l1[i] == common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l1[2]);\n    result.push_back(l1[3]);\n\
    \    result.push_back(l1[4]);\n    result.push_back(l1[5]);\n    result.push_back(l1[6]);\n\
    \    result.push_back(l1[7]);\n    result.push_back(l1[8]);\n    result.push_back(l1[9]);\n\
    \    result.push_back(l1[10]);\n    result.push_back(l1[11]);\n    result.push_back(l1[12]);\n\
    \    result.push_back(l1[13]);\n    result.push_back(l1[14]);\n    result.push_back(l1[15]);\n\
    \    result.push_back(l1[16]);\n    result.push_back(l1[17]);\n    result.push_back(l1[18]);\n\
    \    result.push_back(l1[19]);\n    result.push_back(l1[20]);\n    result.push_back(l1[21]);\n\
    \    result.push_back(l1[22]);\n    result.push_back(l1[23]);\n    result.push_back(l1[24]);\n\
    \    result.push_back(l1[25]);\n    result.push_back(l1[26]);\n    result.push_back(l1[27]);\n\
    \    result.push_back(l1[28]);\n    result.push_back(l1[29]);\n    result.push_back(l1[30]);\n\
    \    result.push_back(l1[31]);\n    result.push_back(l1[32]);\n    result.push_back(l1[33]);\n\
    \    result.push_back(l1[34]);\n    result.push_back(l1[35]);\n    result.push_back(l1[36]);\n\
    \    result.push_back(l1[37]);\n    result.push_back(l1[38]);\n    result.push_back(l1[39]);\n\
    \    result.push_back(l1[40]);\n    result.push_back(l1[41]);\n    result.push_back(l1[42]);\n\
    \    result.push_back(l1[43]);\n    result.push_back(l1[44]);\n    result.push_back(l1[45]);\n\
    \    result.push_back(l1[46]);\n    result.push_back(l1[47]);\n    result.push_back(l1[48]);\n\
    \    result.push_back(l1[49]);\n    result.push_back(l1[50]);\n    result.push_back(l1[51]);\n\
    \    result.push_back(l1[52]);\n    result.push_back(l1[53]);\n    result.push_back(l1[54]);\n\
    \    result.push_back(l1[55]);\n    result.push_back(l1[56]);\n    result.push_back(l1[57]);\n\
    \    result.push_back(l1[58]);\n    result.push_back(l1[59]);\n    result.push_back(l1[60]);\n\
    \    result.push_back(l1[61]);\n    result.", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (common != 0) {\n            if (l1[i] !=\
    \ common) {\n                result.push_back(l1[i]);\n            }\n       \
    \ } else {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min1 = *std::min_element(l1.begin(),\
    \ l1.end());\n    long min2 = *std::min_element(l2.begin(), l2.end());\n    long\
    \ max1 = *std::max_element(l1.begin(), l1.end());\n    long max2 = *std::max_element(l2.begin(),\
    \ l2.end());\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = mid1;\n    while (true) {\n        if (l1[mid] == l2[mid])\
    \ {\n            result.push_back(l1[mid]);\n            mid++;\n        } else\
    \ if (l1[mid] < l2[mid]) {\n            min1 = mid1;\n            mid1 = (max1\
    \ + min1) / 2;\n        } else {\n            min2 = mid2;\n            mid2 =\
    \ (max2 + min2) / 2;\n        }\n        if (mid == l1.size() || mid == l2.size())\
    \ {\n            break;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n   \
    \     for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    res.push_back(common);\n\
    \    return res;", "    std::vector<long> result;\n    long common = 0;\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1.size() - common + 1 == l2.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> l3;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(l3));\n    return l3;", " \
    \   std::vector<long> res;\n    long min1 = *std::min_element(l1.begin(), l1.end());\n\
    \    long min2 = *std::min_element(l2.begin(), l2.end());\n    long max1 = *std::max_element(l1.begin(),\
    \ l1.end());\n    long max2 = *std::max_element(l2.begin(), l2.end());\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n\
    \    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long\
    \ mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2\
    \ = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1 = (max1\
    \ + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2)\
    \ / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n\
    \    long mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long\
    \ mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1\
    \ = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1\
    \ + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n\
    \    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + min", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.size() - common >= l2.size()) {\n    \
    \        result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0; i <\
    \ l2.size(); i++) {\n        if (l2.size() - common >= l1.size()) {\n        \
    \    result.push_back(l2[i]);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long long common = 0;\n    for(long long i = 0; i < l1.size();\
    \ i++) {\n        for(long long j = 0; j < l2.size(); j++) {\n            if(l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for(long long i = 0; i < l1.size(); i++) {\n        if(l1[i] == common) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == common) {\n  \
    \          result.push_back(l1[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long minl = std::min(l1.size(), l2.size());\n\
    \    for (long i = 0; i < minl; i++) {\n        if (l1[i] == l2[i]) {\n      \
    \      result.push_back(l1[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min = 0;\n    long max = 0;\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        if (l1.at(i) > l2.at(i)) {\n            max = l1.at(i);\n\
    \        } else {\n            min = l2.at(i);\n        }\n        if (min > max)\
    \ {\n            common = min;\n        } else {\n            common = max;\n\
    \        }\n        if (common > result.size()) {\n            result.push_back(common);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i\
    \ + j < l1.size() && j + k < l2.size()) {\n        if (l1[i] == l2[j]) {\n   \
    \         common += l1[i];\n            i++;\n            j++;\n        } else\
    \ if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n\
    \        }\n    }\n    while (i < l1.size()) {\n        common += l1[i];\n   \
    \     i++;\n    }\n    while (j < l2.size()) {\n        common += l2[j];\n   \
    \     j++;\n    }\n    result.push_back(common);\n    return result;", "    std::vector<long>\
    \ result;\n    long temp;\n    long size = l1.size();\n    long size2 = l2.size();\n\
    \    long mid = size >> 1;\n    long mid2 = size2 >> 1;\n    long i = 0;\n   \
    \ long j = 0;\n    while (i < mid && j < mid2) {\n        if (l1[i] == l2[j])\
    \ {\n            result.push_back(l1[i]);\n            i++;\n            j++;\n\
    \        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n   \
    \         j++;\n        }\n    }\n    while (i < mid) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < mid2) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common == l2.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min1 = l1[0], min2 = l2[0];\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        if (min1 < l1[i]) {\n            min1 = l1[i];\n\
    \        }\n        if (min2 < l2[i]) {\n            min2 = l2[i];\n        }\n\
    \    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (min1 == l1[i]\
    \ && min2 == l2[i]) {\n            common++;\n        }\n    }\n    result.push_back(common);\n\
    \    for (long i = 0; i < l2.size(); i++) {\n        if (min1 == l2[i] && min2\
    \ == l1[i]) {\n            common++;\n        }\n    }\n    result.push_back(common);\n\
    \    return result;", "    std::vector<long> result;\n    long min1 = *std::min_element(l1.begin(),\
    \ l1.end());\n    long min2 = *std::min_element(l2.begin(), l2.end());\n    long\
    \ max1 = *std::max_element(l1.begin(), l1.end());\n    long max2 = *std::max_element(l2.begin(),\
    \ l2.end());\n    long mid = (max1 + max2) / 2;\n    long mid1 = mid - 1;\n  \
    \  long mid2 = mid + 1;\n    long mid3 = mid * 2;\n    long mid4 = mid * 3;\n\
    \    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n    long mid7 = mid * 6;\n\
    \    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n    long mid10 = mid * 9;\n\
    \    long mid11 = mid * 10;\n    long mid12 = mid * 11;\n    long mid13 = mid\
    \ * 12;\n    long mid14 = mid * 13;\n    long mid15 = mid * 14;\n    long mid16\
    \ = mid * 15;\n    long mid17 = mid * 16;\n    long mid18 = mid * 17;\n    long\
    \ mid19 = mid * 18;\n    long mid20 = mid * 19;\n    long mid21 = mid * 20;\n\
    \    long mid22 = mid * 21;\n    long mid23 = mid * 22;\n    long mid24 = mid\
    \ * 23;\n    long mid25 = mid * 24;\n    long mid26 = mid * 25;\n    long mid27\
    \ = mid * 26;\n    long mid28 = mid * 27;\n    long mid29 = mid * 28;\n    long\
    \ mid30 = mid * 29;\n    long mid31 = mid * 30;\n    long mid32 = mid * 31;\n\
    \    long mid33 = mid * 32;\n    long mid34 = mid * 33;\n    long mid35 = mid\
    \ * 34;\n    long mid36 = mid * 35;\n    long mid37 = mid * 36;\n    long mid38\
    \ = mid * 37;\n    long mid39 = mid * 38;\n    long mid40 = mid * 39;\n    long\
    \ mid41 = mid * 40;\n    long mid42 = mid * 41;\n    long mid43 = mid * 42;\n\
    \    long mid44 = mid * 43;\n    long mid", "    std::vector<long> res;\n    long\
    \ long max1 = 0, max2 = 0;\n    for (long i = 0; i < l1.size(); i++) {\n     \
    \   if (l1[i] > max1) {\n            max1 = l1[i];\n        }\n        if (l2[i]\
    \ > max2) {\n            max2 = l2[i];\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1[i] == max1 && l2[i] != max2) {\n     \
    \       res.push_back(l1[i]);\n        }\n        if (l1[i] != max1 && l2[i] ==\
    \ max2) {\n            res.push_back(l2[i]);\n        }\n    }\n    return res;",
  "    std::vector<long> res;\n    long long common = 0;\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n        \
    \    if (l1[i] == l2[j]) {\n                common++;\n            }\n       \
    \ }\n    }\n    res.push_back(common);\n    return res;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (l1.at(i) == l2.at(i)) {\n            common++;\n        } else {\n\
    \            if (common > 0) {\n                result.push_back(common);\n  \
    \              common = 0;\n            }\n            result.push_back(l1.at(i));\n\
    \        }\n    }\n    if (common > 0) {\n        result.push_back(common);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long long common\
    \ = 0;\n    for(long long i = 0; i < l1.size(); i++) {\n        for(long long\
    \ j = 0; j < l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n           \
    \     common++;\n            }\n        }\n    }\n    result.push_back(common);\n\
    \    return result;", "    std::vector<long> result;\n    long common = 0;\n \
    \   for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (common == l2.size()) {\n            result.push_back(l1[i]);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> l3;\n    l3.reserve(l1.size()\
    \ + l2.size());\n    for (long i : l1) {\n        for (long j : l2) {\n      \
    \      if (i == j) {\n                l3.push_back(i);\n                break;\n\
    \            }\n        }\n    }\n    return l3;", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.size() == common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ == common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> l3;\n    l3.reserve(l1.size() + l2.size());\n\
    \    for (long i : l1) {\n        if (std::find(l2.begin(), l2.end(), i) != l2.end())\
    \ {\n            l3.push_back(i);\n        }\n    }\n    return l3;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n                break;\n            }\n      \
    \  }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] ==\
    \ common) {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    while (i<l1.size() && j<l2.size()) {\n        if (l1[i]\
    \ == l2[j]) {\n            common++;\n            i++;\n            j++;\n   \
    \     } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n      \
    \      j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> res;\n    long n1 = l1.size();\n    long n2\
    \ = l2.size();\n    long i = 0;\n    long j = 0;\n    while (i<n1 && j<n2) {\n\
    \        if (l1[i]==l2[j]) {\n            res.push_back(l1[i]);\n            i++;\n\
    \            j++;\n        } else if (l1[i]<l2[j]) {\n            i++;\n     \
    \   } else {\n            j++;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    long min1 = *std::min_element(l1.begin(), l1.end());\n    long\
    \ min2 = *std::min_element(l2.begin(), l2.end());\n    long max1 = *std::max_element(l1.begin(),\
    \ l1.end());\n    long max2 = *std::max_element(l2.begin(), l2.end());\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n\
    \    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long\
    \ mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2\
    \ = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1 = (max1\
    \ + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2)\
    \ / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n\
    \    long mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long\
    \ mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1\
    \ = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1\
    \ + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n\
    \    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + max", "    std::vector<long> res;\n   \
    \ long min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid = (min1 + max2)\
    \ / 2;\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid\
    \ * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid\
    \ * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid\
    \ * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12\
    \ = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long\
    \ mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n\
    \    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid\
    \ * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23\
    \ = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long\
    \ mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n\
    \    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid\
    \ * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34\
    \ = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long\
    \ mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n\
    \    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid\
    \ * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid",
  "    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size()) {\n        if\
    \ (l1[i] == l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n   \
    \         j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> result;\n    long long common = 0;\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1[i] == common) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long common =\
    \ 0;\n    long min1 = std::numeric_limits<long>::max();\n    long min2 = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) {\n   \
    \         min1 = l1[i];\n        }\n        if (l2[i] < min2) {\n            min2\
    \ = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n   \
    \     if (l1[i] == min1) {\n            for (long j = 0; j < l2.size(); j++) {\n\
    \                if (l2[j] == min2) {\n                    common++;\n       \
    \             result.push_back(l1[i]);\n                    result.push_back(l2[j]);\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    long min1 = l1[0], min2 = l2[0];\n    long max1\
    \ = l1[0], max2 = l2[0];\n    for (long i = 0; i < l1.size(); i++) {\n       \
    \ if (l1[i] < min1) min1 = l1[i];\n        if (l2[i] < min2) min2 = l2[i];\n \
    \       if (l1[i] > max1) max1 = l1[i];\n        if (l2[i] > max2) max2 = l2[i];\n\
    \    }\n    if (min1 < min2) std::swap(min1, min2);\n    if (max1 > max2) std::swap(max1,\
    \ max2);\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1)\
    \ result.push_back(min2);\n        if (l2[i] == min2) result.push_back(min1);\n\
    \        if (l1[i] == max1) result.push_back(max2);\n        if (l2[i] == max2)\
    \ result.push_back(max1);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long min1 = *std::min_element(l1.begin(), l1.end());\n    long\
    \ min2 = *std::min_element(l2.begin(), l2.end());\n    long max1 = *std::max_element(l1.begin(),\
    \ l1.end());\n    long max2 = *std::max_element(l2.begin(), l2.end());\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n\
    \    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long\
    \ mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2\
    \ = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1 = (max1\
    \ + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2)\
    \ / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n\
    \    long mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long\
    \ mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1\
    \ = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1\
    \ + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n\
    \    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + max2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + max", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.size() - common >= l2.size()) {\n    \
    \        result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0; i <\
    \ l2.size(); i++) {\n        if (l2.size() - common >= l1.size()) {\n        \
    \    result.push_back(l2[i]);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long i = 0;\n    long j = 0;\n    while (i<l1.size()\
    \ && j<l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n  \
    \          i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n     \
    \       i++;\n        } else {\n            j++;\n        }\n    }\n    while\
    \ (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n \
    \   while (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long temp;\n\
    \    long size1 = l1.size();\n    long size2 = l2.size();\n    long i = 0;\n \
    \   long j = 0;\n    while (i < size1 && j < size2) {\n        if (l1[i] == l2[j])\
    \ {\n            result.push_back(l1[i]);\n            i++;\n            j++;\n\
    \        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n   \
    \         j++;\n        }\n    }\n    while (i < size1) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < size2) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common == l2.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ == l1.size()) {\n            result.push_back(l2[i]);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long common = 0;\n   \
    \ for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \           break;\n            }\n        }\n    }\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        if (l1[i] != common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i]\
    \ != common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i]\
    \ == common) {\n            result.push_back(l1[i]);\n        }\n    }\n    for\
    \ (long i = 0; i < l2.size(); i++) {\n        if (l2[i] == common) {\n       \
    \     result.push_back(l2[i]);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    long long common = 0;\n    for(long long i = 0; i < l1.size(); i++)\
    \ {\n        for(long long j = 0; j < l2.size(); j++) {\n            if(l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for(long long i = 0; i < l1.size(); i++) {\n        if(common != 0) {\n   \
    \         if(l1[i] != common) {\n                res.push_back(l1[i]);\n     \
    \       }\n        }\n    }\n    return res;", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.size() - common > result.size()) {\n \
    \           result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0; i\
    \ < l2.size(); i++) {\n        if (l2.size() - common > result.size()) {\n   \
    \         result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min1 = 0, min2 = 0;\n    long max1 = 0, max2 = 0;\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (min1 == max1) {\n     \
    \       min2 = min2;\n            max2 = max2;\n        }\n        if (min1 ==\
    \ max1) {\n            min2 = min2;\n            max2 = max2;\n        }\n   \
    \     if (min1 == max1) {\n            min2 = min2;\n            max2 = max2;\n\
    \        }\n        if (min1 == max1) {\n            min2 = min2;\n          \
    \  max2 = max2;\n        }\n        if (min1 == max1) {\n            min2 = min2;\n\
    \            max2 = max2;\n        }\n        if (min1 == max1) {\n          \
    \  min2 = min2;\n            max2 = max2;\n        }\n        if (min1 == max1)\
    \ {\n            min2 = min2;\n            max2 = max2;\n        }\n        if\
    \ (min1 == max1) {\n            min2 = min2;\n            max2 = max2;\n     \
    \   }\n        if (min1 == max1) {\n            min2 = min2;\n            max2\
    \ = max2;\n        }\n        if (min1 == max1) {\n            min2 = min2;\n\
    \            max2 = max2;\n        }\n        if (min1 == max1) {\n          \
    \  min2 = min2;\n            max2 = max2;\n        }\n        if (min1 == max1)\
    \ {\n            min2 = min2;\n            max2 = max2;\n        }\n        if\
    \ (min1 == max1) {\n            min2 = min2;\n            max2 = max2;\n     \
    \   }\n        if (min1 == max1) {\n            min2 = min2;\n            max2\
    \ = max2;\n        }\n        if (min1 == max1) {\n            min2 = min2;\n\
    \            max2 = max2;\n        }\n        if (min1 == max1) {\n          \
    \  min2 = min2;\n            max2 = max2;\n        }\n        if (min1 == max1)\
    \ {\n            min2 = min2;\n            max2 = max2;\n        }\n        if\
    \ (min1 == max1) {\n            min2 = min2;\n            max2 = max2;\n     \
    \   }\n        if (min1 == max1) {\n            min2 = min2;\n            max2\
    \ = max2;\n        }\n        if (min1 == max1) {\n            min2 = min2;\n\
    \            max2 = max2;\n        }\n        if (min1 == max1) {\n          \
    \  min2 = min2;\n            max2 = max2;\n        }\n        if (min1 == max1)\
    \ {\n            min2 = min2;\n            max2 = max2;\n        }\n        if\
    \ (min1 == max1) {\n            min2 = min2;\n            max2 = max2;\n     \
    \   }\n        if (min1 == max1) {\n            min2 = min2;\n            max2\
    \ = max2;\n        }\n        if (min1 == max1) {\n            min2 = min2;\n\
    \            max2 = max2;\n        }\n        if (min", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long i = 0;\n    long j = 0;\n    while (i\
    \ + j < l1.size() && j + i < l2.size()) {\n        if (l1[i] == l2[j]) {\n   \
    \         common += 1;\n            i += 1;\n            j += 1;\n        } else\
    \ if (l1[i] < l2[j]) {\n            i += 1;\n        } else {\n            j +=\
    \ 1;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        common += 1;\n        i += 1;\n    }\n    while (j < l2.size()) {\n \
    \       result.push_back(l2[j]);\n        common += 1;\n        j += 1;\n    }\n\
    \    if (common > 0) {\n        result.push_back(common);\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common == l1.size()) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0;\
    \ i < l2.size(); i++) {\n        if (common == l2.size()) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> l3;\n    l3.reserve(l1.size()\
    \ + l2.size());\n    for (long i : l1) {\n        for (long j : l2) {\n      \
    \      if (i == j) {\n                l3.push_back(i);\n                break;\n\
    \            }\n        }\n    }\n    return l3;", "    std::vector<long> result;\n\
    \    long min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n\
    \    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long\
    \ mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2\
    \ = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1 = (max1\
    \ + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2)\
    \ / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n\
    \    long mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long\
    \ mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1\
    \ = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1\
    \ + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n\
    \    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = (max1 + min2) / 2;\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2\
    \ + min2) / 2;\n    long mid = (max1 + min2) / 2;\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + min2) / 2;\n\
    \    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long\
    \ mid = (max1 + min", "    std::vector<long> result;\n    long common = 0;\n \
    \   long min1 = l1[0], min2 = l2[0];\n    for (long i = 0; i < l1.size(); i++)\
    \ {\n        if (l1[i] == min1) {\n            min1 = l1[i];\n        }\n    \
    \    if (l2[i] == min2) {\n            min2 = l2[i];\n        }\n    }\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1) {\n         \
    \   result.push_back(min1);\n        }\n        if (l2[i] == min2) {\n       \
    \     result.push_back(min2);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (common == 0) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ == 0) {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.", " \
    \   std::vector<long> result;\n    long common = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    while (i<l1.size() && j<l2.size()) {\n        if (l1[i]==l2[j])\
    \ {\n            common++;\n            i++;\n            j++;\n        } else\
    \ if (l1[i]<l2[j]) {\n            i++;\n        } else {\n            j++;\n \
    \       }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> result;\n    long min1 = *std::min_element(l1.begin(),\
    \ l1.end());\n    long min2 = *std::min_element(l2.begin(), l2.end());\n    long\
    \ max1 = *std::max_element(l1.begin(), l1.end());\n    long max2 = *std::max_element(l2.begin(),\
    \ l2.end());\n    long mid = (min1 + max2) / 2;\n    long mid1 = mid - 1;\n  \
    \  long mid2 = mid + 1;\n    long mid3 = mid * 2;\n    long mid4 = mid * 3;\n\
    \    long mid5 = mid * 4;\n    long mid6 = mid * 5;\n    long mid7 = mid * 6;\n\
    \    long mid8 = mid * 7;\n    long mid9 = mid * 8;\n    long mid10 = mid * 9;\n\
    \    long mid11 = mid * 10;\n    long mid12 = mid * 11;\n    long mid13 = mid\
    \ * 12;\n    long mid14 = mid * 13;\n    long mid15 = mid * 14;\n    long mid16\
    \ = mid * 15;\n    long mid17 = mid * 16;\n    long mid18 = mid * 17;\n    long\
    \ mid19 = mid * 18;\n    long mid20 = mid * 19;\n    long mid21 = mid * 20;\n\
    \    long mid22 = mid * 21;\n    long mid23 = mid * 22;\n    long mid24 = mid\
    \ * 23;\n    long mid25 = mid * 24;\n    long mid26 = mid * 25;\n    long mid27\
    \ = mid * 26;\n    long mid28 = mid * 27;\n    long mid29 = mid * 28;\n    long\
    \ mid30 = mid * 29;\n    long mid31 = mid * 30;\n    long mid32 = mid * 31;\n\
    \    long mid33 = mid * 32;\n    long mid34 = mid * 33;\n    long mid35 = mid\
    \ * 34;\n    long mid36 = mid * 35;\n    long mid37 = mid * 36;\n    long mid38\
    \ = mid * 37;\n    long mid39 = mid * 38;\n    long mid40 = mid * 39;\n    long\
    \ mid41 = mid * 40;\n    long mid42 = mid * 41;\n    long mid43 = mid * 42;\n\
    \    long mid44 = mid * 43;\n    long mid", "    std::vector<long> result;\n \
    \   long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.size() > common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ > common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    while (i + j < l1.size() && j + k\
    \ < l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n     \
    \       i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n        \
    \    i++;\n        } else {\n            j++;\n        }\n    }\n    while (i\
    \ < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n    }\n \
    \   while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n\
    \            common++;\n            i++;\n            j++;\n        } else if\
    \ (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n  \
    \      }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  long common = 0;\n    long min1 = 0, min2 = 0;\n    long max1 = 0, max2 = 0;\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) < l2.at(i))\
    \ {\n            min1 = l1.at(i);\n            max1 = l2.at(i);\n        } else\
    \ {\n            min2 = l2.at(i);\n            max2 = l1.at(i);\n        }\n \
    \       if (min1 == max1 && min2 == max2) {\n            common++;\n        }\
    \ else {\n            result.push_back(common);\n            common = 0;\n   \
    \     }\n    }\n    if (common > 0) {\n        result.push_back(common);\n   \
    \ }\n    return result;", "    std::vector<long> result;\n    long common = 0;\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1[i] == common) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] == common)\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> l3;\n    long common\
    \ = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j\
    \ < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    l3.push_back(common);\n    return l3;",
  "    std::vector<long> res;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  res.push_back(common);\n    return res;", "    std::vector<long> result;\n\
    \    long long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n     \
    \   for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n\
    \                common++;\n            }\n        }\n    }\n    for (long i =\
    \ 0; i < l1.size(); i++) {\n        if (common > 0) {\n            if (l1[i] !=\
    \ common) {\n                result.push_back(l1[i]);\n            }\n       \
    \ }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common > 0)\
    \ {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    long temp;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size())\
    \ {\n        if (l1[i]==l2[j]) {\n            result.push_back(l1[i]);\n     \
    \       i++;\n            j++;\n        } else if (l1[i]<l2[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    while (i <\
    \ l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n    }\n \
    \   return result;", "    std::vector<long> l3;\n    l3.reserve(l1.size() + l2.size());\n\
    \    for (long i : l1) {\n        for (long j : l2) {\n            if (i == j)\
    \ {\n                l3.push_back(i);\n                break;\n            }\n\
    \        }\n    }\n    return l3;", "    std::vector<long> res;\n    long common\
    \ = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j\
    \ < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (common == l2.size()) {\n            res.push_back(l1[i]);\n     \
    \   }\n    }\n    return res;", "    std::vector<long> l3;\n    l3.reserve(l1.size()\
    \ + l2.size());\n    for (auto i : l1) {\n        for (auto j : l2) {\n      \
    \      if (i == j) {\n                l3.push_back(i);\n                break;\n\
    \            }\n        }\n    }\n    return l3;", "    std::vector<long> result;\n\
    \    long common = 0;\n    long l = 0;\n    long r = 0;\n    long i = 0;\n   \
    \ long j = 0;\n    long k = 0;\n    long count = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80", "    std::vector<long> result;\n    long common = 0;\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (common != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n\
    \        if (common != 0) {\n            if (l2[i] != common) {\n            \
    \    result.push_back(l2[i]);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1.size() > common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ > common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ == l2.size()) {\n            result.push_back(l1[i]);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long temp;\n    long count\
    \ = 0;\n    long min = 0;\n    long max = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1.at(i) < l2.at(i)) {\n            temp = l1.at(i);\n \
    \           count++;\n        } else {\n            temp = l2.at(i);\n       \
    \     count--;\n        }\n        if (count < 0) {\n            min = temp;\n\
    \            max = temp;\n        } else {\n            if (count > 0) {\n   \
    \             if (min > temp) {\n                    min = temp;\n           \
    \     }\n                if (max < temp) {\n                    max = temp;\n\
    \                }\n            }\n        }\n    }\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        if (l1.at(i) == min) {\n            result.push_back(l1.at(i));\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.at(i)\
    \ == max) {\n            result.push_back(l2.at(i));\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    while (i + j < l1.size() && j + k\
    \ < l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n     \
    \       i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n        \
    \    i++;\n        } else {\n            j++;\n        }\n    }\n    while (i\
    \ < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n    }\n \
    \   std::sort(result.begin(), result.end());\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long temp = 0;\n\
    \    long count = 0;\n    while ((i < l1.size()) && (j < l2.size())) {\n     \
    \   if (l1[i] == l2[j]) {\n            common++;\n            count++;\n     \
    \       i++;\n            j++;\n        }\n        else if (l1[i] < l2[j]) {\n\
    \            count++;\n            i++;\n        }\n        else {\n         \
    \   count++;\n            j++;\n        }\n    }\n    while (i < l1.size()) {\n\
    \        result.push_back(l1[i]);\n        count++;\n        i++;\n    }\n   \
    \ while (j < l2.size()) {\n        result.push_back(l2[j]);\n        count++;\n\
    \        j++;\n    }\n    while (count > 0) {\n        common = common / count;\n\
    \        result.push_back(common);\n        count--;\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    while (i<l1.size() && j<l2.size()) {\n        if (l1[i] == l2[j])\
    \ {\n            common++;\n            i++;\n            j++;\n        } else\
    \ if (l1[i] < l2[j]) {\n            i++;\n        } else {\n            j++;\n\
    \        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1.size()\
    \ - common >= l2.size()) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size() - common\
    \ >= l1.size()) {\n            result.push_back(l2[i]);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result;\n    long min1 = *std::min_element(l1.begin(),\
    \ l1.end());\n    long min2 = *std::min_element(l2.begin(), l2.end());\n    long\
    \ max1 = *std::max_element(l1.begin(), l1.end());\n    long max2 = *std::max_element(l2.begin(),\
    \ l2.end());\n    long mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2)\
    \ / 2;\n    long mid = (max1 + min2) / 2;\n    while (mid1 != min1 && mid2 !=\
    \ min2) {\n        if (l1[mid1] == l2[mid2]) {\n            result.push_back(l1[mid1]);\n\
    \            mid1++;\n            mid2++;\n        } else if (l1[mid1] < l2[mid2])\
    \ {\n            mid1++;\n        } else {\n            mid2++;\n        }\n \
    \   }\n    while (mid1 != min1) {\n        result.push_back(l1[mid1]);\n     \
    \   mid1++;\n    }\n    while (mid2 != min2) {\n        result.push_back(l2[mid2]);\n\
    \        mid2++;\n    }\n    return result;", "    std::vector<long> l3;\n   \
    \ l3.reserve(l1.size() + l2.size());\n    for (auto i : l1) {\n        auto it\
    \ = std::find(l2.begin(), l2.end(), i);\n        if (it != l2.end()) {\n     \
    \       l3.push_back(i);\n            l2.erase(it);\n        }\n    }\n    for\
    \ (auto i : l2) {\n        auto it = std::find(l1.begin(), l1.end(), i);\n   \
    \     if (it != l1.end()) {\n            l3.push_back(i);\n            l1.erase(it);\n\
    \        }\n    }\n    return l3;", "    std::vector<long> res;\n    long min1\
    \ = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = mid1;\n    if (max1\
    \ < min2) mid = mid2;\n    long midmid = (mid + min1) / 2;\n    long midmidmid\
    \ = (midmid + min2) / 2;\n    long midmidmidmid = (midmidmid + max1) / 2;\n  \
    \  long midmidmidmidmid = (midmidmidmid + max2) / 2;\n    if (max1 < min2) midmidmid\
    \ = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmid;\n    if (max1\
    \ < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmidmid =\
    \ midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1\
    \ < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n\
    \    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmid\
    \ = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1\
    \ < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n\
    \    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmid\
    \ = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1\
    \ < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n\
    \    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1 < min2) midmidmidmid\
    \ = midmidmidmid;\n    if (max1 < min2) midmidmidmid = midmidmidmid;\n    if (max1\
    \ < min2) midmidmidmid = midmidmidmid;\n    if (max1 < ", "    std::vector<long>\
    \ result;\n    long min1 = *std::min_element(l1.begin(), l1.end());\n    long\
    \ min2 = *std::min_element(l2.begin(), l2.end());\n    long max1 = *std::max_element(l1.begin(),\
    \ l1.end());\n    long max2 = *std::max_element(l2.begin(), l2.end());\n    long\
    \ mid1 = (max1 + min1) / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid\
    \ = mid1;\n    while (true) {\n        if (l1[mid] == l2[mid]) {\n           \
    \ result.push_back(l1[mid]);\n            mid++;\n            if (mid == l1.size())\
    \ {\n                break;\n            }\n        } else if (l1[mid] < l2[mid])\
    \ {\n            min1 = mid1;\n            mid1 = (max1 + min1) / 2;\n       \
    \ } else {\n            min2 = mid2;\n            mid2 = (max2 + min2) / 2;\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    long\
    \ min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = mid1;\n    while (true)\
    \ {\n        if (l1[mid] == l2[mid]) {\n            res.push_back(l1[mid]);\n\
    \            mid++;\n        } else if (l1[mid] < l2[mid]) {\n            min1\
    \ = mid1;\n            mid1 = (max1 + min1) / 2;\n        } else {\n         \
    \   min2 = mid2;\n            mid2 = (max2 + min2) / 2;\n        }\n        if\
    \ (mid == l1.size()) {\n            break;\n        }\n    }\n    return res;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common != 0) {\n      \
    \      for (long j = 0; j < l2.size(); j++) {\n                if (l1[i] == l2[j])\
    \ {\n                    common--;\n                }\n            }\n       \
    \ }\n        result.push_back(l1[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    sort(result.begin(), result.end());\n    result.erase(std::unique(result.begin(),\
    \ result.end()), result.end());\n    return result;", "    std::vector<long> result;\n\
    \    long min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = max1 + (max1\
    \ - min1) / 2;\n    long mid2 = max2 + (max2 - min2) / 2;\n    long mid = mid1\
    \ + (mid2 - mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1) / 2;\n    long mid2\
    \ = mid2 + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2 - mid1) / 2;\n    long\
    \ mid1 = mid1 + (mid1 - min1) / 2;\n    long mid2 = mid2 + (mid2 - min2) / 2;\n\
    \    long mid = mid1 + (mid2 - mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1)\
    \ / 2;\n    long mid2 = mid2 + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2\
    \ - mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1) / 2;\n    long mid2 = mid2\
    \ + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2 - mid1) / 2;\n    long mid1\
    \ = mid1 + (mid1 - min1) / 2;\n    long mid2 = mid2 + (mid2 - min2) / 2;\n   \
    \ long mid = mid1 + (mid2 - mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1) /\
    \ 2;\n    long mid2 = mid2 + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2 -\
    \ mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1) / 2;\n    long mid2 = mid2\
    \ + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2 - mid1) / 2;\n    long mid1\
    \ = mid1 + (mid1 - min1) / 2;\n    long mid2 = mid2 + (mid2 - min2) / 2;\n   \
    \ long mid = mid1 + (mid2 - mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1) /\
    \ 2;\n    long mid2 = mid2 + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2 -\
    \ mid1) / 2;\n    long mid1 = mid1 + (mid1 - min1) / 2;\n    long mid2 = mid2\
    \ + (mid2 - min2) / 2;\n    long mid = mid1 + (mid2 - mid1) / 2;\n    long mid1\
    \ = mid1 + (mid1 - min", "    std::vector<long> result;\n    long common = 0;\n\
    \    long min1 = l1[0], min2 = l2[0];\n    long max1 = l1[0], max2 = l2[0];\n\
    \    for (int i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) min1 = l1[i];\n\
    \        if (l1[i] > max1) max1 = l1[i];\n    }\n    for (int i = 0; i < l2.size();\
    \ i++) {\n        if (l2[i] < min2) min2 = l2[i];\n        if (l2[i] > max2) max2\
    \ = l2[i];\n    }\n    if (max1 < min2) return result;\n    if (max2 < min1) return\
    \ result;\n    while (max1 > min2) {\n        if (max2 > max1) {\n           \
    \ result.push_back(min2);\n            max2 = max2;\n        } else {\n      \
    \      result.push_back(min1);\n            max1 = max1;\n        }\n    }\n \
    \   while (max2 > min1) {\n        if (max1 > max2) {\n            result.push_back(min1);\n\
    \            max1 = max1;\n        } else {\n            result.push_back(min2);\n\
    \            max2 = max2;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long min1 = std::numeric_limits<long>::max();\n\
    \    long min2 = std::numeric_limits<long>::max();\n    for (long i : l1) {\n\
    \        if (i < min1) {\n            min1 = i;\n        }\n    }\n    for (long\
    \ i : l2) {\n        if (i < min2) {\n            min2 = i;\n        }\n    }\n\
    \    for (long i : l1) {\n        for (long j : l2) {\n            if (i == j)\
    \ {\n                common++;\n            }\n        }\n    }\n    result.push_back(common);\n\
    \    result.push_back(min1);\n    result.push_back(min2);\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common > 0) {\n       \
    \     if (l1[i] == common) {\n                result.push_back(l1[i]);\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n    \
    \    if (common > 0) {\n            if (l2[i] == common) {\n                result.push_back(l2[i]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    long common = 0;\n \
    \   long min = 0;\n    long max = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long count = 0;\n    long size = 0;\n    long size1 = 0;\n    long\
    \ size2 = 0;\n    long min1 = INT_MAX;\n    long min2 = INT_MAX;\n    long max1\
    \ = INT_MIN;\n    long max2 = INT_MIN;\n    long mindiff = INT_MAX;\n    long\
    \ maxdiff = INT_MIN;\n    long mindiff1 = INT_MAX;\n    long maxdiff1 = INT_MIN;\n\
    \    long mindiff2 = INT_MAX;\n    long maxdiff2 = INT_MIN;\n    long mindiff3\
    \ = INT_MAX;\n    long maxdiff3 = INT_MIN;\n    long mindiff4 = INT_MAX;\n   \
    \ long maxdiff4 = INT_MIN;\n    long mindiff5 = INT_MAX;\n    long maxdiff5 =\
    \ INT_MIN;\n    long mindiff6 = INT_MAX;\n    long maxdiff6 = INT_MIN;\n    long\
    \ mindiff7 = INT_MAX;\n    long maxdiff7 = INT_MIN;\n    long mindiff8 = INT_MAX;\n\
    \    long maxdiff8 = INT_MIN;\n    long mindiff9 = INT_MAX;\n    long maxdiff9\
    \ = INT_MIN;\n    long mindiff10 = INT_MAX;\n    long maxdiff10 = INT_MIN;\n \
    \   long mindiff11 = INT_MAX;\n    long maxdiff11 = INT_MIN;\n    long mindiff12\
    \ = INT_MAX;\n    long maxdiff12 = INT_MIN;\n    long mindiff13 = INT_MAX;\n \
    \   long maxdiff13 = INT_MIN;\n    long mindiff14 = INT_MAX;\n    long maxdiff14\
    \ = INT_MIN;\n    long mindiff15 = INT_MAX;\n    long maxdiff15 = INT_MIN;\n \
    \   long mindiff16 = INT_MAX;\n    long maxdiff16 = INT_MIN;\n    long mindiff17\
    \ = INT_MAX;\n    long maxdiff17 = INT_MIN;\n    long mindiff18 = INT_MAX;\n \
    \   long maxdiff18 = INT_MIN;\n    long mindiff19 = INT_MAX;\n    long maxdiff19\
    \ = INT_MIN;\n    long mindiff20 = INT_MAX;\n    long maxdiff20 = INT_MIN;\n \
    \   long mindiff21 = INT_MAX;\n    long maxdiff21 = INT_MIN;\n    long mindiff22\
    \ = INT_MAX;\n    long maxdiff", "    std::vector<long> result;\n    long common\
    \ = INT_MAX;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common = i;\n                break;\n            }\n        }\n    }\n  \
    \  if (common != INT_MAX) {\n        result.push_back(common);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long min1 = std::numeric_limits<long>::max();\n\
    \    long min2 = std::numeric_limits<long>::max();\n    for (long i : l1) {\n\
    \        min1 = std::min(min1, i);\n    }\n    for (long i : l2) {\n        min2\
    \ = std::min(min2, i);\n    }\n    long mid = min1 + (min2 - min1) / 2;\n    for\
    \ (long i : l1) {\n        if (i <= mid) {\n            result.push_back(i);\n\
    \        }\n    }\n    for (long i : l2) {\n        if (i <= mid) {\n        \
    \    result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::vector<long> result;\n    long common = 0;\n \
    \   long i = 0;\n    long j = 0;\n    while (i<l1.size() && j<l2.size()) {\n \
    \       if (l1[i] == l2[j]) {\n            common++;\n            i++;\n     \
    \       j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        }\
    \ else {\n            j++;\n        }\n    }\n    while (i < l1.size()) {\n  \
    \      result.push_back(l1[i]);\n        i++;\n    }\n    while (j < l2.size())\
    \ {\n        result.push_back(l2[j]);\n        j++;\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ long common = 0;\n    for(long long i = 0; i < l1.size(); i++) {\n        for(long\
    \ long j = 0; j < l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n      \
    \          common++;\n            }\n        }\n    }\n    for(long long i = 0;\
    \ i < l1.size(); i++) {\n        if(common != 0) {\n            if(l1[i] != common)\
    \ {\n                result.push_back(l1[i]);\n            }\n        } else {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> l3;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(l3));\n    return l3;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.size() - common >= l2.size()) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0;\
    \ i < l2.size(); i++) {\n        if (l2.size() - common >= l1.size()) {\n    \
    \        result.push_back(l2[i]);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    long n1 = l1.size();\n    long n2 = l2.size();\n\
    \    long min1 = n1 < n2 ? n1 : n2;\n    long min2 = n1 < n2 ? n2 : n1;\n    long\
    \ mid = (min1 + min2) / 2;\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n\
    \    long mid3 = mid * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n\
    \    long mid6 = mid * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n\
    \    long mid9 = mid * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n\
    \    long mid12 = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid\
    \ * 13;\n    long mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17\
    \ = mid * 16;\n    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long\
    \ mid20 = mid * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n\
    \    long mid23 = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid\
    \ * 24;\n    long mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28\
    \ = mid * 27;\n    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long\
    \ mid31 = mid * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n\
    \    long mid34 = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid\
    \ * 35;\n    long mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39\
    \ = mid * 38;\n    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long\
    \ mid42 = mid * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n\
    \    long mid45 = mid * 44;\n    long mid46 = mid * 45;\n    long mid47", "  \
    \  std::vector<long> res;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common != 0) {\n      \
    \      if (l1[i] != common) {\n                res.push_back(l1[i]);\n       \
    \     }\n        } else {\n            res.push_back(l1[i]);\n        }\n    }\n\
    \    return res;", "    std::vector<long> result;\n    long common = 0;\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1.size() - common < l2.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ - common < l1.size()) {\n            result.push_back(l2[i]);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    long common =\
    \ 0;\n    long min1 = std::numeric_limits<long>::min();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    long max1 = std::numeric_limits<long>::max();\n    long max2 = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) {\n   \
    \         min1 = l1[i];\n        }\n        if (l1[i] > max1) {\n            max1\
    \ = l1[i];\n        }\n        if (l2[i] < min2) {\n            min2 = l2[i];\n\
    \        }\n        if (l2[i] > max2) {\n            max2 = l2[i];\n        }\n\
    \    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] < min1)\
    \ {\n            min2 = l2[i];\n        }\n        if (l2[i] > max1) {\n     \
    \       max2 = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size(); i++)\
    \ {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        if (l1[i] != min1) {\n         \
    \   result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0; i < l2.size();\
    \ i++) {\n        if (l2[i] != min2) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    for (long i = 0; i < result.size(); i++) {\n        if\
    \ (result[i] != common) {\n            result.erase(result.begin() + i);\n   \
    \     }\n    }\n    return result;", "    std::vector<long> res;\n    long common\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i<l1.size() && j<l2.size())\
    \ {\n        if (l1[i] == l2[j]) {\n            common++;\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    while (i < l1.size())\
    \ {\n        res.push_back(l1[i]);\n        i++;\n    }\n    while (j < l2.size())\
    \ {\n        res.push_back(l2[j]);\n        j++;\n    }\n    return res;", " \
    \   std::vector<long> result;\n    long min1 = *std::min_element(l1.begin(), l1.end());\n\
    \    long min2 = *std::min_element(l2.begin(), l2.end());\n    long max1 = *std::max_element(l1.begin(),\
    \ l1.end());\n    long max2 = *std::max_element(l2.begin(), l2.end());\n    long\
    \ mid = (min1 + max2) / 2;\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n\
    \    long mid3 = mid * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n\
    \    long mid6 = mid * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n\
    \    long mid9 = mid * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n\
    \    long mid12 = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid\
    \ * 13;\n    long mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17\
    \ = mid * 16;\n    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long\
    \ mid20 = mid * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n\
    \    long mid23 = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid\
    \ * 24;\n    long mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28\
    \ = mid * 27;\n    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long\
    \ mid31 = mid * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n\
    \    long mid34 = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid\
    \ * 35;\n    long mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39\
    \ = mid * 38;\n    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long\
    \ mid42 = mid * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n\
    \    long mid", "    std::vector<long> result;\n    long common = 0;\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1.size() - common < result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ - common < result.size()) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long common =\
    \ 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j <\
    \ l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (l1.size() - common + 1 > result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ - common + 1 > result.size()) {\n            result.push_back(l2[i]);\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> res;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(res));\n    return res;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long min1 = std::numeric_limits<long>::max();\n\
    \    long min2 = std::numeric_limits<long>::max();\n    long max1 = std::numeric_limits<long>::min();\n\
    \    long max2 = std::numeric_limits<long>::min();\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n\
    \        if (l1[i] > max1) {\n            max1 = l1[i];\n        }\n        if\
    \ (l2[i] < min2) {\n            min2 = l2[i];\n        }\n        if (l2[i] >\
    \ max2) {\n            max2 = l2[i];\n        }\n    }\n    for (long i = 0; i\
    \ < l1.size(); i++) {\n        if (l1[i] == max1 && l2[i] == max2) {\n       \
    \     result.push_back(l1[i]);\n        }\n        if (l1[i] == max1 && l2[i]\
    \ != max2) {\n            result.push_back(l1[i]);\n        }\n        if (l1[i]\
    \ != max1 && l2[i] == max2) {\n            result.push_back(l1[i]);\n        }\n\
    \        if (l1[i] != max1 && l2[i] != max2) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common != 0) {\n            if (l1[i] != common) {\n   \
    \             result.push_back(l1[i]);\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < l2.size(); i++) {\n        if (common != 0) {\n           \
    \ if (l2[i] != common) {\n                result.push_back(l2[i]);\n         \
    \   }\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n\
    \    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1\
    \ = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n\
    \    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2\
    \ = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n\
    \    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid\
    \ = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n\
    \    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1\
    \ = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n\
    \    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2\
    \ = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n\
    \    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid\
    \ = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n\
    \    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1\
    \ = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n\
    \    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2\
    \ = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n\
    \    long mid = mid;\n    long mid1 = mid", "    std::vector<long> result;\n \
    \   long n1 = l1.size();\n    long n2 = l2.size();\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    while (i<n1 && j<n2) {\n        if (l1[i] == l2[j])\
    \ {\n            result.push_back(l1[i]);\n            i++;\n            j++;\n\
    \        } else if (l1[i] > l2[j]) {\n            i++;\n        } else {\n   \
    \         j++;\n        }\n    }\n    if (i == n1) {\n        while (j < n2) {\n\
    \            result.push_back(l2[j]);\n            j++;\n        }\n    } else\
    \ if (j == n2) {\n        while (i<n1) {\n            result.push_back(l1[i]);\n\
    \            i++;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long i = 0;\n    long j = 0;\n    while (i<l1.size()\
    \ && j<l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n  \
    \          i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n     \
    \       i++;\n        } else {\n            j++;\n        }\n    }\n    while\
    \ (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n \
    \   while (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;", " \
    \   std::vector<long> l3;\n    std::vector<long>::iterator it;\n    for (it =\
    \ std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l3)).begin();\
    \ it != std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l3)).end();\
    \ ++it)\n        l3.push_back(*it);\n    return l3;", "    std::vector<long> result;\n\
    \    long min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = mid1;\n    while (true)\
    \ {\n        if (l1[mid] == l2[mid]) {\n            result.push_back(l1[mid]);\n\
    \            mid++;\n        } else if (l1[mid] < l2[mid]) {\n            min1\
    \ = mid1;\n            mid1 = (mid1 + max1) / 2;\n        } else {\n         \
    \   min2 = mid2;\n            mid2 = (mid2 + max2) / 2;\n        }\n        if\
    \ (mid == l1.size() || mid == l2.size()) {\n            break;\n        }\n  \
    \  }\n    return result;", "    std::vector<long> result;\n    long common = 0;\n\
    \    long min1 = std::numeric_limits<long>::max();\n    long min2 = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) {\n   \
    \         min1 = l1[i];\n        }\n        if (l2[i] < min2) {\n            min2\
    \ = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n   \
    \     if (l1[i] == min1) {\n            for (long j = 0; j < l2.size(); j++) {\n\
    \                if (l2[j] == min2) {\n                    common++;\n       \
    \             result.push_back(l1[i]);\n                    result.push_back(l2[j]);\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1.at(i) == l2.at(i)) {\n            common++;\n       \
    \ } else {\n            result.push_back(common);\n            common = 0;\n \
    \       }\n    }\n    result.push_back(common);\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1.size() > common) {\n          \
    \  result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0; i < l2.size();\
    \ i++) {\n        if (l2.size() > common) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common == l2.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] != common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i]\
    \ != common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long min1\
    \ = std::numeric_limits<long>::min();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    long max1 = std::numeric_limits<long>::max();\n    long max2 = std::numeric_limits<long>::max();\n\
    \    long mid1 = max1;\n    long mid2 = max2;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n\
    \        if (l1[i] > max1) {\n            max1 = l1[i];\n        }\n    }\n  \
    \  for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] < min2) {\n     \
    \       min2 = l2[i];\n        }\n        if (l2[i] > max2) {\n            max2\
    \ = l2[i];\n        }\n    }\n    mid1 = max1;\n    mid2 = max2;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1[i] == mid1) {\n            common++;\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i]\
    \ == mid2) {\n            common++;\n        }\n    }\n    if (common == 0) {\n\
    \        return result;\n    }\n    for (long i = 0; i < l1.size(); i++) {\n \
    \       if (l1[i] < min1) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] < min2)\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min1 = std::numeric_limits<long>::min();\n    long max1\
    \ = std::numeric_limits<long>::max();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    long max2 = std::numeric_limits<long>::max();\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] > max1) max1 = l1[i];\n        if (l1[i] < min1) min1\
    \ = l1[i];\n        if (l2[i] > max2) max2 = l2[i];\n        if (l2[i] < min2)\
    \ min2 = l2[i];\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if\
    \ (l2[i] > max1) max2 = l2[i];\n        if (l2[i] < min1) min2 = l2[i];\n    }\n\
    \    for (long i = min1; i <= max1; i++) {\n        for (long j = min2; j <= max2;\
    \ j++) {\n            if (i == j) continue;\n            if (l1[i] == l2[j]) {\n\
    \                common++;\n                result.push_back(i);\n           \
    \     result.push_back(j);\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    long minl = std::min(l1.size(), l2.size());\n \
    \   long maxl = std::max(l1.size(), l2.size());\n    for (long i = 0; i < minl;\
    \ i++) {\n        for (long j = 0; j < maxl; j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                res.push_back(l1[i]);\n                break;\n  \
    \          }\n        }\n    }\n    return res;", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.size() - common + 1 > result.size()) {\n\
    \            result.push_back(common);\n        }\n        if (l1[i] != common)\
    \ {\n            result.push_back(l1[i]);\n        }\n    }\n    for (long i =\
    \ 0; i < l2.size(); i++) {\n        if (l2.size() - common + 1 > result.size())\
    \ {\n            result.push_back(common);\n        }\n        if (l2[i] != common)\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common > 0) {\n       \
    \     if (l1[i] != common) {\n                result.push_back(l1[i]);\n     \
    \           common = 0;\n            }\n        } else {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid1 = (max1 + min1)\
    \ / 2;\n    long mid2 = (max2 + min2) / 2;\n    long mid = (max1 + max2) / 2;\n\
    \    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1\
    \ = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n\
    \    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2\
    \ = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n\
    \    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid\
    \ = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n\
    \    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1\
    \ = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n\
    \    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2\
    \ = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n\
    \    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid\
    \ = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n\
    \    long mid1 = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1\
    \ = mid1;\n    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n\
    \    long mid2 = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2\
    \ = mid2;\n    long mid = mid;\n    long mid1 = mid1;\n    long mid2 = mid2;\n\
    \    long mid = mid;\n    long mid1 = mid", "    std::vector<long> result;\n \
    \   long common = 0;\n    long i = 0;\n    long j = 0;\n    while (i<l1.size()\
    \ && j<l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n  \
    \          i++;\n            j++;\n        } else if (l1[i] > l2[j]) {\n     \
    \       i++;\n        } else {\n            j++;\n        }\n    }\n    while\
    \ (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n \
    \   while (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;", " \
    \   std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long mid = l1[0] + l2[0] / 2;\n    for (size_t i = 1; i < l1.size(); i++)\
    \ {\n        if (l1[i] < mid) {\n            result.push_back(l1[i]);\n      \
    \  } else {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long min1\
    \ = std::numeric_limits<long>::min();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) {\n   \
    \         min1 = l1[i];\n        }\n        if (l2[i] < min2) {\n            min2\
    \ = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n   \
    \     if (l1[i] == min1) {\n            for (long j = 0; j < l2.size(); j++) {\n\
    \                if (l2[j] == min2) {\n                    common++;\n       \
    \             result.push_back(l1[i]);\n                    result.push_back(l2[j]);\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n                break;\n           \
    \ }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if\
    \ (l1[i] == common) {\n            result.push_back(l1[i]);\n        }\n    }\n\
    \    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] == common) {\n\
    \            result.push_back(l2[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long temp;\n    long count = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    while (i<l1.size() && j<l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            count++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    result.push_back(count);\n    return result;", "   \
    \ std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common != 0) {\n      \
    \      if (l1[i] != common) {\n                result.push_back(l1[i]);\n    \
    \        }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n   \
    \     if (common != 0) {\n            if (l2[i] != common) {\n               \
    \ result.push_back(l2[i]);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ min1 = *std::min_element(l1.begin(), l1.end());\n    long min2 = *std::min_element(l2.begin(),\
    \ l2.end());\n    long max1 = *std::max_element(l1.begin(), l1.end());\n    long\
    \ max2 = *std::max_element(l2.begin(), l2.end());\n    long mid = (min1 + max2)\
    \ / 2;\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid\
    \ * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6 = mid\
    \ * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9 = mid\
    \ * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long mid12\
    \ = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n    long\
    \ mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid * 16;\n\
    \    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20 = mid\
    \ * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long mid23\
    \ = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n    long\
    \ mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid * 27;\n\
    \    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31 = mid\
    \ * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long mid34\
    \ = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n    long\
    \ mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid * 38;\n\
    \    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42 = mid\
    \ * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long mid",
  "    std::vector<long> result;\n    long common = 0;\n    long min1 = l1[0], min2\
    \ = l2[0];\n    long max1 = l1[0], max2 = l2[0];\n    for (long i = 1; i < l1.size();\
    \ i++) {\n        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n\
    \        if (l2[i] < min2) {\n            min2 = l2[i];\n        }\n        if\
    \ (l1[i] > max1) {\n            max1 = l1[i];\n        }\n        if (l2[i] >\
    \ max2) {\n            max2 = l2[i];\n        }\n    }\n    if (min1 < min2) {\n\
    \        std::swap(min1, min2);\n    }\n    if (max1 > max2) {\n        std::swap(max1,\
    \ max2);\n    }\n    for (long i = 1; i < l1.size(); i++) {\n        if (l1[i]\
    \ == min1 && l2[i] == min2) {\n            common++;\n        } else if (l1[i]\
    \ == min2 && l2[i] == min1) {\n            common++;\n        } else if (l1[i]\
    \ == min1 && l2[i] == max1) {\n            common++;\n        } else if (l1[i]\
    \ == min2 && l2[i] == max2) {\n            common++;\n        } else if (l1[i]\
    \ == max1 && l2[i] == min1) {\n            common++;\n        } else if (l1[i]\
    \ == max2 && l2[i] == min2) {\n            common++;\n        } else if (l1[i]\
    \ == max1 && l2[i] == max2) {\n            common++;\n        } else if (l1[i]\
    \ == max2 && l2[i] == max1) {\n            common++;\n        }\n    }\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        if (l1.size() > l2.size()) {\n \
    \           result.push_back(l1[i]);\n        } else {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common == l2.size()) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long n1 = l1.size(), n2 = l2.size();\n    long\
    \ min1 = n1 < n2 ? n1 : n2;\n    long min2 = n1 < n2 ? n2 : n1;\n    long mid\
    \ = min1 >> 1;\n    long mid2 = min2 >> 1;\n    long midmid = min1 >> 1;\n   \
    \ long midmid2 = min2 >> 1;\n    long midmid3 = min1 >> 1;\n    long midmid4 =\
    \ min2 >> 1;\n    long midmid5 = min1 >> 1;\n    long midmid6 = min2 >> 1;\n \
    \   long midmid7 = min1 >> 1;\n    long midmid8 = min2 >> 1;\n    long midmid9\
    \ = min1 >> 1;\n    long midmid10 = min2 >> 1;\n    long midmid11 = min1 >> 1;\n\
    \    long midmid12 = min2 >> 1;\n    long midmid13 = min1 >> 1;\n    long midmid14\
    \ = min2 >> 1;\n    long midmid15 = min1 >> 1;\n    long midmid16 = min2 >> 1;\n\
    \    long midmid17 = min1 >> 1;\n    long midmid18 = min2 >> 1;\n    long midmid19\
    \ = min1 >> 1;\n    long midmid20 = min2 >> 1;\n    long midmid21 = min1 >> 1;\n\
    \    long midmid22 = min2 >> 1;\n    long midmid23 = min1 >> 1;\n    long midmid24\
    \ = min2 >> 1;\n    long midmid25 = min1 >> 1;\n    long midmid26 = min2 >> 1;\n\
    \    long midmid27 = min1 >> 1;\n    long midmid28 = min2 >> 1;\n    long midmid29\
    \ = min1 >> 1;\n    long midmid30 = min2 >> 1;\n    long midmid31 = min1 >> 1;\n\
    \    long midmid32 = min2 >> 1;\n    long midmid33 = min1 >> 1;\n    long midmid34\
    \ = min2 >> 1;\n    long midmid35 = min1 >> 1;\n    long midmid36 = min2 >> 1;\n\
    \    long midmid37 = min1 >> 1;\n    long midmid38 = min2 >> 1;\n    long midmid39\
    \ = min1 >> 1;\n    long midmid40 = min2 >> 1;\n    long midmid41 = min1 >> 1;\n\
    \    long midmid42 = min", "    std::vector<long> result;\n    long common = 0;\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1[i] == common) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<long> res;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(res));\n    return res;",
  "    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long temp = 0;\n    long count = 0;\n    long size = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n\
    \    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n\
    \    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 =\
    \ 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long\
    \ sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n\
    \    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22\
    \ = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long\
    \ sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n\
    \    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33\
    \ = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long\
    \ sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n\
    \    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44\
    \ = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long\
    \ sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n\
    \    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55\
    \ = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long\
    \ sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n\
    \    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66\
    \ = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long\
    \ sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n\
    \    long sum74 = 0;\n    long sum75 = 0;\n    long sum", "    std::vector<long>\
    \ res;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n   \
    \     for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    res.push_back(common);\n\
    \    return res;", "    std::vector<long> result;\n    long common = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    while (i + j < l1.size() && l1.at(i + j) == l2.at(j))\
    \ {\n        common++;\n        i++;\n        j++;\n    }\n    while (i < l1.size())\
    \ {\n        result.push_back(l1.at(i));\n        i++;\n    }\n    while (j <\
    \ l2.size()) {\n        result.push_back(l2.at(j));\n        j++;\n    }\n   \
    \ return std::move(result);", "    std::vector<long> result;\n    long common\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i<l1.size()\
    \ && j<l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n  \
    \          i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n     \
    \       i++;\n        } else {\n            j++;\n        }\n    }\n    while\
    \ (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n \
    \   while (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;", " \
    \   std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n        \
    \    if (l1[i] == l2[j]) {\n                common++;\n                break;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (l1[i] == common) {\n            result.push_back(l1[i]);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> result;\n    long common\
    \ = INT_MAX;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common = l1[i];\n                break;\n            }\n        }\n    }\n\
    \    result.push_back(common);\n    return result;", "    std::vector<long> result;\n\
    \    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for\
    \ (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n    \
    \            common++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1[i] == common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1.size() > common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ > common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> l3;\n    l3.reserve(l1.size()\
    \ + l2.size());\n    for (auto i : l1) {\n        for (auto j : l2) {\n      \
    \      if (i == j) continue;\n            if (l3.size() == 0 || l3[l3.size() -\
    \ 1] != j) l3.push_back(j);\n        }\n    }\n    return l3;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    long min1 = std::numeric_limits<long>::max();\n\
    \    long min2 = std::numeric_limits<long>::max();\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n\
    \        if (l2[i] < min2) {\n            min2 = l2[i];\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1) {\n    \
    \        for (long j = 0; j < l2.size(); j++) {\n                if (l2[j] ==\
    \ min2) {\n                    common++;\n                    result.push_back(l1[i]);\n\
    \                    result.push_back(l2[j]);\n                }\n           \
    \ }\n        }\n    }\n    return result;", "    std::vector<long> result;\n \
    \   long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == l2.at(i)) {\n            common++;\n        } else {\n            if (common\
    \ > 0) {\n                result.push_back(common);\n                common =\
    \ 0;\n            }\n            result.push_back(l1.at(i));\n        }\n    }\n\
    \    if (common > 0) {\n        result.push_back(common);\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common == l2.size()) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    long min1 = l1[0], min2\
    \ = l2[0];\n    for (long i = 0; i < l1.size(); i++) {\n        if (min1 < l1[i])\
    \ {\n            min1 = l1[i];\n        }\n        if (min2 < l2[i]) {\n     \
    \       min2 = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size(); i++)\
    \ {\n        if (min1 == l1[i] && min2 == l2[i]) {\n            common++;\n  \
    \      }\n    }\n    if (common > 0) {\n        result.push_back(common);\n  \
    \  }\n    for (long i = 0; i < l2.size(); i++) {\n        if (min1 == l2[i] &&\
    \ min2 == l1[i]) {\n            common++;\n        }\n    }\n    if (common >\
    \ 0) {\n        result.push_back(common);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (l1[i] == common) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i]\
    \ == common) {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common != 0) {\n            if (l1[i] != common) {\n   \
    \             result.push_back(l1[i]);\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < l2.size(); i++) {\n        if (common != 0) {\n           \
    \ if (l2[i] != common) {\n                result.push_back(l2[i]);\n         \
    \   }\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> result;\n    result.push_back(l1[0]);\n   \
    \ result.push_back(l1[1]);\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l2[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n    result.", " \
    \   std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long l3 = l1[1] - l2[1];\n    long l4 = l1[2] - l2[2];\n    if (l3 > l4)\
    \ {\n        result.push_back(l1[1]);\n        result.push_back(l2[1]);\n    \
    \    result.push_back(l3);\n        result.push_back(l4);\n    } else {\n    \
    \    result.push_back(l1[2]);\n        result.push_back(l2[2]);\n        result.push_back(l3);\n\
    \        result.push_back(l4);\n    }\n    long l5 = l1[3] - l2[3];\n    long\
    \ l6 = l1[4] - l2[4];\n    if (l5 > l6) {\n        result.push_back(l1[3]);\n\
    \        result.push_back(l2[3]);\n        result.push_back(l5);\n        result.push_back(l6);\n\
    \    } else {\n        result.push_back(l1[4]);\n        result.push_back(l2[4]);\n\
    \        result.push_back(l5);\n        result.push_back(l6);\n    }\n    long\
    \ l7 = l1[5] - l2[5];\n    long l8 = l1[6] - l2[6];\n    if (l7 > l8) {\n    \
    \    result.push_back(l1[5]);\n        result.push_back(l2[5]);\n        result.push_back(l7);\n\
    \        result.push_back(l8);\n    } else {\n        result.push_back(l1[6]);\n\
    \        result.push_back(l2[6]);\n        result.push_back(l7);\n        result.push_back(l8);\n\
    \    }\n    long l9 = l1[7] - l2[7];\n    long l10 = l1[0] - l2[0];\n    if (l9\
    \ > l10) {\n        result.push_back(l1[7]);\n        result.push_back(l2[7]);\n\
    \        result.push_back(l9);\n        result.push_back(l10);\n    } else {\n\
    \        result.push_back(l1[0]);\n        result.push_back(l2[0]);\n        result.push_back(l9);\n\
    \        result.push_back(l10);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j])\
    \ {\n                common++;\n            }\n        }\n    }\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        if (common > 0) {\n            if (l1[i]\
    \ != common) {\n                result.push_back(l1[i]);\n            }\n    \
    \    } else {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i]\
    \ == common) {\n            result.push_back(l1[i]);\n        }\n    }\n    for\
    \ (long i = 0; i < l2.size(); i++) {\n        if (l2[i] == common) {\n       \
    \     result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ min1 = l1[0], min2 = l2[0], max1 = l1[0], max2 = l2[0];\n    for (long i : l1)\
    \ {\n        if (i < min1) min1 = i;\n        if (i > max1) max1 = i;\n    }\n\
    \    for (long i : l2) {\n        if (i < min2) min2 = i;\n        if (i > max2)\
    \ max2 = i;\n    }\n    if (min1 < min2) std::swap(min1, min2);\n    if (max1\
    \ > max2) std::swap(max1, max2);\n    for (long i = min1; i <= max1; i++) {\n\
    \        for (long j = min2; j <= max2; j++) {\n            if (i == j) continue;\n\
    \            if (result.find(i) == result.end()) result.push_back(i);\n      \
    \      if (result.find(j) == result.end()) result.push_back(j);\n        }\n \
    \   }\n    return result;", "    std::vector<long> l3;\n    l3.reserve(l1.size()\
    \ + l2.size());\n    for (long i : l1) {\n        for (long j : l2) {\n      \
    \      if (i == j) continue;\n            if (l3.find(i) == l3.end()) l3.push_back(i);\n\
    \            if (l3.find(j) == l3.end()) l3.push_back(j);\n        }\n    }\n\
    \    return l3;", "    std::vector<long> result;\n    long common = 0;\n    long\
    \ min1 = std::numeric_limits<long>::min();\n    long min2 = std::numeric_limits<long>::min();\n\
    \    long max1 = std::numeric_limits<long>::max();\n    long max2 = std::numeric_limits<long>::max();\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1) {\n   \
    \         min1 = l1[i];\n        }\n        if (l1[i] > max1) {\n            max1\
    \ = l1[i];\n        }\n        if (l2[i] < min2) {\n            min2 = l2[i];\n\
    \        }\n        if (l2[i] > max2) {\n            max2 = l2[i];\n        }\n\
    \    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] < min1)\
    \ {\n            min2 = l2[i];\n        }\n        if (l2[i] > max1) {\n     \
    \       max2 = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size(); i++)\
    \ {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i] ==\
    \ l2[j]) {\n                common++;\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < l2.size(); i++) {\n        for (long j = 0; j < l1.size();\
    \ j++) {\n            if (l2[i] == l1[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (min1 < l1[i]) {\n            result.push_back(l1[i]);\n        }\n  \
    \      if (max1 > l1[i]) {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (min2 < l2[i])\
    \ {\n            result.push_back(l2[i]);\n        }\n        if (max2 > l2[i])\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common == 1) {\n            result.push_back(l1[i]);\n \
    \       }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (common\
    \ == 1) {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i\
    \ + j < l1.size() && j + k < l2.size()) {\n        if (l1[i] == l2[j]) {\n   \
    \         common++;\n            i++;\n            j++;\n        } else if (l1[i]\
    \ < l2[j]) {\n            i++;\n        } else {\n            j++;\n        }\n\
    \    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n      \
    \  i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == l2.at(i)) {\n            common++;\n        } else {\n            if (common\
    \ > 0) {\n                result.push_back(common);\n                common =\
    \ 0;\n            }\n            result.push_back(l1.at(i));\n        }\n    }\n\
    \    if (common > 0) {\n        result.push_back(common);\n    }\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size()) {\n        if\
    \ (l1[i] == l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n   \
    \         j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;", "    std::vector<long> res;\n    long common = 0;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ == l2.size()) {\n            res.push_back(l1[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    long long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common\
    \ > result.size()) {\n            result.push_back(l1[i]);\n        }\n    }\n\
    \    for (long i = 0; i < l2.size(); i++) {\n        if (common > result.size())\
    \ {\n            result.push_back(l2[i]);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ n1 = l1.size(), n2 = l2.size();\n    long i = 0;\n    long j = 0;\n    while\
    \ (i<n1 && j<n2) {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    long min1\
    \ = l1[0], min2 = l2[0];\n    for (long i = 0; i < l1.size(); i++) {\n       \
    \ if (l1[i] == min1) {\n            min1 = l1[i];\n        }\n        if (l2[i]\
    \ == min2) {\n            min2 = l2[i];\n        }\n    }\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1[i] == min1) {\n            result.push_back(min1);\n\
    \            min1 = l1[i];\n        }\n        if (l2[i] == min2) {\n        \
    \    result.push_back(min2);\n            min2 = l2[i];\n        }\n    }\n  \
    \  if (min1 != min2) {\n        result.push_back(min1);\n        result.push_back(min2);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    long common = 0;\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    res.push_back(common);\n    return res;", " \
    \   std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n        \
    \    if (l1[i] == l2[j]) {\n                common++;\n            }\n       \
    \ }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common !=\
    \ 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> l3;\n    l3.reserve(l1.size()\
    \ + l2.size());\n    for (auto i : l1) {\n        for (auto j : l2) {\n      \
    \      if (i == j) continue;\n            if (l3.size() <= l1.size() && l3[l3.size()-1]\
    \ == i) l3.push_back(i);\n            if (l3.size() <= l2.size() && l3[l3.size()-1]\
    \ == j) l3.push_back(j);\n        }\n    }\n    return l3;", "    std::vector<long>\
    \ result;\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n    result.push_back(l1[0]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.push_back(l2[1]);\n    result.push_back(l1[0]);\n    result.push_back(l1[1]);\n\
    \    result.push_back(l2[0]);\n    result.push_back(l2[1]);\n    result.push_back(l2[0]);\n\
    \    result.", "    std::vector<long> result;\n    long temp;\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j\
    \ = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n            \
    \    common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common > 0) {\n            if (l1[i] == common) {\n    \
    \            result.push_back(l1[i]);\n            }\n        }\n    }\n    for\
    \ (long i = 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if\
    \ (l2[i] == common) {\n                result.push_back(l2[i]);\n            }\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        for (long j = 0; j < l2.size(); j++) {\n            if (l1[i]\
    \ == l2[j]) {\n                common++;\n            }\n        }\n    }\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        if (common == l1.size()) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0;\
    \ i < l2.size(); i++) {\n        if (common == l2.size()) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min = 0;\n    long max = 0;\n    long mid = 0;\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        mid = (l1.size() - i) / 2;\n   \
    \     min = std::min(l1[mid], l2[mid]);\n        max = std::max(l1[mid], l2[mid]);\n\
    \        if (min == max) {\n            common = min;\n        } else {\n    \
    \        if (min < max) {\n                common = min;\n            } else {\n\
    \                common = max;\n            }\n        }\n        result.push_back(common);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    long long common\
    \ = 0;\n    long long max = 0;\n    long long min = 0;\n    for (long long i =\
    \ 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n            common++;\n\
    \            if (l1.at(i) > max) {\n                max = l1.at(i);\n        \
    \    }\n            if (l1.at(i) < min) {\n                min = l1.at(i);\n \
    \           }\n        } else {\n            if (common > 0) {\n             \
    \   res.push_back(common);\n                common = 0;\n            }\n     \
    \       if (max > l1.at(i)) {\n                max = l1.at(i);\n            }\n\
    \            if (min < l1.at(i)) {\n                min = l1.at(i);\n        \
    \    }\n        }\n    }\n    if (common > 0) {\n        res.push_back(common);\n\
    \    }\n    if (max > l1.at(l1.size() - 1)) {\n        max = l1.at(l1.size() -\
    \ 1);\n    }\n    if (min < l1.at(l1.size() - 1)) {\n        min = l1.at(l1.size()\
    \ - 1);\n    }\n    return res;", "    std::vector<long> result;\n    long long\
    \ common = 0;\n    long long min1 = std::numeric_limits<long long>::max();\n \
    \   long long min2 = std::numeric_limits<long long>::max();\n    long long max1\
    \ = std::numeric_limits<long long>::min();\n    long long max2 = std::numeric_limits<long\
    \ long>::min();\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1[i]\
    \ < min1) {\n            min1 = l1[i];\n        }\n        if (l1[i] > max1) {\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] < min2) {\n         \
    \   min2 = l2[i];\n        }\n        if (l2[i] > max2) {\n            max2 =\
    \ l2[i];\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n\
    \        if (l1[i] == max1 && l2[i] == min2) {\n            result.push_back(l1[i]);\n\
    \        }\n        if (l1[i] == min1 && l2[i] == max2) {\n            result.push_back(l1[i]);\n\
    \        }\n        if (l1[i] == max1 && l2[i] == min2) {\n            result.push_back(l1[i]);\n\
    \        }\n        if (l1[i] == min1 && l2[i] == max2) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (l1[i] == max1 && l2[i] == min2) {\n            result.push_back(l2[i]);\n \
    \       }\n        if (l1[i] == min1 && l2[i] == max2) {\n            result.push_back(l2[i]);\n\
    \        }\n        if (l1[i] == max1 && l2[i] == min2) {\n            result.push_back(l2[i]);\n\
    \        }\n        if (l1[i] == min1 && l2[i] == max2) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n \
    \   long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n \
    \   long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n \
    \   long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long aaaa = 0;\n\
    \    long bbbb = 0;\n    long cccc = 0;\n    long dddd = 0;\n    long eeee = 0;\n\
    \    long ffff = 0;\n    long gggg = 0;\n    long hhhh = 0;\n    long iiii = 0;\n\
    \    long jjjj = 0;\n    long kkkk = 0;\n    long llll = 0;\n    long mmmm = 0;\n\
    \    long nnnn = 0;\n    long oooo = 0;\n    long pppp = 0;\n    long qqqq = 0;\n\
    \    long rrrr = 0;\n    long ssss = 0;\n    long tttt = 0;\n    long uuuu = 0;\n\
    \    long vvvv = 0;\n    long wwww = 0;\n    long xxxx", "    std::vector<long>\
    \ result;\n    long temp;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    while (i<l1.size() && j<l2.size()) {\n        if (l1[i]==l2[j]) {\n     \
    \       result.push_back(l1[i]);\n            i++;\n            j++;\n       \
    \ } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n            j++;\n\
    \        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  long temp;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i<l1.size()\
    \ && j<l2.size()) {\n        if (l1[i]==l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i]<l2[j]) {\n     \
    \       i++;\n        } else {\n            j++;\n        }\n    }\n    while\
    \ (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n \
    \   while (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long min1 = std::numeric_limits<long>::min();\n\
    \    long min2 = std::numeric_limits<long>::min();\n    long max1 = std::numeric_limits<long>::max();\n\
    \    long max2 = std::numeric_limits<long>::max();\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] < min1) {\n            min1 = l1[i];\n        }\n\
    \        if (l1[i] > max1) {\n            max1 = l1[i];\n        }\n    }\n  \
    \  for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] < min2) {\n     \
    \       min2 = l2[i];\n        }\n        if (l2[i] > max2) {\n            max2\
    \ = l2[i];\n        }\n    }\n    long mid1 = max1 + min1;\n    long mid2 = max2\
    \ + min2;\n    long mid = mid1 + mid2;\n    long mid1 = mid1 - mid;\n    long\
    \ mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n    long mid1 = mid1 - mid;\n\
    \    long mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n    long mid1 = mid1\
    \ - mid;\n    long mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n    long mid1\
    \ = mid1 - mid;\n    long mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n  \
    \  long mid1 = mid1 - mid;\n    long mid2 = mid2 - mid;\n    long mid = mid1 +\
    \ mid2;\n    long mid1 = mid1 - mid;\n    long mid2 = mid2 - mid;\n    long mid\
    \ = mid1 + mid2;\n    long mid1 = mid1 - mid;\n    long mid2 = mid2 - mid;\n \
    \   long mid = mid1 + mid2;\n    long mid1 = mid1 - mid;\n    long mid2 = mid2\
    \ - mid;\n    long mid = mid1 + mid2;\n    long mid1 = mid1 - mid;\n    long mid2\
    \ = mid2 - mid;\n    long mid = mid1 + mid2;\n    long mid1 = mid1 - mid;\n  \
    \  long mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n    long mid1 = mid1\
    \ - mid;\n    long mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n    long mid1\
    \ = mid1 - mid;\n    long mid2 = mid2 - mid;\n    long mid = mid1 + mid2;\n  \
    \  long mid1 = mid1 - mid;\n    long mid2 = mid2 - mid;\n    long mid = mid1 +\
    \ mid", "    std::vector<long> l3;\n    l3.reserve(l1.size() + l2.size());\n \
    \   for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                l3.push_back(l1[i]);\n\
    \                l3.push_back(l2[j]);\n                break;\n            }\n\
    \        }\n    }\n    return l3;", "    std::vector<long> result;\n    long common\
    \ = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j\
    \ < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (common > 0) {\n            if (l1[i] != common) {\n             \
    \   result.push_back(l1[i]);\n            }\n        }\n    }\n    for (long i\
    \ = 0; i < l2.size(); i++) {\n        if (common > 0) {\n            if (l2[i]\
    \ != common) {\n                result.push_back(l2[i]);\n            }\n    \
    \    }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
  "    std::vector<long> result;\n    long common = 0;\n    long min1 = l1[0], min2\
    \ = l2[0];\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == min1)\
    \ {\n            min1 = l1[i];\n        }\n        if (l2[i] == min2) {\n    \
    \        min2 = l2[i];\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (l1[i] == min1) {\n            result.push_back(min1);\n\
    \            min1 = l1[i];\n        }\n        if (l2[i] == min2) {\n        \
    \    result.push_back(min2);\n            min2 = l2[i];\n        }\n    }\n  \
    \  for (long i = 0; i < l2.size(); i++) {\n        if (l2[i] == min2) {\n    \
    \        result.push_back(min2);\n            min2 = l2[i];\n        }\n    }\n\
    \    for (long i = 0; i < result.size(); i++) {\n        if (result[i] == common)\
    \ {\n            result.erase(result.begin() + i);\n            i--;\n       \
    \ }\n    }\n    return result;", "    std::vector<long> result;\n    long common\
    \ = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j\
    \ < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n\
    \        if (common == l2.size()) {\n            result.push_back(l1[i]);\n  \
    \      }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ n1 = l1.size();\n    long n2 = l2.size();\n    long min1 = n1 < n2 ? n1 : n2;\n\
    \    long min2 = n1 < n2 ? n2 : n1;\n    long mid = (min1 + min2) / 2;\n    long\
    \ mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid + 2;\n    long\
    \ mid4 = mid + 3;\n    long mid5 = mid + 4;\n    long mid6 = mid + 5;\n    long\
    \ mid7 = mid + 6;\n    long mid8 = mid + 7;\n    long mid9 = mid + 8;\n    long\
    \ mid10 = mid + 9;\n    long mid11 = mid + 10;\n    long mid12 = mid + 11;\n \
    \   long mid13 = mid + 12;\n    long mid14 = mid + 13;\n    long mid15 = mid +\
    \ 14;\n    long mid16 = mid + 15;\n    long mid17 = mid + 16;\n    long mid18\
    \ = mid + 17;\n    long mid19 = mid + 18;\n    long mid20 = mid + 19;\n    long\
    \ mid21 = mid + 20;\n    long mid22 = mid + 21;\n    long mid23 = mid + 22;\n\
    \    long mid24 = mid + 23;\n    long mid25 = mid + 24;\n    long mid26 = mid\
    \ + 25;\n    long mid27 = mid + 26;\n    long mid28 = mid + 27;\n    long mid29\
    \ = mid + 28;\n    long mid30 = mid + 29;\n    long mid31 = mid + 30;\n    long\
    \ mid32 = mid + 31;\n    long mid33 = mid + 32;\n    long mid34 = mid + 33;\n\
    \    long mid35 = mid + 34;\n    long mid36 = mid + 35;\n    long mid37 = mid\
    \ + 36;\n    long mid38 = mid + 37;\n    long mid39 = mid + 38;\n    long mid40\
    \ = mid + 39;\n    long mid41 = mid + 40;\n    long mid42 = mid + 41;\n    long\
    \ mid43 = mid + 42;\n    long mid44 = mid + 43;\n    long mid45 = mid + 44;\n\
    \    long mid46 = mid + 45;\n    long mid47 = mid + 46;\n    long mid48 = mid\
    \ + 47;\n    long mid49 = mid + 48;\n    long mid50 = mid + 49;\n    long mid51\
    \ = mid + 50;\n    long ", "    std::vector<long> result;\n    long temp;\n  \
    \  long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i<l1.size() && j<l2.size())\
    \ {\n        if (l1[i]==l2[j]) {\n            result.push_back(l1[i]);\n     \
    \       i++;\n            j++;\n        } else if (l1[i]<l2[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    while (i <\
    \ l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n    while\
    \ (j < l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n    }\n \
    \   return result;", "    std::vector<long> result;\n    long common = 0;\n  \
    \  for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (l1.size() == common) {\n            result.push_back(l1[i]);\n      \
    \  }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n        if (l2.size()\
    \ == common) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = 0;\n    for (long\
    \ i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n\
    \            if (l1[i] == l2[j]) {\n                common++;\n            }\n\
    \        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i]\
    \ != common) {\n            result.push_back(l1[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long common = INT_MAX;\n    long\
    \ min1 = INT_MAX;\n    long min2 = INT_MAX;\n    long max1 = INT_MIN;\n    long\
    \ max2 = INT_MIN;\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i]\
    \ < min1) {\n            min1 = l1[i];\n        }\n        if (l1[i] > max1) {\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] < min2) {\n         \
    \   min2 = l2[i];\n        }\n        if (l2[i] > max2) {\n            max2 =\
    \ l2[i];\n        }\n    }\n    if (max1 < min2) {\n        for (long i = 0; i\
    \ < l2.size(); i++) {\n            if (l2[i] < min1) {\n                min1 =\
    \ l2[i];\n            }\n            if (l2[i] > max1) {\n                max1\
    \ = l2[i];\n            }\n        }\n    }\n    if (max2 < min1) {\n        for\
    \ (long i = 0; i < l1.size(); i++) {\n            if (l1[i] < min2) {\n      \
    \          min2 = l1[i];\n            }\n            if (l1[i] > max2) {\n   \
    \             max2 = l1[i];\n            }\n        }\n    }\n    for (long i\
    \ = 0; i < l1.size(); i++) {\n        if (l1[i] == max1 && l2[i] == max2) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    for (long i = 0;\
    \ i < l2.size(); i++) {\n        if (l1[i] == max2 && l2[i] == max1) {\n     \
    \       result.push_back(l2[i]);\n        }\n    }\n    for (long i = 0; i < result.size();\
    \ i++) {\n        if (result[i] != common) {\n            common = result[i];\n\
    \        }\n    }\n    return result;", "    std::vector<long> l3;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(l3));\n    return l3;"]
stop_tokens:
- "\n}"
