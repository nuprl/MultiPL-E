name: HumanEval_47_median
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float rightval\
    \ = l[n - 1];\n    for (long long int i = mid; i < n; i++) {\n        if (l[i]\
    \ < leftval) leftval = l[i];\n        if (l[i] > rightval) rightval = l[i];\n\
    \    }\n    return (leftval + rightval) / 2;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpytw1y3jl: /tmp/tmpytw1y3jl.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float median = l[n / 2];\n    float leftMedian = median;\n    float rightMedian\
    \ = median;\n    for (long long int i = n / 2; i > 0; i /= 2) {\n        if (l[i]\
    \ < leftMedian) {\n            leftMedian = l[i];\n        }\n        if (l[i]\
    \ > rightMedian) {\n            rightMedian = l[i];\n        }\n    }\n    return\
    \ leftMedian + rightMedian;\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp3zby1hs9: /tmp/tmp3zby1hs9.cpp:29: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n\
    \    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian =\
    \ median(l.sublist(n / 2, n));\n    return std::max(leftMedian, rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpuicd1lfe.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpuicd1lfe.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmpuicd1lfe.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(n / 2, n));\n      |      \
    \                            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    return (float) l[mid] + (float) l[mid + 1];\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp061ihy33: /tmp/tmp061ihy33.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    long long int left = l[mid];\n    long long int right = l[n - 1];\n\
    \    if (left > right) return median(l);\n    if (n == 2) return left;\n    if\
    \ (n == 1) return right;\n    if (left == right) return left;\n    if (left >\
    \ right) return median(l);\n    return right;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpx_ltic1z: /tmp/tmpx_ltic1z.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n     \
    \   median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) / 2.0;\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpsqbwizfb: /tmp/tmpsqbwizfb.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n % 2 == 0);\n    long long int mid = n / 2;\n\
    \    long long int l1 = 0, l2 = 0, l3 = 0;\n    for (long long int i = 0; i <\
    \ n; i++) {\n        if (i == mid) {\n            l3 = l[i];\n        } else {\n\
    \            if (l[i] > l1) {\n                l2 = l[i];\n                l1\
    \ = l1;\n            } else {\n                l3 = l[i];\n            }\n   \
    \     }\n    }\n    return l1 + l2 + l3;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpt3xo4nv6: /tmp/tmpt3xo4nv6.cpp:10: float median(std::vector<long int>):\
    \ Assertion `n % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    return a < b ? b : a;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpry0mus3_: /tmp/tmpry0mus3_.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    long long int mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian\
    \ + rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpoxt6150u.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpoxt6150u.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpoxt6150u.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n\
    \    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian =\
    \ median(l.sublist(n / 2 + 1, n));\n    return mid + ((leftMedian + rightMedian)\
    \ / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpv9t0waa8.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpv9t0waa8.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmpv9t0waa8.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(n / 2 + 1, n));\n      |  \
    \                                ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, l.size()));\n    return (leftMedian + rightMedian) /\
    \ 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdrh2x3ax.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpdrh2x3ax.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpdrh2x3ax.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, l.size()));\n      | \
    \                                 ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = 0;\n    if (l.size() % 2 == 0) {\n \
    \       median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) /\
    \ 2;\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp4j8glpcs: /tmp/tmp4j8glpcs.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for (long long i = mid;\
    \ i < l.size(); i++) {\n        median = (median < l[i]) ? l[i] : median;\n  \
    \  }\n    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv92gulzu: /tmp/tmpv92gulzu.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        std::swap(left, right);\n    }\n    return left\
    \ + (right - left) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpevtakgrp: /tmp/tmpevtakgrp.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float rightval\
    \ = l[n - 1];\n    for (long long int i = 0; i < mid; i++) {\n        if (l[i]\
    \ < leftval) leftval = l[i];\n        if (l[i] > rightval) rightval = l[i];\n\
    \    }\n    if (leftval == rightval) return midval;\n    if (leftval < rightval)\
    \ return leftval;\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpx52d6_r1: /tmp/tmpx52d6_r1.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpbx_3l4o4: /tmp/tmpbx_3l4o4.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ leftval;\n    }\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0bbuzyuh: /tmp/tmp0bbuzyuh.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpa3uiiuo7: /tmp/tmpa3uiiuo7.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (midval < leftval) return midval;\n    if (midval > rightval)\
    \ return midval;\n    if (leftval < rightval) return leftval;\n    return rightval;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplcw3kx3h: /tmp/tmplcw3kx3h.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    float mid = n / 2.0f;\n    float sum = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    if (n % 2 == 0) {\n \
    \       return sum / 2.0f;\n    } else {\n        return sum / 2.0f + mid;\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpw5m4ti15: /tmp/tmpw5m4ti15.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    float x = l[mid];\n \
    \   float y = l[n - 1];\n    if (x > y) {\n        return y;\n    } else {\n \
    \       return x;\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_evqmxge: /tmp/tmp_evqmxge.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0)\n        return l[n/2];\n    else return\
    \ (float(l[n/2]) + float(l[n/2+1]))/2;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpmc02esro: /tmp/tmpmc02esro.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midValue = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midValue + ((leftMedian + rightMedian) / 2);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdzipxweq.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpdzipxweq.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpdzipxweq.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1zp82hph: /tmp/tmp1zp82hph.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n < 2) return 0;\n    long long mid = n / 2;\n    long\
    \ long l1 = mid;\n    long long l2 = n - mid;\n    float l3 = l[mid];\n    float\
    \ l4 = l[n - 1];\n    if (l2 < l1) return l2;\n    if (l3 < l1) return l3;\n \
    \   if (l4 < l1) return l4;\n    if (l2 < l3) return l2;\n    if (l3 < l4) return\
    \ l3;\n    if (l4 < l3) return l4;\n    return l2;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2m6c3ofc: /tmp/tmp2m6c3ofc.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        long long int mid = n / 2;\n\
    \        float a = l[mid];\n        float b = l[mid-1];\n        return ((a +\
    \ b) / 2);\n    } else {\n        long long int mid = n / 2;\n        float a\
    \ = l[mid];\n        float b = l[mid+1];\n        return ((a + b) / 2);\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpl9kzfikq: /tmp/tmpl9kzfikq.cpp:25: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpeas89nd1: /tmp/tmpeas89nd1.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + l[ll\
    \ / 2];\n    }\n    return l[ll / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqsurm8zv: /tmp/tmpqsurm8zv.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmz8u4vk7: /tmp/tmpmz8u4vk7.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1jymayb1: /tmp/tmp1jymayb1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        long long mid = n / 2;\n     \
    \   long long left = l[mid];\n        long long right = l[n - 1];\n        if\
    \ (left > right) {\n            return left;\n        } else {\n            return\
    \ right;\n        }\n    } else {\n        long long mid = n / 2;\n        long\
    \ long left = l[mid];\n        long long right = l[n - 1];\n        if (left <\
    \ right) {\n            return left;\n        } else {\n            return right;\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpm0o_rwsc: /tmp/tmpm0o_rwsc.cpp:32: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int m = n / 2;\n    if (n % 2 == 0) {\n   \
    \     return l[m];\n    } else {\n        return (l[m] + l[n - 1]) / 2;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfcczq05p: /tmp/tmpfcczq05p.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmps6zbs4np: /tmp/tmps6zbs4np.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    float m = l[n / 2];\n    for\
    \ (long long i = 2; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmptx8ro36m: /tmp/tmptx8ro36m.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin(), l.begin() + mid);\n    float\
    \ rightMedian = median(l.begin() + mid, l.end());\n    return 0.5 * (leftMedian\
    \ + rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps_iccgut.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmps_iccgut.cpp:13:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   13 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmps_iccgut.cpp:14:42: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     float rightMedian = median(l.begin() + mid, l.end());\n      |   \
    \                             ~~~~~~~~~~^~~~~\n      |                       \
    \                   |\n      |                                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp_qporg_u: /tmp/tmp_qporg_u.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    if (a > b) return median(l);\n\
    \    return median(l, mid + 1, n - 1);\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpau5w8jw9.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpau5w8jw9.cpp:15:36: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   15 |     return median(l, mid + 1, n\
    \ - 1);\n      |                                    ^\n/tmp/tmpau5w8jw9.cpp:8:7:\
    \ note: declared here\n    8 | float median(std::vector<long> l) {\n      |  \
    \     ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    long long int left =\
    \ 0, right = mid;\n    float midVal = l[mid];\n    while(left < right) {\n   \
    \     long long int midValLeft = l[left];\n        long long int midValRight =\
    \ l[right];\n        if(midValLeft < midValRight) {\n            left++;\n   \
    \     } else {\n            right--;\n        }\n    }\n    return midVal;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp44mclxix: /tmp/tmp44mclxix.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1,\n                               l.end());\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqw62bo1p.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpqw62bo1p.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpqw62bo1p.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1,\n      |         \
    \                       ~~~~~~~~~~~~~~~~^~~\n      |                         \
    \                       |\n      |                                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp15ncihrc: /tmp/tmp15ncihrc.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    if (l.size() % 2 ==\
    \ 0) {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    return median;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmps6t8rjy7: /tmp/tmps6t8rjy7.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv0jp4usm: /tmp/tmpv0jp4usm.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n   \
    \ float left = 0;\n    float right = n;\n    while (left < right) {\n        mid\
    \ = (left + right) / 2;\n        if (l[mid] <= mid) left = mid + 1;\n        else\
    \ right = mid - 1;\n    }\n    return mid;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp3d3prcl7: /tmp/tmp3d3prcl7.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return (a+b)/2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_scwgg1m: /tmp/tmp_scwgg1m.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmptzhkduwq: /tmp/tmptzhkduwq.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float leftMedian = median(l.subvec(0, mid));\n    float rightMedian\
    \ = median(l.subvec(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6uscvkxz.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp6uscvkxz.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018subvec\u2019\n   12 |     float leftMedian = median(l.subvec(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmp6uscvkxz.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018subvec\u2019\
    \n   13 |     float rightMedian = median(l.subvec(mid, n - 1));\n      |     \
    \                             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph3ehufdx.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmph3ehufdx.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmph3ehufdx.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpt16gwcjy: /tmp/tmpt16gwcjy.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left < right) {\n        return left;\n    } else {\n        return right;\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp225h3zrj: /tmp/tmp225h3zrj.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmz0ytszt: /tmp/tmpmz0ytszt.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    long long left = 0;\n \
    \   long long right = mid;\n    while (left < right) {\n        long long mid\
    \ = (left + right) / 2;\n        if (l[mid] < median) {\n            left = mid\
    \ + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpj0kq7583: /tmp/tmpj0kq7583.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin() + mid, l.begin() + mid + 1);\n\
    \    float rightMedian = median(l.begin() + mid + 1, l.end());\n    return 0.5\
    \ * (leftMedian + rightMedian);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxcpt0wya.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpxcpt0wya.cpp:13:41: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  13 |     float leftMedian = median(l.begin() + mid, l.begin() + mid + 1);\n\
    \      |                               ~~~~~~~~~~^~~~~\n      |              \
    \                           |\n      |                                       \
    \  __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpxcpt0wya.cpp:14:48:\
    \ error: could not convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int m = n / 2;\n    if (n % 2 == 0) {\n   \
    \     return l[m];\n    } else {\n        return (l[m] + l[n - 1]) / 2;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpxtpwnhax: /tmp/tmpxtpwnhax.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcibdt5r1: /tmp/tmpcibdt5r1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int l1 = l[mid];\n    long long int l2\
    \ = l[mid+1];\n    if (l1 < l2) {\n        return l1;\n    }\n    return l2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpbpwrtcdq: /tmp/tmpbpwrtcdq.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    } else\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7aj302t: /tmp/tmpb7aj302t.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    float midval = l[mid];\n\
    \    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n    if (n == 0\
    \ || midval < leftval || midval > rightval) {\n        return midval;\n    }\n\
    \    if (midval < leftval) {\n        return median(l);\n    }\n    return median(l,\
    \ mid+1, n);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph1ik34w9.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmph1ik34w9.cpp:20:30: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   20 |     return median(l, mid+1, n);\n\
    \      |                              ^\n/tmp/tmph1ik34w9.cpp:8:7: note: declared\
    \ here\n    8 | float median(std::vector<long> l) {\n      |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmtbolgtu: /tmp/tmpmtbolgtu.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ leftval;\n    }\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmph45stxb3: /tmp/tmph45stxb3.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqhtq_r5q: /tmp/tmpqhtq_r5q.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpgq5adhx1: /tmp/tmpgq5adhx1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval < rightval) {\n        return\
    \ midval;\n    }\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1unz5sj5: /tmp/tmp1unz5sj5.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    assert(n >= 2);\n    float mid = l[n / 2];\n    float left\
    \ = 0;\n    float right = n;\n    while (left < right) {\n        mid = (left\
    \ + right) / 2;\n        if (mid < 0)\n            left = mid + 1;\n        else\
    \ if (mid > n)\n            right = mid - 1;\n        else\n            return\
    \ mid;\n    }\n    return mid;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp47vduf30: /tmp/tmp47vduf30.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midValue = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midValue + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphw7t5g69.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmphw7t5g69.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmphw7t5g69.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfl3cve97: /tmp/tmpfl3cve97.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    long left = l[mid];\n    long right = l[mid+1];\n    if\
    \ (left > right) {\n        std::swap(left, right);\n    }\n    return left +\
    \ (right - left) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpxnz9ukej: /tmp/tmpxnz9ukej.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float midVal = l[mid];\n    float leftMedian = median(l.substr(0,\
    \ mid));\n    float rightMedian = median(l.substr(mid + 1, l.size() - mid));\n\
    \    return (midVal + leftMedian) / 2.0;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe70p4cvd.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpe70p4cvd.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018substr\u2019\n   14 |     float leftMedian = median(l.substr(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmpe70p4cvd.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   15 |     float rightMedian = median(l.substr(mid + 1, l.size() - mid));\n\
    \      |                                  ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpw3w88boj: /tmp/tmpw3w88boj.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid-1];\n    return ((a + b) /\
    \ 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdle05x6c: /tmp/tmpdle05x6c.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float median = l[mid];\n    for (long long int i = 1; i < n; i++) {\n\
    \        if (l[i] < median) median = l[i];\n    }\n    return median;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpj9s2slkh: /tmp/tmpj9s2slkh.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpp6plco4z: /tmp/tmpp6plco4z.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1523aq1z: /tmp/tmp1523aq1z.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp_bty4nsu: /tmp/tmp_bty4nsu.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  else {\n        return (l[n/2] + l[n/2-1])/2;\n    }\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpco7a1euv: /tmp/tmpco7a1euv.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ midval;\n    } else {\n        return rightval;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpnjyls88h: /tmp/tmpnjyls88h.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float left = (l[mid] - l[mid-1]) / 2;\n    float right = (l[mid+1] -\
    \ l[mid]) / 2;\n    if (left > right) return median(l);\n    return l[mid];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpiazc7y6u: /tmp/tmpiazc7y6u.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp49hrxch7: /tmp/tmp49hrxch7.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1,\n                               l.end());\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpkno1z2f5.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpkno1z2f5.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpkno1z2f5.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1,\n      |         \
    \                       ~~~~~~~~~~~~~~~~^~~\n      |                         \
    \                       |\n      |                                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp40u62qa2: /tmp/tmp40u62qa2.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return ((a + b) /\
    \ 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplponao57: /tmp/tmplponao57.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n    float rightMedian = median(l.begin() + mid + 1,\n   \
    \                            l.end());\n    return midVal + (leftMedian + rightMedian)\
    \ / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps118v16y.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmps118v16y.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmps118v16y.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1,\n      |         \
    \                       ~~~~~~~~~~~~~~~~^~~\n      |                         \
    \                       |\n      |                                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3dd9vmz9: /tmp/tmp3dd9vmz9.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp6d_lasdk: /tmp/tmp6d_lasdk.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpybb8txzj: /tmp/tmpybb8txzj.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8jsyv367.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp8jsyv367.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp8jsyv367.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpuaad5mvt: /tmp/tmpuaad5mvt.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpw4f0hdgn.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpw4f0hdgn.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpw4f0hdgn.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\n\
    \    return (float) l[mid] + (float) l[mid+1];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1opfp83x: /tmp/tmp1opfp83x.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ float m1 = l[mid];\n    float m2 = l[n - 1];\n    if (m1 < m2)\n        return\
    \ m1;\n    return m2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwymuacu1: /tmp/tmpwymuacu1.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return (b - a) / 2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpqnszaskc: /tmp/tmpqnszaskc.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp32zxl16w: /tmp/tmp32zxl16w.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpd49w0s7r: /tmp/tmpd49w0s7r.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp600hfiez.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp600hfiez.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmp600hfiez.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcqw7a29w: /tmp/tmpcqw7a29w.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for (long long i = mid;\
    \ i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n  \
    \  }\n    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp79gsa2nu: /tmp/tmp79gsa2nu.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1qy8601t.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp1qy8601t.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp1qy8601t.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    long long int left\
    \ = 0, right = mid;\n    while (left < right) {\n        long long int mid = (left\
    \ + right) / 2;\n        if (l[mid] < median) {\n            left = mid + 1;\n\
    \        } else {\n            right = mid;\n        }\n    }\n    return median;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmptdqhrfn3: /tmp/tmptdqhrfn3.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return 0.5 * (l[mid] + l[mid-1]);\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpup7y7k4e: /tmp/tmpup7y7k4e.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    return a > b ? b : a;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9av_0jt2: /tmp/tmp9av_0jt2.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return leftval;\n\
    \    return rightval;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmppczmvu6w: /tmp/tmppczmvu6w.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    else {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpssbvm7zj: /tmp/tmpssbvm7zj.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float median = (l[n / 2] + l[n / 2 - 1]) / 2;\n    return median;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpnd364xki: /tmp/tmpnd364xki.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplvjn21fe: /tmp/tmplvjn21fe.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpo0c7adzd: /tmp/tmpo0c7adzd.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk1aifqjd: /tmp/tmpk1aifqjd.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmd6l4sd9.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpmd6l4sd9.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpmd6l4sd9.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n    float rightMedian = median(l.begin() + mid + 1, l.end());\n\
    \    return midVal + (leftMedian + rightMedian) / 2;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptbvqr408.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmptbvqr408.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmptbvqr408.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = (l[mid] + l[mid-1]) / 2;\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpupy2negg: /tmp/tmpupy2negg.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmphd0a309_: /tmp/tmphd0a309_.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpd9ujg2px: /tmp/tmpd9ujg2px.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpl9l21lj2: /tmp/tmpl9l21lj2.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return (l[ll/2 - 1] + l[ll/2])\
    \ / 2.0;\n    }\n    else {\n        return (l[ll/2] + l[ll/2 - 1]) / 2.0;\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpnn2p1w2y: /tmp/tmpnn2p1w2y.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpzmb71wu1: /tmp/tmpzmb71wu1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    } else\
    \ {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqg6espzx: /tmp/tmpqg6espzx.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float\
    \ m = (l[n / 2] + l[n / 2 - 1]) / 2;\n    return m;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpae_ynyv1: /tmp/tmpae_ynyv1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdkropde3: /tmp/tmpdkropde3.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv09tsplz: /tmp/tmpv09tsplz.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin(), l.begin() + mid);\n    float\
    \ rightMedian = median(l.begin() + mid, l.end());\n    return (leftMedian + rightMedian)\
    \ / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpr_xowyqx.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpr_xowyqx.cpp:13:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   13 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpr_xowyqx.cpp:14:42: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     float rightMedian = median(l.begin() + mid, l.end());\n      |   \
    \                             ~~~~~~~~~~^~~~~\n      |                       \
    \                   |\n      |                                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv1348yc7: /tmp/tmpv1348yc7.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float mid = l[n / 2];\n    float leftMedian = median(l.sublist(0, n / 2));\n\
    \    float rightMedian = median(l.sublist((n / 2) + 1, n));\n    return std::max(leftMedian,\
    \ rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_qtxpnok.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_qtxpnok.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmp_qtxpnok.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist((n / 2) + 1, n));\n      |\
    \                                  ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwg7i3nln: /tmp/tmpwg7i3nln.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp16dzdnyk: /tmp/tmp16dzdnyk.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin()\
    \ + mid + 1, l.begin() + mid);\n    float rightMedian = median(l.begin(), l.begin()\
    \ + mid);\n    return (midVal + rightMedian) / 2.0;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjc_akifz.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpjc_akifz.cpp:11:47: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid)).__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   11 |\
    \     float leftMedian = median(l.begin() + mid + 1, l.begin() + mid);\n     \
    \ |                               ~~~~~~~~~~~~~~~~^~~\n      |               \
    \                                |\n      |                                  \
    \             __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    /tmp/tmpjc_akifz.cpp:12:39: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   12 |     float rightMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                                ~~~~~~~^~\n      |\
    \                                       |\n      |                           \
    \            std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float left = (l[mid] - l[mid-1]) / 2.0;\n    float right = (l[mid+1]\
    \ - l[mid]) / 2.0;\n    if (left > right) return median(l);\n    return l[mid];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpgw22cm1k: /tmp/tmpgw22cm1k.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp34pyqmma: /tmp/tmp34pyqmma.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid]) / 2.0;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk9156p_k: /tmp/tmpk9156p_k.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll/2 - 1] + l[ll/2];\n\
    \    }\n    return l[ll/2];\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp493zbsuu: /tmp/tmp493zbsuu.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ float median = l[mid];\n    long long int left = 0, right = mid;\n    while\
    \ (left < right) {\n        long long int mid = (left + right) / 2;\n        if\
    \ (l[mid] < median) {\n            left = mid + 1;\n        } else {\n       \
    \     right = mid;\n        }\n    }\n    if (left == right) {\n        return\
    \ median;\n    }\n    return l[left];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpurxfuo3b: /tmp/tmpurxfuo3b.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    long long mid = n / 2;\n    long long left = 0, right = n;\n\
    \    float midval = l[mid];\n    while (left < right) {\n        while (left <\
    \ right && l[left] < midval) {\n            left++;\n        }\n        while\
    \ (left < right && l[right] > midval) {\n            right--;\n        }\n   \
    \     if (left < right) {\n            long long temp = l[left];\n           \
    \ l[left] = l[right];\n            l[right] = temp;\n            left++;\n   \
    \         right--;\n        }\n    }\n    return midval;\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpc12iplf1: /tmp/tmpc12iplf1.cpp:32: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpsjkj9l7p: /tmp/tmpsjkj9l7p.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  else {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkzu1i5yj: /tmp/tmpkzu1i5yj.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfy0czo_4: /tmp/tmpfy0czo_4.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpudkx35u7.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpudkx35u7.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpudkx35u7.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  float m = (l[n/2] + l[n/2-1])/2;\n    return m;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp2jetlqa0: /tmp/tmp2jetlqa0.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ long long int left = 0, right = mid;\n    float midVal = l[mid];\n    while\
    \ (left < right) {\n        long long int midValLeft = l[left];\n        long\
    \ long int midValRight = l[right];\n        if (midValLeft < midValRight) {\n\
    \            left++;\n        } else if (midValLeft > midValRight) {\n       \
    \     right--;\n        } else {\n            return midVal;\n        }\n    }\n\
    \    return midVal;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9miz0l5f: /tmp/tmp9miz0l5f.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid]) / 2.0;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3zwli1gm: /tmp/tmp3zwli1gm.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    float mid = l[n / 2];\n\
    \    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian =\
    \ median(l.sublist(n / 2, n));\n    return std::max(leftMedian, rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqbd187u3.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpqbd187u3.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmpqbd187u3.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(n / 2, n));\n      |      \
    \                            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int\
    \ mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpi4_3_lnm.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpi4_3_lnm.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpi4_3_lnm.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0)\n        return l[ll/2 - 1] + l[ll/2];\n\
    \    return l[ll/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5klz0ml6: /tmp/tmp5klz0ml6.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpezkclrh2: /tmp/tmpezkclrh2.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpgf6jt9zj: /tmp/tmpgf6jt9zj.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  else {\n        return (l[n/2] + l[n/2-1])/2;\n    }\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk536xbry: /tmp/tmpk536xbry.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_22zlgfz: /tmp/tmp_22zlgfz.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midValue = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    if (leftMedian > rightMedian) {\n        return leftMedian;\n\
    \    } else {\n        return rightMedian;\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjyxwdwen.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpjyxwdwen.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpjyxwdwen.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return ((a + b) /\
    \ 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdx51afyt: /tmp/tmpdx51afyt.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpd3bdpfo9: /tmp/tmpd3bdpfo9.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float pivot = l[mid];\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return pivot + ((leftMedian\
    \ + rightMedian) / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1wefxkmk.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp1wefxkmk.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmp1wefxkmk.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv4rswuou: /tmp/tmpv4rswuou.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    long long int left\
    \ = 0, right = mid;\n    while (left < right) {\n        while (left < right &&\
    \ l[left] < median) {\n            left++;\n        }\n        while (left < right\
    \ && l[right] > median) {\n            right--;\n        }\n        if (left <\
    \ right) {\n            std::swap(l[left], l[right]);\n        }\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp2__o9ox6: /tmp/tmp2__o9ox6.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float mid = n / 2.0;\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian\
    \ + rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpf0n64rf9.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpf0n64rf9.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpf0n64rf9.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n  \
    \  return a > b ? a : b;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpecaiz0ig: /tmp/tmpecaiz0ig.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    } else\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwc8etddg: /tmp/tmpwc8etddg.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int\
    \ mid = n / 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float\
    \ rightval = l[n - 1];\n    for (long long int i = mid; i < n; i++) {\n      \
    \  if (l[i] < leftval)\n            leftval = l[i];\n        else if (l[i] > rightval)\n\
    \            rightval = l[i];\n    }\n    return midval;\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmppg0ikf2a: /tmp/tmppg0ikf2a.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpjkjmpivz: /tmp/tmpjkjmpivz.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float leftMedian = median(l.subvec(0, mid));\n    float rightMedian\
    \ = median(l.subvec(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbr04aqbo.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpbr04aqbo.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018subvec\u2019\n   12 |     float leftMedian = median(l.subvec(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmpbr04aqbo.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018subvec\u2019\
    \n   13 |     float rightMedian = median(l.subvec(mid, n - 1));\n      |     \
    \                             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin() + mid + 1, l.begin() + mid);\n    float rightMedian = median(l.begin(),\
    \ l.begin() + mid + 1);\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcaasjjfh.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpcaasjjfh.cpp:11:47: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid)).__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   11 |\
    \     float leftMedian = median(l.begin() + mid + 1, l.begin() + mid);\n     \
    \ |                               ~~~~~~~~~~~~~~~~^~~\n      |               \
    \                                |\n      |                                  \
    \             __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    /tmp/tmpcaasjjfh.cpp:12:39: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   12 |     float rightMedian = median(l.begin(),\
    \ l.begin() + mid + 1);\n      |                                ~~~~~~~^~\n  \
    \    |                                       |\n      |                      \
    \                 std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float median = l[mid];\n    for (long long int i = mid; i < n; i++)\
    \ {\n        if (l[i] < median) median = l[i];\n    }\n    return median;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpg8tmlb47: /tmp/tmpg8tmlb47.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpaw3dkkns: /tmp/tmpaw3dkkns.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin() + mid, l.begin() + l.size() -\
    \ 1);\n    float rightMedian = median(l.begin(), l.begin() + mid);\n    return\
    \ (leftMedian + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqr_d7s7.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpkqr_d7s7.cpp:13:41: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  13 |     float leftMedian = median(l.begin() + mid, l.begin() + l.size() -\
    \ 1);\n      |                               ~~~~~~~~~~^~~~~\n      |        \
    \                                 |\n      |                                 \
    \        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpkqr_d7s7.cpp:14:39:\
    \ error: could not convert \u2018l.std::vector<long int>::begin()\u2019 from \u2018\
    std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} to \u2018std::vector<long int>\u2019\n\
    \   14 |     float rightMedian = median(l.begin(), l.begin() + mid);\n      |\
    \                                ~~~~~~~^~\n      |                          \
    \             |\n      |                                       std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (leftval > rightval) return median(l);\n    if (leftval\
    \ == rightval) return midval;\n    return leftval < midval ? median(l) : rightval;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n    return\
    \ ((a + b) / 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmppfhk7b5v: /tmp/tmppfhk7b5v.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp8rhcdh8d: /tmp/tmp8rhcdh8d.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpqdfajiiu: /tmp/tmpqdfajiiu.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return leftval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpamxwqthq: /tmp/tmpamxwqthq.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.substr(0, mid));\n    float rightMedian\
    \ = median(l.substr(mid));\n    return 0.5 * (leftMedian + rightMedian);\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx64pw7ky.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpx64pw7ky.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018substr\u2019\n   13 |     float leftMedian = median(l.substr(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmpx64pw7ky.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   14 |     float rightMedian = median(l.substr(mid));\n      |            \
    \                      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ if (n % 2 == 0) {\n        return l[mid];\n    } else {\n        return (l[mid]\
    \ + l[mid-1]) / 2;\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpdw6qjz8s: /tmp/tmpdw6qjz8s.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n < 2) return l[0];\n    long long mid = n / 2;\n   \
    \ float a = l[mid];\n    float b = l[n - 1];\n    float c = 0.5 * (a + b);\n \
    \   return c;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpc71jj9qg: /tmp/tmpc71jj9qg.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 2);\n    long long int mid = n / 2;\n   \
    \ float left = (float)l[mid];\n    float right = (float)l[n - 1];\n    if (left\
    \ > right) {\n        return left;\n    } else {\n        return right;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwuh9jvd8: /tmp/tmpwuh9jvd8.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 1) {\n        return l[n / 2];\n    }\n\
    \    float mid = l[n / 2];\n    float leftMedian = median(l.sublist(0, n / 2));\n\
    \    float rightMedian = median(l.sublist((n / 2) + 1, n));\n    return mid +\
    \ ((leftMedian + rightMedian) / 2);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvmjeeey.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpuvmjeeey.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmpuvmjeeey.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist((n / 2) + 1, n));\n      |\
    \                                  ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n < 2) return l[0];\n    long long mid = n / 2;\n   \
    \ float a = l[mid];\n    float b = l[n - 1];\n    return a > b ? b : a;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplj36g3oh: /tmp/tmplj36g3oh.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        std::swap(left, right);\n\
    \    }\n    return left + right / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmppznjrtzs: /tmp/tmppznjrtzs.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return 0;\n    long long int mid = n / 2;\n\
    \    long long int left = l[mid];\n    long long int right = l[n - 1];\n    if\
    \ (left > right) return left;\n    return right;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpn05r59t9: /tmp/tmpn05r59t9.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    if (n % 2 == 0) {\n \
    \       return l[mid];\n    }\n    else {\n        long long int m1 = mid - 1;\n\
    \        long long int m2 = mid + 1;\n        return ((l[m1] + l[m2])/2);\n  \
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3pwgzleg: /tmp/tmp3pwgzleg.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfuh6yj8h: /tmp/tmpfuh6yj8h.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for(long long i = mid;\
    \ i < l.size(); i++) {\n        if(l[i] < median) {\n            median = l[i];\n\
    \        }\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpokceoy6b: /tmp/tmpokceoy6b.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    float m = l[0];\n    for\
    \ (long long int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpv0xs78lv: /tmp/tmpv0xs78lv.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int\
    \ mid = n / 2;\n    long long int left = l[mid];\n    long long int right = l[n\
    \ - 1];\n    if (left > right)\n        return median(l);\n    return left;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0x_g5amm: /tmp/tmp0x_g5amm.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n \
    \       median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) /\
    \ 2;\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpc4glc5gq: /tmp/tmpc4glc5gq.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) return midval;\n\
    \    else return (midval + rightval) / 2.0;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpklrz0e37: /tmp/tmpklrz0e37.cpp:19: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = (l[mid] + l[mid-1]) / 2.0;\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp2hv4fgl9: /tmp/tmp2hv4fgl9.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        std::swap(left, right);\n    }\n    return left\
    \ + (right - left) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4k44ymx4: /tmp/tmp4k44ymx4.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    } else\
    \ {\n        return right;\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpw93bo9k_: /tmp/tmpw93bo9k_.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0x7xma5u: /tmp/tmp0x7xma5u.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median < l[i]) ? l[i] : median;\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpxt9rnzhn: /tmp/tmpxt9rnzhn.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4syif_y0: /tmp/tmp4syif_y0.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyocp21mg: /tmp/tmpyocp21mg.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return a > b ? b :\
    \ a;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpoa_t1gbg: /tmp/tmpoa_t1gbg.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_egtjlmw: /tmp/tmp_egtjlmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float\
    \ mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmperfwb7ba.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmperfwb7ba.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmperfwb7ba.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float median = l[mid];\n    float leftMedian = median(l);\n    float\
    \ rightMedian = median(l.rbegin(), l.rend());\n    if (leftMedian < rightMedian)\
    \ return leftMedian;\n    return rightMedian;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflpznsnh.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpflpznsnh.cpp:13:32: error: \u2018median\u2019 cannot be used as a function\n\
    \   13 |     float leftMedian = median(l);\n      |                          \
    \      ^\n/tmp/tmpflpznsnh.cpp:14:52: error: \u2018median\u2019 cannot be used\
    \ as a function\n   14 |     float rightMedian = median(l.rbegin(), l.rend());\n\
    \      |                                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return 0;\n    long long int mid = n / 2;\n\
    \    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0,mid));\n\
    \    float rightMedian = median(l.sublist(mid+1,n));\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpegfhhd4c.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpegfhhd4c.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,mid));\n\
    \      |                                 ^~~~~~~\n/tmp/tmpegfhhd4c.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid+1,n));\n      |       \
    \                           ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    } else\
    \ {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9spc9_hw: /tmp/tmp9spc9_hw.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpiwe_xd6k: /tmp/tmpiwe_xd6k.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l.sublist(0,mid));\n    float rightMedian = median(l.sublist(mid+1,n));\n\
    \    return midVal + ((leftMedian + rightMedian) / 2);\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9iikmwwc.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp9iikmwwc.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,mid));\n\
    \      |                                 ^~~~~~~\n/tmp/tmp9iikmwwc.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(mid+1,n));\n      |       \
    \                           ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2)\n        return 0;\n    long long int mid\
    \ = n / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0,\
    \ mid));\n    float rightMedian = median(l.sublist(mid+1, n));\n    return midVal\
    \ + (leftMedian + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ih07ttd.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp0ih07ttd.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmp0ih07ttd.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid+1, n));\n      |      \
    \                            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpy_v4azby.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpy_v4azby.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpy_v4azby.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpiw6gsw7d: /tmp/tmpiw6gsw7d.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n     \
    \   median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) / 2.0;\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmppbqj9ksf: /tmp/tmppbqj9ksf.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp5d88mh6l: /tmp/tmp5d88mh6l.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfnitydok: /tmp/tmpfnitydok.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
