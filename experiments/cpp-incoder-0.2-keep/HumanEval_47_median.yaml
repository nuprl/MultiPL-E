name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6,\
  \ 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
  \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
  \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
  \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
  }\n"
completions: ["    long long int n = l.size();\n    if (n <= 1) return l[0];\n   \
    \ long long int mid = n / 2;\n    float midval = l[mid];\n    float leftval =\
    \ l[mid];\n    float rightval = l[n - 1];\n    for (long long int i = mid; i <\
    \ n; i++) {\n        if (l[i] < leftval) leftval = l[i];\n        if (l[i] > rightval)\
    \ rightval = l[i];\n    }\n    return (leftval + rightval) / 2;", "    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float median = l[n / 2];\n    float leftMedian = median;\n    float rightMedian\
    \ = median;\n    for (long long int i = n / 2; i > 0; i /= 2) {\n        if (l[i]\
    \ < leftMedian) {\n            leftMedian = l[i];\n        }\n        if (l[i]\
    \ > rightMedian) {\n            rightMedian = l[i];\n        }\n    }\n    return\
    \ leftMedian + rightMedian;", "    long long int n = l.size();\n    if (n <= 1)\
    \ return l[0];\n    float mid = l[n / 2];\n    float leftMedian = median(l.sublist(0,\
    \ n / 2));\n    float rightMedian = median(l.sublist(n / 2, n));\n    return std::max(leftMedian,\
    \ rightMedian);", "    long long mid = l.size() / 2;\n    if (l.size() % 2 ==\
    \ 0) {\n        return l[mid];\n    }\n    return (float) l[mid] + (float) l[mid\
    \ + 1];", "    long long int n = l.size();\n    if (n <= 1) return l[0];\n   \
    \ long long int mid = n / 2;\n    long long int left = l[mid];\n    long long\
    \ int right = l[n - 1];\n    if (left > right) return median(l);\n    if (n ==\
    \ 2) return left;\n    if (n == 1) return right;\n    if (left == right) return\
    \ left;\n    if (left > right) return median(l);\n    return right;", "    long\
    \ long mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n\
    \        median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1])\
    \ / 2.0;\n    }\n    return median;", "    long long int n = l.size();\n    assert(n\
    \ % 2 == 0);\n    long long int mid = n / 2;\n    long long int l1 = 0, l2 = 0,\
    \ l3 = 0;\n    for (long long int i = 0; i < n; i++) {\n        if (i == mid)\
    \ {\n            l3 = l[i];\n        } else {\n            if (l[i] > l1) {\n\
    \                l2 = l[i];\n                l1 = l1;\n            } else {\n\
    \                l3 = l[i];\n            }\n        }\n    }\n    return l1 +\
    \ l2 + l3;", "    long long int n = l.size();\n    if (n <= 1) return l[0];\n\
    \    long long int mid = n / 2;\n    float a = l[mid];\n    float b = l[n - 1];\n\
    \    return a < b ? b : a;", "    long long int n = l.size();\n    if (n % 2 ==\
    \ 0) {\n        return l[n / 2];\n    }\n    long long int mid = n / 2;\n    float\
    \ leftMedian = median(l.sublist(0, mid));\n    float rightMedian = median(l.sublist(mid,\
    \ n - 1));\n    return 0.5 * (leftMedian + rightMedian);", "    long long int\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n   \
    \ float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian = median(l.sublist(n\
    \ / 2 + 1, n));\n    return mid + ((leftMedian + rightMedian) / 2);", "    long\
    \ long int mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, l.size()));\n    return (leftMedian + rightMedian) /\
    \ 2;", "    long long mid = l.size() / 2;\n    float median = 0;\n    if (l.size()\
    \ % 2 == 0) {\n        median = l[mid];\n    } else {\n        median = (l[mid]\
    \ + l[mid-1]) / 2;\n    }\n    return median;", "    long long mid = l.size()\
    \ / 2;\n    float median = l[mid];\n    for (long long i = mid; i < l.size();\
    \ i++) {\n        median = (median < l[i]) ? l[i] : median;\n    }\n    return\
    \ median;", "    long long mid = l.size() / 2;\n    long long left = l[mid];\n\
    \    long long right = l[mid+1];\n    if (left > right) {\n        std::swap(left,\
    \ right);\n    }\n    return left + (right - left) / 2;", "    long long int n\
    \ = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n / 2;\n \
    \   float midval = l[mid];\n    float leftval = l[mid];\n    float rightval =\
    \ l[n - 1];\n    for (long long int i = 0; i < mid; i++) {\n        if (l[i] <\
    \ leftval) leftval = l[i];\n        if (l[i] > rightval) rightval = l[i];\n  \
    \  }\n    if (leftval == rightval) return midval;\n    if (leftval < rightval)\
    \ return leftval;\n    return rightval;", "    long long mid = l.size() / 2;\n\
    \    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\n    else {\n   \
    \     return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long long int mid = l.size()\
    \ / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (leftval > rightval) {\n        return leftval;\n    }\n\
    \    return rightval;", "    long long mid = l.size() / 2;\n    if (l.size() %\
    \ 2 == 0) {\n        return l[mid];\n    }\n    else {\n        return (l[mid]\
    \ + l[mid-1]) / 2.0;\n    }", "    long long int n = l.size();\n    if (n < 2)\
    \ return l[0];\n    long long int mid = n / 2;\n    float midval = l[mid];\n \
    \   float leftval = l[mid-1];\n    float rightval = l[mid+1];\n    if (midval\
    \ < leftval) return midval;\n    if (midval > rightval) return midval;\n    if\
    \ (leftval < rightval) return leftval;\n    return rightval;", "    long long\
    \ n = l.size();\n    float mid = n / 2.0f;\n    float sum = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    if (n % 2 == 0) {\n \
    \       return sum / 2.0f;\n    } else {\n        return sum / 2.0f + mid;\n \
    \   }", "    long long int n = l.size();\n    long long int mid = n / 2;\n   \
    \ float x = l[mid];\n    float y = l[n - 1];\n    if (x > y) {\n        return\
    \ y;\n    } else {\n        return x;\n    }", "    long long int n = l.size();\n\
    \    if (n % 2 == 0)\n        return l[n/2];\n    else return (float(l[n/2]) +\
    \ float(l[n/2+1]))/2;", "    long long int mid = l.size() / 2;\n    float midValue\
    \ = l[mid];\n    float leftMedian = median(l.begin(), l.begin() + mid);\n    float\
    \ rightMedian = median(l.begin() + mid + 1, l.end());\n    return midValue + ((leftMedian\
    \ + rightMedian) / 2);", "    long long int mid = l.size() / 2;\n    long long\
    \ int left = l[mid];\n    long long int right = l[mid+1];\n    if (left > right)\
    \ {\n        return left;\n    }\n    return right;", "    long long n = l.size();\n\
    \    if (n < 2) return 0;\n    long long mid = n / 2;\n    long long l1 = mid;\n\
    \    long long l2 = n - mid;\n    float l3 = l[mid];\n    float l4 = l[n - 1];\n\
    \    if (l2 < l1) return l2;\n    if (l3 < l1) return l3;\n    if (l4 < l1) return\
    \ l4;\n    if (l2 < l3) return l2;\n    if (l3 < l4) return l3;\n    if (l4 <\
    \ l3) return l4;\n    return l2;", "    long long int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        long long int mid = n / 2;\n        float a = l[mid];\n\
    \        float b = l[mid-1];\n        return ((a + b) / 2);\n    } else {\n  \
    \      long long int mid = n / 2;\n        float a = l[mid];\n        float b\
    \ = l[mid+1];\n        return ((a + b) / 2);\n    }", "    long long int mid =\
    \ l.size() / 2;\n    long long int left = l[mid];\n    long long int right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;", " \
    \   long long ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2\
    \ - 1] + l[ll / 2];\n    }\n    return l[ll / 2];", "    long long int mid = l.size()\
    \ / 2;\n    long long int left = l[mid];\n    long long int right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;", " \
    \   long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long long n\
    \ = l.size();\n    if (n % 2 == 0) {\n        long long mid = n / 2;\n       \
    \ long long left = l[mid];\n        long long right = l[n - 1];\n        if (left\
    \ > right) {\n            return left;\n        } else {\n            return right;\n\
    \        }\n    } else {\n        long long mid = n / 2;\n        long long left\
    \ = l[mid];\n        long long right = l[n - 1];\n        if (left < right) {\n\
    \            return left;\n        } else {\n            return right;\n     \
    \   }\n    }", "    long long int n = l.size();\n    long long int m = n / 2;\n\
    \    if (n % 2 == 0) {\n        return l[m];\n    } else {\n        return (l[m]\
    \ + l[n - 1]) / 2;\n    }", "    long long int mid = l.size() / 2;\n    float\
    \ median = l[mid];\n    for (long long int i = mid; i < l.size(); i++) {\n   \
    \     if (l[i] < median) {\n            median = l[i];\n        }\n    }\n   \
    \ return median;", "    long long n = l.size();\n    if (n <= 1) return l[0];\n\
    \    float m = l[n / 2];\n    for (long long i = 2; i < n; i++) {\n        if\
    \ (l[i] < m) m = l[i];\n    }\n    return m;", "    long long mid = l.size() /\
    \ 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid, l.end());\n    return 0.5 * (leftMedian + rightMedian);", "    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;", "    long long int n = l.size();\n    if\
    \ (n <= 1) return l[0];\n    long long int mid = n / 2;\n    float a = l[mid];\n\
    \    float b = l[n - 1];\n    if (a > b) return median(l);\n    return median(l,\
    \ mid + 1, n - 1);", "    long long int n = l.size();\n    long long int mid =\
    \ n / 2;\n    long long int left = 0, right = mid;\n    float midVal = l[mid];\n\
    \    while(left < right) {\n        long long int midValLeft = l[left];\n    \
    \    long long int midValRight = l[right];\n        if(midValLeft < midValRight)\
    \ {\n            left++;\n        } else {\n            right--;\n        }\n\
    \    }\n    return midVal;", "    long long int mid = l.size() / 2;\n    float\
    \ midVal = l[mid];\n    float leftMedian = median(l.begin(), l.begin() + mid);\n\
    \    float rightMedian = median(l.begin() + mid + 1,\n                       \
    \        l.end());\n    return midVal + ((leftMedian + rightMedian) / 2);", " \
    \   long long int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", " \
    \   long long int mid = l.size() / 2;\n    float median = l[mid];\n    if (l.size()\
    \ % 2 == 0) {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    return median;",
  "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }",
  "    long long n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n\
    \ / 2];\n    float left = 0;\n    float right = n;\n    while (left < right) {\n\
    \        mid = (left + right) / 2;\n        if (l[mid] <= mid) left = mid + 1;\n\
    \        else right = mid - 1;\n    }\n    return mid;", "    long long int mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    return (a+b)/2.0;", "   \
    \ long long mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long\
    \ long int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid\
    \ = n / 2;\n    float leftMedian = median(l.subvec(0, mid));\n    float rightMedian\
    \ = median(l.subvec(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);",
  "    long long int n = l.size();\n    if (n <= 1) return l[0];\n    long long int\
    \ mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);",
  "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", " \
    \   long long mid = l.size() / 2;\n    long long left = l[mid];\n    long long\
    \ right = l[mid+1];\n    if (left < right) {\n        return left;\n    } else\
    \ {\n        return right;\n    }", "    long long ll = l.size();\n    if (ll\
    \ % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[ll / 2];\n    }", "    long long mid = l.size()\
    \ / 2;\n    float median = l[mid];\n    long long left = 0;\n    long long right\
    \ = mid;\n    while (left < right) {\n        long long mid = (left + right) /\
    \ 2;\n        if (l[mid] < median) {\n            left = mid + 1;\n        } else\
    \ {\n            right = mid;\n        }\n    }\n    return median;", "    long\
    \ long mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin() + mid, l.begin() + mid + 1);\n\
    \    float rightMedian = median(l.begin() + mid + 1, l.end());\n    return 0.5\
    \ * (leftMedian + rightMedian);", "    long long int n = l.size();\n    long long\
    \ int m = n / 2;\n    if (n % 2 == 0) {\n        return l[m];\n    } else {\n\
    \        return (l[m] + l[n - 1]) / 2;\n    }", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid]) / 2;\n    }", "    long long int mid = l.size()\
    \ / 2;\n    long long int l1 = l[mid];\n    long long int l2 = l[mid+1];\n   \
    \ if (l1 < l2) {\n        return l1;\n    }\n    return l2;", "    long long int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    } else {\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }", "    long long int n =\
    \ l.size();\n    long long int mid = n / 2;\n    float midval = l[mid];\n    float\
    \ leftval = l[mid-1];\n    float rightval = l[mid+1];\n    if (n == 0 || midval\
    \ < leftval || midval > rightval) {\n        return midval;\n    }\n    if (midval\
    \ < leftval) {\n        return median(l);\n    }\n    return median(l, mid+1,\
    \ n);", "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        return\
    \ l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return\
    \ l[ll / 2];\n    }", "    long long int mid = l.size() / 2;\n    float midval\
    \ = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n \
    \   if (leftval > rightval) {\n        return leftval;\n    }\n    return rightval;",
  "    long long int mid = l.size() / 2;\n    float median = l[mid];\n    for (long\
    \ long int i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n     \
    \       median = l[i];\n        }\n    }\n    return median;", "    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval < rightval) {\n        return\
    \ midval;\n    }\n    return rightval;", "    long long n = l.size();\n    assert(n\
    \ >= 2);\n    float mid = l[n / 2];\n    float left = 0;\n    float right = n;\n\
    \    while (left < right) {\n        mid = (left + right) / 2;\n        if (mid\
    \ < 0)\n            left = mid + 1;\n        else if (mid > n)\n            right\
    \ = mid - 1;\n        else\n            return mid;\n    }\n    return mid;",
  "    long long int mid = l.size() / 2;\n    float midValue = l[mid];\n    float\
    \ leftMedian = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midValue + (leftMedian + rightMedian) / 2;",
  "    long long int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", " \
    \   long mid = l.size() / 2;\n    long left = l[mid];\n    long right = l[mid+1];\n\
    \    if (left > right) {\n        std::swap(left, right);\n    }\n    return left\
    \ + (right - left) / 2;", "    long long mid = l.size() / 2;\n    if (l.size()\
    \ % 2 == 1) {\n        return l[mid];\n    }\n    float midVal = l[mid];\n   \
    \ float leftMedian = median(l.substr(0, mid));\n    float rightMedian = median(l.substr(mid\
    \ + 1, l.size() - mid));\n    return (midVal + leftMedian) / 2.0;", "    long\
    \ long int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long\
    \ int i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median\
    \ : l[i];\n    }\n    return median;", "    long long mid = l.size() / 2;\n  \
    \  if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n    float a = l[mid];\n\
    \    float b = l[mid-1];\n    return ((a + b) / 2.0);", "    long long int n =\
    \ l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n / 2;\n  \
    \  float median = l[mid];\n    for (long long int i = 1; i < n; i++) {\n     \
    \   if (l[i] < median) median = l[i];\n    }\n    return median;", "    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long\
    \ long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long long mid\
    \ = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;", "    long long int n = l.size();\n    if\
    \ (n % 2 == 0) {\n        return l[n/2];\n    }\n    else {\n        return (l[n/2]\
    \ + l[n/2-1])/2;\n    }", "    long long int mid = l.size() / 2;\n    float midval\
    \ = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n \
    \   if (leftval > rightval) {\n        return midval;\n    } else {\n        return\
    \ rightval;\n    }", "    long long int n = l.size();\n    if (n <= 1) return\
    \ l[0];\n    long long int mid = n / 2;\n    float left = (l[mid] - l[mid-1])\
    \ / 2;\n    float right = (l[mid+1] - l[mid]) / 2;\n    if (left > right) return\
    \ median(l);\n    return l[mid];", "    long long int mid = l.size() / 2;\n  \
    \  float median = l[mid];\n    for (long long int i = mid; i < l.size(); i++)\
    \ {\n        if (l[i] < median) {\n            median = l[i];\n        }\n   \
    \ }\n    return median;", "    long long int mid = l.size() / 2;\n    float midVal\
    \ = l[mid];\n    float leftMedian = median(l.begin(), l.begin() + mid);\n    float\
    \ rightMedian = median(l.begin() + mid + 1,\n                               l.end());\n\
    \    return midVal + (leftMedian + rightMedian) / 2;", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n    float\
    \ a = l[mid];\n    float b = l[mid+1];\n    return ((a + b) / 2.0);", "    long\
    \ long mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1,\n                               l.end());\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;", "    long long mid = l.size() / 2;\n    long long left\
    \ = l[mid];\n    long long right = l[mid+1];\n    if (left > right) {\n      \
    \  return left;\n    }\n    return right;", "    long long int mid = l.size()\
    \ / 2;\n    long long int left = l[mid];\n    long long int right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;", " \
    \   long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;",
  "    long long int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    }\n    else {\n        return (l[mid] + l[mid-1]) / 2;\n    }",
  "    long long int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;",
  "    long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    return (float) l[mid] + (float) l[mid+1];", "    long long int n =\
    \ l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n    float m1\
    \ = l[mid];\n    float m2 = l[n - 1];\n    if (m1 < m2)\n        return m1;\n\
    \    return m2;", "    long long mid = l.size() / 2;\n    if (l.size() % 2 ==\
    \ 0) {\n        return l[mid];\n    }\n    float a = l[mid];\n    float b = l[mid+1];\n\
    \    return (b - a) / 2.0;", "    long long int mid = l.size() / 2;\n    float\
    \ midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n\
    \    if (leftval > rightval)\n        return midval;\n    else\n        return\
    \ rightval;", "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        return\
    \ l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return\
    \ l[ll / 2];\n    }", "    long long int n = l.size();\n    if (n <= 1) return\
    \ l[0];\n    long long int mid = n / 2;\n    float midVal = l[mid];\n    float\
    \ leftMedian = median(l.sublist(0, mid));\n    float rightMedian = median(l.sublist(mid,\
    \ n - 1));\n    return midVal + (leftMedian + rightMedian) / 2;", "    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long\
    \ long mid = l.size() / 2;\n    float median = l[mid];\n    for (long long i =\
    \ mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;", "    long long int mid = l.size() / 2;\n    float\
    \ midVal = l[mid];\n    float leftMedian = median(l.begin(), l.begin() + mid);\n\
    \    float rightMedian = median(l.begin() + mid + 1, l.end());\n    return midVal\
    \ + (leftMedian + rightMedian) / 2;", "    long long int mid = l.size() / 2;\n\
    \    float median = l[mid];\n    long long int left = 0, right = mid;\n    while\
    \ (left < right) {\n        long long int mid = (left + right) / 2;\n        if\
    \ (l[mid] < median) {\n            left = mid + 1;\n        } else {\n       \
    \     right = mid;\n        }\n    }\n    return median;", "    long long int\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return 0.5 * (l[mid] + l[mid-1]);\n    }", "    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    return a > b ? b : a;", " \
    \   long long int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid-1];\n    float rightval = l[mid+1];\n    if (leftval > rightval)\n \
    \       return leftval;\n    return rightval;", "    long long int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    else {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2;\n    }", "    long long int n = l.size();\n \
    \   if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float median = (l[n\
    \ / 2] + l[n / 2 - 1]) / 2;\n    return median;", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid-1]) / 2;\n    }", "    long long int mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid-1]) / 2;\n    }", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid]) / 2;\n    }", "    long long int mid = l.size()\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(), l.begin()\
    \ + mid);\n    float rightMedian = median(l.begin() + mid + 1, l.end());\n   \
    \ return midVal + (leftMedian + rightMedian) / 2;", "    long long mid = l.size()\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(), l.begin()\
    \ + mid);\n    float rightMedian = median(l.begin() + mid + 1, l.end());\n   \
    \ return midVal + (leftMedian + rightMedian) / 2;", "    long long int mid = l.size()\
    \ / 2;\n    float median = (l[mid] + l[mid-1]) / 2;\n    return median;", "  \
    \  long long int mid = l.size() / 2;\n    float median = l[mid];\n    for (long\
    \ long int i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n     \
    \       median = l[i];\n        }\n    }\n    return median;", "    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }", "    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long long ll\
    \ = l.size();\n    if (ll % 2 == 0) {\n        return (l[ll/2 - 1] + l[ll/2])\
    \ / 2.0;\n    }\n    else {\n        return (l[ll/2] + l[ll/2 - 1]) / 2.0;\n \
    \   }", "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n   \
    \     return l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n\
    \    }", "    long long int n = l.size();\n    if (n % 2 == 0) {\n        return\
    \ l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }", "  \
    \  long long n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n\
    \    }\n    float m = (l[n / 2] + l[n / 2 - 1]) / 2;\n    return m;", "    long\
    \ long ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] +\
    \ (l[ll / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n\
    \    }", "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n  \
    \      return l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n\
    \    }", "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n  \
    \      return l[mid];\n    }\n    float leftMedian = median(l.begin(), l.begin()\
    \ + mid);\n    float rightMedian = median(l.begin() + mid, l.end());\n    return\
    \ (leftMedian + rightMedian) / 2;", "    long long int mid = l.size() / 2;\n \
    \   if (l.size() % 2 == 0) {\n        return l[mid];\n    }\n    else {\n    \
    \    return (l[mid] + l[mid-1]) / 2;\n    }", "    long long int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float mid = l[n /\
    \ 2];\n    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian\
    \ = median(l.sublist((n / 2) + 1, n));\n    return std::max(leftMedian, rightMedian);",
  "    long long ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 -\
    \ 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n\
    \    }", "    long long int mid = l.size() / 2;\n    float median = l[mid];\n\
    \    for (long long int i = mid; i < l.size(); i++) {\n        median = (median\
    \ > l[i]) ? median : l[i];\n    }\n    return median;", "    long long mid = l.size()\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin() +\
    \ mid + 1, l.begin() + mid);\n    float rightMedian = median(l.begin(), l.begin()\
    \ + mid);\n    return (midVal + rightMedian) / 2.0;", "    long long int n = l.size();\n\
    \    if (n < 2) return l[0];\n    long long int mid = n / 2;\n    float left =\
    \ (l[mid] - l[mid-1]) / 2.0;\n    float right = (l[mid+1] - l[mid]) / 2.0;\n \
    \   if (left > right) return median(l);\n    return l[mid];", "    long long mid\
    \ = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;", " \
    \   long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll/2 - 1] + l[ll/2];\n\
    \    }\n    return l[ll/2];", "    long long int n = l.size();\n    assert(n >=\
    \ 1);\n    long long int mid = n / 2;\n    float median = l[mid];\n    long long\
    \ int left = 0, right = mid;\n    while (left < right) {\n        long long int\
    \ mid = (left + right) / 2;\n        if (l[mid] < median) {\n            left\
    \ = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n \
    \   if (left == right) {\n        return median;\n    }\n    return l[left];",
  "    long long n = l.size();\n    long long mid = n / 2;\n    long long left = 0,\
    \ right = n;\n    float midval = l[mid];\n    while (left < right) {\n       \
    \ while (left < right && l[left] < midval) {\n            left++;\n        }\n\
    \        while (left < right && l[right] > midval) {\n            right--;\n \
    \       }\n        if (left < right) {\n            long long temp = l[left];\n\
    \            l[left] = l[right];\n            l[right] = temp;\n            left++;\n\
    \            right--;\n        }\n    }\n    return midval;", "    long long int\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;", "    long long int n = l.size();\n    if\
    \ (n % 2 == 0) {\n        return l[n/2];\n    }\n    else {\n        return (l[n/2]\
    \ + l[n/2-1])/2.0;\n    }", "    long long ll = l.size();\n    if (ll % 2 == 0)\
    \ {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2 - 1]) / 2;\n    } else\
    \ {\n        return l[ll / 2];\n    }", "    long long int mid = l.size() / 2;\n\
    \    float midVal = l[mid];\n    float leftMedian = median(l.begin(), l.begin()\
    \ + mid);\n    float rightMedian = median(l.begin() + mid + 1, l.end());\n   \
    \ return midVal + (leftMedian + rightMedian) / 2;", "    long long int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return l[n/2];\n    }\n    float m = (l[n/2] +\
    \ l[n/2-1])/2;\n    return m;", "    long long int n = l.size();\n    assert(n\
    \ >= 1);\n    long long int mid = n / 2;\n    long long int left = 0, right =\
    \ mid;\n    float midVal = l[mid];\n    while (left < right) {\n        long long\
    \ int midValLeft = l[left];\n        long long int midValRight = l[right];\n \
    \       if (midValLeft < midValRight) {\n            left++;\n        } else if\
    \ (midValLeft > midValRight) {\n            right--;\n        } else {\n     \
    \       return midVal;\n        }\n    }\n    return midVal;", "    long mid =\
    \ l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    } else\
    \ {\n        return (l[mid] + l[mid]) / 2.0;\n    }", "    long long int n = l.size();\n\
    \    if (n < 2) return l[0];\n    float mid = l[n / 2];\n    float leftMedian\
    \ = median(l.sublist(0, n / 2));\n    float rightMedian = median(l.sublist(n /\
    \ 2, n));\n    return std::max(leftMedian, rightMedian);", "    long long int\
    \ n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int mid\
    \ = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);",
  "    long long ll = l.size();\n    if (ll % 2 == 0)\n        return l[ll/2 - 1]\
    \ + l[ll/2];\n    return l[ll/2];", "    long long int mid = l.size() / 2;\n \
    \   float median = l[mid];\n    for (long long int i = mid; i < l.size(); i++)\
    \ {\n        if (l[i] < median) {\n            median = l[i];\n        }\n   \
    \ }\n    return median;", "    long mid = l.size() / 2;\n    if (l.size() % 2\
    \ == 1) {\n        return l[mid];\n    } else {\n        return (l[mid] + l[mid-1])\
    \ / 2.0;\n    }", "    long long int n = l.size();\n    if (n % 2 == 0) {\n  \
    \      return l[n/2];\n    }\n    else {\n        return (l[n/2] + l[n/2-1])/2;\n\
    \    }", "    long long int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n\
    \        return l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2;\n\
    \    }", "    long long int mid = l.size() / 2;\n    float midValue = l[mid];\n\
    \    float leftMedian = median(l.begin(), l.begin() + mid);\n    float rightMedian\
    \ = median(l.begin() + mid + 1, l.end());\n    if (leftMedian > rightMedian) {\n\
    \        return leftMedian;\n    } else {\n        return rightMedian;\n    }",
  "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return ((a\
    \ + b) / 2.0);", "    long long int mid = l.size() / 2;\n    float median = l[mid];\n\
    \    for (long long int i = mid; i < l.size(); i++) {\n        median = (median\
    \ > l[i]) ? median : l[i];\n    }\n    return median;", "    long long int n =\
    \ l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n / 2;\n  \
    \  float pivot = l[mid];\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return pivot + ((leftMedian\
    \ + rightMedian) / 2);", "    long long int mid = l.size() / 2;\n    if (l.size()\
    \ % 2 == 0) {\n        return l[mid];\n    } else {\n        return (l[mid] +\
    \ l[mid]) / 2.0;\n    }", "    long long int mid = l.size() / 2;\n    float median\
    \ = l[mid];\n    long long int left = 0, right = mid;\n    while (left < right)\
    \ {\n        while (left < right && l[left] < median) {\n            left++;\n\
    \        }\n        while (left < right && l[right] > median) {\n            right--;\n\
    \        }\n        if (left < right) {\n            std::swap(l[left], l[right]);\n\
    \        }\n    }\n    return median;", "    long long int n = l.size();\n   \
    \ if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float mid = n / 2.0;\n\
    \    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian = median(l.sublist(mid,\
    \ n - 1));\n    return 0.5 * (leftMedian + rightMedian);", "    long long int\
    \ mid = l.size() / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n    return\
    \ a > b ? a : b;", "    long long int n = l.size();\n    if (n % 2 == 0) {\n \
    \       return l[n / 2];\n    } else {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2;\n    }", "    long long int n = l.size();\n    if (n <= 1)\n        return\
    \ l[0];\n    long long int mid = n / 2;\n    float midval = l[mid];\n    float\
    \ leftval = l[mid];\n    float rightval = l[n - 1];\n    for (long long int i\
    \ = mid; i < n; i++) {\n        if (l[i] < leftval)\n            leftval = l[i];\n\
    \        else if (l[i] > rightval)\n            rightval = l[i];\n    }\n    return\
    \ midval;", "    long long int mid = l.size() / 2;\n    if (l.size() % 2 == 0)\
    \ {\n        return l[mid];\n    } else {\n        return (l[mid] + l[mid-1])\
    \ / 2.0;\n    }", "    long long int n = l.size();\n    if (n <= 1) return l[0];\n\
    \    long long int mid = n / 2;\n    float leftMedian = median(l.subvec(0, mid));\n\
    \    float rightMedian = median(l.subvec(mid, n - 1));\n    return 0.5 * (leftMedian\
    \ + rightMedian);", "    long long int mid = l.size() / 2;\n    float midVal =\
    \ l[mid];\n    float leftMedian = median(l.begin() + mid + 1, l.begin() + mid);\n\
    \    float rightMedian = median(l.begin(), l.begin() + mid + 1);\n    return midVal\
    \ + (leftMedian + rightMedian) / 2;", "    long long int n = l.size();\n    if\
    \ (n <= 1) return l[0];\n    long long int mid = n / 2;\n    float median = l[mid];\n\
    \    for (long long int i = mid; i < n; i++) {\n        if (l[i] < median) median\
    \ = l[i];\n    }\n    return median;", "    long long int mid = l.size() / 2;\n\
    \    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n        return\
    \ (l[mid] + l[mid-1]) / 2.0;\n    }", "    long long mid = l.size() / 2;\n   \
    \ if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n    float leftMedian\
    \ = median(l.begin() + mid, l.begin() + l.size() - 1);\n    float rightMedian\
    \ = median(l.begin(), l.begin() + mid);\n    return (leftMedian + rightMedian)\
    \ / 2;", "    long long int n = l.size();\n    if (n < 2) return l[0];\n    long\
    \ long int mid = n / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) return median(l);\n\
    \    if (leftval == rightval) return midval;\n    return leftval < midval ? median(l)\
    \ : rightval;", "    long long mid = l.size() / 2;\n    float a = l[mid];\n  \
    \  float b = l[mid+1];\n    return ((a + b) / 2.0);", "    long long int mid =\
    \ l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else\
    \ {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long mid = l.size() /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (leftval > rightval)\n        return leftval;\n    else\n\
    \        return rightval;", "    long long int mid = l.size() / 2;\n    if (l.size()\
    \ % 2 == 0) {\n        return l[mid];\n    }\n    float leftMedian = median(l.substr(0,\
    \ mid));\n    float rightMedian = median(l.substr(mid));\n    return 0.5 * (leftMedian\
    \ + rightMedian);", "    long long int n = l.size();\n    assert(n >= 1);\n  \
    \  long long int mid = n / 2;\n    if (n % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }", "    long long\
    \ n = l.size();\n    if (n < 2) return l[0];\n    long long mid = n / 2;\n   \
    \ float a = l[mid];\n    float b = l[n - 1];\n    float c = 0.5 * (a + b);\n \
    \   return c;", "    long long int n = l.size();\n    assert(n >= 2);\n    long\
    \ long int mid = n / 2;\n    float left = (float)l[mid];\n    float right = (float)l[n\
    \ - 1];\n    if (left > right) {\n        return left;\n    } else {\n       \
    \ return right;\n    }", "    long long int n = l.size();\n    if (n % 2 == 1)\
    \ {\n        return l[n / 2];\n    }\n    float mid = l[n / 2];\n    float leftMedian\
    \ = median(l.sublist(0, n / 2));\n    float rightMedian = median(l.sublist((n\
    \ / 2) + 1, n));\n    return mid + ((leftMedian + rightMedian) / 2);", "    long\
    \ long n = l.size();\n    if (n < 2) return l[0];\n    long long mid = n / 2;\n\
    \    float a = l[mid];\n    float b = l[n - 1];\n    return a > b ? b : a;", " \
    \   long long int mid = l.size() / 2;\n    long long int left = l[mid];\n    long\
    \ long int right = l[mid+1];\n    if (left > right) {\n        std::swap(left,\
    \ right);\n    }\n    return left + right / 2;", "    long long int n = l.size();\n\
    \    if (n < 2) return 0;\n    long long int mid = n / 2;\n    long long int left\
    \ = l[mid];\n    long long int right = l[n - 1];\n    if (left > right) return\
    \ left;\n    return right;", "    long long int n = l.size();\n    long long int\
    \ mid = n / 2;\n    if (n % 2 == 0) {\n        return l[mid];\n    }\n    else\
    \ {\n        long long int m1 = mid - 1;\n        long long int m2 = mid + 1;\n\
    \        return ((l[m1] + l[m2])/2);\n    }", "    long long mid = l.size() /\
    \ 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n   \
    \     return (l[mid] + l[mid-1]) / 2.0;\n    }", "    long long mid = l.size()\
    \ / 2;\n    float median = l[mid];\n    for(long long i = mid; i < l.size(); i++)\
    \ {\n        if(l[i] < median) {\n            median = l[i];\n        }\n    }\n\
    \    return median;", "    long long int n = l.size();\n    if (n <= 1) return\
    \ l[0];\n    float m = l[0];\n    for (long long int i = 1; i < n; i++) {\n  \
    \      if (l[i] < m) m = l[i];\n    }\n    return m;", "    long long int n =\
    \ l.size();\n    if (n <= 1)\n        return l[0];\n    long long int mid = n\
    \ / 2;\n    long long int left = l[mid];\n    long long int right = l[n - 1];\n\
    \    if (left > right)\n        return median(l);\n    return left;", "    long\
    \ long int mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0)\
    \ {\n        median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1])\
    \ / 2;\n    }\n    return median;", "    long long mid = l.size() / 2;\n    float\
    \ midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n\
    \    if (leftval > rightval) return midval;\n    else return (midval + rightval)\
    \ / 2.0;", "    long long mid = l.size() / 2;\n    float median = (l[mid] + l[mid-1])\
    \ / 2.0;\n    return median;", "    long long mid = l.size() / 2;\n    long long\
    \ left = l[mid];\n    long long right = l[mid+1];\n    if (left > right) {\n \
    \       std::swap(left, right);\n    }\n    return left + (right - left) / 2;",
  "    long long int mid = l.size() / 2;\n    long long int left = l[mid];\n    long\
    \ long int right = l[mid+1];\n    if (left > right) {\n        return left;\n\
    \    } else {\n        return right;\n    }", "    long long int mid = l.size()\
    \ / 2;\n    float median = l[mid];\n    for (long long int i = mid; i < l.size();\
    \ i++) {\n        if (l[i] < median) {\n            median = l[i];\n        }\n\
    \    }\n    return median;", "    long long int mid = l.size() / 2;\n    float\
    \ median = l[mid];\n    for (long long int i = mid; i < l.size(); i++) {\n   \
    \     median = (median < l[i]) ? l[i] : median;\n    }\n    return median;", " \
    \   long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long\
    \ long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }", "    long long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    return a > b ? b : a;", " \
    \   long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return\
    \ l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }", "  \
    \  long long n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n\
    \    }\n    float mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian\
    \ + rightMedian);", "    long long int n = l.size();\n    if (n <= 1) return l[0];\n\
    \    long long int mid = n / 2;\n    float median = l[mid];\n    float leftMedian\
    \ = median(l);\n    float rightMedian = median(l.rbegin(), l.rend());\n    if\
    \ (leftMedian < rightMedian) return leftMedian;\n    return rightMedian;", " \
    \   long long int n = l.size();\n    if (n < 2) return 0;\n    long long int mid\
    \ = n / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0,mid));\n\
    \    float rightMedian = median(l.sublist(mid+1,n));\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;", "    long long int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return l[n/2];\n    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    }", "    long long mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n  \
    \      return l[mid];\n    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n\
    \    }", "    long long int n = l.size();\n    long long int mid = n / 2;\n  \
    \  float midVal = l[mid];\n    float leftMedian = median(l.sublist(0,mid));\n\
    \    float rightMedian = median(l.sublist(mid+1,n));\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);", "    long long int n = l.size();\n    if (n < 2)\n  \
    \      return 0;\n    long long int mid = n / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian = median(l.sublist(mid+1,\
    \ n));\n    return midVal + (leftMedian + rightMedian) / 2;", "    long long int\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n    float rightMedian = median(l.begin() + mid + 1, l.end());\n\
    \    return midVal + (leftMedian + rightMedian) / 2;", "    long long mid = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    } else {\n \
    \       return (l[mid] + l[mid-1]) / 2;\n    }", "    long long mid = l.size()\
    \ / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n        median = l[mid];\n\
    \    } else {\n        median = (l[mid] + l[mid-1]) / 2.0;\n    }\n    return\
    \ median;", "    long long int mid = l.size() / 2;\n    float median = l[mid];\n\
    \    for (long long int i = mid; i < l.size(); i++) {\n        median = (median\
    \ > l[i]) ? median : l[i];\n    }\n    return median;", "    long long ll = l.size();\n\
    \    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll / 2] + l[ll / 2\
    \ - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }"]
stop_tokens:
- "\n}"
