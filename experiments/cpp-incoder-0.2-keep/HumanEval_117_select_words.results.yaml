name: HumanEval_117_select_words
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpsz_zifou: /tmp/tmpsz_zifou.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    \n    if (s.empty())\
    \ {\n        return result;\n    }\n    \n    std::string word = \"\";\n    \n\
    \    for (auto c : s) {\n        if (c == ' ') {\n            if (word.length()\
    \ > 0) {\n                result.push_back(word);\n                word = \"\"\
    ;\n            }\n        } else {\n            word += c;\n        }\n    }\n\
    \    \n    if (word.length() > 0) {\n        result.push_back(word);\n    }\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpn1vu8m6v: /tmp/tmpn1vu8m6v.cpp:42: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7ljzvntg: /tmp/tmp7ljzvntg.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpo_zq1ou3: /tmp/tmpo_zq1ou3.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpene_gtfv: /tmp/tmpene_gtfv.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgyme9zqm: /tmp/tmpgyme9zqm.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    long count = 0;\n    for(char c : s) {\n        if(c == ' ') {\n        \
    \    v.push_back(word);\n            word = \"\";\n            count = 0;\n  \
    \          continue;\n        }\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n            count++;\n    \
    \    }\n        if(count == n) {\n            v.push_back(word);\n           \
    \ count = 0;\n            word = \"\";\n        }\n    }\n    if(word != \"\"\
    ) {\n        v.push_back(word);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp6dsun501: /tmp/tmp6dsun501.cpp:42: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if(s.empty())\n       \
    \ return res;\n    \n    std::vector<std::string> temp;\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c ==\
    \ ' ')\n            continue;\n        \n        for(auto &c: temp)\n        \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \      temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c == ' ')\n\
    \            continue;\n        \n        for(auto &c: temp)\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                temp.push_back(c);\n\
    \    \n    for(auto &c: temp)\n        if(c == ' ')\n            continue;\n \
    \       \n        for(auto &c: temp)\n            if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n                temp.push_back(c);\n    \n\
    \    for(auto &c: temp)\n        if(c == ' ')\n            continue;\n       \
    \ \n        for(auto &c: temp)\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n                temp.push_back(c);\n    \n    for(auto\
    \ &c: temp)\n        if(c == ' ')\n            continue;\n        \n        for(auto\
    \ &c: temp)\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n                temp.push_back(c);\n    \n    for(auto &c: temp)\n\
    \        if(c == ' ')\n            continue;\n        \n        for(auto &c: temp)\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c\
    \ == ' ')\n            continue;\n        \n        for(auto &c: temp)\n     \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \         temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c == '\
    \ ')\n            continue;\n        \n        for(auto &c: temp)\n          \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            \
    \    temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c == ' ')\n\
    \            continue;\n        \n        for(auto &\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp149kw6qc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp149kw6qc.cpp:23:29: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   23 |             temp.push_back(c);\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp149kw6qc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7dd2ssbj: /tmp/tmp7dd2ssbj.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || c == 'y') {\n            word += c;\n        }\n        else\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \ }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyp_udzv1: /tmp/tmpyp_udzv1.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpef7q4cpw: /tmp/tmpef7q4cpw.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(\"\
    a\");\n    v.push_back(\"b\");\n    v.push_back(\"c\");\n    v.push_back(\"d\"\
    );\n    v.push_back(\"e\");\n    v.push_back(\"f\");\n    v.push_back(\"g\");\n\
    \    v.push_back(\"h\");\n    v.push_back(\"i\");\n    v.push_back(\"j\");\n \
    \   v.push_back(\"k\");\n    v.push_back(\"l\");\n    v.push_back(\"m\");\n  \
    \  v.push_back(\"n\");\n    v.push_back(\"o\");\n    v.push_back(\"p\");\n   \
    \ v.push_back(\"q\");\n    v.push_back(\"r\");\n    v.push_back(\"s\");\n    v.push_back(\"\
    t\");\n    v.push_back(\"u\");\n    v.push_back(\"v\");\n    v.push_back(\"w\"\
    );\n    v.push_back(\"x\");\n    v.push_back(\"y\");\n    v.push_back(\"z\");\n\
    \    v.push_back(\"A\");\n    v.push_back(\"B\");\n    v.push_back(\"C\");\n \
    \   v.push_back(\"D\");\n    v.push_back(\"E\");\n    v.push_back(\"F\");\n  \
    \  v.push_back(\"G\");\n    v.push_back(\"H\");\n    v.push_back(\"I\");\n   \
    \ v.push_back(\"J\");\n    v.push_back(\"K\");\n    v.push_back(\"L\");\n    v.push_back(\"\
    M\");\n    v.push_back(\"N\");\n    v.push_back(\"O\");\n    v.push_back(\"P\"\
    );\n    v.push_back(\"Q\");\n    v.push_back(\"R\");\n    v.push_back(\"S\");\n\
    \    v.push_back(\"T\");\n    v.push_back(\"U\");\n    v.push_back(\"V\");\n \
    \   v.push_back(\"W\");\n    v.push_back(\"X\");\n    v.push_back(\"Y\");\n  \
    \  v.push_back(\"Z\");\n    v.push_back(\"0\");\n    v.push_back(\"1\");\n   \
    \ v.push_back(\"2\");\n    v.push_back(\"3\");\n    v.push_back(\"4\");\n    v.push_back(\"\
    5\");\n    v.push_back(\"6\");\n    v.push_back(\"7\");\n    v.push_back(\"8\"\
    );\n    v.push_back(\"9\");\n    v.push_back(\"!\");\n    v.push_back(\"?\");\n\
    \    v.push_back(\",\");\n    v.push_back(\";\");\n    v.push_back(\":\");\n \
    \   v.push_back(\"(\");\n    v.push_back(\")\");\n    v.push_back(\"'\");\n  \
    \  v.push_back(\"!\");\n    v.push_back(\"?\");\n    v.\n}\nint main() {\n   \
    \ auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb65dt_tv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpb65dt_tv.cpp:90:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   90 | }\n      | ^\n/tmp/tmpb65dt_tv.cpp:90:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // Write your code here\n    std::vector<std::string> v;\n\
    \    std::string temp;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            v.push_back(s.substr(i, 1));\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpq61ki5x_: /tmp/tmpq61ki5x_.cpp:27: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7dsnfzx_: /tmp/tmp7dsnfzx_.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            v.push_back(s.substr(i, 1));\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptjtbxomj: /tmp/tmptjtbxomj.cpp:25: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(s);\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptle9empo: /tmp/tmptle9empo.cpp:21: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c : s) {\n    \
    \    if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpzrivzify: /tmp/tmpzrivzify.cpp:25: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if (s.empty())\n\
    \        return res;\n    \n    std::string word;\n    \n    for (auto &c: s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c\
    \ == 'y') {\n            word += c;\n        }\n        else if (c == 'n') {\n\
    \            if (word.size() == n) {\n                res.push_back(word);\n \
    \               word.clear();\n            }\n        }\n        else if (c ==\
    \ 's') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 't') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'h') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'l') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'r') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'd') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'c') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'm') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'f') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'v') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'b') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'k') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'p') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'f') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'v') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'b') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'k') {\n            if (\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw16766o2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpw16766o2.cpp:130:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  130 | }\n      | ^\n\
    /tmp/tmpw16766o2.cpp:129:17: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  129 |             if (\n      |                ~^\n      |        \
    \         )\n  130 | }\n      | ~                \n/tmp/tmpw16766o2.cpp:130:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  130 | }\n \
    \     | ^\n/tmp/tmpw16766o2.cpp:131:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  131 | int main() {\n      |            ^\n\
    /tmp/tmpw16766o2.cpp:140:1: error: expected \u2018}\u2019 at end of input\n  140\
    \ | }\n      | ^\n/tmp/tmpw16766o2.cpp:22:22: note: to match this \u2018{\u2019\
    \n   22 |     for (auto &c: s) {\n      |                      ^\n/tmp/tmpw16766o2.cpp:140:1:\
    \ error: expected \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmpw16766o2.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpw16766o2.cpp:140:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  140 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp6g_4hoh9: /tmp/tmp6g_4hoh9.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpql014iin: /tmp/tmpql014iin.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpjcd2lfve: /tmp/tmpjcd2lfve.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if(s.empty())\n \
    \       return res;\n    \n    std::string word = \"\";\n    \n    for(char c:\
    \ s) {\n        if(c == ' ')\n            word += c;\n        else if(c == '.'\
    \ || c == '!' || c == '?' || c == '-' || c == '_' || c == '(' || c == ')' || c\
    \ == '[' || c == ']' || c == '{' || c == '}' || c == ':' || c == ';' || c == '<'\
    \ || c == '>' || c == '/' || c == '\\\\' || c == '|' || c == '&' || c == '%' ||\
    \ c == '+' || c == '=' || c == '^' || c == '~' || c == '*' || c == '?' || c ==\
    \ '!' || c == '#' || c == '$' || c == '%' || c == '&' || c == '(' || c == ')'\
    \ || c == '[' || c == ']' || c == '{' || c == '}' || c == ':' || c == ';' || c\
    \ == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' || c == '&' || c ==\
    \ '%' || c == '+' || c == '=' || c == '^' || c == '~' || c == '*' || c == '?'\
    \ || c == '!' || c == '#' || c == '$' || c == '%' || c == '&' || c == '(' || c\
    \ == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == ':' || c == ';'\
    \ || c == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' || c == '&' ||\
    \ c == '%' || c == '+' || c == '=' || c == '^' || c == '~' || c == '*' || c ==\
    \ '?' || c == '!' || c == '#' || c == '$' || c == '%' || c == '&' || c == '('\
    \ || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == ':' || c\
    \ == ';' || c == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' || c ==\
    \ '&' || c == '%' || c == '+' || c == '=' || c == '^' || c == '~' || c == '*'\
    \ || c == '?' || c == '!' || c == '#' || c == '$' || c == '%' || c == '&' || c\
    \ == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == ':'\
    \ || c == ';' || c == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' ||\
    \ c == '\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5jauvjc.cpp:25:1491: warning: missing terminating ' character\n\
    \   25 |         else if(c == '.' || c == '!' || c == '?' || c == '-' || c ==\
    \ '_' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}'\
    \ || c == ':' || c == ';' || c == '<' || c == '>' || c == '/' || c == '\\\\' ||\
    \ c == '|' || c == '&' || c == '%' || c == '+' || c == '=' || c == '^' || c ==\
    \ '~' || c == '*' || c == '?' || c == '!' || c == '#' || c == '$' || c == '%'\
    \ || c == '&' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c\
    \ == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c == '/' || c == '\\\
    \\' || c == '|' || c == '&' || c == '%' || c == '+' || c == '=' || c == '^' ||\
    \ c == '~' || c == '*' || c == '?' || c == '!' || c == '#' || c == '$' || c ==\
    \ '%' || c == '&' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{'\
    \ || c == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c == '/' || c\
    \ == '\\\\' || c == '|' || c == '&' || c == '%' || c == '+' || c == '=' || c ==\
    \ '^' || c == '~' || c == '*' || c == '?' || c == '!' || c == '#' || c == '$'\
    \ || c == '%' || c == '&' || c == '(' || c == ')' || c == '[' || c == ']' || c\
    \ == '{' || c == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c == '/'\
    \ || c == '\\\\' || c == '|' || c == '&' || c == '%' || c == '+' || c == '=' ||\
    \ c == '^' || c == '~' || c == '*' || c == '?' || c == '!' || c == '#' || c ==\
    \ '$' || c == '%' || c == '&' || c == '(' || c == ')' || c == '[' || c == ']'\
    \ || c == '{' || c == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c\
    \ == '/' || c == '\\\\' || c == '|' || c == '\n      |                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    long count = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n           \
    \ count++;\n        }\n        if (count == n) {\n            v.push_back(word);\n\
    \            count = 0;\n            word = \"\";\n        }\n    }\n    if (word\
    \ != \"\") {\n        v.push_back(word);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp9euxs68d: /tmp/tmp9euxs68d.cpp:36: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // code here\n    std::vector<std::string> v;\n    for(auto\
    \ &c: s)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(c.c_str());\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph0w0nr7c.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmph0w0nr7c.cpp:21:27: error:\
    \ request for member \u2018c_str\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   21 |             v.push_back(c.c_str());\n      |\
    \                           ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    std::string word = \"\";\n    long count = 0;\n \
    \   for (char c : s) {\n        if (c == ' ') {\n            word = \"\";\n  \
    \          count = 0;\n        } else if (c != ' ') {\n            word += c;\n\
    \            count++;\n        }\n        if (count == n) {\n            res.push_back(word);\n\
    \            count = 0;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpoitt2s9e: /tmp/tmpoitt2s9e.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp5np74dms: /tmp/tmp5np74dms.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpsf04s9fe: /tmp/tmpsf04s9fe.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else if(c == 'y'\
    \ || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n           \
    \ v.push_back(word);\n            word = \"\";\n        }\n        else if(c ==\
    \ ' ') {\n            v.push_back(word);\n            word = \"\";\n        }\n\
    \    }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcjphxyw_: /tmp/tmpcjphxyw_.cpp:37: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpsm648vzx: /tmp/tmpsm648vzx.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if(s.empty())\n       \
    \ return res;\n    \n    std::string word = \"\";\n    for(char c : s)\n     \
    \   if(c == ' ')\n            word += c;\n        else\n            word += c;\n\
    \    \n    for(auto &w : select_words(word, n))\n        res.push_back(w);\n \
    \   \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp338214z2: /tmp/tmp338214z2.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // code here\n    std::vector<std::string> v;\n    std::string\
    \ temp;\n    for(size_t i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n\
    \            v.push_back(s[i]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj2s9l7t8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpj2s9l7t8.cpp:20:29: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   20 |             v.push_back(s[i]);\n      |                            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpj2s9l7t8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \     count++;\n        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n\
    \        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \     count++;\n        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n\
    \        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2hli7wue.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp2hli7wue.cpp:75:18: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   75 |             count\n\
    \      |                  ^\n      |                  ;\n   76 | }\n      | ~\
    \                 \n/tmp/tmp2hli7wue.cpp:77:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n   77 | int main() {\n      | \
    \           ^\n/tmp/tmp2hli7wue.cpp:86:1: error: expected \u2018}\u2019 at end\
    \ of input\n   86 | }\n      | ^\n/tmp/tmp2hli7wue.cpp:73:42: note: to match this\
    \ \u2018{\u2019\n   73 |     for(long i = 0; i < s.length(); i++) {\n      | \
    \                                         ^\n/tmp/tmp2hli7wue.cpp:86:1: error:\
    \ expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmp2hli7wue.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp2hli7wue.cpp:86:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   86 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpmg3f9yu4: /tmp/tmpmg3f9yu4.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmph9zxd_q0: /tmp/tmph9zxd_q0.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n     \
    \       v.push_back(word);\n            word = \"\";\n        } else {\n     \
    \       word += s[i];\n        }\n    }\n    v.push_back(word);\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpx57o8tkm: /tmp/tmpx57o8tkm.cpp:30: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpnp0mm18m: /tmp/tmpnp0mm18m.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if(s.empty())\n \
    \       return res;\n    \n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            if(n ==\
    \ 1)\n                res.push_back(s);\n            else\n                res.push_back(s.substr(0,\
    \ s.size() - 1));\n        }\n    }\n    \n    return res;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7td7ygu9: /tmp/tmp7td7ygu9.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) {\n      \
    \  return v;\n    }\n    \n    std::string word = \"\";\n    \n    for (char c\
    \ : s) {\n        if (c == ' ') {\n            v.push_back(word);\n          \
    \  word = \"\";\n        } else {\n            word += c;\n        }\n    }\n\
    \    \n    v.push_back(word);\n    \n    std::vector<std::string> ans;\n    \n\
    \    for (auto &w : v) {\n        if (w.size() == n) {\n            ans.push_back(w);\n\
    \        }\n    }\n    \n    return ans;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpwp3pww8t: /tmp/tmpwp3pww8t.cpp:45: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    long count = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n           \
    \ count++;\n            if (count == n) {\n                v.push_back(word);\n\
    \                count = 0;\n                word = \"\";\n            }\n   \
    \     } else {\n            word += c;\n        }\n    }\n    if (word != \"\"\
    ) {\n        v.push_back(word);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbglmx7ab: /tmp/tmpbglmx7ab.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    std::string temp = \"\";\n    for (char c : s) {\n        if (c == ' ' ||\
    \ c == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c == '/' || c ==\
    \ '\\\\' || c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']'\
    \ || c == '<' || c == '>' || c == '|' || c == '~') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    v.push_back(word);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8h1jfvsf: /tmp/tmp8h1jfvsf.cpp:31: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n        }\n\
    \    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' ||\
    \ i == 'o' || i == 'u' || i == 'y') {\n            count++;\n        }\n    }\n\
    \    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o'\
    \ || i == 'u' || i == 'y') {\n            count++;\n        }\n    }\n    for(auto\
    \ &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u'\
    \ || i == 'y') {\n            count++;\n        }\n    }\n    for(auto &i : s)\
    \ {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i\
    \ == 'y') {\n            count++;\n        }\n    }\n    for(auto &i : s) {\n\
    \        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i\
    \ == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n    \
    \        count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i == 'a'\
    \ || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i == 'a' || i\
    \ == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n\
    \        }\n    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' ||\
    \ i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n    \
    \    }\n    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n        }\n\
    \    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' ||\
    \ i == 'o' || i == 'u' || i == 'y') {\n            count\n}\nint main() {\n  \
    \  auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp77lsa0qg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp77lsa0qg.cpp:75:18: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   75 |             count\n\
    \      |                  ^\n      |                  ;\n   76 | }\n      | ~\
    \                 \n/tmp/tmp77lsa0qg.cpp:77:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n   77 | int main() {\n      | \
    \           ^\n/tmp/tmp77lsa0qg.cpp:86:1: error: expected \u2018}\u2019 at end\
    \ of input\n   86 | }\n      | ^\n/tmp/tmp77lsa0qg.cpp:73:22: note: to match this\
    \ \u2018{\u2019\n   73 |     for(auto &i : s) {\n      |                     \
    \ ^\n/tmp/tmp77lsa0qg.cpp:86:1: error: expected \u2018}\u2019 at end of input\n\
    \   86 | }\n      | ^\n/tmp/tmp77lsa0qg.cpp:14:62: note: to match this \u2018\
    {\u2019\n   14 | std::vector<std::string> select_words(std::string s, long n)\
    \ {\n      |                                                              ^\n\
    /tmp/tmp77lsa0qg.cpp:86:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   86 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(\"\
    a\");\n    v.push_back(\"b\");\n    v.push_back(\"c\");\n    v.push_back(\"d\"\
    );\n    v.push_back(\"e\");\n    v.push_back(\"f\");\n    v.push_back(\"g\");\n\
    \    v.push_back(\"h\");\n    v.push_back(\"i\");\n    v.push_back(\"j\");\n \
    \   v.push_back(\"k\");\n    v.push_back(\"l\");\n    v.push_back(\"m\");\n  \
    \  v.push_back(\"n\");\n    v.push_back(\"o\");\n    v.push_back(\"p\");\n   \
    \ v.push_back(\"q\");\n    v.push_back(\"r\");\n    v.push_back(\"s\");\n    v.push_back(\"\
    t\");\n    v.push_back(\"u\");\n    v.push_back(\"v\");\n    v.push_back(\"w\"\
    );\n    v.push_back(\"x\");\n    v.push_back(\"y\");\n    v.push_back(\"z\");\n\
    \    v.push_back(\"A\");\n    v.push_back(\"B\");\n    v.push_back(\"C\");\n \
    \   v.push_back(\"D\");\n    v.push_back(\"E\");\n    v.push_back(\"F\");\n  \
    \  v.push_back(\"G\");\n    v.push_back(\"H\");\n    v.push_back(\"I\");\n   \
    \ v.push_back(\"J\");\n    v.push_back(\"K\");\n    v.push_back(\"L\");\n    v.push_back(\"\
    M\");\n    v.push_back(\"N\");\n    v.push_back(\"O\");\n    v.push_back(\"P\"\
    );\n    v.push_back(\"Q\");\n    v.push_back(\"R\");\n    v.push_back(\"S\");\n\
    \    v.push_back(\"T\");\n    v.push_back(\"U\");\n    v.push_back(\"V\");\n \
    \   v.push_back(\"W\");\n    v.push_back(\"X\");\n    v.push_back(\"Y\");\n  \
    \  v.push_back(\"Z\");\n    v.push_back(\"0\");\n    v.push_back(\"1\");\n   \
    \ v.push_back(\"2\");\n    v.push_back(\"3\");\n    v.push_back(\"4\");\n    v.push_back(\"\
    5\");\n    v.push_back(\"6\");\n    v.push_back(\"7\");\n    v.push_back(\"8\"\
    );\n    v.push_back(\"9\");\n    v.push_back(\"a\");\n    v.push_back(\"b\");\n\
    \    v.push_back(\"c\");\n    v.push_back(\"d\");\n    v.push_back(\"e\");\n \
    \   v.push_back(\"f\");\n    v.push_back(\"g\");\n    v.push_back(\"h\");\n  \
    \  v.push_back(\"i\");\n    v.push_back(\"j\");\n    v.push_back\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqg12oaw0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpqg12oaw0.cpp:89:16: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   89 |     v.push_back\n\
    \      |                ^\n      |                ;\n   90 | }\n      | ~    \
    \           \n/tmp/tmpqg12oaw0.cpp:89:7: error: statement cannot resolve address\
    \ of overloaded function\n   89 |     v.push_back\n      |     ~~^~~~~~~~~\n/tmp/tmpqg12oaw0.cpp:90:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   90 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplw4d4j19: /tmp/tmplw4d4j19.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n     \
    \       v.push_back(word);\n            word = \"\";\n        } else {\n     \
    \       word += s[i];\n        }\n    }\n    v.push_back(word);\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_jpygr80: /tmp/tmp_jpygr80.cpp:30: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   v.push_back(s);\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7j3jxi6d: /tmp/tmp7j3jxi6d.cpp:25: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpz56j7kdq: /tmp/tmpz56j7kdq.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfucb657q: /tmp/tmpfucb657q.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpb9112ihr: /tmp/tmpb9112ihr.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpizhtiytg: /tmp/tmpizhtiytg.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if (s.empty()) {\n\
    \        return res;\n    }\n    \n    std::string word;\n    \n    for (auto\
    \ &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            word += c;\n        }\n    }\n    \n    long count = 0;\n\
    \    \n    for (auto &c : word) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n \
    \   if (count == n) {\n        res.push_back(word);\n    }\n    \n    for (auto\
    \ &c : word) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            count--;\n        }\n    }\n    \n    if (count == 0)\
    \ {\n        res.push_back(word);\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4s_zr81y: /tmp/tmp4s_zr81y.cpp:55: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_d_lc5ab.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp_d_lc5ab.cpp:118:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n  118 | }\n      | ^\n/tmp/tmp_d_lc5ab.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    for(long\
    \ i=0; i<s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            v.push_back(s.substr(i,\
    \ 1));\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmphzwh4svd: /tmp/tmphzwh4svd.cpp:26: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp88q526vf: /tmp/tmp88q526vf.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    std::string temp = \"\";\n    long count = 0;\n    for (auto c : s) {\n\
    \        if (c == ' ' || c == '.' || c == '!' || c == '?' || c == '-' || c ==\
    \ '_' || c == '/' || c == '\\\\' || c == '(' || c == ')' || c == '[' || c == ']'\
    \ || c == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c == '~' || c\
    \ == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*'\
    \ || c == '(' || c == ')' || c == '-' || c == '_' || c == '+' || c == '=' || c\
    \ == '[' || c == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c == '|'\
    \ || c == '~' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c\
    \ == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '_' || c == '+'\
    \ || c == '=' || c == '[' || c == ']' || c == '{' || c == '}' || c == '<' || c\
    \ == '>' || c == '|' || c == '~' || c == '@' || c == '#' || c == '$' || c == '%'\
    \ || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c\
    \ == '_' || c == '+' || c == '=' || c == '[' || c == ']' || c == '{' || c == '}'\
    \ || c == '<' || c == '>' || c == '|' || c == '~' || c == '@' || c == '#' || c\
    \ == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')'\
    \ || c == '-' || c == '_' || c == '+' || c == '=' || c == '[' || c == ']' || c\
    \ == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c == '~' || c == '@'\
    \ || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c\
    \ == '(' || c == ')' || c == '-' || c == '_' || c == '+' || c == '=' || c == '['\
    \ || c == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c\
    \ == '~' || c == '@' || c == '\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgr0el23f.cpp:20:1507: warning: missing terminating ' character\n\
    \   20 |         if (c == ' ' || c == '.' || c == '!' || c == '?' || c == '-'\
    \ || c == '_' || c == '/' || c == '\\\\' || c == '(' || c == ')' || c == '[' ||\
    \ c == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c ==\
    \ '~' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&'\
    \ || c == '*' || c == '(' || c == ')' || c == '-' || c == '_' || c == '+' || c\
    \ == '=' || c == '[' || c == ']' || c == '{' || c == '}' || c == '<' || c == '>'\
    \ || c == '|' || c == '~' || c == '@' || c == '#' || c == '$' || c == '%' || c\
    \ == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '_'\
    \ || c == '+' || c == '=' || c == '[' || c == ']' || c == '{' || c == '}' || c\
    \ == '<' || c == '>' || c == '|' || c == '~' || c == '@' || c == '#' || c == '$'\
    \ || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c\
    \ == '-' || c == '_' || c == '+' || c == '=' || c == '[' || c == ']' || c == '{'\
    \ || c == '}' || c == '<' || c == '>' || c == '|' || c == '~' || c == '@' || c\
    \ == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '('\
    \ || c == ')' || c == '-' || c == '_' || c == '+' || c == '=' || c == '[' || c\
    \ == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c == '~'\
    \ || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c\
    \ == '*' || c == '(' || c == ')' || c == '-' || c == '_' || c == '+' || c == '='\
    \ || c == '[' || c == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c\
    \ == '|' || c == '~' || c == '@' || c == '\n      |                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpywxq65b0: /tmp/tmpywxq65b0.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(temp);\n\
    \            temp.clear();\n        }\n        else {\n            temp += s[i];\n\
    \        }\n    }\n    if(temp != \"\") {\n        v.push_back(temp);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpeaqw6pfv: /tmp/tmpeaqw6pfv.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpzl2lj9bi: /tmp/tmpzl2lj9bi.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty())\n        return\
    \ v;\n    \n    std::string word = \"\";\n    \n    for (char c : s) {\n     \
    \   if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        \
    \    word += c;\n        }\n        else if (c == 'n') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 't' || c == 'h' || c == 'e' ||\
    \ c == 'l' || c == 'l' || c == 'o' || c == 'd') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 's') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'w') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            if (word.length() >= n) {\n           \
    \     v.push_back(word);\n                word = \"\";\n            }\n      \
    \  }\n        else if (c == 'n') {\n            if (word.length() >= n) {\n  \
    \              v.push_back(word);\n                word = \"\";\n            }\n\
    \        }\n        else if (c == 't' || c == 'h' || c == 'e' || c == 'l' || c\
    \ == 'l' || c == 'o' || c == 'd') {\n            if (word.length() >= n) {\n \
    \               v.push_back(word);\n                word = \"\";\n           \
    \ }\n        }\n        else if (c == 's') {\n            if (word.length() >=\
    \ n) {\n                v.push_back(word);\n                word = \"\";\n   \
    \         }\n        }\n        else if (c == 'w') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n    }\n    \n    if (word.length() >= n) {\n      \
    \  v.push_back(word);\n    }\n    \n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpomjl4jbs: /tmp/tmpomjl4jbs.cpp:89: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if (s.empty()) {\n\
    \        return res;\n    }\n    \n    std::string word;\n    \n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        word = s.substr(i, 1);\n        \n    \
    \    if (word.find_first_of(\"aeiou\") == std::string::npos) {\n            res.push_back(word);\n\
    \        }\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpf5mml5cy: /tmp/tmpf5mml5cy.cpp:35: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkgmel5xu: /tmp/tmpkgmel5xu.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    \n    // Your code here\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpe1a6m10s: /tmp/tmpe1a6m10s.cpp:26: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string temp;\n   \
    \ long count = 0;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n\
    \    if (count == n) {\n        for (auto &c : s) {\n            if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                res.push_back(temp);\n\
    \                temp = \"\";\n            }\n            else {\n           \
    \     temp += c;\n            }\n        }\n        res.push_back(temp);\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n  \
    \  assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp787flsnd: /tmp/tmp787flsnd.cpp:39: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if(s.empty())\n \
    \       return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n     \
    \       else\n                res.push_back(' ');\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \        res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || \n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmuua7w5v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpmuua7w5v.cpp:23:32: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   23 |                 res.push_back(c);\n     \
    \ |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpmuua7w5v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp2cxv081o: /tmp/tmp2cxv081o.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(long i = 0; i < s.length();\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(s[i] == ' ') {\n\
    \                v.push_back(s.substr(i, 1));\n                break;\n      \
    \      }\n            else if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'y') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptgs4sh6i: /tmp/tmptgs4sh6i.cpp:32: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    long count = 0;\n    for(char c: s) {\n        if(c == ' ') {\n       \
    \     if(!word.empty()) {\n                res.push_back(word);\n            \
    \    word = \"\";\n            }\n            count++;\n        }\n        else\
    \ if(c == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c == '~' || c\
    \ == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' || c == '@' || c ==\
    \ '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')'\
    \ || c == '{' || c == '}' || c == ':' || c == '[' || c == ']' || c == '|' || c\
    \ == '~' || c == '?' || c == '.' || c == '!' || c == '?' || c == '-' || c == '_'\
    \ || c == '~' || c == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' ||\
    \ c == '@' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c ==\
    \ '(' || c == ')' || c == '{' || c == '}' || c == ':' || c == '[' || c == ']'\
    \ || c == '|' || c == '~' || c == '?' || c == '.' || c == '!' || c == '?' || c\
    \ == '-' || c == '_' || c == '~' || c == '<' || c == '>' || c == '/' || c == '\\\
    \\' || c == '|' || c == '@' || c == '$' || c == '%' || c == '^' || c == '&' ||\
    \ c == '*' || c == '(' || c == ')' || c == '{' || c == '}' || c == ':' || c ==\
    \ '[' || c == ']' || c == '|' || c == '~' || c == '?' || c == '.' || c == '!'\
    \ || c == '?' || c == '-' || c == '_' || c == '~' || c == '<' || c == '>' || c\
    \ == '/' || c == '\\\\' || c == '|' || c == '@' || c == '$' || c == '%' || c ==\
    \ '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '{' || c == '}'\
    \ || c == ':' || c == '[' || c == ']' || c == '|' || c == '~' || c == '?' || c\
    \ == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c == '~' || c == '<'\
    \ || c == '>' || c == '/' || c == '\\\\' || \n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5s_am89.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpi5s_am89.cpp:27:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   27 | }\n      | ^\n\
    /tmp/tmpi5s_am89.cpp:26:1437: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   26 |         else if(c == '.' || c == '!' || c == '?' || c == '-'\
    \ || c == '_' || c == '~' || c == '<' || c == '>' || c == '/' || c == '\\\\' ||\
    \ c == '|' || c == '@' || c == '$' || c == '%' || c == '^' || c == '&' || c ==\
    \ '*' || c == '(' || c == ')' || c == '{' || c == '}' || c == ':' || c == '['\
    \ || c == ']' || c == '|' || c == '~' || c == '?' || c == '.' || c == '!' || c\
    \ == '?' || c == '-' || c == '_' || c == '~' || c == '<' || c == '>' || c == '/'\
    \ || c == '\\\\' || c == '|' || c == '@' || c == '$' || c == '%' || c == '^' ||\
    \ c == '&' || c == '*' || c == '(' || c == ')' || c == '{' || c == '}' || c ==\
    \ ':' || c == '[' || c == ']' || c == '|' || c == '~' || c == '?' || c == '.'\
    \ || c == '!' || c == '?' || c == '-' || c == '_' || c == '~' || c == '<' || c\
    \ == '>' || c == '/' || c == '\\\\' || c == '|' || c == '@' || c == '$' || c ==\
    \ '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '{'\
    \ || c == '}' || c == ':' || c == '[' || c == ']' || c == '|' || c == '~' || c\
    \ == '?' || c == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c == '~'\
    \ || c == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' || c == '@' ||\
    \ c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c ==\
    \ ')' || c == '{' || c == '}' || c == ':' || c == '[' || c == ']' || c == '|'\
    \ || c == '~' || c == '?' || c == '.' || c == '!' || c == '?' || c == '-' || c\
    \ == '_' || c == '~' || c == '<' || c == '>' || c == '/' || c == '\\\\' ||\n \
    \     |                ~                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) {\n      \
    \  return v;\n    }\n    \n    std::string word = \"\";\n    \n    for (auto c\
    \ : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n    }\n    \n    v.push_back(word);\n\
    \    \n    for (long i = 0; i < n; i++) {\n        std::string word = \"\";\n\
    \        for (auto c : s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                word += c;\n            }\n    \
    \    }\n        \n        v.push_back(word);\n    }\n    \n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbgki5fzk: /tmp/tmpbgki5fzk.cpp:45: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    for(auto &c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        res.push_back(c);\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbpyae00y.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpbpyae00y.cpp:19:28: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   19 |             res.push_back(c);\n      |  \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpbpyae00y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_b"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpccd3jbkf: /tmp/tmpccd3jbkf.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n       \
    \     v.push_back(\"\");\n        } else {\n            v.push_back(s.substr(0,\
    \ i));\n        }\n    }\n    for(long i = 0; i < v.size(); i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            std::string temp = v[i];\n            for(long\
    \ k = 0; k < temp.size(); k++) {\n                if(temp[k] == ' ') {\n     \
    \               temp.erase(temp.begin() + k);\n                }\n           \
    \ }\n            v.erase(v.begin() + i);\n            v.push_back(temp);\n   \
    \     }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmplzcs40ss: /tmp/tmplzcs40ss.cpp:41: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcsj4x1ue: /tmp/tmpcsj4x1ue.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4kibyejm: /tmp/tmp4kibyejm.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    if(!word.empty()) {\n                if(word.size() == n) {\n           \
    \         v.push_back(word);\n                    word = \"\";\n             \
    \   }\n                else {\n                    v.push_back(word);\n      \
    \              word = \"\";\n                }\n            }\n        }\n   \
    \ }\n    if(!word.empty()) {\n        if(word.size() == n) {\n            v.push_back(word);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfn_g2kr6: /tmp/tmpfn_g2kr6.cpp:43: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // code here\n    std::vector<std::string> v;\n    std::string\
    \ word;\n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        }\n        else {\n            word += c;\n        }\n    }\n\
    \    v.push_back(word);\n    return v;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpafvn40jn: /tmp/tmpafvn40jn.cpp:32: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(isalpha(c)) {\n            v.push_back(c.c_str());\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplbrsj2al.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmplbrsj2al.cpp:18:27: error:\
    \ request for member \u2018c_str\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   18 |             v.push_back(c.c_str());\n      |\
    \                           ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpllt5_1um: /tmp/tmpllt5_1um.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkxus3u8b: /tmp/tmpkxus3u8b.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    \n    // Write your\
    \ code here\n    \n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp5resagj2: /tmp/tmp5resagj2.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_sybj8z7: /tmp/tmp_sybj8z7.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    v.push_back(word);\n            word = \"\";\n        }\n    }\n    if(word\
    \ != \"\") {\n        v.push_back(word);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpw0tq3aun: /tmp/tmpw0tq3aun.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp0ay3n961: /tmp/tmp0ay3n961.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if(s.empty())\n       \
    \ return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n          \
    \  else\n                res.push_back(' ');\n    \n    for(auto &c: s)\n    \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            \
    \    res.push_back(c);\n            else\n                res.push_back(' ');\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n            else\n        \
    \        res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == '\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzqu9297i.cpp:69:29: warning: missing terminating ' character\n\
    \   69 |         if(c == 'a' || c == '\n      |                             ^\n\
    /tmp/tmpzqu9297i.cpp:69:29: error: missing terminating ' character\n/tmp/tmpzqu9297i.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmpzqu9297i.cpp:22:32: error: no matching function for\
    \ call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   22 |                 res.push_back(c);\n      |                         \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpzqu9297i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &i : s) {\n    \
    \    for(auto &j : i) {\n            if(j == 'a' || j == 'e' || j == 'i' || j\
    \ == 'o' || j == 'u') {\n                v.push_back(j);\n            }\n    \
    \    }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppo5s2vcv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmppo5s2vcv.cpp:17:23: error:\
    \ \u2018begin\u2019 was not declared in this scope; did you mean \u2018std::begin\u2019\
    ?\n   17 |         for(auto &j : i) {\n      |                       ^\n     \
    \ |                       std::begin\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmppo5s2vcv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmppo5s2vcv.cpp:17:23: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   17 |\
    \         for(auto &j : i) {\n      |                       ^\n      |       \
    \                std::end\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmppo5s2vcv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    for(long i=0;i<s.size();i++) {\n        if(s[i]==' ') {\n            v.push_back(\"\
    \");\n        } else {\n            v.push_back(s.substr(0,i));\n            v.push_back(s.substr(i+1,s.size()));\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl7_hwn05.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpl7_hwn05.cpp:92:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   92\
    \ | int main() {\n      |            ^\n/tmp/tmpl7_hwn05.cpp:101:1: error: expected\
    \ \u2018}\u2019 at end of input\n  101 | }\n      | ^\n/tmp/tmpl7_hwn05.cpp:89:34:\
    \ note: to match this \u2018{\u2019\n   89 |     for(long i=0;i<v.size();i++)\
    \ {\n      |                                  ^\n/tmp/tmpl7_hwn05.cpp:101:1: error:\
    \ expected \u2018}\u2019 at end of input\n  101 | }\n      | ^\n/tmp/tmpl7_hwn05.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpl7_hwn05.cpp:101:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  101 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp68ih0qxl: /tmp/tmp68ih0qxl.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if(s.empty())\n       \
    \ return res;\n    \n    std::string word = \"\";\n    \n    for(char c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            word += c;\n        }\n    }\n    \n    for(char c: word) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            res.push_back(word);\n            word = \"\";\n        }\n \
    \   }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || c == 'y') {\n            word += c;\n       \
    \ }\n    }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            res.push_back(word);\n\
    \            word = \"\";\n        }\n    }\n    \n    for(char c: word) {\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            word += c;\n        }\n    }\n    \n    for(char c: word) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            res.push_back(word);\n            word = \"\";\n        }\n \
    \   }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || c == 'y') {\n            word += c;\n       \
    \ }\n    }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            res.push_back(word);\n\
    \            word = \"\";\n        }\n    }\n    \n    for(char c: word) {\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            word += c;\n        }\n    }\n    \n    for(char c: word) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            res.push_back(word);\n            word = \"\";\n        }\n \
    \   }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == '\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz__4i8oh.cpp:87:65: warning: missing terminating ' character\n\
    \   87 |         if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == '\n \
    \     |                                                                 ^\n/tmp/tmpz__4i8oh.cpp:87:65:\
    \ error: missing terminating ' character\n/tmp/tmpz__4i8oh.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > select_words(std::string, long\
    \ int)\u2019:\n/tmp/tmpz__4i8oh.cpp:88:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   88 | }\n      | ^\n/tmp/tmpz__4i8oh.cpp:87:64: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   87 |         if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == '\n      |           ~         \
    \                                           ^\n      |                       \
    \                                         )\n   88 | }\n      | ~            \
    \                                                   \n/tmp/tmpz__4i8oh.cpp:88:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n \
    \     | ^\n/tmp/tmpz__4i8oh.cpp:89:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   89 | int main() {\n      |            ^\n\
    /tmp/tmpz__4i8oh.cpp:98:1: error: expected \u2018}\u2019 at end of input\n   98\
    \ | }\n      | ^\n/tmp/tmpz__4i8oh.cpp:14:62: note: to match this \u2018{\u2019\
    \n   14 | std::vector<std::string> select_words(std::string s, long n) {\n   \
    \   |                                                              ^\n/tmp/tmpz__4i8oh.cpp:98:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   98 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3zndmoo9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp3zndmoo9.cpp:118:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n  118 | }\n      | ^\n/tmp/tmp3zndmoo9.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if (s.empty())\n\
    \        return res;\n    \n    std::string word = \"\";\n    \n    for (char\
    \ c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y') {\n            word += c;\n        }\n        else if (c == 'n')\
    \ {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 's') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 't') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'h') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'l') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'r') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'd') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'c') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'm') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'f') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'v') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'b') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'k') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'p') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'f') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'w') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'e') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 't') {\n            if (\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpre37yf5q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpre37yf5q.cpp:130:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  130 | }\n      | ^\n\
    /tmp/tmpre37yf5q.cpp:129:17: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  129 |             if (\n      |                ~^\n      |        \
    \         )\n  130 | }\n      | ~                \n/tmp/tmpre37yf5q.cpp:130:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  130 | }\n \
    \     | ^\n/tmp/tmpre37yf5q.cpp:131:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  131 | int main() {\n      |            ^\n\
    /tmp/tmpre37yf5q.cpp:140:1: error: expected \u2018}\u2019 at end of input\n  140\
    \ | }\n      | ^\n/tmp/tmpre37yf5q.cpp:22:22: note: to match this \u2018{\u2019\
    \n   22 |     for (char c : s) {\n      |                      ^\n/tmp/tmpre37yf5q.cpp:140:1:\
    \ error: expected \u2018}\u2019 at end of input\n  140 | }\n      | ^\n/tmp/tmpre37yf5q.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpre37yf5q.cpp:140:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  140 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpb67tfloo: /tmp/tmpb67tfloo.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else if(c == 'n')\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \     else {\n            word += c;\n        }\n    }\n    if(word != \"\") {\n\
    \        v.push_back(word);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp4kkcsooc: /tmp/tmp4kkcsooc.cpp:36: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    for(long i = 0; i < s.size(); i++) {\n        for(long j = i; j < s.size();\
    \ j++) {\n            if(s[i] == s[j]) {\n                v.push_back(s.substr(i,\
    \ j));\n                v.push_back(s.substr(j, s.size()));\n                break;\n\
    \            }\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8pfrmfjn: /tmp/tmp8pfrmfjn.cpp:31: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if(s.empty())\n       \
    \ return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n          \
    \  else\n                res.push_back(' ');\n    \n    for(auto &c: s)\n    \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            \
    \    res.push_back(c);\n            else\n                res.push_back(' ');\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n            else\n        \
    \        res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == '\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8lafdhlf.cpp:69:29: warning: missing terminating ' character\n\
    \   69 |         if(c == 'a' || c == '\n      |                             ^\n\
    /tmp/tmp8lafdhlf.cpp:69:29: error: missing terminating ' character\n/tmp/tmp8lafdhlf.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > select_words(std::string,\
    \ long int)\u2019:\n/tmp/tmp8lafdhlf.cpp:22:32: error: no matching function for\
    \ call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   22 |                 res.push_back(c);\n      |                         \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp8lafdhlf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    word += c;\n            v.push_back(word);\n            word = \"\";\n  \
    \      }\n    }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n \
    \   return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptywgpvk_: /tmp/tmptywgpvk_.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string temp;\n   \
    \ long count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == ' ') {\n            temp.clear();\n            count = 0;\n            for(long\
    \ j = i; j < s.length(); j++) {\n                if(s[j] == ' ') {\n         \
    \           temp.push_back(s[j]);\n                    count++;\n            \
    \    }\n                else if(s[j] == s[i]) {\n                    temp.push_back(s[j]);\n\
    \                    count++;\n                }\n            }\n            if(count\
    \ == n) {\n                res.push_back(temp);\n            }\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpu3hl8cl3: /tmp/tmpu3hl8cl3.cpp:41: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    \n    // Write your\
    \ code here\n    \n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpg813dyf3: /tmp/tmpg813dyf3.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) {\n      \
    \  return v;\n    }\n    std::string word = \"\";\n    for (auto c : s) {\n  \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       word += c;\n        }\n        else if (c == 'n') {\n            if (word.size()\
    \ == n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n    }\n    if (word.size() > 0) {\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp5anqeiv3: /tmp/tmp5anqeiv3.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpck1ov_yw: /tmp/tmpck1ov_yw.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    \n    long count = 0;\n    \n    for(long i = 0; i < v.size(); i++) {\n \
    \       for(long j = 0; j < v[i].size(); j++) {\n            if(v[i][j] == ' ')\
    \ {\n                count++;\n            }\n        }\n        \n        if(count\
    \ == n) {\n            v.erase(v.begin() + i);\n            v.erase(v.begin()\
    \ + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() +\
    \ i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n\
    \            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n  \
    \          v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n    \
    \        v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n      \
    \      v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n        \
    \    v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n          \
    \  v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin()\
    \ + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() +\
    \ i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n\
    \            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n  \
    \          v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n    \
    \        v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n      \
    \      v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n        \
    \    v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n          \
    \  v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin()\
    \ + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() +\
    \ i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n\
    \            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n  \
    \          v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n    \
    \        v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n      \
    \      v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n        \
    \    v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n          \
    \  \n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkdfaajgw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpkdfaajgw.cpp:81:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   81\
    \ | int main() {\n      |            ^\n/tmp/tmpkdfaajgw.cpp:90:1: error: expected\
    \ \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmpkdfaajgw.cpp:21:40:\
    \ note: to match this \u2018{\u2019\n   21 |     for(long i = 0; i < v.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpkdfaajgw.cpp:90:1:\
    \ error: expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmpkdfaajgw.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpkdfaajgw.cpp:90:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   90 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(c != ' ') {\n            v.push_back(c);\n        }\n    }\n    sort(v.begin(),\
    \ v.end());\n    v.erase(unique(v.begin(), v.end()), v.end());\n    for(auto &c:\
    \ v) {\n        if(c != ' ') {\n            if(count(v.begin(), v.end(), c) ==\
    \ n) {\n                v.erase(find(v.begin(), v.end(), c), v.end());\n     \
    \       }\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl70j34_6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpl70j34_6.cpp:18:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   18 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpl70j34_6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp2re2q9_j: /tmp/tmp2re2q9_j.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmph_nfas3z: /tmp/tmph_nfas3z.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n     \
    \       v.push_back(word);\n            word = \"\";\n        } else {\n     \
    \       word += s[i];\n        }\n    }\n    v.push_back(word);\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp2doht9sa: /tmp/tmp2doht9sa.cpp:30: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpq437cpia: /tmp/tmpq437cpia.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpgl5ymjp1: /tmp/tmpgl5ymjp1.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    long start = 0;\n    long\
    \ end = 0;\n    long count = 0;\n    while(end < s.size()) {\n        while(s[end]\
    \ != '\\0' && s[end] != ' ') {\n            end++;\n        }\n        while(s[start]\
    \ != '\\0' && s[start] != ' ') {\n            start++;\n        }\n        if(end\
    \ >= start) {\n            std::string word = s.substr(start, end - start);\n\
    \            while(word.size() > n) {\n                word = word.substr(0, word.size()\
    \ - 1);\n            }\n            if(res.find(word) == res.end()) {\n      \
    \          res.push_back(word);\n                count++;\n            }\n   \
    \     }\n        end++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw2xjhkjd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpw2xjhkjd.cpp:31:20: error:\
    \ \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member\
    \ named \u2018find\u2019\n   31 |             if(res.find(word) == res.end())\
    \ {\n      |                    ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    long count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n    \
    \        if (count >= n) {\n                res.push_back(word);\n           \
    \     word = \"\";\n                count = 0;\n            }\n        } else\
    \ {\n            word += c;\n            count++;\n        }\n    }\n    if (count\
    \ >= n) {\n        res.push_back(word);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpcq7_zy1o: /tmp/tmpcq7_zy1o.cpp:37: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if(c\
    \ == ' ') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  } else {\n            word += c;\n        }\n    }\n    v.push_back(word);\n\
    \    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpe7bne4c5: /tmp/tmpe7bne4c5.cpp:31: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpyywxl0a5: /tmp/tmpyywxl0a5.cpp:25: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == ' ') {\n            word = word + s[i];\n            count = 0;\n       \
    \ } else {\n            word = word + s[i];\n            count++;\n          \
    \  if(count == n) {\n                res.push_back(word);\n                word\
    \ = \"\";\n                count = 0;\n            }\n        }\n    }\n    if(word\
    \ != \"\") {\n        res.push_back(word);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmps4kof69w: /tmp/tmps4kof69w.cpp:39: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    \n    std::string word = \"\";\n    \n    for (char\
    \ c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n    }\n    \n    long count = 0;\n   \
    \ \n    for (char c : word) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    if\
    \ (count == n) {\n        res.push_back(word);\n    }\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_x5n5sg4: /tmp/tmp_x5n5sg4.cpp:44: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for (auto &i : s) {\n        if (i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u') {\n            v.push_back(temp);\n           \
    \ temp.clear();\n            count++;\n        }\n        temp += i;\n    }\n\
    \    if (count != n) {\n        v.push_back(temp);\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpt06cigaa: /tmp/tmpt06cigaa.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpt7c_ytr7: /tmp/tmpt7c_ytr7.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    \n    std::string word;\n    \n    for (auto &c:\
    \ s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n    }\n    \n    std::vector<std::string>\
    \ words;\n    \n    for (auto &c: word) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            words.push_back(word);\n  \
    \          word = \"\";\n        }\n        else {\n            word += c;\n \
    \       }\n    }\n    \n    \n    for (auto &c: words) {\n        if (words.size()\
    \ == n) {\n            res.push_back(c);\n        }\n    }\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpa_iueucb: /tmp/tmpa_iueucb.cpp:51: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    \n    std::vector<std::string> words;\n    \n   \
    \ for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            words.push_back(c);\n        }\n    }\n    \n  \
    \  sort(words.begin(), words.end());\n    \n    for (auto &c: words) {\n     \
    \   if (count(words.begin(), words.end(), c) == n) {\n            res.push_back(c);\n\
    \        }\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86t1ukkc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp86t1ukkc.cpp:24:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   24 |             words.push_back(c);\n      |\
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp86t1ukkc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       pu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    for(auto &i : s) {\n\
    \        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y')\
    \ {\n            v.push_back(i);\n        }\n    }\n    \n    return v;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kbd39fk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp0kbd39fk.cpp:19:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   19 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp0kbd39fk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        temp = s.substr(i, 1);\n        if(temp.find_first_not_of(\"\
    aeiou\") == std::string::npos) {\n            v.push_back(temp);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8cyb5qlv: /tmp/tmp8cyb5qlv.cpp:27: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == '\
    \ ') {\n            v.push_back(temp);\n            temp.clear();\n          \
    \  count++;\n        } else {\n            temp += s[i];\n        }\n        if(count\
    \ == n) {\n            v.push_back(temp);\n            temp.clear();\n       \
    \     count = 0;\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmps8f6ybdz: /tmp/tmps8f6ybdz.cpp:36: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else if(c == 'n')\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \     else {\n            word += c;\n        }\n    }\n    if(word != \"\") {\n\
    \        v.push_back(word);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp_gj18hlh: /tmp/tmp_gj18hlh.cpp:36: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty())\n        return\
    \ v;\n    \n    long start = 0;\n    long end = 0;\n    long count = 0;\n    \n\
    \    for (long i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n    \
    \        count++;\n            if (count == n) {\n                v.push_back(s.substr(start,\
    \ i - start));\n                start = i + 1;\n                count = 0;\n \
    \           }\n        }\n    }\n    v.push_back(s.substr(start, s.length() -\
    \ start));\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpt9wbcirb: /tmp/tmpt9wbcirb.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    std::string word = \"\";\n    long count = 0;\n \
    \   for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n            count++;\n            if\
    \ (count == n) {\n                res.push_back(word);\n                count\
    \ = 0;\n                word = \"\";\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpag2salgb: /tmp/tmpag2salgb.cpp:36: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    v.push_back(word);\n            word = \"\";\n        }\n    }\n    if(word\
    \ != \"\") {\n        v.push_back(word);\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpj5oh5317: /tmp/tmpj5oh5317.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // code here\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfsoxd5j2: /tmp/tmpfsoxd5j2.cpp:19: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) {\n      \
    \  return v;\n    }\n    std::string word = \"\";\n    long count = 0;\n    for\
    \ (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            word += c;\n            count++;\n            if (count\
    \ == n) {\n                v.push_back(word);\n                count = 0;\n  \
    \              word = \"\";\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpjt154rxo: /tmp/tmpjt154rxo.cpp:36: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) return v;\n\
    \    \n    std::string word;\n    \n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        word = s.substr(i, 1);\n        \n        if (word.find_first_not_of(\"\
    aeiou\") == std::string::npos) {\n            v.push_back(word);\n        }\n\
    \    }\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp9ks6zd_2: /tmp/tmp9ks6zd_2.cpp:32: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    long count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n      \
    \      v.push_back(word);\n            word = \"\";\n            count = 0;\n\
    \        } else if (c != ' ') {\n            word += c;\n            count++;\n\
    \        }\n    }\n    if (word != \"\") {\n        v.push_back(word);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpwlc3lx7v: /tmp/tmpwlc3lx7v.cpp:35: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   v.push_back(c);\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpylyygrst.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpylyygrst.cpp:18:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   18 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpylyygrst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp0lxsk8yd: /tmp/tmp0lxsk8yd.cpp:25: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpvhe2nlph: /tmp/tmpvhe2nlph.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptz4v645m: /tmp/tmptz4v645m.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbo4irn3d: /tmp/tmpbo4irn3d.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    \n    // Write your\
    \ code here\n    \n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp1r76kmwv: /tmp/tmp1r76kmwv.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &c: s) {\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n\
    \            v.push_back(c);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8eeb__x5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp8eeb__x5.cpp:18:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   18 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp8eeb__x5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8e1torvj: /tmp/tmp8e1torvj.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(long i = 0; i < s.size(); i++) {\n     \
    \   if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long i =\
    \ 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n    \
    \    }\n    }\n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(long i = 0; i < s.size(); i++) {\n     \
    \   if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long i =\
    \ 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n    \
    \    }\n    }\n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.size(); i++) {\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd81gej2z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpd81gej2z.cpp:80:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   80\
    \ | int main() {\n      |            ^\n/tmp/tmpd81gej2z.cpp:89:1: error: expected\
    \ \u2018}\u2019 at end of input\n   89 | }\n      | ^\n/tmp/tmpd81gej2z.cpp:14:62:\
    \ note: to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpd81gej2z.cpp:89:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   89 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp23qpcwx8: /tmp/tmp23qpcwx8.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n     \
    \       v.push_back(word);\n            word = \"\";\n        } else {\n     \
    \       word += s[i];\n        }\n    }\n    v.push_back(word);\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpblo4s4xq: /tmp/tmpblo4s4xq.cpp:30: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    \n    // Write your\
    \ code here\n    \n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfe1f7nir: /tmp/tmpfe1f7nir.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkqadnxbc: /tmp/tmpkqadnxbc.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n     \
    \       v.push_back(word);\n            word = \"\";\n        } else {\n     \
    \       word += s[i];\n        }\n    }\n    v.push_back(word);\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqsnok9wn: /tmp/tmpqsnok9wn.cpp:30: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word;\n    for\
    \ (size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i, 1);\n      \
    \  if (word.size() == n) {\n            v.push_back(word);\n        }\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpob7lunkr: /tmp/tmpob7lunkr.cpp:27: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> result;\n    \n    // Write your\
    \ code here\n    \n    return result;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpg8dak3y8: /tmp/tmpg8dak3y8.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    for(char c : s) {\n        if(c == ' ' || c == '\\t' || c == '\\n' || c\
    \ == '\\r') {\n            if(!word.empty()) {\n                res.push_back(word);\n\
    \                word = \"\";\n            }\n        } else {\n            word\
    \ += c;\n        }\n    }\n    if(!word.empty()) {\n        res.push_back(word);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbda52h1p: /tmp/tmpbda52h1p.cpp:34: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word;\n    for(long\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(word);\n\
    \            word.clear();\n        } else {\n            word += s[i];\n    \
    \    }\n    }\n    v.push_back(word);\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7d5p6w3q: /tmp/tmp7d5p6w3q.cpp:30: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(long i=0; i<s.length();\
    \ i++) {\n        for(long j=0; j<s.length(); j++) {\n            if(s[i]==s[j]\
    \ && s[i]!=' ') {\n                v.push_back(s.substr(i, j));\n            \
    \    i = j;\n            }\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpmj_qa6hv: /tmp/tmpmj_qa6hv.cpp:28: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp1sfte8td: /tmp/tmp1sfte8td.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    for(auto &c: s) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        res.push_back(c);\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflj_59gb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpflj_59gb.cpp:19:28: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   19 |             res.push_back(c);\n      |  \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpflj_59gb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_b"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if(s.empty())\n \
    \       return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(n == 1)\n             \
    \   res.push_back(c);\n            else\n                res.push_back(\"a\" +\
    \ c);\n        else if(c == 'b')\n            if(n == 1)\n                res.push_back(c);\n\
    \            else\n                res.push_back(\"b\" + c);\n        else if(c\
    \ == 'c')\n            if(n == 1)\n                res.push_back(c);\n       \
    \     else\n                res.push_back(\"c\" + c);\n        else if(c == 'd')\n\
    \            if(n == 1)\n                res.push_back(c);\n            else\n\
    \                res.push_back(\"d\" + c);\n        else if(c == 'f')\n      \
    \      if(n == 1)\n                res.push_back(c);\n            else\n     \
    \           res.push_back(\"f\" + c);\n        else if(c == 'g')\n           \
    \ if(n == 1)\n                res.push_back(c);\n            else\n          \
    \      res.push_back(\"g\" + c);\n        else if(c == 'h')\n            if(n\
    \ == 1)\n                res.push_back(c);\n            else\n               \
    \ res.push_back(\"h\" + c);\n        else if(c == 'j')\n            if(n == 1)\n\
    \                res.push_back(c);\n            else\n                res.push_back(\"\
    j\" + c);\n        else if(c == 'k')\n            if(n == 1)\n               \
    \ res.push_back(c);\n            else\n                res.push_back(\"k\" + c);\n\
    \        else if(c == 'l')\n            if(n == 1)\n                res.push_back(c);\n\
    \            else\n                res.push_back(\"l\" + c);\n        else if(c\
    \ == 'm')\n            if(n == 1)\n                res.push_back(c);\n       \
    \     else\n                res.push_back(\"m\" + c);\n        else if(c == 'n')\n\
    \            if(n == 1)\n                res.push_back(c);\n            else\n\
    \                res.push_back(\"n\" + c);\n        else if(c == 'p')\n      \
    \      if(n == 1)\n                res.push_back(c);\n            else\n     \
    \           res.push_back(\"p\" + c);\n        else if(c == 'q')\n           \
    \ if(n == 1)\n                res.push_back(c);\n            else\n          \
    \      res.push_back(\"q\" + c);\n        else if(c == 'r')\n            if(n\
    \ == 1)\n                res.push_back(c);\n            else\n               \
    \ res.push_back(\"r\" + c);\n        else if(c == 's')\n            if(n == 1)\n\
    \                res.push_back(c);\n            else\n                res.push_back(\"\
    s\" + c);\n        else if(c == 't')\n            if(n == 1)\n               \
    \ res.\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp709dga72.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp709dga72.cpp:23:32: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   23 |                 res.push_back(c);\n     \
    \ |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp709dga72.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmptaa9v8k8: /tmp/tmptaa9v8k8.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmps7m1a61p: /tmp/tmps7m1a61p.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7hv_9h5t: /tmp/tmp7hv_9h5t.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == '\
    \ ') {\n            v.push_back(temp);\n            temp.clear();\n          \
    \  count = 0;\n        } else {\n            temp += s[i];\n            count++;\n\
    \            if(count == n) {\n                v.push_back(temp);\n          \
    \      temp.clear();\n                count = 0;\n            }\n        }\n \
    \   }\n    v.push_back(temp);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp10h2buqq: /tmp/tmp10h2buqq.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // Write your code here\n    std::vector<std::string> v;\n\
    \    for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i' || i\
    \ == 'o' || i == 'u')\n        {\n            v.push_back(i);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4hw9zrrn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp4hw9zrrn.cpp:21:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   21 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4hw9zrrn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    long count = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n           \
    \ count++;\n            if (count == n) {\n                v.push_back(word);\n\
    \                count = 0;\n                word = \"\";\n            }\n   \
    \     }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpkazy_8n9: /tmp/tmpkazy_8n9.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word;\n    for(long\
    \ i=0; i<s.length(); i++) {\n        word = s.substr(i, 1);\n        if(word.length()\
    \ == n) {\n            v.push_back(word);\n        }\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp43k1tjpk: /tmp/tmp43k1tjpk.cpp:27: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    if(word.size() == n) {\n                res.push_back(word);\n          \
    \      word = \"\";\n            }\n            else {\n                word =\
    \ \"\";\n            }\n        }\n    }\n    if(word.size() > 0) {\n        res.push_back(word);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpq14q9aa4: /tmp/tmpq14q9aa4.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    for(auto &c: s) {\n\
    \        if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n     \
    \   }\n    }\n    \n    for(auto &c: v) {\n        if(n == 1) {\n            v.erase(std::remove(v.begin(),\
    \ v.end(), c), v.end());\n        }\n        \n        for(auto &c: v) {\n   \
    \         if(isalpha(c)) {\n                v.erase(std::remove(v.begin(), v.end(),\
    \ c), v.end());\n            }\n        }\n    }\n    \n    return v;\n}\nint\
    \ main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp05j8v_r4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp05j8v_r4.cpp:29:25: error:\
    \ no matching function for call to \u2018isalpha(std::__cxx11::basic_string<char>&)\u2019\
    \n   29 |             if(isalpha(c)) {\n      |                         ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cctype:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp05j8v_r4.cpp:2:\n/usr/include/ctype.h:112:1: note:\
    \ candidate: \u2018int isalpha(int)\u2019\n  112 | __exctype (isalpha);\n    \
    \  | ^~~~~~~~~\n/usr/include/ctype.h:112:1: note:   no known conversion for argument\
    \ 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\n  112\
    \ | __exctype (isalpha);\n      | ^~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp05j8v_r4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2599:5:\
    \ note: candidate: \u2018template<class _CharT> bool std::isalpha(_CharT, const\
    \ std::locale&)\u2019\n 2599 |     isalpha(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2599:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp05j8v_r4.cpp:29:25:\
    \ note:   candidate expects 2 arguments, 1 provided\n   29 |             if(isalpha(c))\
    \ {\n      |                         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    if(word.size() == n) {\n                v.push_back(word);\n            \
    \    word = \"\";\n            }\n            else {\n                word +=\
    \ c;\n            }\n        }\n    }\n    if(word.size() > 0) {\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp151qfop8: /tmp/tmp151qfop8.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    if(!word.empty()) {\n                v.push_back(word);\n               \
    \ word = \"\";\n            }\n            if(c == ' ') {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n    }\n    if(!word.empty())\
    \ {\n        v.push_back(word);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprw1zf8gm: /tmp/tmprw1zf8gm.cpp:39: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    if (s.empty()) {\n\
    \        return res;\n    }\n    \n    std::vector<std::string> words;\n    \n\
    \    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            words.push_back(c);\n        }\n    }\n    \n\
    \    for (auto &w : words) {\n        if (w.size() == n) {\n            res.push_back(w);\n\
    \        }\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxktheomt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpxktheomt.cpp:25:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   25 |             words.push_back(c);\n      |\
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxktheomt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       pu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    std::string temp;\n   \
    \ long count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] ==\
    \ ' ') {\n            temp.clear();\n            count = 0;\n            for(int\
    \ j = i; j < s.size(); j++) {\n                if(s[j] == ' ') {\n           \
    \         temp.push_back(s[j]);\n                    count++;\n              \
    \  }\n            }\n            if(count == n) {\n                res.push_back(temp);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpbqbqvngt: /tmp/tmpbqbqvngt.cpp:37: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n        else if (c ==\
    \ 'n') {\n            v.push_back(word);\n            word = \"\";\n        }\n\
    \    }\n    if (word != \"\") {\n        v.push_back(word);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp2ke9066z: /tmp/tmp2ke9066z.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    \n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n \
    \           v.push_back(\"\");\n        } else {\n            v.push_back(s[i]);\n\
    \        }\n    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long\
    \ j = i + 1; j < v.size(); j++) {\n            for(long k = 0; k < n; k++) {\n\
    \                if(v[i] == v[j] && v[i] != \"\") {\n                    v.erase(v.begin()\
    \ + j);\n                }\n            }\n        }\n    }\n    \n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptfvh8rw0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmptfvh8rw0.cpp:23:29: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   23 |             v.push_back(s[i]);\n      |                            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptfvh8rw0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word;\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        word = s.substr(i, 1);\n        if(word.find_first_not_of(\"\
    aeiou\") == std::string::npos) {\n            v.push_back(word);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp6f4ncc8z: /tmp/tmp6f4ncc8z.cpp:27: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpomj2lr4q: /tmp/tmpomj2lr4q.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(long i=0; i<s.length();\
    \ i++) {\n        for(long j=0; j<s.length(); j++) {\n            if(s[i]==s[j]\
    \ && s[i]!=' ') {\n                v.push_back(s.substr(i, j+1));\n          \
    \      i = j+1;\n            }\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp9ix2sbuy: /tmp/tmp9ix2sbuy.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) {\n      \
    \  return v;\n    }\n    \n    std::string word = \"\";\n    \n    for (auto c\
    \ : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n        else if (c == 'y') {\n       \
    \     word += c;\n        }\n        else if (c == 'n') {\n            word +=\
    \ c;\n        }\n        else if (c == 't') {\n            word += c;\n      \
    \  }\n        else if (c == 'h') {\n            word += c;\n        }\n      \
    \  else if (c == 'l') {\n            word += c;\n        }\n        else if (c\
    \ == 's') {\n            word += c;\n        }\n        else if (c == 'd') {\n\
    \            word += c;\n        }\n        else if (c == 'r') {\n           \
    \ word += c;\n        }\n        else if (c == 'p') {\n            word += c;\n\
    \        }\n        else if (c == 'f') {\n            word += c;\n        }\n\
    \        else if (c == 'w') {\n            word += c;\n        }\n        else\
    \ if (c == 'c') {\n            word += c;\n        }\n        else if (c == 'm')\
    \ {\n            word += c;\n        }\n        else if (c == 'a') {\n       \
    \     word += c;\n        }\n        else if (c == 'b') {\n            word +=\
    \ c;\n        }\n        else if (c == 'k') {\n            word += c;\n      \
    \  }\n        else if (c == 'j') {\n            word += c;\n        }\n      \
    \  else if (c == 'v') {\n            word += c;\n        }\n        else if (c\
    \ == 'z') {\n            word += c;\n        }\n        else if (c == 'n') {\n\
    \            word += c;\n        }\n        else if (c == 'm') {\n           \
    \ word += c;\n        }\n        else if (c == 'y') {\n            word += c;\n\
    \        }\n        else if (c == 't') {\n            word += c;\n        }\n\
    \        else if (c == 'l') {\n            word += c;\n        }\n        else\
    \ if (c == 'k') {\n            word += c;\n        }\n        else if (c == 'h')\
    \ {\n            word += c;\n        }\n        else if (c == 'r') {\n       \
    \     word += c;\n        }\n        else if (c == 'p') {\n            word +=\
    \ c;\n        }\n        else if (c == 'f') {\n            word += c;\n      \
    \  }\n        else if (c == 'w') {\n            word += c;\n        }\n      \
    \  else if (c == 'c') {\n            word += c;\n        }\n        else if (c\
    \ == 'a') {\n            word += c;\n        }\n        else if (c == 'b') {\n\
    \            word += c;\n        }\n        else if (c == 'k') {\n           \
    \ word += c;\n        }\n        else if (c == 'j') {\n            word += c;\n\
    \n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpal1u4kqp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpal1u4kqp.cpp:132:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  132\
    \ | int main() {\n      |            ^\n/tmp/tmpal1u4kqp.cpp:141:1: error: expected\
    \ \u2018}\u2019 at end of input\n  141 | }\n      | ^\n/tmp/tmpal1u4kqp.cpp:22:22:\
    \ note: to match this \u2018{\u2019\n   22 |     for (auto c : s) {\n      | \
    \                     ^\n/tmp/tmpal1u4kqp.cpp:141:1: error: expected \u2018}\u2019\
    \ at end of input\n  141 | }\n      | ^\n/tmp/tmpal1u4kqp.cpp:14:62: note: to\
    \ match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpal1u4kqp.cpp:141:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  141 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpscwfs43y: /tmp/tmpscwfs43y.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // code here\n    std::vector<std::string> v;\n    \n    for(auto\
    \ &c: s)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(c);\n\
    \        }\n    }\n    \n    return v;\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx7h1oucq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpx7h1oucq.cpp:22:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   22 |             v.push_back(c);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpx7h1oucq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else if(c == 'n')\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \ }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpe3eo72rc: /tmp/tmpe3eo72rc.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    for(auto &i : s) {\n    \
    \    if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n        \
    \    v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"\
    ), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe31grxft.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpe31grxft.cpp:18:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   18 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpe31grxft.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    \n    long start = 0;\n    long end = s.size();\n    long count = 0;\n  \
    \  \n    while(start < end) {\n        while(count < n && s[start] != 'a' && s[start]\
    \ != 'e' && s[start] != 'i' && s[start] != 'o' && s[start] != 'u' && s[start]\
    \ != 'y' && s[start] != 'A' && s[start] != 'E' && s[start] != 'I' && s[start]\
    \ != 'O' && s[start] != 'U' && s[start] != 'Y' && s[start] != 'a' && s[start]\
    \ != 'e' && s[start] != 'i' && s[start] != 'o' && s[start] != 'u' && s[start]\
    \ != 'y' && s[start] != 'A' && s[start] != 'E' && s[start] != 'I' && s[start]\
    \ != 'O' && s[start] != 'U' && s[start] != 'Y') {\n            ++count;\n    \
    \        ++start;\n        }\n        \n        while(count < n && s[end] != 'a'\
    \ && s[end] != 'e' && s[end] != 'i' && s[end] != 'o' && s[end] != 'u' && s[end]\
    \ != 'y' && s[end] != 'A' && s[end] != 'E' && s[end] != 'I' && s[end] != 'O' &&\
    \ s[end] != 'U' && s[end] != 'Y' && s[end] != 'a' && s[end] != 'e' && s[end] !=\
    \ 'i' && s[end] != 'o' && s[end] != 'u' && s[end] != 'y' && s[end] != 'A' && s[end]\
    \ != 'E' && s[end] != 'I' && s[end] != 'O' && s[end] != 'U' && s[end] != 'Y')\
    \ {\n            --end;\n            --count;\n        }\n        \n        if(count\
    \ >= n) {\n            v.push_back(s.substr(start, end - start));\n          \
    \  start = end;\n            end = s.size();\n            count = 0;\n       \
    \ }\n    }\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            v.push_back(temp);\n            temp.clear();\n\
    \            count++;\n        }\n        else {\n            temp += c;\n   \
    \     }\n    }\n    if(temp != \"\") {\n        v.push_back(temp);\n    }\n  \
    \  for(auto it: v) {\n        if(count >= n) {\n            v.erase(std::remove(v.begin(),\
    \ v.end(), it), v.end());\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpoh5fo7to: /tmp/tmpoh5fo7to.cpp:40: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpj6d79k2n: /tmp/tmpj6d79k2n.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \     word += s[i];\n        }\n        else if(s[i] == ' ') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'n') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'h') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'l') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'l') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'e') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'd') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 's') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 't') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'a') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'm') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'y') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 's') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'a') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'm') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'y') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'a') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'm') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'y') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'a') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'm') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'y') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'a') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'm') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'y\n}\nint main() {\n \
    \   auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpozn7rk0_.cpp:117:25: warning: missing terminating ' character\n\
    \  117 |         else if(s[i] == 'y\n      |                         ^\n/tmp/tmpozn7rk0_.cpp:117:25:\
    \ error: missing terminating ' character\n  117 |         else if(s[i] == 'y\n\
    \      |                         ^~\n/tmp/tmpozn7rk0_.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > select_words(std::string, long\
    \ int)\u2019:\n/tmp/tmpozn7rk0_.cpp:118:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  118 | }\n      | ^\n/tmp/tmpozn7rk0_.cpp:117:24:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  117 |         else\
    \ if(s[i] == 'y\n      |                ~       ^\n      |                   \
    \     )\n  118 | }\n      | ~                       \n/tmp/tmpozn7rk0_.cpp:118:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  118 | }\n \
    \     | ^\n/tmp/tmpozn7rk0_.cpp:119:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  119 | int main() {\n      |            ^\n\
    /tmp/tmpozn7rk0_.cpp:128:1: error: expected \u2018}\u2019 at end of input\n  128\
    \ | }\n      | ^\n/tmp/tmpozn7rk0_.cpp:14:62: note: to match this \u2018{\u2019\
    \n   14 | std::vector<std::string> select_words(std::string s, long n) {\n   \
    \   |                                                              ^\n/tmp/tmpozn7rk0_.cpp:128:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  128 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    \n    std::string word;\n    \n    for (auto &c :\
    \ s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n    }\n    \n    for (auto &c : word)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            res.push_back(word);\n        }\n    }\n    \n    return res;\n}\n\
    int main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary\
    \ had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n \
    \   assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpohfgxnov: /tmp/tmpohfgxnov.cpp:38: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty()) {\n      \
    \  return v;\n    }\n    \n    long l = 0;\n    for (auto c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            l\
    \ += 1;\n        }\n    }\n    \n    if (l == n) {\n        v.push_back(s);\n\
    \    }\n    \n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            v.push_back(s);\n        }\n   \
    \ }\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpvwigx9fo: /tmp/tmpvwigx9fo.cpp:41: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp8fpqakpi: /tmp/tmp8fpqakpi.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c: s) {\n        if(c == ' ' || c == '\\t' || c == '\\n' || c ==\
    \ '\\r') {\n            v.push_back(word);\n            word = \"\";\n       \
    \ } else {\n            word += c;\n        }\n    }\n    if(word != \"\") {\n\
    \        v.push_back(word);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) ==\
    \ (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"Mary had\
    \ a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"})));\n\
    \    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpogygyis5: /tmp/tmpogygyis5.cpp:32: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp7s_obohs: /tmp/tmp7s_obohs.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpe_9affhc: /tmp/tmpe_9affhc.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty())\n        return\
    \ v;\n    \n    std::string word = \"\";\n    \n    for (auto &c : s) {\n    \
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \     word += c;\n        }\n        else if (c == 'y') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'n') {\n         \
    \   v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 't' || c == 'h') {\n            v.push_back(word);\n            word = \"\
    \";\n        }\n        else if (c == 'r' || c == 'l' || c == 'd') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if\
    \ (c == 'c' || c == 'm' || c == 's' || c == 'k') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'p' || c == 'f' ||\
    \ c == 'v' || c == 'b') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n        else if (c ==\
    \ 'y') {\n            v.push_back(word);\n            word = \"\";\n        }\n\
    \        else if (c == 'n') {\n            v.push_back(word);\n            word\
    \ = \"\";\n        }\n        else if (c == 't' || c == 'h') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'r' || c == 'l' ||\
    \ c == 'd') {\n            v.push_back(word);\n            word = \"\";\n    \
    \    }\n        else if (c == 'c' || c == 'm' || c == 's' || c == 'k') {\n   \
    \         v.push_back(word);\n            word = \"\";\n        }\n        else\
    \ if (c == 'p' || c == 'f' || c == 'v' || c == 'b') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n   \
    \     else if (c == 'y') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        }\n        else if (c == 'n') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 't' || c == 'h') {\n\
    \            v.push_back(word);\n            word = \"\";\n        }\n       \
    \ else if (c == 'r' || c == 'l' || c == 'd') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'c' || c == 'm' ||\
    \ c == 's' || c == 'k') {\n            v.push_back(word);\n\n}\nint main() {\n\
    \    auto candidate = select_words;\n    assert(candidate((\"Mary had a little\
    \ lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n    assert(candidate((\"\
    Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"Mary\", \"lamb\"\
    })));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"\
    world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
    Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"\
    b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2mv0r6ib.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmp2mv0r6ib.cpp:99:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   99\
    \ | int main() {\n      |            ^\n/tmp/tmp2mv0r6ib.cpp:108:1: error: expected\
    \ \u2018}\u2019 at end of input\n  108 | }\n      | ^\n/tmp/tmp2mv0r6ib.cpp:21:23:\
    \ note: to match this \u2018{\u2019\n   21 |     for (auto &c : s) {\n      |\
    \                       ^\n/tmp/tmp2mv0r6ib.cpp:108:1: error: expected \u2018\
    }\u2019 at end of input\n  108 | }\n      | ^\n/tmp/tmp2mv0r6ib.cpp:14:62: note:\
    \ to match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmp2mv0r6ib.cpp:108:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  108 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if(s.empty())\n       \
    \ return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \        res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \        res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c\n}\nint main() {\n    auto candidate =\
    \ select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgh68rv5t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpgh68rv5t.cpp:22:32: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   22 |                 res.push_back(c);\n     \
    \ |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgh68rv5t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp2exhfu3p: /tmp/tmp2exhfu3p.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqf1if2ds: /tmp/tmpqf1if2ds.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpqta7us3s: /tmp/tmpqta7us3s.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    std::string word = \"\";\n    for (char c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         word += c;\n        }\n    }\n    std::vector<std::string> temp;\n \
    \   temp.push_back(word);\n    long count = 0;\n    for (char c : s) {\n     \
    \   if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        \
    \    temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuo_vhfsj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpuo_vhfsj.cpp:99:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   99 | }\n      | ^\n\
    /tmp/tmpuo_vhfsj.cpp:100:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  100 | int main() {\n      |            ^\n/tmp/tmpuo_vhfsj.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmpuo_vhfsj.cpp:28:22:\
    \ note: to match this \u2018{\u2019\n   28 |     for (char c : s) {\n      | \
    \                     ^\n/tmp/tmpuo_vhfsj.cpp:109:1: error: expected \u2018}\u2019\
    \ at end of input\n  109 | }\n      | ^\n/tmp/tmpuo_vhfsj.cpp:14:62: note: to\
    \ match this \u2018{\u2019\n   14 | std::vector<std::string> select_words(std::string\
    \ s, long n) {\n      |                                                      \
    \        ^\n/tmp/tmpuo_vhfsj.cpp:109:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  109 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else {\n        \
    \    if(!word.empty()) {\n                if(word.size() == n) {\n           \
    \         v.push_back(word);\n                    word = \"\";\n             \
    \   }\n                else {\n                    v.push_back(word);\n      \
    \              word = \"\";\n                }\n            }\n        }\n   \
    \ }\n    if(!word.empty()) {\n        if(word.size() == n) {\n            v.push_back(word);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmphu3307lg: /tmp/tmphu3307lg.cpp:43: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpp75_a3nj: /tmp/tmpp75_a3nj.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp6cr68xi6: /tmp/tmp6cr68xi6.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string word;\n    for(auto\
    \ &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \     word += c;\n    }\n    if(word.length() > 0) {\n        v.push_back(word);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n \
    \   assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpfga_sycu: /tmp/tmpfga_sycu.cpp:31: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    // code here\n    std::vector<std::string> v;\n    for(auto\
    \ &i : s)\n    {\n        if(isalpha(i))\n        {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuma9jv4b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > select_words(std::string, long int)\u2019:\n/tmp/tmpuma9jv4b.cpp:21:26: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(char&)\u2019\n   21 |             v.push_back(i);\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpuma9jv4b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp242zhk14: /tmp/tmp242zhk14.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmprhq8m8xu: /tmp/tmprhq8m8xu.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmphvrpt57d: /tmp/tmphvrpt57d.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    std::string temp;\n    long\
    \ count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == '\
    \ ') {\n            v.push_back(temp);\n            temp.clear();\n          \
    \  count = 0;\n        } else {\n            temp.push_back(s[i]);\n         \
    \   count++;\n            if(count == n) {\n                v.push_back(temp);\n\
    \                temp.clear();\n                count = 0;\n            }\n  \
    \      }\n    }\n    if(temp != \"\") {\n        v.push_back(temp);\n    }\n \
    \   return v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpl10szqeq: /tmp/tmpl10szqeq.cpp:40: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> res;\n    if (s.empty()) {\n    \
    \    return res;\n    }\n    \n    std::string word;\n    \n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        word = s.substr(i, 1);\n        if (word.find_first_of(\"\
    aeiou\") != std::string::npos) {\n            res.push_back(word);\n        }\n\
    \    }\n    \n    return res;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmpf84w1p7d: /tmp/tmpf84w1p7d.cpp:33: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;\n}\nint main() {\n    auto candidate = select_words;\n\
    \    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"\
    little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp3sjyymsn: /tmp/tmp3sjyymsn.cpp:23: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a\
    \ natural number n, you have been tasked to implement \n// a function that returns\
    \ a list of all words from string s that contain exactly \n// n consonants, in\
    \ order these words appear in the string s.\n// If the string s is empty then\
    \ the function should return an empty list.\n// Note: you may assume the input\
    \ string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary\
    \ had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
    \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\"\
    , 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n    std::vector<std::string> v;\n    if (s.empty())\n        return\
    \ v;\n    \n    std::string word = \"\";\n    \n    for (char c : s) {\n     \
    \   if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            word += c;\n        }\n    }\n    \n    v.push_back(word);\n\
    \    \n    for (long i = 0; i < n; i++) {\n        std::string word = \"\";\n\
    \        for (char c : s) {\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c == 'y') {\n                word += c;\n       \
    \     }\n        }\n        \n        v.push_back(word);\n    }\n    \n    return\
    \ v;\n}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
    \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
    Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4))\
    \ == (std::vector<std::string>({\"world\"})));\n    assert(candidate((\"Uncle\
    \ sam\"), (3)) == (std::vector<std::string>({\"Uncle\"})));\n    assert(candidate((\"\
    \"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e\
    \ f\"), (1)) == (std::vector<std::string>({\"b\", \"c\", \"d\", \"f\"})));\n}\n"
  stdout: ''
  stderr: "tmp84kokieo: /tmp/tmp84kokieo.cpp:44: int main(): Assertion `candidate((\"\
    Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"}))' failed.\n"
  exit_code: -6
  status: Exception
