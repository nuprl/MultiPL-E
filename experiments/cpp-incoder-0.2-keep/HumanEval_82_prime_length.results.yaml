name: HumanEval_82_prime_length
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdxzpkx8q: /tmp/tmpdxzpkx8q.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    if (n\
    \ == 0)\n        return false;\n    if (n == 1)\n        return true;\n    if\
    \ (n == 2)\n        return string[0] == 'H';\n    if (n % 2 == 0)\n        return\
    \ false;\n    for (int i = 3; i <= n / 2; i += 2)\n        if (string[i] == 'H')\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp5vvk8mnt: /tmp/tmp5vvk8mnt.cpp:37: int main(): Assertion `candidate((\"\
    go\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = 0; j < i; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpra6n970s: /tmp/tmpra6n970s.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i - 1] ==\
    \ '\\n' || string[i - 1] == '\\r') {\n            return false;\n        }\n \
    \   }\n    for (int i = 2; i <= n / 2; i++) {\n        if (string[n - i] != '\\\
    0' && string[n - i] != '\\n' && string[n - i] != '\\r') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpuugilw3l: /tmp/tmpuugilw3l.cpp:26: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\"\
    )) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyy34_etz: /tmp/tmpyy34_etz.cpp:30: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[i - 1]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpkmdc4f0p: /tmp/tmpkmdc4f0p.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp1cejk1jp: /tmp/tmp1cejk1jp.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpby3xlxu2: /tmp/tmpby3xlxu2.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpr6bdl5z5: /tmp/tmpr6bdl5z5.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (string[i] == string[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 0 || count == 1) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpy1g2fz3_: /tmp/tmpy1g2fz3_.cpp:28: int main(): Assertion `candidate((\"\
    abcdcba\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    if (n\
    \ == 0)\n        return false;\n    for (int i = 2; i <= n / 2; i++) {\n     \
    \   if (n % i == 0)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\"\
    )) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsi3foj1p: /tmp/tmpsi3foj1p.cpp:36: int main(): Assertion `candidate((\"\
    M\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpr4f1u21z: /tmp/tmpr4f1u21z.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i <= n/2; i++) {\n        if(string[i] == '1') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpm01x21vk: /tmp/tmpm01x21vk.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpqhr_q1zy: /tmp/tmpqhr_q1zy.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf8rwhfr6: /tmp/tmpf8rwhfr6.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i=2; i<=n/2; i++) {\n        if(string[i] == '\\0') return false;\n        if(string[i]\
    \ % 2 == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpqd5ao2b4: /tmp/tmpqd5ao2b4.cpp:20: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpvqdlbw0r: /tmp/tmpvqdlbw0r.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpv5zuyo6o: /tmp/tmpv5zuyo6o.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ result = true;\n    for (int i = 1; i < n; i++) {\n        if (string[i] % 2\
    \ == 0) {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = prime_length;\n   \
    \ assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpne1snw6a: /tmp/tmpne1snw6a.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpqlbls3og: /tmp/tmpqlbls3og.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpszev1ult: /tmp/tmpszev1ult.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpslf9e228: /tmp/tmpslf9e228.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp1xi6czr2: /tmp/tmp1xi6czr2.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\0') {\n\
    \            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            if (string[i] + string[j] == string) {\n        \
    \        return false;\n            }\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\"\
    )) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyyb3aabk.cpp: In function \u2018bool prime_length(std::string)\u2019\
    :\n/tmp/tmpyyb3aabk.cpp:23:39: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   23 |             if (string[i] + string[j] == string) {\n      |      \
    \                                 ^~ ~~~~~~\n      |                         \
    \                 |\n      |                                          std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018int\u2019\n   23 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1173:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1173 |     operator==(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1173:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1247:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1247 |     operator==(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1247:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   23\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1321:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1321 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1321:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1395:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1395 |     operator==(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1395:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   23\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1473:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1473 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1473:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/regex.h:1991:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator==(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 1991 |     operator==(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1991:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/iosfwd:40,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note: candidate: \u2018template<class _StateT> bool std::operator==(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  222 |     operator==(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::fpos<_StateT>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:448:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  448 |     operator==(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:448:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:325:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  325 |     operator==(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:325:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  363 |     operator==(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched\
    \ types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1136:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1136 |     operator==(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1142 |     operator==(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019 and\
    \ \u2018int\u2019\n   23 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/allocator.h:167:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&,\
    \ const std::allocator<_T2>&)\u2019\n  167 |     operator==(const allocator<_T1>&,\
    \ const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:167:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::allocator<_CharT>\u2019 and \u2018\
    int\u2019\n   23 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6144:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6144 | \
    \    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      | \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6144:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6152:5: note:\
    \ candidate: \u2018template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value,\
    \ bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const\
    \ std::__cxx11::basic_string<_CharT>&)\u2019\n 6152 |     operator==(const basic_string<_CharT>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6166:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6166 |     operator==(const _CharT* __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6166:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   23\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6178 |     operator==(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/system_error:292:3: note: candidate:\
    \ \u2018bool std::operator==(const std::error_code&, const std::error_code&)\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:292:32: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:297:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_code&, const std::error_condition&)\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:297:32: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:304:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_condition&, const\
    \ std::error_code&)\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:304:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:311:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:311:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  311 |   operator==(const error_condition& __lhs,\n\
    \      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator==(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  208 |     operator==(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/complex:463:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  463 |     operator==(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:463:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/complex:468:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  468 |     operator==(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:468:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/complex:473:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  473 |     operator==(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:473:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   23 |           \
    \  if (string[i] + string[j] == string) {\n      |                           \
    \               ^~~~~~\nIn file included from /usr/include/c++/9/deque:67,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:286:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  286 |     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:286:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  293 |     operator==(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2312 |   \
    \  operator==(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::deque<_Tp, _Alloc>\u2019 and \u2018\
    int\u2019\n   23 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/array:252:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  252 |     operator==(const array<_Tp,\
    \ _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:252:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/tuple:1419:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1419 |     operator==(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1419:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched\
    \ types \u2018const std::tuple<_Tps ...>\u2019 and \u2018int\u2019\n   23 |  \
    \           if (string[i] + string[j] == string) {\n      |                  \
    \                        ^~~~~~\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  746 |     operator==(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:59,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  752 |     operator==(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::function<_Res(_ArgTypes ...)>\u2019\n \
    \  23 |             if (string[i] + string[j] == string) {\n      |          \
    \                                ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:715:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  715 |     operator==(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:715:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note: \
    \  mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  721 |     operator==(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   23 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  726 |     operator==(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   23 |   \
    \          if (string[i] + string[j] == string) {\n      |                   \
    \                       ^~~~~~\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:134:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  134 |     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:134:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:1991:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 1991 |     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:1991:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019 and\
    \ \u2018int\u2019\n   23 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1455 |     operator==(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1119 |     operator==(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1412 |     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019 and\
    \ \u2018int\u2019\n   23 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1418 |     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   23 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1423 |     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp, _Lp>\u2019\n   23 | \
    \            if (string[i] + string[j] == string) {\n      |                 \
    \                         ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:383:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator==(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  383 |     operator==(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  388 |     operator==(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  393 |     operator==(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   23 |        \
    \     if (string[i] + string[j] == string) {\n      |                        \
    \                  ^~~~~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1888:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1888 | \
    \    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1888:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  338 |     operator==(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:338:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::queue<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  979 |     operator==(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::set<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  964 |     operator==(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:313:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  313 |     operator==(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:313:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::stack<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   23 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  417\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   23 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==,\
    \ __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   23 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1197:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   23 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::valarray<_Tp>\u2019\n   23 |          \
    \   if (string[i] + string[j] == string) {\n      |                          \
    \                ^~~~~~\nIn file included from /usr/include/c++/9/forward_list:40,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/forward_list.tcc:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n  393 |     operator==(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.tcc:393:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note:   mismatched types \u2018const std::forward_list<_Tp,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/future:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/thread:276:3:\
    \ note: candidate: \u2018bool std::operator==(std::thread::id, std::thread::id)\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:276:25: note:   no known conversion for argument 1 from\
    \ \u2018int\u2019 to \u2018std::thread::id\u2019\n  276 |   operator==(thread::id\
    \ __x, thread::id __y) noexcept\n      |              ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/random:51,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/random.tcc:1884:5:\
    \ note: candidate: \u2018template<class _RealType1> bool std::operator==(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 1884 |     operator==(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.tcc:1884:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note: \
    \  mismatched types \u2018const std::normal_distribution<_RealType>\u2019 and\
    \ \u2018int\u2019\n   23 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/scoped_allocator:489:5: note: candidate:\
    \ \u2018template<class _OutA1, class _OutA2, class ... _InA> bool std::operator==(const\
    \ std::scoped_allocator_adaptor<_OutA1, _InA ...>&, const std::scoped_allocator_adaptor<_InnerHead,\
    \ _InnerTail ...>&)\u2019\n  489 |     operator==(const scoped_allocator_adaptor<_OutA1,\
    \ _InA...>& __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:489:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::scoped_allocator_adaptor<_OutA1, _InA\
    \ ...>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\
    \n 2093 |     operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2105 |     operator==(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::unordered_multimap<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   23 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:\
    \ candidate: \u2018template<class _Value, class _Hash, class _Pred, class _Alloc>\
    \ bool std::operator==(const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&,\
    \ const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1705 |    \
    \ operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note: \
    \  mismatched types \u2018const std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\
    \n 1717 |     operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const std::unordered_multiset<_Value, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   23 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/allocator.h:155:7: note: candidate:\
    \ \u2018bool std::operator==(const std::allocator<char>&, const std::allocator<char>&)\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:155:18: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const std::allocator<char>&\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |                  ^~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n   23 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019 and \u2018int\u2019\n   23 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyyb3aabk.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:166:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<char>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  166 |  operator==(const new_allocator&,\
    \ const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:166:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyb3aabk.cpp:23:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const __gnu_cxx::new_allocator<_Tp>\u2019\n   23 |\
    \             if (string[i] + string[j] == string) {\n      |                \
    \                          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n         \
    \   int count = 0;\n            for (int j = i; j < n; j++) {\n              \
    \  if (string[j] == string[i]) {\n                    count++;\n             \
    \   }\n            }\n            if (count == i) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpoboc3e_n: /tmp/tmpoboc3e_n.cpp:33: int main(): Assertion `candidate((\"\
    wow\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1') {\n \
    \           count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i < count; i++) {\n        if (string[i]\
    \ == '1') {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\"\
    )) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1yiip_8l: /tmp/tmp1yiip_8l.cpp:30: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0vonz2gq: /tmp/tmp0vonz2gq.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n/2; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpwhh2c1q1: /tmp/tmpwhh2c1q1.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i < n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp61pms925: /tmp/tmp61pms925.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[n - 1]) {\n          \
    \  int count = 0;\n            for (int j = i; j < n; j++) {\n               \
    \ if (string[j] == string[n - 1]) {\n                    count++;\n          \
    \      }\n            }\n            if (count == i) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp346_glz_: /tmp/tmp346_glz_.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i=2; i<=n; i++) {\n        if(string[i] == '\\0') break;\n        if(string[i]\
    \ == 'o') {\n            if(string[i-1] == 'e') {\n                if(string[i-2]\
    \ == 'a') {\n                    if(string[i-3] == 't') {\n                  \
    \      if(string[i-4] == 'n') {\n                            if(string[i-5] ==\
    \ 'g') {\n                                if(string[i-6] == 'i') {\n         \
    \                           if(string[i-7] == 'r') {\n                       \
    \                 if(string[i-8] == 't') {\n                                 \
    \           if(string[i-9] == 'e') {\n                                       \
    \         return true;\n                                            }\n      \
    \                                  }\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3nggmtdx: /tmp/tmp3nggmtdx.cpp:40: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n/2; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp8yxwajfi: /tmp/tmp8yxwajfi.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '0')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '0')\
    \ {\n            count--;\n        }\n        if (count == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpw9jtiawc: /tmp/tmpw9jtiawc.cpp:36: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '.')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    for (int i = 0; i < n; i++) {\n        if (string[i] != '.')\
    \ {\n            if (string[i] % 2 == 0) {\n                for (int j = i; j\
    \ < n; j++) {\n                    if (string[j] % 2 == 0) {\n               \
    \         count++;\n                        break;\n                    }\n  \
    \              }\n            }\n        }\n    }\n    if (count == n) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp4zhhlt7a: /tmp/tmp4zhhlt7a.cpp:43: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (string[i] != 0) {\n            int count\
    \ = 0;\n            for (int j = i; j < n; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp64vb7z5w: /tmp/tmp64vb7z5w.cpp:33: int main(): Assertion `candidate((\"\
    wow\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdl6s_271: /tmp/tmpdl6s_271.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8m49sfdt: /tmp/tmp8m49sfdt.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = 0; j < i; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpz4nvjt8b: /tmp/tmpz4nvjt8b.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl355xc7e: /tmp/tmpl355xc7e.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[i - 1]) {\n           \
    \ for(int j = 1; j < i; j++) {\n                if(string[i] % j == 0) {\n   \
    \                 return false;\n                }\n            }\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjjh3mqo2: /tmp/tmpjjh3mqo2.cpp:25: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] % 2 == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9phwgpq5: /tmp/tmp9phwgpq5.cpp:20: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp0o6jb3gx: /tmp/tmp0o6jb3gx.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i < n; i++) {\n        if (string[i] % 2 == 0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgdn7pfh1: /tmp/tmpgdn7pfh1.cpp:19: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n/2; i++) {\n        if (string[i] == '\\0' || string[i] ==\
    \ ' ') {\n            continue;\n        }\n        if (string[i] == 'o') {\n\
    \            return false;\n        }\n        for (int j = i+1; j <= n/2; j++)\
    \ {\n            if (string[j] == '\\0' || string[j] == ' ') {\n             \
    \   continue;\n            }\n            if (string[i] == 'o' && string[j] ==\
    \ 'n') {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpngj0o7lq: /tmp/tmpngj0o7lq.cpp:35: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    bool\
    \ prime = true;\n    for (int i = 2; i < n; i++) {\n        if (string[i] != string[0])\
    \ {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq6xhjphc: /tmp/tmpq6xhjphc.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ prime = true;\n    for (int i = 1; i <= n; i++) {\n        if (string[i] % 2\
    \ == 0) {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpexsclw2x: /tmp/tmpexsclw2x.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ prime = true;\n    for (int i = 1; i < n; i++) {\n        if (string[i] % 2\
    \ == 0) {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn0j6bmtw: /tmp/tmpn0j6bmtw.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpyuv6muxn: /tmp/tmpyuv6muxn.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i]\
    \ == '\\0' || string[i - 1] != string[i]) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9erfc1i6: /tmp/tmp9erfc1i6.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ prime = true;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1ywl0938: /tmp/tmp1ywl0938.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpdj2g5mrt: /tmp/tmpdj2g5mrt.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3o5g7u9n: /tmp/tmp3o5g7u9n.cpp:28: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 0; i<n; i++) {\n        int count = 0;\n        for(int j=0; j<i; j++) {\n\
    \            if(string[i] == string[j]) {\n                count++;\n        \
    \    }\n        }\n        if(count == i) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqkoy1hl9: /tmp/tmpqkoy1hl9.cpp:30: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i -\
    \ 1] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ljvvd6f: /tmp/tmp4ljvvd6f.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjjldxe6k: /tmp/tmpjjldxe6k.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int j;\n        for (j = i;\
    \ j < n; j++)\n            if (string[i] == string[j])\n                break;\n\
    \        if (j == n)\n            count++;\n    }\n    if (count == 0)\n     \
    \   return true;\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmps3vsn47f: /tmp/tmps3vsn47f.cpp:30: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpr5x12bxt: /tmp/tmpr5x12bxt.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp55a81pi6: /tmp/tmp55a81pi6.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0') {\n            break;\n        }\n        for (int j = i + 1; j < n; j++)\
    \ {\n            if (string[i] + string[j] <= 'z') {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmsrdnbf4: /tmp/tmpmsrdnbf4.cpp:33: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp84odrwy1: /tmp/tmp84odrwy1.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpihkfd_sh: /tmp/tmpihkfd_sh.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0' || string[i] == ' ') {\n            continue;\n        }\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (string[i] + string[j] == string) {\n\
    \                count++;\n                break;\n            }\n        }\n\
    \    }\n    if (count == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6hl8lxqz.cpp: In function \u2018bool prime_length(std::string)\u2019\
    :\n/tmp/tmp6hl8lxqz.cpp:18:39: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   18 |             if (string[i] + string[j] == string) {\n      |      \
    \                                 ^~ ~~~~~~\n      |                         \
    \                 |\n      |                                          std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1173:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1173 |     operator==(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1173:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1247:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1247 |     operator==(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1247:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1321:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1321 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1321:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1395:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1395 |     operator==(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1395:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1473:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1473 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1473:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/regex.h:1991:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator==(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 1991 |     operator==(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1991:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/iosfwd:40,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note: candidate: \u2018template<class _StateT> bool std::operator==(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  222 |     operator==(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::fpos<_StateT>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:448:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  448 |     operator==(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:448:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:325:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  325 |     operator==(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:325:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  363 |     operator==(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched\
    \ types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1136:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1136 |     operator==(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1142 |     operator==(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/allocator.h:167:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&,\
    \ const std::allocator<_T2>&)\u2019\n  167 |     operator==(const allocator<_T1>&,\
    \ const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:167:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::allocator<_CharT>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6144:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6144 | \
    \    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      | \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6144:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6152:5: note:\
    \ candidate: \u2018template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value,\
    \ bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const\
    \ std::__cxx11::basic_string<_CharT>&)\u2019\n 6152 |     operator==(const basic_string<_CharT>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6166:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6166 |     operator==(const _CharT* __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6166:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6178 |     operator==(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/system_error:292:3: note: candidate:\
    \ \u2018bool std::operator==(const std::error_code&, const std::error_code&)\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:292:32: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:297:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_code&, const std::error_condition&)\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:297:32: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:304:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_condition&, const\
    \ std::error_code&)\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:304:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:311:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:311:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  311 |   operator==(const error_condition& __lhs,\n\
    \      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator==(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  208 |     operator==(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/complex:463:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  463 |     operator==(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:463:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/complex:468:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  468 |     operator==(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:468:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/complex:473:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  473 |     operator==(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:473:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   18 |           \
    \  if (string[i] + string[j] == string) {\n      |                           \
    \               ^~~~~~\nIn file included from /usr/include/c++/9/deque:67,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:286:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  286 |     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:286:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  293 |     operator==(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2312 |   \
    \  operator==(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::deque<_Tp, _Alloc>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/array:252:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  252 |     operator==(const array<_Tp,\
    \ _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:252:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/tuple:1419:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1419 |     operator==(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1419:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched\
    \ types \u2018const std::tuple<_Tps ...>\u2019 and \u2018int\u2019\n   18 |  \
    \           if (string[i] + string[j] == string) {\n      |                  \
    \                        ^~~~~~\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  746 |     operator==(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:59,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  752 |     operator==(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::function<_Res(_ArgTypes ...)>\u2019\n \
    \  18 |             if (string[i] + string[j] == string) {\n      |          \
    \                                ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:715:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  715 |     operator==(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:715:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note: \
    \  mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  721 |     operator==(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  726 |     operator==(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   18 |   \
    \          if (string[i] + string[j] == string) {\n      |                   \
    \                       ^~~~~~\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:134:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  134 |     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:134:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:1991:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 1991 |     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:1991:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1455 |     operator==(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1119 |     operator==(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1412 |     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1418 |     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1423 |     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp, _Lp>\u2019\n   18 | \
    \            if (string[i] + string[j] == string) {\n      |                 \
    \                         ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:383:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator==(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  383 |     operator==(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  388 |     operator==(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  393 |     operator==(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   18 |        \
    \     if (string[i] + string[j] == string) {\n      |                        \
    \                  ^~~~~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1888:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1888 | \
    \    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1888:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  338 |     operator==(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:338:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::queue<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  979 |     operator==(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::set<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  964 |     operator==(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:313:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  313 |     operator==(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:313:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::stack<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  417\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==,\
    \ __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1197:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::valarray<_Tp>\u2019\n   18 |          \
    \   if (string[i] + string[j] == string) {\n      |                          \
    \                ^~~~~~\nIn file included from /usr/include/c++/9/forward_list:40,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/forward_list.tcc:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n  393 |     operator==(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.tcc:393:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note:   mismatched types \u2018const std::forward_list<_Tp,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/future:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/thread:276:3:\
    \ note: candidate: \u2018bool std::operator==(std::thread::id, std::thread::id)\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:276:25: note:   no known conversion for argument 1 from\
    \ \u2018int\u2019 to \u2018std::thread::id\u2019\n  276 |   operator==(thread::id\
    \ __x, thread::id __y) noexcept\n      |              ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/random:51,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/random.tcc:1884:5:\
    \ note: candidate: \u2018template<class _RealType1> bool std::operator==(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 1884 |     operator==(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.tcc:1884:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note: \
    \  mismatched types \u2018const std::normal_distribution<_RealType>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/scoped_allocator:489:5: note: candidate:\
    \ \u2018template<class _OutA1, class _OutA2, class ... _InA> bool std::operator==(const\
    \ std::scoped_allocator_adaptor<_OutA1, _InA ...>&, const std::scoped_allocator_adaptor<_InnerHead,\
    \ _InnerTail ...>&)\u2019\n  489 |     operator==(const scoped_allocator_adaptor<_OutA1,\
    \ _InA...>& __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:489:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::scoped_allocator_adaptor<_OutA1, _InA\
    \ ...>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\
    \n 2093 |     operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2105 |     operator==(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_multimap<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:\
    \ candidate: \u2018template<class _Value, class _Hash, class _Pred, class _Alloc>\
    \ bool std::operator==(const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&,\
    \ const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1705 |    \
    \ operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note: \
    \  mismatched types \u2018const std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\
    \n 1717 |     operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_multiset<_Value, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/allocator.h:155:7: note: candidate:\
    \ \u2018bool std::operator==(const std::allocator<char>&, const std::allocator<char>&)\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:155:18: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const std::allocator<char>&\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |                  ^~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6hl8lxqz.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:166:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<char>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  166 |  operator==(const new_allocator&,\
    \ const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:166:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6hl8lxqz.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const __gnu_cxx::new_allocator<_Tp>\u2019\n   18 |\
    \             if (string[i] + string[j] == string) {\n      |                \
    \                          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqr_r74yn: /tmp/tmpqr_r74yn.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0' || string[i] == ' ') {\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        return true;\n    }\n    for (int i = 2; i < n; i++) {\n  \
    \      if (string[i] == '\\0' || string[i] == ' ') {\n            count++;\n \
    \       }\n    }\n    if (count == n) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp75zfpbln: /tmp/tmp75zfpbln.cpp:36: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp0w6bil5f: /tmp/tmp0w6bil5f.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpmhuvw3uj: /tmp/tmpmhuvw3uj.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        int j = (int)string[i]\
    \ + 1;\n        for (int k = i; k < j; k++) {\n            if (j % k == 0) {\n\
    \                count++;\n                break;\n            }\n        }\n\
    \    }\n    return count == 0;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 2; i <= n/2; i++) {\n        if(n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuprfu91r: /tmp/tmpuprfu91r.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '0')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '0')\
    \ {\n            count--;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp77dzo8iw: /tmp/tmp77dzo8iw.cpp:36: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 0; i <= n/2; i++) {\n        if(string[i] == '\\0' || string[i] == ' ')\
    \ {\n            continue;\n        }\n        int count = 0;\n        for(int\
    \ j = i; j < n; j++) {\n            if(string[j] == '\\0' || string[j] == ' ')\
    \ {\n                continue;\n            }\n            count++;\n        \
    \    if(count == i) {\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplivv3mu2: /tmp/tmplivv3mu2.cpp:34: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i -\
    \ 1] == '\\n' || string[i - 1] == '\\r') {\n            continue;\n        }\n\
    \        if (string[i] % 2 == 0) {\n            return false;\n        }\n   \
    \     for (int j = i + 1; j <= n; j++) {\n            if (string[j] % 2 == 0)\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0f2zmf2y: /tmp/tmp0f2zmf2y.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = i; j < n; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmppyi4a5nq: /tmp/tmppyi4a5nq.cpp:33: int main(): Assertion `candidate((\"\
    wow\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n         \
    \   int count = 0;\n            for (int j = 0; j < i; j++) {\n              \
    \  if (string[j] == string[i]) {\n                    count++;\n             \
    \   }\n            }\n            if (count == i) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpwrwyysae: /tmp/tmpwrwyysae.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ prime = true;\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwpe6n53s: /tmp/tmpwpe6n53s.cpp:31: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i=2; i<=n; i++) {\n        if(string[i] == '\\0') return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm9hen_fv: /tmp/tmpm9hen_fv.cpp:19: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    if (n\
    \ == 0)\n        return true;\n    if (n == 1)\n        return false;\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfrpgfdg4: /tmp/tmpfrpgfdg4.cpp:32: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count--;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ibvlwz3: /tmp/tmp4ibvlwz3.cpp:33: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i=2; i<=n; i++) {\n        if(string[i] == '\\0') return false;\n    }\n   \
    \ for(int i=3; i<=n; i++) {\n        if(string[i] == '\\0') return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0hes16m_: /tmp/tmp0hes16m_.cpp:22: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpiflmcgtd: /tmp/tmpiflmcgtd.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpgg05zqys: /tmp/tmpgg05zqys.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp0xbn_6nx: /tmp/tmp0xbn_6nx.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] % 2 == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzmj_dc5y: /tmp/tmpzmj_dc5y.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ isPrime = true;\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            isPrime = false;\n            break;\n        }\n    }\n \
    \   return isPrime;\n}\nint main() {\n    auto candidate = prime_length;\n   \
    \ assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp58u7bjmd: /tmp/tmp58u7bjmd.cpp:31: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp4g_c6xin: /tmp/tmp4g_c6xin.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[i - 1]) {\n           \
    \ for(int j = i; j < n; j++) {\n                if(string[i] != string[j]) {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1r6ks4tj: /tmp/tmp1r6ks4tj.cpp:25: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpk98ozgk8: /tmp/tmpk98ozgk8.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp_4pgi98t: /tmp/tmp_4pgi98t.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpqd1ukra_: /tmp/tmpqd1ukra_.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    if (n\
    \ == 0) return false;\n    int count = 0;\n    for (int i = 0; i <= n; i++) {\n\
    \        if (string[i] == '1') {\n            count++;\n        }\n    }\n   \
    \ if (count == n) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp3b_apkma: /tmp/tmp3b_apkma.cpp:24: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpkln1vrbs: /tmp/tmpkln1vrbs.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count--;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpowfaypb9: /tmp/tmpowfaypb9.cpp:33: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmphcrvav18: /tmp/tmphcrvav18.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    for (int i = 1; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count--;\n        }\n        if (count == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpqqfn9vko: /tmp/tmpqqfn9vko.cpp:36: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp7p9dozqf: /tmp/tmp7p9dozqf.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0' || string[i] == '\\n' || string[i] == '\\r' || string[i] == '\\t') {\n    \
    \        continue;\n        }\n        for (int j = i + 1; j < n; j++) {\n   \
    \         if (string[i] + string[j] != '\\0' && string[i] + string[j] != '\\n'\
    \ && string[i] + string[j] != '\\r' && string[i] + string[j] != '\\t') {\n   \
    \             if (string[i] + string[j] == '\\0' || string[i] + string[j] == '\\\
    n' || string[i] + string[j] == '\\r' || string[i] + string[j] == '\\t') {\n  \
    \                  continue;\n                }\n                if (string[i]\
    \ + string[j] != '\\0' && string[i] + string[j] != '\\n' && string[i] + string[j]\
    \ != '\\r' && string[i] + string[j] != '\\t' && string[i] + string[j] != '\\1'\
    \ && string[i] + string[j] != '\\2' && string[i] + string[j] != '\\3' && string[i]\
    \ + string[j] != '\\4' && string[i] + string[j] != '\\5' && string[i] + string[j]\
    \ != '\\6' && string[i] + string[j] != '\\7' && string[i] + string[j] != '\\8'\
    \ && string[i] + string[j] != '\\9') {\n                    count++;\n       \
    \         }\n            }\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0ur7s4iw: /tmp/tmp0ur7s4iw.cpp:35: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0') {\n            break;\n        }\n        for (int j = i + 1; j < n; j++)\
    \ {\n            if (string[i] + string[j] == string) {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    if (count == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6glw8gc6.cpp: In function \u2018bool prime_length(std::string)\u2019\
    :\n/tmp/tmp6glw8gc6.cpp:18:39: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   18 |             if (string[i] + string[j] == string) {\n      |      \
    \                                 ^~ ~~~~~~\n      |                         \
    \                 |\n      |                                          std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1173:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1173 |     operator==(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1173:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1247:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1247 |     operator==(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1247:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1321:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1321 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1321:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1395:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1395 |     operator==(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1395:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1473:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1473 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1473:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1991:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator==(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 1991 |     operator==(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1991:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/iosfwd:40,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note: candidate: \u2018template<class _StateT> bool std::operator==(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  222 |     operator==(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::fpos<_StateT>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:448:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  448 |     operator==(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:448:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:325:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  325 |     operator==(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:325:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  363 |     operator==(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched\
    \ types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1136:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1136 |     operator==(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1142 |     operator==(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/allocator.h:167:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&,\
    \ const std::allocator<_T2>&)\u2019\n  167 |     operator==(const allocator<_T1>&,\
    \ const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:167:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::allocator<_CharT>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6144:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6144 | \
    \    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      | \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6144:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6152:5: note:\
    \ candidate: \u2018template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value,\
    \ bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const\
    \ std::__cxx11::basic_string<_CharT>&)\u2019\n 6152 |     operator==(const basic_string<_CharT>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6166:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6166 |     operator==(const _CharT* __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6166:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6178 |     operator==(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/system_error:292:3: note: candidate:\
    \ \u2018bool std::operator==(const std::error_code&, const std::error_code&)\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:292:32: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:297:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_code&, const std::error_condition&)\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:297:32: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:304:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_condition&, const\
    \ std::error_code&)\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:304:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:311:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:311:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  311 |   operator==(const error_condition& __lhs,\n\
    \      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator==(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  208 |     operator==(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/complex:463:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  463 |     operator==(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:463:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/complex:468:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  468 |     operator==(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:468:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/complex:473:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  473 |     operator==(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:473:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   18 |           \
    \  if (string[i] + string[j] == string) {\n      |                           \
    \               ^~~~~~\nIn file included from /usr/include/c++/9/deque:67,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:286:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  286 |     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:286:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  293 |     operator==(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2312 |   \
    \  operator==(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::deque<_Tp, _Alloc>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/array:252:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  252 |     operator==(const array<_Tp,\
    \ _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:252:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/tuple:1419:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1419 |     operator==(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1419:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched\
    \ types \u2018const std::tuple<_Tps ...>\u2019 and \u2018int\u2019\n   18 |  \
    \           if (string[i] + string[j] == string) {\n      |                  \
    \                        ^~~~~~\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  746 |     operator==(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:59,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  752 |     operator==(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::function<_Res(_ArgTypes ...)>\u2019\n \
    \  18 |             if (string[i] + string[j] == string) {\n      |          \
    \                                ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:715:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  715 |     operator==(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:715:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note: \
    \  mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  721 |     operator==(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  726 |     operator==(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   18 |   \
    \          if (string[i] + string[j] == string) {\n      |                   \
    \                       ^~~~~~\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:134:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  134 |     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:134:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:1991:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 1991 |     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:1991:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1455 |     operator==(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1119 |     operator==(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1412 |     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1418 |     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1423 |     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp, _Lp>\u2019\n   18 | \
    \            if (string[i] + string[j] == string) {\n      |                 \
    \                         ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:383:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator==(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  383 |     operator==(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  388 |     operator==(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  393 |     operator==(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   18 |        \
    \     if (string[i] + string[j] == string) {\n      |                        \
    \                  ^~~~~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1888:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1888 | \
    \    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1888:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  338 |     operator==(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:338:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::queue<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  979 |     operator==(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::set<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  964 |     operator==(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:313:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  313 |     operator==(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:313:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::stack<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  417\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==,\
    \ __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1197:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::valarray<_Tp>\u2019\n   18 |          \
    \   if (string[i] + string[j] == string) {\n      |                          \
    \                ^~~~~~\nIn file included from /usr/include/c++/9/forward_list:40,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/forward_list.tcc:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n  393 |     operator==(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.tcc:393:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note:   mismatched types \u2018const std::forward_list<_Tp,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/future:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/thread:276:3:\
    \ note: candidate: \u2018bool std::operator==(std::thread::id, std::thread::id)\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:276:25: note:   no known conversion for argument 1 from\
    \ \u2018int\u2019 to \u2018std::thread::id\u2019\n  276 |   operator==(thread::id\
    \ __x, thread::id __y) noexcept\n      |              ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/random:51,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/random.tcc:1884:5:\
    \ note: candidate: \u2018template<class _RealType1> bool std::operator==(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 1884 |     operator==(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.tcc:1884:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note: \
    \  mismatched types \u2018const std::normal_distribution<_RealType>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/scoped_allocator:489:5: note: candidate:\
    \ \u2018template<class _OutA1, class _OutA2, class ... _InA> bool std::operator==(const\
    \ std::scoped_allocator_adaptor<_OutA1, _InA ...>&, const std::scoped_allocator_adaptor<_InnerHead,\
    \ _InnerTail ...>&)\u2019\n  489 |     operator==(const scoped_allocator_adaptor<_OutA1,\
    \ _InA...>& __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:489:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::scoped_allocator_adaptor<_OutA1, _InA\
    \ ...>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\
    \n 2093 |     operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2105 |     operator==(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_multimap<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:\
    \ candidate: \u2018template<class _Value, class _Hash, class _Pred, class _Alloc>\
    \ bool std::operator==(const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&,\
    \ const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1705 |    \
    \ operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note: \
    \  mismatched types \u2018const std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\
    \n 1717 |     operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_multiset<_Value, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/allocator.h:155:7: note: candidate:\
    \ \u2018bool std::operator==(const std::allocator<char>&, const std::allocator<char>&)\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:155:18: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const std::allocator<char>&\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |                  ^~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp6glw8gc6.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:166:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<char>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  166 |  operator==(const new_allocator&,\
    \ const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:166:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6glw8gc6.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const __gnu_cxx::new_allocator<_Tp>\u2019\n   18 |\
    \             if (string[i] + string[j] == string) {\n      |                \
    \                          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpq_33gyyx: /tmp/tmpq_33gyyx.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpxac56h9t: /tmp/tmpxac56h9t.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp_1hupmo9: /tmp/tmp_1hupmo9.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] == string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpcxv5a3tq: /tmp/tmpcxv5a3tq.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmphfu590uk: /tmp/tmphfu590uk.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp3cabfgwt: /tmp/tmp3cabfgwt.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmptw44b6db: /tmp/tmptw44b6db.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i <= n/2; i++) {\n        if(string[i] == '1') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp7jrf54oj: /tmp/tmp7jrf54oj.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (string[i] != string[0]) {\n        \
    \    int count = 0;\n            for (int j = 0; j < i; j++) {\n             \
    \   if (string[j] == string[i]) {\n                    count++;\n            \
    \    }\n            }\n            if (count == i) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp1e019s1i: /tmp/tmp1e019s1i.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i=2; i<=n; i++) {\n        if(string[i] == '\\0') return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6nn3z11w: /tmp/tmp6nn3z11w.cpp:19: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpga9hv533: /tmp/tmpga9hv533.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1') {\n \
    \           count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count--;\n        }\n        if (count == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpr5brcwbs: /tmp/tmpr5brcwbs.cpp:33: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp1ugklsgt: /tmp/tmp1ugklsgt.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\0')\n \
    \           break;\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (string[i] + string[j] <= 'z') {\n                count++;\n               \
    \ break;\n            }\n        }\n    }\n    if (count == 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwl8vx69a: /tmp/tmpwl8vx69a.cpp:32: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmphb2ajg4j: /tmp/tmphb2ajg4j.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp967xgnlq: /tmp/tmp967xgnlq.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] % 2 == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk_auyakr: /tmp/tmpk_auyakr.cpp:20: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpzy9ml9a6: /tmp/tmpzy9ml9a6.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpuf3y2av8: /tmp/tmpuf3y2av8.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[0]) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                if(string[j] != string[i]) {\n   \
    \                 for(int k = j + 1; k < n; k++) {\n                        if(string[k]\
    \ != string[j]) {\n                            if(string[k] != string[i]) {\n\
    \                                return false;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp7_mtarnq: /tmp/tmp7_mtarnq.cpp:31: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    bool\
    \ prime = true;\n    for (int i = 1; i < n; i++) {\n        if (string[i] % 2\
    \ == 0) {\n            prime = false;\n            break;\n        }\n    }\n\
    \    return prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe31os8mr: /tmp/tmpe31os8mr.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0') {\n            return true;\n        }\n        for (int j = i + 1; j < n;\
    \ j++) {\n            if (string[i] + string[j] == '\\0') {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo90xjhl3: /tmp/tmpo90xjhl3.cpp:30: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp406etjml: /tmp/tmp406etjml.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpb31husua: /tmp/tmpb31husua.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpgg_t4kzh: /tmp/tmpgg_t4kzh.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i]\
    \ == '\\0' || string[i - 1] == string[i]) {\n            continue;\n        }\n\
    \        if (string[i - 1] % string[i] == 0) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbx2vdyeg: /tmp/tmpbx2vdyeg.cpp:27: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpj2lwozqb: /tmp/tmpj2lwozqb.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    if (n\
    \ == 0) return false;\n    for (int i = 2; i < n; i++) {\n        if (string[i]\
    \ == '1') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpapo_7qw8: /tmp/tmpapo_7qw8.cpp:23: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    bool\
    \ flag = true;\n    for (int i = 1; i <= n; i++) {\n        if (string[i - 1]\
    \ != string[i]) {\n            flag = false;\n            break;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc_bewf09: /tmp/tmpc_bewf09.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 2) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6tro6_c3: /tmp/tmp6tro6_c3.cpp:25: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\"\
    )) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpycr42c_t: /tmp/tmpycr42c_t.cpp:30: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i=2; i<=n/2; i++) {\n        if(string[i] == '0') {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpww7c5sc0: /tmp/tmpww7c5sc0.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 0; i<n; i++) {\n        if(string[i] == '\\0') {\n            return false;\n\
    \        }\n    }\n    for(int i = 2; i<n; i++) {\n        if(string[i] == '\\\
    0') {\n            return true;\n        }\n        if(string[i] % 2 == 0) {\n\
    \            return false;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) ==\
    \ (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpey2_t01_: /tmp/tmpey2_t01_.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr5esdcmz: /tmp/tmpr5esdcmz.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] != string[0]) {\n        \
    \    int count = 0;\n            for (int j = i; j < n; j++) {\n             \
    \   if (string[j] == string[i]) {\n                    count++;\n            \
    \    }\n            }\n            if (count == i) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp0pw2ci2_: /tmp/tmp0pw2ci2_.cpp:32: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[i - 1]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp2r8aqsw5: /tmp/tmp2r8aqsw5.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpn584x7ck: /tmp/tmpn584x7ck.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\0' || string[i]\
    \ == ' ') {\n            continue;\n        }\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (string[i] + string[j] == string) {\n            \
    \    count++;\n                break;\n            }\n        }\n    }\n    if\
    \ (count == 0) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) ==\
    \ (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhrg4_6x.cpp: In function \u2018bool prime_length(std::string)\u2019\
    :\n/tmp/tmpnhrg4_6x.cpp:18:39: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   18 |             if (string[i] + string[j] == string) {\n      |      \
    \                                 ^~ ~~~~~~\n      |                         \
    \                 |\n      |                                          std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1173:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1173 |     operator==(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1173:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1247:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1247 |     operator==(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1247:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1321:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1321 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1321:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1395:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1395 |     operator==(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1395:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1473:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1473 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1473:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/regex.h:1991:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator==(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 1991 |     operator==(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1991:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/iosfwd:40,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note: candidate: \u2018template<class _StateT> bool std::operator==(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  222 |     operator==(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::fpos<_StateT>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:448:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  448 |     operator==(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:448:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:325:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  325 |     operator==(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:325:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  363 |     operator==(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched\
    \ types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1136:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1136 |     operator==(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1142 |     operator==(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/allocator.h:167:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&,\
    \ const std::allocator<_T2>&)\u2019\n  167 |     operator==(const allocator<_T1>&,\
    \ const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:167:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::allocator<_CharT>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6144:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6144 | \
    \    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      | \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6144:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6152:5: note:\
    \ candidate: \u2018template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value,\
    \ bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const\
    \ std::__cxx11::basic_string<_CharT>&)\u2019\n 6152 |     operator==(const basic_string<_CharT>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6166:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6166 |     operator==(const _CharT* __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6166:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   18\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6178 |     operator==(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/system_error:292:3: note: candidate:\
    \ \u2018bool std::operator==(const std::error_code&, const std::error_code&)\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:292:32: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:297:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_code&, const std::error_condition&)\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:297:32: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:304:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_condition&, const\
    \ std::error_code&)\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:304:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:311:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:311:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  311 |   operator==(const error_condition& __lhs,\n\
    \      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator==(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  208 |     operator==(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/complex:463:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  463 |     operator==(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:463:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/complex:468:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  468 |     operator==(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:468:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/complex:473:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  473 |     operator==(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:473:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   18 |           \
    \  if (string[i] + string[j] == string) {\n      |                           \
    \               ^~~~~~\nIn file included from /usr/include/c++/9/deque:67,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:286:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  286 |     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:286:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  293 |     operator==(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2312 |   \
    \  operator==(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::deque<_Tp, _Alloc>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/array:252:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  252 |     operator==(const array<_Tp,\
    \ _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:252:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/tuple:1419:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1419 |     operator==(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1419:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched\
    \ types \u2018const std::tuple<_Tps ...>\u2019 and \u2018int\u2019\n   18 |  \
    \           if (string[i] + string[j] == string) {\n      |                  \
    \                        ^~~~~~\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  746 |     operator==(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:59,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  752 |     operator==(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::function<_Res(_ArgTypes ...)>\u2019\n \
    \  18 |             if (string[i] + string[j] == string) {\n      |          \
    \                                ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:715:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  715 |     operator==(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:715:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note: \
    \  mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  721 |     operator==(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  726 |     operator==(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   18 |   \
    \          if (string[i] + string[j] == string) {\n      |                   \
    \                       ^~~~~~\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:134:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  134 |     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:134:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:1991:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 1991 |     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:1991:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1455 |     operator==(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1119 |     operator==(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1412 |     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1418 |     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   18 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1423 |     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp, _Lp>\u2019\n   18 | \
    \            if (string[i] + string[j] == string) {\n      |                 \
    \                         ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:383:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator==(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  383 |     operator==(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  388 |     operator==(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  393 |     operator==(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   18 |        \
    \     if (string[i] + string[j] == string) {\n      |                        \
    \                  ^~~~~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1888:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1888 | \
    \    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1888:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  338 |     operator==(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:338:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::queue<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  979 |     operator==(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::set<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  964 |     operator==(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:313:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  313 |     operator==(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:313:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::stack<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  417\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==,\
    \ __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   18 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1197:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   18 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::valarray<_Tp>\u2019\n   18 |          \
    \   if (string[i] + string[j] == string) {\n      |                          \
    \                ^~~~~~\nIn file included from /usr/include/c++/9/forward_list:40,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/forward_list.tcc:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n  393 |     operator==(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.tcc:393:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note:   mismatched types \u2018const std::forward_list<_Tp,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/future:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/thread:276:3:\
    \ note: candidate: \u2018bool std::operator==(std::thread::id, std::thread::id)\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:276:25: note:   no known conversion for argument 1 from\
    \ \u2018int\u2019 to \u2018std::thread::id\u2019\n  276 |   operator==(thread::id\
    \ __x, thread::id __y) noexcept\n      |              ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/random:51,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/random.tcc:1884:5:\
    \ note: candidate: \u2018template<class _RealType1> bool std::operator==(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 1884 |     operator==(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.tcc:1884:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note: \
    \  mismatched types \u2018const std::normal_distribution<_RealType>\u2019 and\
    \ \u2018int\u2019\n   18 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/scoped_allocator:489:5: note: candidate:\
    \ \u2018template<class _OutA1, class _OutA2, class ... _InA> bool std::operator==(const\
    \ std::scoped_allocator_adaptor<_OutA1, _InA ...>&, const std::scoped_allocator_adaptor<_InnerHead,\
    \ _InnerTail ...>&)\u2019\n  489 |     operator==(const scoped_allocator_adaptor<_OutA1,\
    \ _InA...>& __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:489:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::scoped_allocator_adaptor<_OutA1, _InA\
    \ ...>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\
    \n 2093 |     operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2105 |     operator==(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_multimap<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:\
    \ candidate: \u2018template<class _Value, class _Hash, class _Pred, class _Alloc>\
    \ bool std::operator==(const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&,\
    \ const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1705 |    \
    \ operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note: \
    \  mismatched types \u2018const std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\
    \n 1717 |     operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const std::unordered_multiset<_Value, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   18 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/allocator.h:155:7: note: candidate:\
    \ \u2018bool std::operator==(const std::allocator<char>&, const std::allocator<char>&)\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:155:18: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const std::allocator<char>&\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |                  ^~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n   18 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019 and \u2018int\u2019\n   18 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpnhrg4_6x.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:166:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<char>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  166 |  operator==(const new_allocator&,\
    \ const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:166:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhrg4_6x.cpp:18:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const __gnu_cxx::new_allocator<_Tp>\u2019\n   18 |\
    \             if (string[i] + string[j] == string) {\n      |                \
    \                          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpf92fju90: /tmp/tmpf92fju90.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n/2; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp8y_eveac: /tmp/tmp8y_eveac.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] != string[n - 1]) {\n     \
    \       if (string[i] == '1') {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp09c9f9i7: /tmp/tmp09c9f9i7.cpp:26: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp9v9pua0t: /tmp/tmp9v9pua0t.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    bool\
    \ prime = true;\n    for (int i = 2; i < n; i++) {\n        if (string[i] != string[0])\
    \ {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9jyqjxau: /tmp/tmp9jyqjxau.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i <= n/2; i++) {\n        if(string[i] == '1') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp_1ilin06: /tmp/tmp_1ilin06.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ prime = true;\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            prime = false;\n        }\n    }\n    return prime;\n}\nint\
    \ main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\"\
    )) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2n_e7h73: /tmp/tmp2n_e7h73.cpp:30: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] == '\\0') return false;\n    }\n\
    \    for (int i = 2; i < n; i++) {\n        for (int j = 2; j < i; j++) {\n  \
    \          if (string[i] == '\\0') return false;\n            if (string[j] ==\
    \ string[i]) return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) ==\
    \ (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpapl7h0du: /tmp/tmpapl7h0du.cpp:25: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpj5i63i4y: /tmp/tmpj5i63i4y.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ flag = true;\n    for (int i = 1; i <= n; i++) {\n        if (string[i] % 2\
    \ == 0) {\n            flag = false;\n            break;\n        }\n    }\n \
    \   return flag;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpklha_clv: /tmp/tmpklha_clv.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp8agasa2j: /tmp/tmp8agasa2j.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpa4n_8bua: /tmp/tmpa4n_8bua.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp8r7wob39: /tmp/tmp8r7wob39.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpyu2eovrj: /tmp/tmpyu2eovrj.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqzc79d19: /tmp/tmpqzc79d19.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i < n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpfkoiw18o: /tmp/tmpfkoiw18o.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 2; i < n; i++) {\n        if(string[i] == '\\0')\n            return false;\n\
    \    }\n    for(int i = 2; i < n; i++) {\n        if(string[i] != '\\0')\n   \
    \         return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpdlrnj7ho: /tmp/tmpdlrnj7ho.cpp:24: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] == '\\0') return false;\n      \
    \  for (int j = i + 1; j < n; j++) {\n            if (string[i] + string[j] <=\
    \ 'z') {\n                string[j] = '\\0';\n            }\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp11wudnir: /tmp/tmp11wudnir.cpp:27: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = 0; j < i; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpw5joeu9e: /tmp/tmpw5joeu9e.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int j = i + 1;\n        while\
    \ (j < n && string[i] == string[j]) {\n            j++;\n        }\n        if\
    \ (j - i > 1) {\n            count++;\n        }\n    }\n    return count == 0;\n\
    }\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzebjeafr: /tmp/tmpzebjeafr.cpp:26: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (string[i - 1] ==\
    \ '\\0' || string[i] == '\\0' || string[i - 1] == string[i]) {\n            count++;\n\
    \        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmqyhec2h: /tmp/tmpmqyhec2h.cpp:25: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpc1hshfjt: /tmp/tmpc1hshfjt.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmplmuyyiku: /tmp/tmplmuyyiku.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n/2; i++) {\n        if (string[i] == '0') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpafgxjrr7: /tmp/tmpafgxjrr7.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 0; i <= n/2; i++) {\n        if(string[i] == '\\0') break;\n        for(int\
    \ j = i+1; j <= n/2; j++) {\n            if(string[j] == '\\0') break;\n     \
    \       if(string[i] + string[j] != '\\0') {\n                if(string[i] ==\
    \ 'o' && string[j] == 'n') {\n                    return true;\n             \
    \   }\n                if(string[i] == 'p' && string[j] == 'i') {\n          \
    \          return true;\n                }\n                if(string[i] == 'p'\
    \ && string[j] == 'e') {\n                    return true;\n                }\n\
    \                if(string[i] == 'o' && string[j] == 'r') {\n                \
    \    return true;\n                }\n                if(string[i] == 'n' && string[j]\
    \ == 't') {\n                    return true;\n                }\n           \
    \     if(string[i] == 't' && string[j] == 'u') {\n                    return true;\n\
    \                }\n                if(string[i] == 't' && string[j] == 'e') {\n\
    \                    return true;\n                }\n                if(string[i]\
    \ == 'u' && string[j] == 'r') {\n                    return true;\n          \
    \      }\n                if(string[i] == 'e' && string[j] == 'r') {\n       \
    \             return true;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpykf45r0k: /tmp/tmpykf45r0k.cpp:51: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmps62rfu3h: /tmp/tmps62rfu3h.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    bool\
    \ isPrime = true;\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            isPrime = false;\n            break;\n        }\n    }\n \
    \   return isPrime;\n}\nint main() {\n    auto candidate = prime_length;\n   \
    \ assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxzutm7b8: /tmp/tmpxzutm7b8.cpp:31: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp3jtysell: /tmp/tmp3jtysell.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ prime = true;\n    for (int i = 2; i < n; i++) {\n        if (string[i] != string[0])\
    \ {\n            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf866o7rz: /tmp/tmpf866o7rz.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  int count = 0;\n            for (int j = i; j < n; j++) {\n               \
    \ if (string[j] == string[i - 1])\n                    count++;\n            }\n\
    \            if (count == i)\n                return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpki07ba74: /tmp/tmpki07ba74.cpp:27: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i < n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpcuwc3_5k: /tmp/tmpcuwc3_5k.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp3ntjl5k4: /tmp/tmp3ntjl5k4.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 2; i < n; i++) {\n        if(string[i] == '0') {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuj1ypayb: /tmp/tmpuj1ypayb.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i=2; i<=n; i++) {\n        if(string[i] == '\\0')\n            return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnpg4hprt: /tmp/tmpnpg4hprt.cpp:23: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i < n; i++) {\n        if (string[i] == '\\0') {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmplwt9dl2o: /tmp/tmplwt9dl2o.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpxma31pvs: /tmp/tmpxma31pvs.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i]\
    \ == '\\0' || string[i] > '\\0' && string[i] < '\\1') {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfthrgq8e: /tmp/tmpfthrgq8e.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count--;\n        }\n        if (count == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmppkvsnysk: /tmp/tmppkvsnysk.cpp:33: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[i - 1]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp3bi4viov: /tmp/tmp3bi4viov.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] != string[0]) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                if(string[j] != string[i]) {\n   \
    \                 return false;\n                }\n            }\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0d242k43: /tmp/tmp0d242k43.cpp:25: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    for (int i = 2; i < n; i++) {\n        if (string[i] == '1')\
    \ {\n            count--;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpveojavfg: /tmp/tmpveojavfg.cpp:33: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i <= n/2; i++) {\n        if(string[i] == '1') {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpdlundnpd: /tmp/tmpdlundnpd.cpp:24: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = 0; j < i; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmppog4oxgi: /tmp/tmppog4oxgi.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for(int\
    \ i = 1; i < n; i++) {\n        if(string[i] == '\\0' || string[i] % 2 == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) ==\
    \ (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2fnknei8: /tmp/tmp2fnknei8.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i]\
    \ != '\\0' && string[i] % string[i - 1] == 0) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb3jx8ndb: /tmp/tmpb3jx8ndb.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp9x9argh0: /tmp/tmp9x9argh0.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    bool\
    \ prime = true;\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i ==\
    \ 0) {\n            prime = false;\n            break;\n        }\n    }\n   \
    \ return prime;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9r_uvyww: /tmp/tmp9r_uvyww.cpp:31: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    bool\
    \ flag = true;\n    for (int i = 1; i < n; i++) {\n        if (string[i] % 2 ==\
    \ 0) {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpotf6536s: /tmp/tmpotf6536s.cpp:23: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] == '\\0' || string[i -\
    \ 1] == '\\n' || string[i - 1] == '\\r') {\n            continue;\n        }\n\
    \        int count = 0;\n        for (int j = i; j <= n; j++) {\n            if\
    \ (string[j] != '\\0' && string[j] != '\\n' && string[j] != '\\r') {\n       \
    \         count++;\n            }\n        }\n        if (count == i) {\n    \
    \        return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp5xtljf4r: /tmp/tmp5xtljf4r.cpp:30: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp0noy2z4n: /tmp/tmp0noy2z4n.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '1') {\n \
    \           count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8qca6h9c: /tmp/tmp8qca6h9c.cpp:28: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpkv1r0wk5: /tmp/tmpkv1r0wk5.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] == '\\0') break;\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (string[j] == '\\0') break;\n     \
    \       if (string[i] + string[j] == string) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdac65mio.cpp: In function \u2018bool prime_length(std::string)\u2019\
    :\n/tmp/tmpdac65mio.cpp:16:39: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   16 |             if (string[i] + string[j] == string) {\n      |      \
    \                                 ^~ ~~~~~~\n      |                         \
    \                 |\n      |                                          std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018int\u2019\n   16 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1173:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1173 |     operator==(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1173:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1247:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1247 |     operator==(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1247:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   16\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1321:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1321 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1321:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1395:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1395 |     operator==(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1395:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   16\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1473:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1473 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1473:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/regex.h:1991:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator==(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 1991 |     operator==(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1991:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/iosfwd:40,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note: candidate: \u2018template<class _StateT> bool std::operator==(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  222 |     operator==(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::fpos<_StateT>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:448:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  448 |     operator==(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:448:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:325:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  325 |     operator==(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:325:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  363 |     operator==(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched\
    \ types \u2018const std::reverse_iterator<_Iterator>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1136:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1136 |     operator==(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1142 |     operator==(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1142:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019 and\
    \ \u2018int\u2019\n   16 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/allocator.h:167:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&,\
    \ const std::allocator<_T2>&)\u2019\n  167 |     operator==(const allocator<_T1>&,\
    \ const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:167:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::allocator<_CharT>\u2019 and \u2018\
    int\u2019\n   16 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6144:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6144 | \
    \    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      | \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6144:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note: \
    \  mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6152:5: note:\
    \ candidate: \u2018template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value,\
    \ bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const\
    \ std::__cxx11::basic_string<_CharT>&)\u2019\n 6152 |     operator==(const basic_string<_CharT>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6166:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6166 |     operator==(const _CharT* __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6166:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   16\
    \ |             if (string[i] + string[j] == string) {\n      |              \
    \                            ^~~~~~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6178 |     operator==(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/system_error:292:3: note: candidate:\
    \ \u2018bool std::operator==(const std::error_code&, const std::error_code&)\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:292:32: note:   no known\
    \ conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:297:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_code&, const std::error_condition&)\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:297:32: note:\
    \   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::error_code&\u2019\
    \n  297 |   operator==(const error_code& __lhs, const error_condition& __rhs)\
    \ noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/system_error:304:3:\
    \ note: candidate: \u2018bool std::operator==(const std::error_condition&, const\
    \ std::error_code&)\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:304:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  304 |   operator==(const error_condition& __lhs,\
    \ const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:311:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:311:37:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ std::error_condition&\u2019\n  311 |   operator==(const error_condition& __lhs,\n\
    \      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator==(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  208 |     operator==(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/complex:463:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  463 |     operator==(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:463:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/complex:468:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  468 |     operator==(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:468:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/complex:473:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  473 |     operator==(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:473:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   16 |           \
    \  if (string[i] + string[j] == string) {\n      |                           \
    \               ^~~~~~\nIn file included from /usr/include/c++/9/deque:67,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:286:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  286 |     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:286:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  293 |     operator==(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2312 |   \
    \  operator==(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::deque<_Tp, _Alloc>\u2019 and \u2018\
    int\u2019\n   16 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/array:252:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator==(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  252 |     operator==(const array<_Tp,\
    \ _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:252:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/tuple:1419:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1419 |     operator==(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1419:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched\
    \ types \u2018const std::tuple<_Tps ...>\u2019 and \u2018int\u2019\n   16 |  \
    \           if (string[i] + string[j] == string) {\n      |                  \
    \                        ^~~~~~\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  746 |     operator==(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:59,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  752 |     operator==(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::function<_Res(_ArgTypes ...)>\u2019\n \
    \  16 |             if (string[i] + string[j] == string) {\n      |          \
    \                                ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:715:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  715 |     operator==(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:715:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note: \
    \  mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  721 |     operator==(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   16 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  726 |     operator==(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   16 |   \
    \          if (string[i] + string[j] == string) {\n      |                   \
    \                       ^~~~~~\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:134:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  134 |     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:134:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:1991:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 1991 |     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:1991:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019 and\
    \ \u2018int\u2019\n   16 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1455 |     operator==(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1119 |     operator==(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1412 |     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019 and\
    \ \u2018int\u2019\n   16 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1418 |     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   16 |             if (string[i] + string[j] == string) {\n      |\
    \                                          ^~~~~~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1423 |     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp, _Lp>\u2019\n   16 | \
    \            if (string[i] + string[j] == string) {\n      |                 \
    \                         ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:383:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator==(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  383 |     operator==(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  388 |     operator==(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  393 |     operator==(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   16 |        \
    \     if (string[i] + string[j] == string) {\n      |                        \
    \                  ^~~~~~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1888:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1888 | \
    \    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1888:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  338 |     operator==(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:338:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::queue<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  979 |     operator==(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::set<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  964 |     operator==(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:313:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  313 |     operator==(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:313:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::stack<_Tp,\
    \ _Seq>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   16 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  417\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   16 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==,\
    \ __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   16 |             if\
    \ (string[i] + string[j] == string) {\n      |                               \
    \           ^~~~~~\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1197:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   16 |             if (string[i] + string[j] == string) {\n      |        \
    \                                  ^~~~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::valarray<_Tp>\u2019\n   16 |          \
    \   if (string[i] + string[j] == string) {\n      |                          \
    \                ^~~~~~\nIn file included from /usr/include/c++/9/forward_list:40,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/forward_list.tcc:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n  393 |     operator==(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.tcc:393:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdac65mio.cpp:16:42: note:   mismatched types \u2018const std::forward_list<_Tp,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/future:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/thread:276:3:\
    \ note: candidate: \u2018bool std::operator==(std::thread::id, std::thread::id)\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:276:25: note:   no known conversion for argument 1 from\
    \ \u2018int\u2019 to \u2018std::thread::id\u2019\n  276 |   operator==(thread::id\
    \ __x, thread::id __y) noexcept\n      |              ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/random:51,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/random.tcc:1884:5:\
    \ note: candidate: \u2018template<class _RealType1> bool std::operator==(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 1884 |     operator==(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.tcc:1884:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note: \
    \  mismatched types \u2018const std::normal_distribution<_RealType>\u2019 and\
    \ \u2018int\u2019\n   16 |             if (string[i] + string[j] == string) {\n\
    \      |                                          ^~~~~~\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/scoped_allocator:489:5: note: candidate:\
    \ \u2018template<class _OutA1, class _OutA2, class ... _InA> bool std::operator==(const\
    \ std::scoped_allocator_adaptor<_OutA1, _InA ...>&, const std::scoped_allocator_adaptor<_InnerHead,\
    \ _InnerTail ...>&)\u2019\n  489 |     operator==(const scoped_allocator_adaptor<_OutA1,\
    \ _InA...>& __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:489:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::scoped_allocator_adaptor<_OutA1, _InA\
    \ ...>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\
    \n 2093 |     operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2105 |     operator==(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::unordered_multimap<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   16 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:\
    \ candidate: \u2018template<class _Value, class _Hash, class _Pred, class _Alloc>\
    \ bool std::operator==(const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&,\
    \ const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1705 |    \
    \ operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note: \
    \  mismatched types \u2018const std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\
    \n 1717 |     operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1717:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const std::unordered_multiset<_Value, _Hash,\
    \ _Pred, _Alloc>\u2019 and \u2018int\u2019\n   16 |             if (string[i]\
    \ + string[j] == string) {\n      |                                          ^~~~~~\n\
    In file included from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/allocator.h:155:7: note: candidate:\
    \ \u2018bool std::operator==(const std::allocator<char>&, const std::allocator<char>&)\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:155:18: note:   no\
    \ known conversion for argument 1 from \u2018int\u2019 to \u2018const std::allocator<char>&\u2019\
    \n  155 |       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n\
    \      |                  ^~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n   16 |             if (string[i] + string[j] == string)\
    \ {\n      |                                          ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019 and \u2018int\u2019\n   16 |             if (string[i] + string[j]\
    \ == string) {\n      |                                          ^~~~~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdac65mio.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:166:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<char>&,\
    \ const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  166 |  operator==(const new_allocator&,\
    \ const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:166:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdac65mio.cpp:16:42:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const __gnu_cxx::new_allocator<_Tp>\u2019\n   16 |\
    \             if (string[i] + string[j] == string) {\n      |                \
    \                          ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp9z_kzr96: /tmp/tmp9z_kzr96.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '\\\
    0' || string[i] == ' ') {\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        return false;\n    }\n    for (int i = 2; i <= n / 2; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5rl5qc52: /tmp/tmp5rl5qc52.cpp:30: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpi21dr_lj: /tmp/tmpi21dr_lj.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n\
    \    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp3xp5dgd5: /tmp/tmp3xp5dgd5.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = 0; j < i; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpt2nhs7f6: /tmp/tmpt2nhs7f6.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i <= n; i++) {\n        if (string[i] != string[0]) {\n            int\
    \ count = 0;\n            for (int j = 0; j < i; j++) {\n                if (string[j]\
    \ == string[i]) {\n                    count++;\n                }\n         \
    \   }\n            if (count == i) {\n                return true;\n         \
    \   }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmplrnnxsdz: /tmp/tmplrnnxsdz.cpp:29: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (string[i - 1] != string[i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp2n8zdrjf: /tmp/tmp2n8zdrjf.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] != string[i - 1]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n \
    \   assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\"\
    )) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"\
    wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpp3o_fztc: /tmp/tmpp3o_fztc.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    int\
    \ count = 0;\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '.')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    for (int i = 0; i < n; i++) {\n        if (string[i] == '.')\
    \ {\n            count--;\n        }\n    }\n    if (count == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = prime_length;\n\
    \    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\"\
    )) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"\
    orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"\
    world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7rh3jm2d: /tmp/tmp7rh3jm2d.cpp:36: int main(): Assertion `candidate((\"\
    orange\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.size();\n    for (int\
    \ i = 2; i < n; i++) {\n        if (string[i] == '\\0')\n            break;\n\
    \        if (string[i] % 2 == 0)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"\
    Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"\
    kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n   \
    \ assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) ==\
    \ (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"\
    Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"\
    gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n\
    \    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\"))\
    \ == (false));\n    assert(candidate((\"0\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvjvpdoht: /tmp/tmpvjvpdoht.cpp:22: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpxq19jibd: /tmp/tmpxq19jibd.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmpo1gcurdl: /tmp/tmpo1gcurdl.cpp:29: int main(): Assertion `candidate((\"\
    \")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a string and returns True if the string\n// length is a prime number or\
    \ False otherwise\n// Examples\n// prime_length('Hello') == True\n// prime_length('abcdcba')\
    \ == True\n// prime_length('kittens') == True\n// prime_length('orange') == False\n\
    bool prime_length(std::string string) {\n    int n = string.length();\n    for\
    \ (int i = 1; i <= n; i++) {\n        if (string[i] % 2 == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"\
    abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n   \
    \ assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\"))\
    \ == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"\
    MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"\
    go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"\
    aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n\
    \    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) ==\
    \ (false));\n}\n"
  stdout: ''
  stderr: "tmp09l5qqcp: /tmp/tmp09l5qqcp.cpp:21: int main(): Assertion `candidate((\"\
    Hello\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
