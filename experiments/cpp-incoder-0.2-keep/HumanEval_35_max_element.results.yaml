name: HumanEval_35_max_element
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\n\
    \            max_val = i;\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max_element = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_element) {\n           \
    \ max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = -long_MAX;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n \
    \   }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3k3vmmta.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3k3vmmta.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = 0;\n    long max_ele_pos = 0;\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele = l[i];\n\
    \            max_ele_pos = i;\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = l[0];\n    for (long i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_ele) {\n            max_ele = l[i];\n        }\n    }\n\
    \    return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\n\
    \            max_val = i;\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for (auto i : l) {\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\n\
    \            max_val = i;\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max_element) {\n            max_element = l[i];\n    \
    \    }\n    }\n    return max_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (max < l[i]) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = 0;\n    long max_ele_pos = 0;\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele = l[i];\n\
    \            max_ele_pos = i;\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = -long_MAX;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n \
    \   }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx3vpatz6.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx3vpatz6.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max_element) {\n            max_element = l[i];\n    \
    \    }\n    }\n    return max_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max_element) {\n            max_element = l[i];\n    \
    \    }\n    }\n    return max_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = l[0];\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\n\
    \            max_val = i;\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Your code goes here\n    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max_element) {\n            max_element = l[i];\n    \
    \    }\n    }\n    return max_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = l[0];\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val)\n            max_val = l[i];\n    }\n    return max_val;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    return max_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = 0;\n    long max_pos = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele = l[i];\n\
    \            max_pos = i;\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = 0;\n    long max_ele_pos = 0;\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele = l[i];\n\
    \            max_ele_pos = i;\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i : l) {\n        if (i > max_val)\n\
    \            max_val = i;\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = 0;\n    for (long i = 0; i < l.size(); i++) {\n   \
    \     if (l[i] > max_ele) {\n            max_ele = l[i];\n        }\n    }\n \
    \   return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max_val = l[0];\n    for (long\
    \ i : l) {\n        if (i > max_val) {\n            max_val = i;\n        }\n\
    \    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max_element) {\n            max_element = l[i];\n    \
    \    }\n    }\n    return max_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long max = 0;\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_ele) {\n            max_ele = l[i];\n        }\n    }\n\
    \    return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max_element) {\n            max_element = l[i];\n    \
    \    }\n    }\n    return max_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = 0;\n    for (long i = 0; i < l.size(); i++) {\n   \
    \     if (l[i] > max_ele) {\n            max_ele = l[i];\n        }\n    }\n \
    \   return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n\
    \    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_val = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > max_val)\n            max_val = l[i];\n    }\n    return max_val;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for (long i : l) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
