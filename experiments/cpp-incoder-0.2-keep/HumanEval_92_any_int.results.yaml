name: HumanEval_92_any_int
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwvli_8e0: /tmp/tmpwvli_8e0.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9l_al0n1: /tmp/tmp9l_al0n1.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdpwq052l: /tmp/tmpdpwq052l.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppgirfcvz: /tmp/tmppgirfcvz.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpr874u51t: /tmp/tmpr874u51t.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == y + z);\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp98qe0z0r: /tmp/tmp98qe0z0r.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == y + z);\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpd78qgix4: /tmp/tmpd78qgix4.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyqrmdr7l: /tmp/tmpyqrmdr7l.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y || x == y + z || x == z + x\
    \ || y == x + z || y == y + x || y == z + x || z == x + y || z == y + x || z ==\
    \ z + x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv1n5_61b: /tmp/tmpv1n5_61b.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb8cyrwo1: /tmp/tmpb8cyrwo1.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a+b+c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4j5wnvi7: /tmp/tmp4j5wnvi7.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4ckze3xn: /tmp/tmp4ckze3xn.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int xy = xx;\n    int yz = yy;\n    int zx = zz;\n    int\
    \ xz = xx;\n    int yx = yy;\n    int zy = zz;\n    int xx = xx;\n    int yy =\
    \ yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n\
    \    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int\
    \ yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz =\
    \ zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n\
    \    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int\
    \ zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx =\
    \ xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n\
    \    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int\
    \ xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy =\
    \ yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n\
    \    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int\
    \ yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz =\
    \ zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n\
    \    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int\
    \ zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx =\
    \ xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n\
    \    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int\
    \ xx = xx;\n    int yy = yy;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprrce49rg.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmprrce49rg.cpp:21:9: error: redeclaration of \u2018int xx\u2019\n   21\
    \ |     int xx = xx;\n      |         ^~\n/tmp/tmprrce49rg.cpp:12:9: note: \u2018\
    int xx\u2019 previously declared here\n   12 |     int xx = x;\n      |      \
    \   ^~\n/tmp/tmprrce49rg.cpp:22:9: error: redeclaration of \u2018int yy\u2019\n\
    \   22 |     int yy = yy;\n      |         ^~\n/tmp/tmprrce49rg.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:23:9: error: redeclaration of \u2018int zz\u2019\
    \n   23 |     int zz = zz;\n      |         ^~\n/tmp/tmprrce49rg.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:24:9: error: redeclaration of \u2018int xx\u2019\
    \n   24 |     int xx = xx;\n      |         ^~\n/tmp/tmprrce49rg.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:25:9: error: redeclaration of \u2018int yy\u2019\
    \n   25 |     int yy = yy;\n      |         ^~\n/tmp/tmprrce49rg.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:26:9: error: redeclaration of \u2018int zz\u2019\
    \n   26 |     int zz = zz;\n      |         ^~\n/tmp/tmprrce49rg.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:27:9: error: redeclaration of \u2018int xx\u2019\
    \n   27 |     int xx = xx;\n      |         ^~\n/tmp/tmprrce49rg.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:28:9: error: redeclaration of \u2018int yy\u2019\
    \n   28 |     int yy = yy;\n      |         ^~\n/tmp/tmprrce49rg.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:29:9: error: redeclaration of \u2018int zz\u2019\
    \n   29 |     int zz = zz;\n      |         ^~\n/tmp/tmprrce49rg.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmprrce49rg.cpp:30:9: error: redeclaration of "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp85hwuan3: /tmp/tmp85hwuan3.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && x == y + z &&\
    \ x == y + z) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg0gecr0o: /tmp/tmpg0gecr0o.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y || x == z || y == z);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphx9y1gff: /tmp/tmphx9y1gff.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5e4wqczs: /tmp/tmp5e4wqczs.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpl7xn7p0a: /tmp/tmpl7xn7p0a.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpspvgogof: /tmp/tmpspvgogof.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x) {\n        return true;\n    } else if (sum == y) {\n        return\
    \ true;\n    } else if (sum == z) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyug5ndua: /tmp/tmpyug5ndua.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn8mu68vb: /tmp/tmpn8mu68vb.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x)\n        return true;\n\
    \    if (sum == y)\n        return true;\n    if (sum == z)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphhjl7ovz: /tmp/tmphhjl7ovz.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y && x == x + z && y == y + z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx_zkljkd: /tmp/tmpx_zkljkd.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx + yy + zz == x) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnujf3g7h: /tmp/tmpnujf3g7h.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    return (x\
    \ == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb1cq3zv2: /tmp/tmpb1cq3zv2.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4v2m_lqp: /tmp/tmp4v2m_lqp.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == (x + y) || sum == (x + z) || sum == (y + z)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfttwvo0e: /tmp/tmpfttwvo0e.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == y || x == z || y ==\
    \ z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptcjhethy: /tmp/tmptcjhethy.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcs04tgb5: /tmp/tmpcs04tgb5.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9jc2tul6: /tmp/tmp9jc2tul6.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    int\
    \ a = x;\n    int b = y;\n    int c = z;\n    if (sum == a || sum == b || sum\
    \ == c) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpwwkqb_lf: /tmp/tmpwwkqb_lf.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int sum = xx + yy + zz;\n    if (sum == x) {\n        return\
    \ true;\n    } else if (sum == y) {\n        return true;\n    } else if (sum\
    \ == z) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx7twytr7: /tmp/tmpx7twytr7.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == x + z && y == y + x && z == z + y);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpif_2ubs0: /tmp/tmpif_2ubs0.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp89nz4wc6: /tmp/tmp89nz4wc6.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfjq5tdn2: /tmp/tmpfjq5tdn2.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == 0)\n        return false;\n    if (sum < 0)\n        return true;\n\
    \    if (sum > 0)\n        return false;\n    if (x == y)\n        return true;\n\
    \    if (x == z)\n        return true;\n    if (y == z)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp70gon8cq: /tmp/tmp70gon8cq.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnw4zd7qi: /tmp/tmpnw4zd7qi.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x) {\n        return true;\n\
    \    }\n    if (sum == y) {\n        return true;\n    }\n    if (sum == z) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4rwsq7l0: /tmp/tmp4rwsq7l0.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0cq1fy3y: /tmp/tmp0cq1fy3y.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z + x);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppktvr6n5: /tmp/tmppktvr6n5.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp70n4bct5: /tmp/tmp70n4bct5.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    return ((a + b + c) == (x+y+z));\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpl9zxclwa: /tmp/tmpl9zxclwa.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(6)), (float(2))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ospbf_8: /tmp/tmp1ospbf_8.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    return x\
    \ == y + z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwj5zszy8: /tmp/tmpwj5zszy8.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a+b+c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprsbmj1th: /tmp/tmprsbmj1th.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3i3tqr97: /tmp/tmp3i3tqr97.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y && x == x + z && y == y + z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpchgon_ww: /tmp/tmpchgon_ww.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv4q854kq: /tmp/tmpv4q854kq.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw718y0o0: /tmp/tmpw718y0o0.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    return ((a + b == c) || (a + c == b) || (b + c == a));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9oo1n60g: /tmp/tmp9oo1n60g.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ x == y || x == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp1ptesob: /tmp/tmpp1ptesob.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd26di4jm: /tmp/tmpd26di4jm.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprh059jaj: /tmp/tmprh059jaj.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum;\n    sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else\
    \ if (sum == y)\n        return true;\n    else if (sum == z)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpffjty4qz: /tmp/tmpffjty4qz.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0 && y >= 0 && z >=\
    \ 0);\n    return (x == x + y || x == y + z || x == z + x || y == x + z || y ==\
    \ y + x || z == x + y || z == y + x);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8acaqchz: /tmp/tmp8acaqchz.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfrmvcafk: /tmp/tmpfrmvcafk.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x) {\n        return true;\n    }\n    if (sum == y) {\n        return\
    \ true;\n    }\n    if (sum == z) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp14w1d1um: /tmp/tmp14w1d1um.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x) {\n        return true;\n    }\n    else\
    \ if (sum == y) {\n        return true;\n    }\n    else if (sum == z) {\n   \
    \     return true;\n    }\n    else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp0z3lwb9: /tmp/tmpp0z3lwb9.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_2w8daj3: /tmp/tmp_2w8daj3.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && y == z + x &&\
    \ z == x + y) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2lxjdztl: /tmp/tmp2lxjdztl.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x || sum == y || sum == z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprv_s76sq: /tmp/tmprv_s76sq.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a+b+c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbael96ye: /tmp/tmpbael96ye.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x) {\n        return true;\n\
    \    }\n    if (sum == y) {\n        return true;\n    }\n    if (sum == z) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm1fcqqn9: /tmp/tmpm1fcqqn9.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8dvgp6k5: /tmp/tmp8dvgp6k5.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpljclquqd: /tmp/tmpljclquqd.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && x == z) return true;\n\
    \    if (x == y || x == z || y == z) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp77c7hz_e: /tmp/tmp77c7hz_e.cpp:18: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp72mgdjfe: /tmp/tmp72mgdjfe.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ std::abs(sum - z) < std::abs(sum - y) && std::abs(sum - x) < std::abs(sum -\
    \ z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3i81rbfa: /tmp/tmp3i81rbfa.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3_29qfub: /tmp/tmp3_29qfub.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6_3uw3dn: /tmp/tmp6_3uw3dn.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpslw495_i: /tmp/tmpslw495_i.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    if (sum == y)\n\
    \        return true;\n    if (sum == z)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd1quygyy: /tmp/tmpd1quygyy.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpws4qhg_d: /tmp/tmpws4qhg_d.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    return\
    \ ((sum == x) || (sum == y) || (sum == z));\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpg9srypo2: /tmp/tmpg9srypo2.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==x||sum==y||sum==z){\n        return true;\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmplvdurwqy: /tmp/tmplvdurwqy.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8pisjpt: /tmp/tmpe8pisjpt.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == 0)\n        return false;\n    if (x == sum)\n        return true;\n\
    \    if (y == sum)\n        return true;\n    if (z == sum)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe3m7feey: /tmp/tmpe3m7feey.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a > b) swap(a, b);\n    if (b > c) swap(b, c);\n\
    \    if (a == 0 || b == 0 || c == 0) return false;\n    if (a == b) return true;\n\
    \    if (a == c) return true;\n    if (b == c) return true;\n    if (a > 0 &&\
    \ b > 0 && c > 0) return true;\n    if (a > 0 && b > 0 && c < 0) return true;\n\
    \    if (a > 0 && b < 0 && c > 0) return true;\n    if (a > 0 && b < 0 && c <\
    \ 0) return true;\n    if (a < 0 && b > 0 && c > 0) return true;\n    if (a <\
    \ 0 && b > 0 && c < 0) return true;\n    if (a < 0 && b < 0 && c > 0) return true;\n\
    \    if (a < 0 && b < 0 && c < 0) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1gr4_e83.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmp1gr4_e83.cpp:15:16: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   15 |     if (a > b) swap(a, b);\n      |                ^~~~\n/tmp/tmp1gr4_e83.cpp:15:16:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp1gr4_e83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1gr4_e83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-sk"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int x_int = (int)x;\n    int y_int\
    \ = (int)y;\n    int z_int = (int)z;\n    return x_int + y_int + z_int == x +\
    \ y + z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2mm8o1xm: /tmp/tmp2mm8o1xm.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(6)), (float(2))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum;\n    sum=x+y;\n    if(sum==z){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpikypm375: /tmp/tmpikypm375.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a > b) swap(a, b);\n    if (b > c) swap(b, c);\n\
    \    if (a == b) return true;\n    if (a == c) return true;\n    if (b == c) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdxtwcymd.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpdxtwcymd.cpp:15:16: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   15 |     if (a > b) swap(a, b);\n      |                ^~~~\n/tmp/tmpdxtwcymd.cpp:15:16:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdxtwcymd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdxtwcymd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-sk"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp96e0ee4o: /tmp/tmp96e0ee4o.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x) {\n        return true;\n    } else if (sum == y) {\n        return\
    \ true;\n    } else if (sum == z) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8bcu7_mw: /tmp/tmp8bcu7_mw.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppvin0975: /tmp/tmppvin0975.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    int sum = a + b + c;\n    if (sum == x)\n        return\
    \ true;\n    if (sum == y)\n        return true;\n    if (sum == z)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyjybg06f: /tmp/tmpyjybg06f.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4t7n9oma: /tmp/tmp4t7n9oma.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphhhcb5mh: /tmp/tmphhhcb5mh.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxfqe3wp4: /tmp/tmpxfqe3wp4.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    if\
    \ (x == y + z && x == y + z && x == y + z) {\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvybv6sf_: /tmp/tmpvybv6sf_.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return x == y + z;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbd55g4pk: /tmp/tmpbd55g4pk.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmplhmn72lm: /tmp/tmplhmn72lm.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == 0)\n        return true;\n    if (sum < 0)\n\
    \        return false;\n    if (sum > 0)\n        return false;\n    if (x ==\
    \ sum)\n        return true;\n    if (y == sum)\n        return true;\n    if\
    \ (z == sum)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpyoj4yg6z: /tmp/tmpyoj4yg6z.cpp:30: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) {\n        return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxwhij2pv: /tmp/tmpxwhij2pv.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = static_cast<int>(x);\n\
    \    int yy = static_cast<int>(y);\n    int zz = static_cast<int>(z);\n    return\
    \ xx + yy == zz;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm5oiko2l: /tmp/tmpm5oiko2l.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx + yy + zz == x)\n        return true;\n    if (xx\
    \ + yy + zz == y)\n        return true;\n    if (xx + yy + zz == z)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3dqb6crg: /tmp/tmp3dqb6crg.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptx1nx3hp: /tmp/tmptx1nx3hp.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    int d = a + b + c;\n    return d == a || d == b || d\
    \ == c;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2hryi9dy: /tmp/tmp2hryi9dy.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == x + z && y == y + z && z == z + y);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp2z7b7_5i: /tmp/tmp2z7b7_5i.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp67yyygiq: /tmp/tmp67yyygiq.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    return\
    \ ((sum == x) || (sum == y) || (sum == z));\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj7kvn71b: /tmp/tmpj7kvn71b.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2vvs0ulu: /tmp/tmp2vvs0ulu.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmprf79wjs3: /tmp/tmprf79wjs3.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptraks9v2: /tmp/tmptraks9v2.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr049d01c: /tmp/tmpr049d01c.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnxiecm6l: /tmp/tmpnxiecm6l.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && x == y + z &&\
    \ x == y + z) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3cu7jyl4: /tmp/tmp3cu7jyl4.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y || x == z || y == z);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2z07p_lt: /tmp/tmp2z07p_lt.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z);\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmljuxm10: /tmp/tmpmljuxm10.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpysei1mrt: /tmp/tmpysei1mrt.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsxbksb6c: /tmp/tmpsxbksb6c.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write code here\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphrujg3h5: /tmp/tmphrujg3h5.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzp3qizkd: /tmp/tmpzp3qizkd.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a > b && a > c) {\n        return true;\n    } else\
    \ if (b > c && b > a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiak54z61: /tmp/tmpiak54z61.cpp:27: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int x\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7u0t5t36.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmp7u0t5t36.cpp:21:9: error: redeclaration of \u2018int xx\u2019\n   21\
    \ |     int xx = x;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:12:9: note: \u2018\
    int xx\u2019 previously declared here\n   12 |     int xx = x;\n      |      \
    \   ^~\n/tmp/tmp7u0t5t36.cpp:22:9: error: redeclaration of \u2018int yy\u2019\n\
    \   22 |     int yy = y;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:23:9: error: redeclaration of \u2018int zz\u2019\
    \n   23 |     int zz = z;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:24:9: error: redeclaration of \u2018int xy\u2019\
    \n   24 |     int xy = x;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:15:9: note:\
    \ \u2018int xy\u2019 previously declared here\n   15 |     int xy = x;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:25:9: error: redeclaration of \u2018int yz\u2019\
    \n   25 |     int yz = y;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:16:9: note:\
    \ \u2018int yz\u2019 previously declared here\n   16 |     int yz = y;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:26:9: error: redeclaration of \u2018int zx\u2019\
    \n   26 |     int zx = z;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:17:9: note:\
    \ \u2018int zx\u2019 previously declared here\n   17 |     int zx = z;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:27:9: error: redeclaration of \u2018int xz\u2019\
    \n   27 |     int xz = x;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:28:9: error: redeclaration of \u2018int yx\u2019\
    \n   28 |     int yx = y;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:29:9: error: redeclaration of \u2018int zy\u2019\
    \n   29 |     int zy = z;\n      |         ^~\n/tmp/tmp7u0t5t36.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmp7u0t5t36.cpp:30:9: error: redeclaration of \u2018int xx\u2019\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && x == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn_o1jp6z: /tmp/tmpn_o1jp6z.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_4nw_z76: /tmp/tmp_4nw_z76.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpir1r4j0l: /tmp/tmpir1r4j0l.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb6i5t4v6: /tmp/tmpb6i5t4v6.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (a == c - b) return true;\n    if (a == b + c) return true;\n    if (a\
    \ == b - c) return true;\n    if (a == c - b) return true;\n    if (a == b + c)\
    \ return true;\n    if (a == b - c) return true;\n    if (a == c - b) return true;\n\
    \    if (a == b + c) return true;\n    if (a == b - c) return true;\n    if (a\
    \ == c - b) return true;\n    if (a == b + c) return true;\n    if (a == b - c)\
    \ return true;\n    if (a == c - b) return true;\n    if (a == b + c) return true;\n\
    \    if (a == b - c) return true;\n    if (a == c - b) return true;\n    if (a\
    \ == b + c) return true;\n    if (a == b - c) return true;\n    if (a == c - b)\
    \ return true;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (a == c - b) return true;\n    if (a == b + c) return true;\n    if (a\
    \ == b - c) return true;\n    if (a == c - b) return true;\n    if (a == b + c)\
    \ return true;\n    if (a == b - c) return true;\n    if (a == c - b) return true;\n\
    \    if (a == b + c) return true;\n    if (a == b - c) return true;\n    if (a\
    \ == c - b) return true;\n    if (a == b + c) return true;\n    if (a == b - c)\
    \ return true;\n    if (a == c - b) return true;\n    if (a == b + c) return true;\n\
    \    if (a == b - c) return true;\n    if (a == c - b) return true;\n    if (a\
    \ == b + c) return true;\n    if (a == b - c) return true;\n    if (a == c - b)\
    \ return true;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (a == c - b) return true;\n    if (a == b + c) return true;\n    if (a\
    \ == b - c) return true;\n    if (a == c - b) return true;\n    if (a == b + c)\
    \ return true;\n    if (a == b - c) return true;\n    if (a == c - b) return true;\n\
    \    if (a == b + c) return true;\n    if (a == b - c) return true;\n    if (a\
    \ == c - b) return true;\n    if (a == b + c) return true;\n    if (a == b - c)\
    \ return true;\n    if (a == c - b) return true;\n    if (a == b + c) return true;\n\
    \    if (a == b - c) return true;\n    if (a == c - b) return true;\n    if (a\
    \ == b + c) return true;\n    if (a == b - c) return true;\n    if (a == c - b)\
    \ return true;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp51uhlfs.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpp51uhlfs.cpp:81:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   81 | }\n      | ^\n/tmp/tmpp51uhlfs.cpp:80:9: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   80 |     if (\n      |        ~^\n\
    \      |         )\n   81 | }\n      | ~        \n/tmp/tmpp51uhlfs.cpp:81:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n\
    /tmp/tmpp51uhlfs.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==x||sum==y||sum==z)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpapdt_rms: /tmp/tmpapdt_rms.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv97o9_4f: /tmp/tmpv97o9_4f.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpesbofpwm: /tmp/tmpesbofpwm.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int sum = xx + yy + zz;\n    if (sum == x) {\n        return\
    \ true;\n    } else if (sum == y) {\n        return true;\n    } else if (sum\
    \ == z) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgeup13ws: /tmp/tmpgeup13ws.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z);\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpu2s60d1n: /tmp/tmpu2s60d1n.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    if (x == y + z) return true;\n    if (x == y -\
    \ z) return true;\n    if (x == y - z) return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6xxfrdlx: /tmp/tmp6xxfrdlx.cpp:24: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum;\n    sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptj0r395u: /tmp/tmptj0r395u.cpp:25: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjy5f_v5a: /tmp/tmpjy5f_v5a.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmm4mtjvk: /tmp/tmpmm4mtjvk.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdjlyz3sx: /tmp/tmpdjlyz3sx.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpiy2ssfv5: /tmp/tmpiy2ssfv5.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ x == sum || y == sum || z == sum;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgp_ogw6x: /tmp/tmpgp_ogw6x.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == x + z && y == y + z && z == z + y);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpo5sep4pn: /tmp/tmpo5sep4pn.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ x == y || x == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt6__la4y: /tmp/tmpt6__la4y.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpncv3gd8q: /tmp/tmpncv3gd8q.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0 && y >= 0 && z >=\
    \ 0);\n    return (x == x + y && x == x + z && y == y + z);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpyfd_zpeu: /tmp/tmpyfd_zpeu.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z);\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwcc5kviy: /tmp/tmpwcc5kviy.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) {\n        return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptteg31m9: /tmp/tmptteg31m9.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpumz4xf56: /tmp/tmpumz4xf56.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp51zfp7ck: /tmp/tmp51zfp7ck.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpg3kzre4y: /tmp/tmpg3kzre4y.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsybcc3dc: /tmp/tmpsybcc3dc.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjg5ssp1v: /tmp/tmpjg5ssp1v.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2uk1avqz: /tmp/tmp2uk1avqz.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2mwadof4: /tmp/tmp2mwadof4.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    if\
    \ (x == y || x == z || y == z) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbiml4wex: /tmp/tmpbiml4wex.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write your code here\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp704tb9jw: /tmp/tmp704tb9jw.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzc8o1umj: /tmp/tmpzc8o1umj.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum=x+y+z;\n\
    \    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmlhsteqc: /tmp/tmpmlhsteqc.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y && x == x + z && y == y + z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfwykrj_s: /tmp/tmpfwykrj_s.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y || x == y + z || x == z + y\
    \ || x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxzv6a0wa: /tmp/tmpxzv6a0wa.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) return true;\n    if (a == b) return\
    \ true;\n    if (a == c) return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpuje_a_4h: /tmp/tmpuje_a_4h.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z + x && x == z + y);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpnpxh20o7: /tmp/tmpnpxh20o7.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b && a == c) return true;\n    if (a > b &&\
    \ a > c) return true;\n    if (b > c && b > a) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9xo1jvmd: /tmp/tmp9xo1jvmd.cpp:24: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp7g3rwbf6: /tmp/tmp7g3rwbf6.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4gsp82b_: /tmp/tmp4gsp82b_.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    float sum = x + y + z;\n    return sum == x ||\
    \ sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbfkyg4pj: /tmp/tmpbfkyg4pj.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp17sfjjhi: /tmp/tmp17sfjjhi.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx > yy && xx > zz) {\n        return true;\n    } else\
    \ if (yy > xx && yy > zz) {\n        return true;\n    } else if (zz > xx && zz\
    \ > yy) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpozm02abx: /tmp/tmpozm02abx.cpp:28: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == z + y);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqypfgc3t: /tmp/tmpqypfgc3t.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk__c4bq9: /tmp/tmpk__c4bq9.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbaw32n00: /tmp/tmpbaw32n00.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    int\
    \ num1 = (int) x;\n    int num2 = (int) y;\n    int num3 = (int) z;\n    if (num1\
    \ == sum && num2 == sum && num3 == sum) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6bvhgwb1: /tmp/tmp6bvhgwb1.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    if (x == y || y == z) return true;\n    if (x == z || y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjt18u750: /tmp/tmpjt18u750.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4kdq1lzw: /tmp/tmp4kdq1lzw.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp58b2x06n: /tmp/tmp58b2x06n.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if (sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbz9jhed4: /tmp/tmpbz9jhed4.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    if\
    \ (sum == x) {\n        return true;\n    }\n    if (sum == y) {\n        return\
    \ true;\n    }\n    if (sum == z) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpubm0k2vc: /tmp/tmpubm0k2vc.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write code here\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6xqzg011: /tmp/tmp6xqzg011.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpg382_fer: /tmp/tmpg382_fer.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdxri2icb: /tmp/tmpdxri2icb.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpku4jmldt: /tmp/tmpku4jmldt.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpeb6rpjn0: /tmp/tmpeb6rpjn0.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4la_dgw: /tmp/tmpf4la_dgw.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x) {\n        return true;\n\
    \    } else if (sum == y) {\n        return true;\n    } else if (sum == z) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjwg5f_mi: /tmp/tmpjwg5f_mi.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt21rn2u_: /tmp/tmpt21rn2u_.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpakf9_6ph: /tmp/tmpakf9_6ph.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    return ((a + b + c) == (x+y+z));\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpi8da0rie: /tmp/tmpi8da0rie.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(6)), (float(2))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int x\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7x0ixqny.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmp7x0ixqny.cpp:21:9: error: redeclaration of \u2018int xx\u2019\n   21\
    \ |     int xx = x;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:12:9: note: \u2018\
    int xx\u2019 previously declared here\n   12 |     int xx = x;\n      |      \
    \   ^~\n/tmp/tmp7x0ixqny.cpp:22:9: error: redeclaration of \u2018int yy\u2019\n\
    \   22 |     int yy = y;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:23:9: error: redeclaration of \u2018int zz\u2019\
    \n   23 |     int zz = z;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:24:9: error: redeclaration of \u2018int xy\u2019\
    \n   24 |     int xy = x;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:15:9: note:\
    \ \u2018int xy\u2019 previously declared here\n   15 |     int xy = x;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:25:9: error: redeclaration of \u2018int yz\u2019\
    \n   25 |     int yz = y;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:16:9: note:\
    \ \u2018int yz\u2019 previously declared here\n   16 |     int yz = y;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:26:9: error: redeclaration of \u2018int zx\u2019\
    \n   26 |     int zx = z;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:17:9: note:\
    \ \u2018int zx\u2019 previously declared here\n   17 |     int zx = z;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:27:9: error: redeclaration of \u2018int xz\u2019\
    \n   27 |     int xz = x;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:28:9: error: redeclaration of \u2018int yx\u2019\
    \n   28 |     int yx = y;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:29:9: error: redeclaration of \u2018int zy\u2019\
    \n   29 |     int zy = z;\n      |         ^~\n/tmp/tmp7x0ixqny.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmp7x0ixqny.cpp:30:9: error: redeclaration of \u2018int xx\u2019\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb5d220dv: /tmp/tmpb5d220dv.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int sum = xx + yy + zz;\n    if (sum == x) {\n        return\
    \ true;\n    } else if (sum == y) {\n        return true;\n    } else if (sum\
    \ == z) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf4kuweoy: /tmp/tmpf4kuweoy.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == z + y);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsubqanv2: /tmp/tmpsubqanv2.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfmh35lk6: /tmp/tmpfmh35lk6.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmplj961jqd: /tmp/tmplj961jqd.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write your code here\n\
    \    float sum = (x + y + z);\n    if (sum == x)\n        return true;\n    if\
    \ (sum == y)\n        return true;\n    if (sum == z)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjburtqts: /tmp/tmpjburtqts.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgm7ywd88: /tmp/tmpgm7ywd88.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && x == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprrl_r5ap: /tmp/tmprrl_r5ap.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpasdab56q: /tmp/tmpasdab56q.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0xzoak7q: /tmp/tmp0xzoak7q.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppffgydyd: /tmp/tmppffgydyd.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprt956zwp: /tmp/tmprt956zwp.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoy7_y2t8: /tmp/tmpoy7_y2t8.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx > yy)\n    {\n        if (xx > zz)\n        {\n \
    \           return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        if (yy > zz)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcay48mcr: /tmp/tmpcay48mcr.cpp:42: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkk9wshve: /tmp/tmpkk9wshve.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == y + z);\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn30tq5ac: /tmp/tmpn30tq5ac.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx > yy && xx > zz) {\n        return true;\n    } else\
    \ if (yy > xx && yy > zz) {\n        return true;\n    } else if (zz > xx && zz\
    \ > yy) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3z3zmvlx: /tmp/tmp3z3zmvlx.cpp:28: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2q0ifh61: /tmp/tmp2q0ifh61.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8sii4adz: /tmp/tmp8sii4adz.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ivqqb2m: /tmp/tmp1ivqqb2m.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == 0)\n        return false;\n    if (x == sum)\n        return true;\n\
    \    if (y == sum)\n        return true;\n    if (z == sum)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk48x6pqe: /tmp/tmpk48x6pqe.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    if (x == y + z) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnbr_n384: /tmp/tmpnbr_n384.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
