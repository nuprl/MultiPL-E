name: HumanEval_92_any_int
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaozb0kv_: /tmp/tmpaozb0kv_.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmidrjj8v: /tmp/tmpmidrjj8v.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmprlukkg1l: /tmp/tmprlukkg1l.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgzqri2th: /tmp/tmpgzqri2th.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvp1g4zou: /tmp/tmpvp1g4zou.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == y + z);\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmplyvz6p98: /tmp/tmplyvz6p98.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == y + z);\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmptzxxw_jm: /tmp/tmptzxxw_jm.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4gpp_pxi: /tmp/tmp4gpp_pxi.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y || x == y + z || x == z + x\
    \ || y == x + z || y == y + x || y == z + x || z == x + y || z == y + x || z ==\
    \ z + x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf7h1x5qf: /tmp/tmpf7h1x5qf.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbz_bl75m: /tmp/tmpbz_bl75m.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a+b+c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdwicdbyh: /tmp/tmpdwicdbyh.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0swopod6: /tmp/tmp0swopod6.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int xy = xx;\n    int yz = yy;\n    int zx = zz;\n    int\
    \ xz = xx;\n    int yx = yy;\n    int zy = zz;\n    int xx = xx;\n    int yy =\
    \ yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n\
    \    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int\
    \ yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz =\
    \ zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n\
    \    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int\
    \ zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx =\
    \ xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n\
    \    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int\
    \ xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy =\
    \ yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n\
    \    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int\
    \ yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz =\
    \ zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n\
    \    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int\
    \ zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int xx =\
    \ xx;\n    int yy = yy;\n    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n\
    \    int zz = zz;\n    int xx = xx;\n    int yy = yy;\n    int zz = zz;\n    int\
    \ xx = xx;\n    int yy = yy;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphql13p7k.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmphql13p7k.cpp:21:9: error: redeclaration of \u2018int xx\u2019\n   21\
    \ |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note: \u2018\
    int xx\u2019 previously declared here\n   12 |     int xx = x;\n      |      \
    \   ^~\n/tmp/tmphql13p7k.cpp:22:9: error: redeclaration of \u2018int yy\u2019\n\
    \   22 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:23:9: error: redeclaration of \u2018int zz\u2019\
    \n   23 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:24:9: error: redeclaration of \u2018int xx\u2019\
    \n   24 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:25:9: error: redeclaration of \u2018int yy\u2019\
    \n   25 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:26:9: error: redeclaration of \u2018int zz\u2019\
    \n   26 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:27:9: error: redeclaration of \u2018int xx\u2019\
    \n   27 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:28:9: error: redeclaration of \u2018int yy\u2019\
    \n   28 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:29:9: error: redeclaration of \u2018int zz\u2019\
    \n   29 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:30:9: error: redeclaration of \u2018int xx\u2019\
    \n   30 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:31:9: error: redeclaration of \u2018int yy\u2019\
    \n   31 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:32:9: error: redeclaration of \u2018int zz\u2019\
    \n   32 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:33:9: error: redeclaration of \u2018int xx\u2019\
    \n   33 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:34:9: error: redeclaration of \u2018int yy\u2019\
    \n   34 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:35:9: error: redeclaration of \u2018int zz\u2019\
    \n   35 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:36:9: error: redeclaration of \u2018int xx\u2019\
    \n   36 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:37:9: error: redeclaration of \u2018int yy\u2019\
    \n   37 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:38:9: error: redeclaration of \u2018int zz\u2019\
    \n   38 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:39:9: error: redeclaration of \u2018int xx\u2019\
    \n   39 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:40:9: error: redeclaration of \u2018int yy\u2019\
    \n   40 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:41:9: error: redeclaration of \u2018int zz\u2019\
    \n   41 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:42:9: error: redeclaration of \u2018int xx\u2019\
    \n   42 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:43:9: error: redeclaration of \u2018int yy\u2019\
    \n   43 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:44:9: error: redeclaration of \u2018int zz\u2019\
    \n   44 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:45:9: error: redeclaration of \u2018int xx\u2019\
    \n   45 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:46:9: error: redeclaration of \u2018int yy\u2019\
    \n   46 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:47:9: error: redeclaration of \u2018int zz\u2019\
    \n   47 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:48:9: error: redeclaration of \u2018int xx\u2019\
    \n   48 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:49:9: error: redeclaration of \u2018int yy\u2019\
    \n   49 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:50:9: error: redeclaration of \u2018int zz\u2019\
    \n   50 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:51:9: error: redeclaration of \u2018int xx\u2019\
    \n   51 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:52:9: error: redeclaration of \u2018int yy\u2019\
    \n   52 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:53:9: error: redeclaration of \u2018int zz\u2019\
    \n   53 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:54:9: error: redeclaration of \u2018int xx\u2019\
    \n   54 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:55:9: error: redeclaration of \u2018int yy\u2019\
    \n   55 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:56:9: error: redeclaration of \u2018int zz\u2019\
    \n   56 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:57:9: error: redeclaration of \u2018int xx\u2019\
    \n   57 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:58:9: error: redeclaration of \u2018int yy\u2019\
    \n   58 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:59:9: error: redeclaration of \u2018int zz\u2019\
    \n   59 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:60:9: error: redeclaration of \u2018int xx\u2019\
    \n   60 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:61:9: error: redeclaration of \u2018int yy\u2019\
    \n   61 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:62:9: error: redeclaration of \u2018int zz\u2019\
    \n   62 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:63:9: error: redeclaration of \u2018int xx\u2019\
    \n   63 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:64:9: error: redeclaration of \u2018int yy\u2019\
    \n   64 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:65:9: error: redeclaration of \u2018int zz\u2019\
    \n   65 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:66:9: error: redeclaration of \u2018int xx\u2019\
    \n   66 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:67:9: error: redeclaration of \u2018int yy\u2019\
    \n   67 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:68:9: error: redeclaration of \u2018int zz\u2019\
    \n   68 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:69:9: error: redeclaration of \u2018int xx\u2019\
    \n   69 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:70:9: error: redeclaration of \u2018int yy\u2019\
    \n   70 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:71:9: error: redeclaration of \u2018int zz\u2019\
    \n   71 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:72:9: error: redeclaration of \u2018int xx\u2019\
    \n   72 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:73:9: error: redeclaration of \u2018int yy\u2019\
    \n   73 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:74:9: error: redeclaration of \u2018int zz\u2019\
    \n   74 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:75:9: error: redeclaration of \u2018int xx\u2019\
    \n   75 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:76:9: error: redeclaration of \u2018int yy\u2019\
    \n   76 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:77:9: error: redeclaration of \u2018int zz\u2019\
    \n   77 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:78:9: error: redeclaration of \u2018int xx\u2019\
    \n   78 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:79:9: error: redeclaration of \u2018int yy\u2019\
    \n   79 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:80:9: error: redeclaration of \u2018int zz\u2019\
    \n   80 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:81:9: error: redeclaration of \u2018int xx\u2019\
    \n   81 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:82:9: error: redeclaration of \u2018int yy\u2019\
    \n   82 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:83:9: error: redeclaration of \u2018int zz\u2019\
    \n   83 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:84:9: error: redeclaration of \u2018int xx\u2019\
    \n   84 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:85:9: error: redeclaration of \u2018int yy\u2019\
    \n   85 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:86:9: error: redeclaration of \u2018int zz\u2019\
    \n   86 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:87:9: error: redeclaration of \u2018int xx\u2019\
    \n   87 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:88:9: error: redeclaration of \u2018int yy\u2019\
    \n   88 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:89:9: error: redeclaration of \u2018int zz\u2019\
    \n   89 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:90:9: error: redeclaration of \u2018int xx\u2019\
    \n   90 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:91:9: error: redeclaration of \u2018int yy\u2019\
    \n   91 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:92:9: error: redeclaration of \u2018int zz\u2019\
    \n   92 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:93:9: error: redeclaration of \u2018int xx\u2019\
    \n   93 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:94:9: error: redeclaration of \u2018int yy\u2019\
    \n   94 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:95:9: error: redeclaration of \u2018int zz\u2019\
    \n   95 |     int zz = zz;\n      |         ^~\n/tmp/tmphql13p7k.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:96:9: error: redeclaration of \u2018int xx\u2019\
    \n   96 |     int xx = xx;\n      |         ^~\n/tmp/tmphql13p7k.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:97:9: error: redeclaration of \u2018int yy\u2019\
    \n   97 |     int yy = yy;\n      |         ^~\n/tmp/tmphql13p7k.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmphql13p7k.cpp:98:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   98 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5y8rp826: /tmp/tmp5y8rp826.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && x == y + z &&\
    \ x == y + z) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpveurul_o: /tmp/tmpveurul_o.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y || x == z || y == z);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkfpdh2xr: /tmp/tmpkfpdh2xr.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc6oqu1xf: /tmp/tmpc6oqu1xf.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdbgnpn4n: /tmp/tmpdbgnpn4n.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpceycjk3f: /tmp/tmpceycjk3f.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x) {\n        return true;\n    } else if (sum == y) {\n        return\
    \ true;\n    } else if (sum == z) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4d1rjqdm: /tmp/tmp4d1rjqdm.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq6g5ba_3: /tmp/tmpq6g5ba_3.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x)\n        return true;\n\
    \    if (sum == y)\n        return true;\n    if (sum == z)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9amgucvf: /tmp/tmp9amgucvf.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y && x == x + z && y == y + z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpghj_6c3c: /tmp/tmpghj_6c3c.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx + yy + zz == x) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmptc9huov2: /tmp/tmptc9huov2.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    return (x\
    \ == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0b78qssk: /tmp/tmp0b78qssk.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyh6b0kfw: /tmp/tmpyh6b0kfw.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == (x + y) || sum == (x + z) || sum == (y + z)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdg2vq6p3: /tmp/tmpdg2vq6p3.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == y || x == z || y ==\
    \ z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmhqn4jxm: /tmp/tmpmhqn4jxm.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3pg1nfc0: /tmp/tmp3pg1nfc0.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxggs0xuc: /tmp/tmpxggs0xuc.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    int\
    \ a = x;\n    int b = y;\n    int c = z;\n    if (sum == a || sum == b || sum\
    \ == c) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpfh4qj_rr: /tmp/tmpfh4qj_rr.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int sum = xx + yy + zz;\n    if (sum == x) {\n        return\
    \ true;\n    } else if (sum == y) {\n        return true;\n    } else if (sum\
    \ == z) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpudl_6e6x: /tmp/tmpudl_6e6x.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == x + z && y == y + x && z == z + y);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpco8uf1qp: /tmp/tmpco8uf1qp.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmphj4e9878: /tmp/tmphj4e9878.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp46q9ht1g: /tmp/tmp46q9ht1g.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == 0)\n        return false;\n    if (sum < 0)\n        return true;\n\
    \    if (sum > 0)\n        return false;\n    if (x == y)\n        return true;\n\
    \    if (x == z)\n        return true;\n    if (y == z)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmprjx5q49y: /tmp/tmprjx5q49y.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxhedwx5d: /tmp/tmpxhedwx5d.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x) {\n        return true;\n\
    \    }\n    if (sum == y) {\n        return true;\n    }\n    if (sum == z) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8jbg2454: /tmp/tmp8jbg2454.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmpnuyzo0: /tmp/tmpmpnuyzo0.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z + x);\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpywdxkeyh: /tmp/tmpywdxkeyh.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpevt8iojk: /tmp/tmpevt8iojk.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    return ((a + b + c) == (x+y+z));\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_ykhhzp5: /tmp/tmp_ykhhzp5.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(6)), (float(2))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpde6lwpfy: /tmp/tmpde6lwpfy.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    return x\
    \ == y + z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeqmd8sn0: /tmp/tmpeqmd8sn0.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a+b+c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3c7_2qj9: /tmp/tmp3c7_2qj9.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl2g6ds57: /tmp/tmpl2g6ds57.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y && x == x + z && y == y + z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4sbaw8_k: /tmp/tmp4sbaw8_k.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_k5y6dsz: /tmp/tmp_k5y6dsz.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpee1pym3u: /tmp/tmpee1pym3u.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    return ((a + b == c) || (a + c == b) || (b + c == a));\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw_ag04zu: /tmp/tmpw_ag04zu.cpp:28: int main(): Assertion `candidate((3.0),\
    \ (float(4)), (float(7))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ x == y || x == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5jl5q9jx: /tmp/tmp5jl5q9jx.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnt9i6w7r: /tmp/tmpnt9i6w7r.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_h2z9lea: /tmp/tmp_h2z9lea.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum;\n    sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else\
    \ if (sum == y)\n        return true;\n    else if (sum == z)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4rd1_ofg: /tmp/tmp4rd1_ofg.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0 && y >= 0 && z >=\
    \ 0);\n    return (x == x + y || x == y + z || x == z + x || y == x + z || y ==\
    \ y + x || z == x + y || z == y + x);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2uy33dvs: /tmp/tmp2uy33dvs.cpp:19: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppaby02t0: /tmp/tmppaby02t0.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x) {\n        return true;\n    }\n    if (sum == y) {\n        return\
    \ true;\n    }\n    if (sum == z) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsq_gzb_0: /tmp/tmpsq_gzb_0.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x) {\n        return true;\n    }\n    else\
    \ if (sum == y) {\n        return true;\n    }\n    else if (sum == z) {\n   \
    \     return true;\n    }\n    else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6rvhm7tk: /tmp/tmp6rvhm7tk.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsu5mxftu: /tmp/tmpsu5mxftu.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && y == z + x &&\
    \ z == x + y) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpapmveesq: /tmp/tmpapmveesq.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x || sum == y || sum == z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmgb5g7_y: /tmp/tmpmgb5g7_y.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a+b+c;\n    if (sum == x)\n        return true;\n\
    \    else if (sum == y)\n        return true;\n    else if (sum == z)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3mxxb6o2: /tmp/tmp3mxxb6o2.cpp:27: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x) {\n        return true;\n\
    \    }\n    if (sum == y) {\n        return true;\n    }\n    if (sum == z) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpr3_l7txe: /tmp/tmpr3_l7txe.cpp:29: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcqh68g4_: /tmp/tmpcqh68g4_.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1rdbcbl9: /tmp/tmp1rdbcbl9.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && x == z) return true;\n\
    \    if (x == y || x == z || y == z) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaic_ng7n: /tmp/tmpaic_ng7n.cpp:18: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpremg3lml: /tmp/tmpremg3lml.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ std::abs(sum - z) < std::abs(sum - y) && std::abs(sum - x) < std::abs(sum -\
    \ z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp59g0wn3o: /tmp/tmp59g0wn3o.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4equ6j77: /tmp/tmp4equ6j77.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4j1g09j9: /tmp/tmp4j1g09j9.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp84gkkw3y: /tmp/tmp84gkkw3y.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    if (sum == y)\n\
    \        return true;\n    if (sum == z)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp21h72c8g: /tmp/tmp21h72c8g.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw_bjj5v1: /tmp/tmpw_bjj5v1.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    return\
    \ ((sum == x) || (sum == y) || (sum == z));\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphr73oqug: /tmp/tmphr73oqug.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==x||sum==y||sum==z){\n        return true;\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbz2m3czt: /tmp/tmpbz2m3czt.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2ad9pp4n: /tmp/tmp2ad9pp4n.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == 0)\n        return false;\n    if (x == sum)\n        return true;\n\
    \    if (y == sum)\n        return true;\n    if (z == sum)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpafvx8spr: /tmp/tmpafvx8spr.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a > b) swap(a, b);\n    if (b > c) swap(b, c);\n\
    \    if (a == 0 || b == 0 || c == 0) return false;\n    if (a == b) return true;\n\
    \    if (a == c) return true;\n    if (b == c) return true;\n    if (a > 0 &&\
    \ b > 0 && c > 0) return true;\n    if (a > 0 && b > 0 && c < 0) return true;\n\
    \    if (a > 0 && b < 0 && c > 0) return true;\n    if (a > 0 && b < 0 && c <\
    \ 0) return true;\n    if (a < 0 && b > 0 && c > 0) return true;\n    if (a <\
    \ 0 && b > 0 && c < 0) return true;\n    if (a < 0 && b < 0 && c > 0) return true;\n\
    \    if (a < 0 && b < 0 && c < 0) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjg48qro1.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpjg48qro1.cpp:15:16: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   15 |     if (a > b) swap(a, b);\n      |                ^~~~\n/tmp/tmpjg48qro1.cpp:15:16:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjg48qro1.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjg48qro1.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjg48qro1.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n/tmp/tmpjg48qro1.cpp:16:16: error: \u2018swap\u2019\
    \ was not declared in this scope\n   16 |     if (b > c) swap(b, c);\n      |\
    \                ^~~~\n/tmp/tmpjg48qro1.cpp:16:16: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjg48qro1.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjg48qro1.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjg48qro1.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int x_int = (int)x;\n    int y_int\
    \ = (int)y;\n    int z_int = (int)z;\n    return x_int + y_int + z_int == x +\
    \ y + z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9tjkdczf: /tmp/tmp9tjkdczf.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(6)), (float(2))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum;\n    sum=x+y;\n    if(sum==z){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp292nbbst: /tmp/tmp292nbbst.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a > b) swap(a, b);\n    if (b > c) swap(b, c);\n\
    \    if (a == b) return true;\n    if (a == c) return true;\n    if (b == c) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvsrivv3q.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpvsrivv3q.cpp:15:16: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   15 |     if (a > b) swap(a, b);\n      |                ^~~~\n/tmp/tmpvsrivv3q.cpp:15:16:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpvsrivv3q.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvsrivv3q.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvsrivv3q.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n/tmp/tmpvsrivv3q.cpp:16:16: error: \u2018swap\u2019\
    \ was not declared in this scope\n   16 |     if (b > c) swap(b, c);\n      |\
    \                ^~~~\n/tmp/tmpvsrivv3q.cpp:16:16: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpvsrivv3q.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvsrivv3q.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpvsrivv3q.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpvd7k6ilj: /tmp/tmpvd7k6ilj.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x) {\n        return true;\n    } else if (sum == y) {\n        return\
    \ true;\n    } else if (sum == z) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n  \
    \  assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpg6h01lp8: /tmp/tmpg6h01lp8.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt89bcccp: /tmp/tmpt89bcccp.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    int sum = a + b + c;\n    if (sum == x)\n        return\
    \ true;\n    if (sum == y)\n        return true;\n    if (sum == z)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp080vgel0: /tmp/tmp080vgel0.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprmmj9gaz: /tmp/tmprmmj9gaz.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpldvhz59u: /tmp/tmpldvhz59u.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplwfggdaf: /tmp/tmplwfggdaf.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    if\
    \ (x == y + z && x == y + z && x == y + z) {\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpatd35tr7: /tmp/tmpatd35tr7.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return x == y + z;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmph1_j0z9q: /tmp/tmph1_j0z9q.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4efx9slm: /tmp/tmp4efx9slm.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == 0)\n        return true;\n    if (sum < 0)\n\
    \        return false;\n    if (sum > 0)\n        return false;\n    if (x ==\
    \ sum)\n        return true;\n    if (y == sum)\n        return true;\n    if\
    \ (z == sum)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpw0tw1qjt: /tmp/tmpw0tw1qjt.cpp:30: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) {\n        return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqc4ehrsk: /tmp/tmpqc4ehrsk.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = static_cast<int>(x);\n\
    \    int yy = static_cast<int>(y);\n    int zz = static_cast<int>(z);\n    return\
    \ xx + yy == zz;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwdua_iyj: /tmp/tmpwdua_iyj.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx + yy + zz == x)\n        return true;\n    if (xx\
    \ + yy + zz == y)\n        return true;\n    if (xx + yy + zz == z)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9vzd8y1h: /tmp/tmp9vzd8y1h.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppohjy_u5: /tmp/tmppohjy_u5.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    int d = a + b + c;\n    return d == a || d == b || d\
    \ == c;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv6zxyv8m: /tmp/tmpv6zxyv8m.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == x + z && y == y + z && z == z + y);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpfpmkq_6k: /tmp/tmpfpmkq_6k.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm2ct6g2f: /tmp/tmpm2ct6g2f.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    return\
    \ ((sum == x) || (sum == y) || (sum == z));\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp59depooa: /tmp/tmp59depooa.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpr2gm1bxt: /tmp/tmpr2gm1bxt.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpf0hvw6ku: /tmp/tmpf0hvw6ku.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp124ovhzu: /tmp/tmp124ovhzu.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl8haav2_: /tmp/tmpl8haav2_.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmph7stoowb: /tmp/tmph7stoowb.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z && x == y + z &&\
    \ x == y + z) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmjinxk1z: /tmp/tmpmjinxk1z.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y || x == z || y == z);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp54e2lsv_: /tmp/tmp54e2lsv_.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z);\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfftazeak: /tmp/tmpfftazeak.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpttmtwnxq: /tmp/tmpttmtwnxq.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8v6s_tis: /tmp/tmp8v6s_tis.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write code here\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpok3ely3z: /tmp/tmpok3ely3z.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    return\
    \ sum == x || sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt009g2tl: /tmp/tmpt009g2tl.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a > b && a > c) {\n        return true;\n    } else\
    \ if (b > c && b > a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnuf8295j: /tmp/tmpnuf8295j.cpp:27: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int x\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpaw10qzyu.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpaw10qzyu.cpp:21:9: error: redeclaration of \u2018int xx\u2019\n   21\
    \ |     int xx = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:12:9: note: \u2018\
    int xx\u2019 previously declared here\n   12 |     int xx = x;\n      |      \
    \   ^~\n/tmp/tmpaw10qzyu.cpp:22:9: error: redeclaration of \u2018int yy\u2019\n\
    \   22 |     int yy = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:23:9: error: redeclaration of \u2018int zz\u2019\
    \n   23 |     int zz = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:24:9: error: redeclaration of \u2018int xy\u2019\
    \n   24 |     int xy = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:15:9: note:\
    \ \u2018int xy\u2019 previously declared here\n   15 |     int xy = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:25:9: error: redeclaration of \u2018int yz\u2019\
    \n   25 |     int yz = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:16:9: note:\
    \ \u2018int yz\u2019 previously declared here\n   16 |     int yz = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:26:9: error: redeclaration of \u2018int zx\u2019\
    \n   26 |     int zx = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:17:9: note:\
    \ \u2018int zx\u2019 previously declared here\n   17 |     int zx = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:27:9: error: redeclaration of \u2018int xz\u2019\
    \n   27 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:28:9: error: redeclaration of \u2018int yx\u2019\
    \n   28 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:29:9: error: redeclaration of \u2018int zy\u2019\
    \n   29 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:30:9: error: redeclaration of \u2018int xx\u2019\
    \n   30 |     int xx = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:31:9: error: redeclaration of \u2018int yy\u2019\
    \n   31 |     int yy = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:32:9: error: redeclaration of \u2018int zz\u2019\
    \n   32 |     int zz = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:33:9: error: redeclaration of \u2018int xy\u2019\
    \n   33 |     int xy = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:15:9: note:\
    \ \u2018int xy\u2019 previously declared here\n   15 |     int xy = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:34:9: error: redeclaration of \u2018int yz\u2019\
    \n   34 |     int yz = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:16:9: note:\
    \ \u2018int yz\u2019 previously declared here\n   16 |     int yz = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:35:9: error: redeclaration of \u2018int zx\u2019\
    \n   35 |     int zx = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:17:9: note:\
    \ \u2018int zx\u2019 previously declared here\n   17 |     int zx = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:36:9: error: redeclaration of \u2018int xz\u2019\
    \n   36 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:37:9: error: redeclaration of \u2018int yx\u2019\
    \n   37 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:38:9: error: redeclaration of \u2018int zy\u2019\
    \n   38 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:39:9: error: redeclaration of \u2018int xz\u2019\
    \n   39 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:40:9: error: redeclaration of \u2018int yx\u2019\
    \n   40 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:41:9: error: redeclaration of \u2018int zy\u2019\
    \n   41 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:42:9: error: redeclaration of \u2018int xz\u2019\
    \n   42 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:43:9: error: redeclaration of \u2018int yx\u2019\
    \n   43 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:44:9: error: redeclaration of \u2018int zy\u2019\
    \n   44 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:45:9: error: redeclaration of \u2018int xz\u2019\
    \n   45 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:46:9: error: redeclaration of \u2018int yx\u2019\
    \n   46 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:47:9: error: redeclaration of \u2018int zy\u2019\
    \n   47 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:48:9: error: redeclaration of \u2018int xz\u2019\
    \n   48 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:49:9: error: redeclaration of \u2018int yx\u2019\
    \n   49 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:50:9: error: redeclaration of \u2018int zy\u2019\
    \n   50 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:51:9: error: redeclaration of \u2018int xz\u2019\
    \n   51 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:52:9: error: redeclaration of \u2018int yx\u2019\
    \n   52 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:53:9: error: redeclaration of \u2018int zy\u2019\
    \n   53 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:54:9: error: redeclaration of \u2018int xz\u2019\
    \n   54 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:55:9: error: redeclaration of \u2018int yx\u2019\
    \n   55 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:56:9: error: redeclaration of \u2018int zy\u2019\
    \n   56 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:57:9: error: redeclaration of \u2018int xz\u2019\
    \n   57 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:58:9: error: redeclaration of \u2018int yx\u2019\
    \n   58 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:59:9: error: redeclaration of \u2018int zy\u2019\
    \n   59 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:60:9: error: redeclaration of \u2018int xz\u2019\
    \n   60 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:61:9: error: redeclaration of \u2018int yx\u2019\
    \n   61 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:62:9: error: redeclaration of \u2018int zy\u2019\
    \n   62 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:63:9: error: redeclaration of \u2018int xz\u2019\
    \n   63 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:64:9: error: redeclaration of \u2018int yx\u2019\
    \n   64 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:65:9: error: redeclaration of \u2018int zy\u2019\
    \n   65 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:66:9: error: redeclaration of \u2018int xz\u2019\
    \n   66 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:67:9: error: redeclaration of \u2018int yx\u2019\
    \n   67 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:68:9: error: redeclaration of \u2018int zy\u2019\
    \n   68 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:69:9: error: redeclaration of \u2018int xz\u2019\
    \n   69 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:70:9: error: redeclaration of \u2018int yx\u2019\
    \n   70 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:71:9: error: redeclaration of \u2018int zy\u2019\
    \n   71 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:72:9: error: redeclaration of \u2018int xz\u2019\
    \n   72 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:73:9: error: redeclaration of \u2018int yx\u2019\
    \n   73 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:74:9: error: redeclaration of \u2018int zy\u2019\
    \n   74 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:75:9: error: redeclaration of \u2018int xz\u2019\
    \n   75 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:76:9: error: redeclaration of \u2018int yx\u2019\
    \n   76 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:77:9: error: redeclaration of \u2018int zy\u2019\
    \n   77 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:78:9: error: redeclaration of \u2018int xz\u2019\
    \n   78 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:79:9: error: redeclaration of \u2018int yx\u2019\
    \n   79 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:80:9: error: redeclaration of \u2018int zy\u2019\
    \n   80 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:81:9: error: redeclaration of \u2018int xz\u2019\
    \n   81 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:82:9: error: redeclaration of \u2018int yx\u2019\
    \n   82 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:83:9: error: redeclaration of \u2018int zy\u2019\
    \n   83 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:84:9: error: redeclaration of \u2018int xz\u2019\
    \n   84 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:85:9: error: redeclaration of \u2018int yx\u2019\
    \n   85 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:86:9: error: redeclaration of \u2018int zy\u2019\
    \n   86 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:87:9: error: redeclaration of \u2018int xz\u2019\
    \n   87 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:88:9: error: redeclaration of \u2018int yx\u2019\
    \n   88 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:89:9: error: redeclaration of \u2018int zy\u2019\
    \n   89 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:90:9: error: redeclaration of \u2018int xz\u2019\
    \n   90 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:91:9: error: redeclaration of \u2018int yx\u2019\
    \n   91 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:92:9: error: redeclaration of \u2018int zy\u2019\
    \n   92 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:93:9: error: redeclaration of \u2018int xz\u2019\
    \n   93 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:94:9: error: redeclaration of \u2018int yx\u2019\
    \n   94 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:95:9: error: redeclaration of \u2018int zy\u2019\
    \n   95 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:96:9: error: redeclaration of \u2018int xz\u2019\
    \n   96 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:97:9: error: redeclaration of \u2018int yx\u2019\
    \n   97 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:98:9: error: redeclaration of \u2018int zy\u2019\
    \n   98 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:99:9: error: redeclaration of \u2018int xz\u2019\
    \n   99 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpaw10qzyu.cpp:100:9: error: redeclaration of \u2018int\
    \ yx\u2019\n  100 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:101:9: error: redeclaration of \u2018\
    int zy\u2019\n  101 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:102:9: error: redeclaration of \u2018\
    int xz\u2019\n  102 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:103:9: error: redeclaration of \u2018\
    int yx\u2019\n  103 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:104:9: error: redeclaration of \u2018\
    int zy\u2019\n  104 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:105:9: error: redeclaration of \u2018\
    int xz\u2019\n  105 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:106:9: error: redeclaration of \u2018\
    int yx\u2019\n  106 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:107:9: error: redeclaration of \u2018\
    int zy\u2019\n  107 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:108:9: error: redeclaration of \u2018\
    int xz\u2019\n  108 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:109:9: error: redeclaration of \u2018\
    int yx\u2019\n  109 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:110:9: error: redeclaration of \u2018\
    int zy\u2019\n  110 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:111:9: error: redeclaration of \u2018\
    int xz\u2019\n  111 |     int xz = x;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:112:9: error: redeclaration of \u2018\
    int yx\u2019\n  112 |     int yx = y;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:113:9: error: redeclaration of \u2018\
    int zy\u2019\n  113 |     int zy = z;\n      |         ^~\n/tmp/tmpaw10qzyu.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpaw10qzyu.cpp:115:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  115 | }\n      | ^\n/tmp/tmpaw10qzyu.cpp:115:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && x == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxta2k4np: /tmp/tmpxta2k4np.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpofwwz2v4: /tmp/tmpofwwz2v4.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr1_mi2m7: /tmp/tmpr1_mi2m7.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpogvhekr7: /tmp/tmpogvhekr7.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (a == c - b) return true;\n    if (a == b + c) return true;\n    if (a\
    \ == b - c) return true;\n    if (a == c - b) return true;\n    if (a == b + c)\
    \ return true;\n    if (a == b - c) return true;\n    if (a == c - b) return true;\n\
    \    if (a == b + c) return true;\n    if (a == b - c) return true;\n    if (a\
    \ == c - b) return true;\n    if (a == b + c) return true;\n    if (a == b - c)\
    \ return true;\n    if (a == c - b) return true;\n    if (a == b + c) return true;\n\
    \    if (a == b - c) return true;\n    if (a == c - b) return true;\n    if (a\
    \ == b + c) return true;\n    if (a == b - c) return true;\n    if (a == c - b)\
    \ return true;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (a == c - b) return true;\n    if (a == b + c) return true;\n    if (a\
    \ == b - c) return true;\n    if (a == c - b) return true;\n    if (a == b + c)\
    \ return true;\n    if (a == b - c) return true;\n    if (a == c - b) return true;\n\
    \    if (a == b + c) return true;\n    if (a == b - c) return true;\n    if (a\
    \ == c - b) return true;\n    if (a == b + c) return true;\n    if (a == b - c)\
    \ return true;\n    if (a == c - b) return true;\n    if (a == b + c) return true;\n\
    \    if (a == b - c) return true;\n    if (a == c - b) return true;\n    if (a\
    \ == b + c) return true;\n    if (a == b - c) return true;\n    if (a == c - b)\
    \ return true;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (a == c - b) return true;\n    if (a == b + c) return true;\n    if (a\
    \ == b - c) return true;\n    if (a == c - b) return true;\n    if (a == b + c)\
    \ return true;\n    if (a == b - c) return true;\n    if (a == c - b) return true;\n\
    \    if (a == b + c) return true;\n    if (a == b - c) return true;\n    if (a\
    \ == c - b) return true;\n    if (a == b + c) return true;\n    if (a == b - c)\
    \ return true;\n    if (a == c - b) return true;\n    if (a == b + c) return true;\n\
    \    if (a == b - c) return true;\n    if (a == c - b) return true;\n    if (a\
    \ == b + c) return true;\n    if (a == b - c) return true;\n    if (a == c - b)\
    \ return true;\n    if (a == b + c) return true;\n    if (a == b - c) return true;\n\
    \    if (\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzklq5zv.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpdzklq5zv.cpp:81:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   81 | }\n      | ^\n/tmp/tmpdzklq5zv.cpp:80:9: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   80 |     if (\n      |        ~^\n\
    \      |         )\n   81 | }\n      | ~        \n/tmp/tmpdzklq5zv.cpp:81:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n\
    /tmp/tmpdzklq5zv.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==x||sum==y||sum==z)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpta1ddqyz: /tmp/tmpta1ddqyz.cpp:21: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp56rhptte: /tmp/tmp56rhptte.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmgtjxjy9: /tmp/tmpmgtjxjy9.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int sum = xx + yy + zz;\n    if (sum == x) {\n        return\
    \ true;\n    } else if (sum == y) {\n        return true;\n    } else if (sum\
    \ == z) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpof0lkl6o: /tmp/tmpof0lkl6o.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z);\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzdszrsk1: /tmp/tmpzdszrsk1.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    if (x == y + z) return true;\n    if (x == y -\
    \ z) return true;\n    if (x == y - z) return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc1usrhw5: /tmp/tmpc1usrhw5.cpp:24: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum;\n    sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbe654op3: /tmp/tmpbe654op3.cpp:25: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo2tin76e: /tmp/tmpo2tin76e.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9w_2ddid: /tmp/tmp9w_2ddid.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpchcupo3e: /tmp/tmpchcupo3e.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8_hfzl4q: /tmp/tmp8_hfzl4q.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    return\
    \ x == sum || y == sum || z == sum;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbvwt8seu: /tmp/tmpbvwt8seu.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == x + z && y == y + z && z == z + y);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp6t79h2y6: /tmp/tmp6t79h2y6.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ x == y || x == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8i9x4m9k: /tmp/tmp8i9x4m9k.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpiucsc7cl: /tmp/tmpiucsc7cl.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0 && y >= 0 && z >=\
    \ 0);\n    return (x == x + y && x == x + z && y == y + z);\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp0eafdg61: /tmp/tmp0eafdg61.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z);\n}\nint main() {\n    auto candidate =\
    \ any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmyx9bgsz: /tmp/tmpmyx9bgsz.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) {\n        return true;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx675v58k: /tmp/tmpx675v58k.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmph7p08h5w: /tmp/tmph7p08h5w.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwvas61bh: /tmp/tmpwvas61bh.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpl2_3w065: /tmp/tmpl2_3w065.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxa7aqn5s: /tmp/tmpxa7aqn5s.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmprnfp6vzy: /tmp/tmprnfp6vzy.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1uwpg09e: /tmp/tmp1uwpg09e.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzezwxj__: /tmp/tmpzezwxj__.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    if\
    \ (x == y || x == z || y == z) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe5_izulo: /tmp/tmpe5_izulo.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write your code here\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvs0mykrs: /tmp/tmpvs0mykrs.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7i2drogx: /tmp/tmp7i2drogx.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum=x+y+z;\n\
    \    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpazu5voga: /tmp/tmpazu5voga.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y && x == x + z && y == y + z);\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr5fi793c: /tmp/tmpr5fi793c.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    return (x == x + y || x == y + z || x == z + y\
    \ || x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpynsxu9nx: /tmp/tmpynsxu9nx.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b + c) return true;\n    if (a == b) return\
    \ true;\n    if (a == c) return true;\n    return false;\n}\nint main() {\n  \
    \  auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpc9blf6h9: /tmp/tmpc9blf6h9.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == x + y && y == y + z && z == z + x && x == z + y);\n}\nint main() {\n \
    \   auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpvnnjfrre: /tmp/tmpvnnjfrre.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = abs(x);\n    int b = abs(y);\n\
    \    int c = abs(z);\n    if (a == b && a == c) return true;\n    if (a > b &&\
    \ a > c) return true;\n    if (b > c && b > a) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsw35tla2: /tmp/tmpsw35tla2.cpp:24: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpzr4dssq5: /tmp/tmpzr4dssq5.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9v2lz825: /tmp/tmp9v2lz825.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    float sum = x + y + z;\n    return sum == x ||\
    \ sum == y || sum == z;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqnnksjmi: /tmp/tmpqnnksjmi.cpp:20: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe4dtuqhr: /tmp/tmpe4dtuqhr.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx > yy && xx > zz) {\n        return true;\n    } else\
    \ if (yy > xx && yy > zz) {\n        return true;\n    } else if (zz > xx && zz\
    \ > yy) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl24ptsyz: /tmp/tmpl24ptsyz.cpp:28: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == z + y);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp796m31e9: /tmp/tmp796m31e9.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxooe1iqj: /tmp/tmpxooe1iqj.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpp57blqah: /tmp/tmpp57blqah.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    int\
    \ num1 = (int) x;\n    int num2 = (int) y;\n    int num3 = (int) z;\n    if (num1\
    \ == sum && num2 == sum && num3 == sum) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwxk73_aq: /tmp/tmpwxk73_aq.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    if (x == y || y == z) return true;\n    if (x == z || y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp2_mbthf: /tmp/tmpp2_mbthf.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0e9pcoz_: /tmp/tmp0e9pcoz_.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum\
    \ == y)\n        return true;\n    else if (sum == z)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0a00s8xy: /tmp/tmp0a00s8xy.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if (sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpayg_juyr: /tmp/tmpayg_juyr.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = x + y + z;\n    if\
    \ (sum == x) {\n        return true;\n    }\n    if (sum == y) {\n        return\
    \ true;\n    }\n    if (sum == z) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxj0rhmgk: /tmp/tmpxj0rhmgk.cpp:26: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write code here\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8yd58y7g: /tmp/tmp8yd58y7g.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx_m82y94: /tmp/tmpx_m82y94.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    else if (sum == y)\n        return true;\n\
    \    else if (sum == z)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp04hxtd5p: /tmp/tmp04hxtd5p.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x) ? true : false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpeh9zv3p0: /tmp/tmpeh9zv3p0.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == x)\n        return true;\n    if (sum == y)\n        return true;\n\
    \    if (sum == z)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmprbx8mc4w: /tmp/tmprbx8mc4w.cpp:23: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvn6b_311: /tmp/tmpvn6b_311.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    int sum = a + b + c;\n    if (sum == x) {\n        return true;\n\
    \    } else if (sum == y) {\n        return true;\n    } else if (sum == z) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpihugdxe2: /tmp/tmpihugdxe2.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk5luiw9j: /tmp/tmpk5luiw9j.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    return\
    \ (x == y + z);\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpezavra_2: /tmp/tmpezavra_2.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = (int)x;\n    int b = (int)y;\n\
    \    int c = (int)z;\n    return ((a + b + c) == (x+y+z));\n}\nint main() {\n\
    \    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1)))\
    \ == (true));\n    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n\
    \    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)),\
    \ (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)),\
    \ (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n\
    \    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)),\
    \ (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)),\
    \ (float(7))) == (true));\n    assert(candidate((3.0), (float(4)), (float(7)))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp5n5puvk9: /tmp/tmp5n5puvk9.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(6)), (float(2))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xx = x;\n    int yy = y;\n \
    \   int zz = z;\n    int xy = x;\n    int yz = y;\n    int zx = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int xz = x;\n    int yx = y;\n    int zy = z;\n    int xz\
    \ = x;\n    int yx = y;\n    int zy = z;\n    int xz = x;\n    int yx = y;\n \
    \   int zy = z;\n    int x\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpehpl8m29.cpp: In function \u2018bool any_int(float, float, float)\u2019\
    :\n/tmp/tmpehpl8m29.cpp:21:9: error: redeclaration of \u2018int xx\u2019\n   21\
    \ |     int xx = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:12:9: note: \u2018\
    int xx\u2019 previously declared here\n   12 |     int xx = x;\n      |      \
    \   ^~\n/tmp/tmpehpl8m29.cpp:22:9: error: redeclaration of \u2018int yy\u2019\n\
    \   22 |     int yy = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:23:9: error: redeclaration of \u2018int zz\u2019\
    \n   23 |     int zz = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:24:9: error: redeclaration of \u2018int xy\u2019\
    \n   24 |     int xy = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:15:9: note:\
    \ \u2018int xy\u2019 previously declared here\n   15 |     int xy = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:25:9: error: redeclaration of \u2018int yz\u2019\
    \n   25 |     int yz = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:16:9: note:\
    \ \u2018int yz\u2019 previously declared here\n   16 |     int yz = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:26:9: error: redeclaration of \u2018int zx\u2019\
    \n   26 |     int zx = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:17:9: note:\
    \ \u2018int zx\u2019 previously declared here\n   17 |     int zx = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:27:9: error: redeclaration of \u2018int xz\u2019\
    \n   27 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:28:9: error: redeclaration of \u2018int yx\u2019\
    \n   28 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:29:9: error: redeclaration of \u2018int zy\u2019\
    \n   29 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:30:9: error: redeclaration of \u2018int xx\u2019\
    \n   30 |     int xx = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:12:9: note:\
    \ \u2018int xx\u2019 previously declared here\n   12 |     int xx = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:31:9: error: redeclaration of \u2018int yy\u2019\
    \n   31 |     int yy = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:13:9: note:\
    \ \u2018int yy\u2019 previously declared here\n   13 |     int yy = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:32:9: error: redeclaration of \u2018int zz\u2019\
    \n   32 |     int zz = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:14:9: note:\
    \ \u2018int zz\u2019 previously declared here\n   14 |     int zz = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:33:9: error: redeclaration of \u2018int xy\u2019\
    \n   33 |     int xy = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:15:9: note:\
    \ \u2018int xy\u2019 previously declared here\n   15 |     int xy = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:34:9: error: redeclaration of \u2018int yz\u2019\
    \n   34 |     int yz = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:16:9: note:\
    \ \u2018int yz\u2019 previously declared here\n   16 |     int yz = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:35:9: error: redeclaration of \u2018int zx\u2019\
    \n   35 |     int zx = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:17:9: note:\
    \ \u2018int zx\u2019 previously declared here\n   17 |     int zx = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:36:9: error: redeclaration of \u2018int xz\u2019\
    \n   36 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:37:9: error: redeclaration of \u2018int yx\u2019\
    \n   37 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:38:9: error: redeclaration of \u2018int zy\u2019\
    \n   38 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:39:9: error: redeclaration of \u2018int xz\u2019\
    \n   39 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:40:9: error: redeclaration of \u2018int yx\u2019\
    \n   40 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:41:9: error: redeclaration of \u2018int zy\u2019\
    \n   41 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:42:9: error: redeclaration of \u2018int xz\u2019\
    \n   42 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:43:9: error: redeclaration of \u2018int yx\u2019\
    \n   43 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:44:9: error: redeclaration of \u2018int zy\u2019\
    \n   44 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:45:9: error: redeclaration of \u2018int xz\u2019\
    \n   45 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:46:9: error: redeclaration of \u2018int yx\u2019\
    \n   46 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:47:9: error: redeclaration of \u2018int zy\u2019\
    \n   47 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:48:9: error: redeclaration of \u2018int xz\u2019\
    \n   48 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:49:9: error: redeclaration of \u2018int yx\u2019\
    \n   49 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:50:9: error: redeclaration of \u2018int zy\u2019\
    \n   50 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:51:9: error: redeclaration of \u2018int xz\u2019\
    \n   51 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:52:9: error: redeclaration of \u2018int yx\u2019\
    \n   52 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:53:9: error: redeclaration of \u2018int zy\u2019\
    \n   53 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:54:9: error: redeclaration of \u2018int xz\u2019\
    \n   54 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:55:9: error: redeclaration of \u2018int yx\u2019\
    \n   55 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:56:9: error: redeclaration of \u2018int zy\u2019\
    \n   56 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:57:9: error: redeclaration of \u2018int xz\u2019\
    \n   57 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:58:9: error: redeclaration of \u2018int yx\u2019\
    \n   58 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:59:9: error: redeclaration of \u2018int zy\u2019\
    \n   59 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:60:9: error: redeclaration of \u2018int xz\u2019\
    \n   60 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:61:9: error: redeclaration of \u2018int yx\u2019\
    \n   61 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:62:9: error: redeclaration of \u2018int zy\u2019\
    \n   62 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:63:9: error: redeclaration of \u2018int xz\u2019\
    \n   63 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:64:9: error: redeclaration of \u2018int yx\u2019\
    \n   64 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:65:9: error: redeclaration of \u2018int zy\u2019\
    \n   65 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:66:9: error: redeclaration of \u2018int xz\u2019\
    \n   66 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:67:9: error: redeclaration of \u2018int yx\u2019\
    \n   67 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:68:9: error: redeclaration of \u2018int zy\u2019\
    \n   68 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:69:9: error: redeclaration of \u2018int xz\u2019\
    \n   69 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:70:9: error: redeclaration of \u2018int yx\u2019\
    \n   70 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:71:9: error: redeclaration of \u2018int zy\u2019\
    \n   71 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:72:9: error: redeclaration of \u2018int xz\u2019\
    \n   72 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:73:9: error: redeclaration of \u2018int yx\u2019\
    \n   73 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:74:9: error: redeclaration of \u2018int zy\u2019\
    \n   74 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:75:9: error: redeclaration of \u2018int xz\u2019\
    \n   75 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:76:9: error: redeclaration of \u2018int yx\u2019\
    \n   76 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:77:9: error: redeclaration of \u2018int zy\u2019\
    \n   77 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:78:9: error: redeclaration of \u2018int xz\u2019\
    \n   78 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:79:9: error: redeclaration of \u2018int yx\u2019\
    \n   79 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:80:9: error: redeclaration of \u2018int zy\u2019\
    \n   80 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:81:9: error: redeclaration of \u2018int xz\u2019\
    \n   81 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:82:9: error: redeclaration of \u2018int yx\u2019\
    \n   82 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:83:9: error: redeclaration of \u2018int zy\u2019\
    \n   83 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:84:9: error: redeclaration of \u2018int xz\u2019\
    \n   84 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:85:9: error: redeclaration of \u2018int yx\u2019\
    \n   85 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:86:9: error: redeclaration of \u2018int zy\u2019\
    \n   86 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:87:9: error: redeclaration of \u2018int xz\u2019\
    \n   87 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:88:9: error: redeclaration of \u2018int yx\u2019\
    \n   88 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:89:9: error: redeclaration of \u2018int zy\u2019\
    \n   89 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:90:9: error: redeclaration of \u2018int xz\u2019\
    \n   90 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:91:9: error: redeclaration of \u2018int yx\u2019\
    \n   91 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:92:9: error: redeclaration of \u2018int zy\u2019\
    \n   92 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:93:9: error: redeclaration of \u2018int xz\u2019\
    \n   93 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:94:9: error: redeclaration of \u2018int yx\u2019\
    \n   94 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:95:9: error: redeclaration of \u2018int zy\u2019\
    \n   95 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:96:9: error: redeclaration of \u2018int xz\u2019\
    \n   96 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:97:9: error: redeclaration of \u2018int yx\u2019\
    \n   97 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9: note:\
    \ \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:98:9: error: redeclaration of \u2018int zy\u2019\
    \n   98 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9: note:\
    \ \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:99:9: error: redeclaration of \u2018int xz\u2019\
    \n   99 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9: note:\
    \ \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n     \
    \ |         ^~\n/tmp/tmpehpl8m29.cpp:100:9: error: redeclaration of \u2018int\
    \ yx\u2019\n  100 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:101:9: error: redeclaration of \u2018\
    int zy\u2019\n  101 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:102:9: error: redeclaration of \u2018\
    int xz\u2019\n  102 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:103:9: error: redeclaration of \u2018\
    int yx\u2019\n  103 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:104:9: error: redeclaration of \u2018\
    int zy\u2019\n  104 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:105:9: error: redeclaration of \u2018\
    int xz\u2019\n  105 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:106:9: error: redeclaration of \u2018\
    int yx\u2019\n  106 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:107:9: error: redeclaration of \u2018\
    int zy\u2019\n  107 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:108:9: error: redeclaration of \u2018\
    int xz\u2019\n  108 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:109:9: error: redeclaration of \u2018\
    int yx\u2019\n  109 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:110:9: error: redeclaration of \u2018\
    int zy\u2019\n  110 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:111:9: error: redeclaration of \u2018\
    int xz\u2019\n  111 |     int xz = x;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:18:9:\
    \ note: \u2018int xz\u2019 previously declared here\n   18 |     int xz = x;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:112:9: error: redeclaration of \u2018\
    int yx\u2019\n  112 |     int yx = y;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:19:9:\
    \ note: \u2018int yx\u2019 previously declared here\n   19 |     int yx = y;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:113:9: error: redeclaration of \u2018\
    int zy\u2019\n  113 |     int zy = z;\n      |         ^~\n/tmp/tmpehpl8m29.cpp:20:9:\
    \ note: \u2018int zy\u2019 previously declared here\n   20 |     int zy = z;\n\
    \      |         ^~\n/tmp/tmpehpl8m29.cpp:115:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  115 | }\n      | ^\n/tmp/tmpehpl8m29.cpp:115:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmppw2wdv5o: /tmp/tmppw2wdv5o.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    int sum = xx + yy + zz;\n    if (sum == x) {\n        return\
    \ true;\n    } else if (sum == y) {\n        return true;\n    } else if (sum\
    \ == z) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg6fcj0oi: /tmp/tmpg6fcj0oi.cpp:28: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == x + y && y == y +\
    \ z && z == z + x && x == z + y);\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpst8diato: /tmp/tmpst8diato.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwwuv4eq3: /tmp/tmpwwuv4eq3.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6panuqaw: /tmp/tmp6panuqaw.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // TODO: Write your code here\n\
    \    float sum = (x + y + z);\n    if (sum == x)\n        return true;\n    if\
    \ (sum == y)\n        return true;\n    if (sum == z)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpljan7mu5: /tmp/tmpljan7mu5.cpp:24: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6_2psh0i: /tmp/tmp6_2psh0i.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && x == z) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7n997uuq: /tmp/tmp7n997uuq.cpp:19: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y && y == z) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjy4gqlxf: /tmp/tmpjy4gqlxf.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == x + y && y == y + z &&\
    \ z == z + x) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n\
    \    assert(candidate((2.5), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5),\
    \ (float(5)), (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)),\
    \ (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2)))\
    \ == (true));\n    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdn0oq0xl: /tmp/tmpdn0oq0xl.cpp:17: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw1aj_c2i: /tmp/tmpw1aj_c2i.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Your code here\n    float sum\
    \ = (x + y + z);\n    if (sum == x)\n        return true;\n    else if (sum ==\
    \ y)\n        return true;\n    else if (sum == z)\n        return true;\n   \
    \ else\n        return false;\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpu5s5yj1c: /tmp/tmpu5s5yj1c.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int a = x;\n    int b = y;\n  \
    \  int c = z;\n    if (a == b + c) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmph9j47g4b: /tmp/tmph9j47g4b.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx > yy)\n    {\n        if (xx > zz)\n        {\n \
    \           return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        if (yy > zz)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n}\nint main() {\n    auto candidate = any_int;\n \
    \   assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt1nbfgw_: /tmp/tmpt1nbfgw_.cpp:42: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmp67yt11gg: /tmp/tmp67yt11gg.cpp:22: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    return (x == y + z);\n}\nint main()\
    \ {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)),\
    \ (float(1))) == (true));\n    assert(candidate((2.5), (float(2)), (float(3)))\
    \ == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) == (false));\n\
    \    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)),\
    \ (float(2)), (float(2))) == (true));\n    assert(candidate((2.2), (2.2), (2.2))\
    \ == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n\
    \    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)),\
    \ (float(4)), (float(7))) == (true));\n    assert(candidate((3.0), (float(4)),\
    \ (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd3o8haxf: /tmp/tmpd3o8haxf.cpp:16: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    int xx = x;\n    int yy = y;\n\
    \    int zz = z;\n    if (xx > yy && xx > zz) {\n        return true;\n    } else\
    \ if (yy > xx && yy > zz) {\n        return true;\n    } else if (zz > xx && zz\
    \ > yy) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmprphhchm1: /tmp/tmprphhchm1.cpp:28: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphnfdvjir: /tmp/tmphnfdvjir.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    if (x == y + z) return true;\n\
    \    if (x == y - z) return true;\n    if (x == y - z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp83_28yr: /tmp/tmpp83_28yr.cpp:21: int main(): Assertion `candidate((1.5),\
    \ (float(5)), (3.5)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    // Write your code here\n    float\
    \ sum=x+y+z;\n    if(sum==(x+y+z)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = any_int;\n\
    \    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5),\
    \ (float(2)), (float(3))) == (false));\n    assert(candidate((1.5), (float(5)),\
    \ (3.5)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2)))\
    \ == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n\
    \    assert(candidate((2.2), (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)),\
    \ (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)),\
    \ (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7)))\
    \ == (true));\n    assert(candidate((3.0), (float(4)), (float(7))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp157nstup: /tmp/tmp157nstup.cpp:24: int main(): Assertion `candidate((2.5),\
    \ (float(2)), (float(3))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    float sum = (x + y + z);\n    if\
    \ (sum == 0)\n        return false;\n    if (x == sum)\n        return true;\n\
    \    if (y == sum)\n        return true;\n    if (z == sum)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgi4tnk0_: /tmp/tmpgi4tnk0_.cpp:25: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that\
    \ takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n// Returns false in any other\
    \ cases.\n// Examples\n// any_int(5, 2, 7) \u279E True\n// any_int(3, 2, 2) \u279E\
    \ False\n// any_int(3, -2, 1) \u279E True\n// any_int(3.6, -2.2, 2) \u279E False\n\
    bool any_int(float x, float y, float z) {\n    assert(x >= 0);\n    assert(y >=\
    \ 0);\n    assert(z >= 0);\n    if (x == y + z) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)),\
    \ (float(3)), (float(1))) == (true));\n    assert(candidate((2.5), (float(2)),\
    \ (float(3))) == (false));\n    assert(candidate((1.5), (float(5)), (3.5)) ==\
    \ (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n\
    \    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2),\
    \ (2.2), (2.2)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2)))\
    \ == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n\
    \    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0),\
    \ (float(4)), (float(7))) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjdgyugan: /tmp/tmpjdgyugan.cpp:22: int main(): Assertion `candidate((float(2)),\
    \ (float(3)), (float(1))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
