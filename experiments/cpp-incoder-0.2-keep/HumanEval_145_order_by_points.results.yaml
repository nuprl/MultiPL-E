name: HumanEval_145_order_by_points
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpv8i6s3v2: /tmp/tmpv8i6s3v2.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpu75js0rl: /tmp/tmpu75js0rl.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a < sum - b;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzt76yauu: /tmp/tmpzt76yauu.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j <\
    \ nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkap68swf: /tmp/tmpkap68swf.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp055z8704: /tmp/tmp055z8704.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long num : nums_copy) {\n        sum += num;\n    }\n    long index = 0;\n\
    \    std::vector<long> sorted_nums;\n    while (index < nums.size()) {\n     \
    \   long cur = nums[index];\n        long cur_sum = sum - cur;\n        if (cur_sum\
    \ > 0) {\n            sorted_nums.push_back(cur);\n            sum += cur;\n \
    \       }\n        index++;\n    }\n    return sorted_nums;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpy9y0ekje: /tmp/tmpy9y0ekje.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpq5mm368f: /tmp/tmpq5mm368f.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp67vie0o_: /tmp/tmp67vie0o_.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2dfxgi_i: /tmp/tmp2dfxgi_i.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    long temp = 0;\n\
    \    long index = 0;\n    std::vector<long> result;\n    for (auto &i : nums)\
    \ {\n        sum += i;\n    }\n    for (auto &i : nums) {\n        temp += i;\n\
    \        if (temp == sum) {\n            result.push_back(i);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwijw_irw: /tmp/tmpwijw_irw.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return result;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp9mmsob3u: /tmp/tmp9mmsob3u.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpc_rv3x_0: /tmp/tmpc_rv3x_0.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0zrtgq01: /tmp/tmp0zrtgq01.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums1;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums1.push_back(i);\n\
    \    }\n    std::sort(nums1.begin(), nums1.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums1;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7i_ut5az: /tmp/tmp7i_ut5az.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp6dzj9y7v: /tmp/tmp6dzj9y7v.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums1;\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n    }\n    long max = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        if (sum - nums[i] >= max) {\n            nums1.push_back(nums[i]);\n\
    \        }\n    }\n    for (long i = 0; i < nums2.size(); i++) {\n        if (sum\
    \ - nums2[i] >= max) {\n            nums2.push_back(nums2[i]);\n        }\n  \
    \  }\n    long min = 0;\n    for (long i = 0; i < nums2.size(); i++) {\n     \
    \   if (sum - nums2[i] <= min) {\n            nums1.push_back(nums2[i]);\n   \
    \     }\n    }\n    for (long i = 0; i < nums1.size(); i++) {\n        nums1.push_back(nums1[i]);\n\
    \    }\n    return nums1;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph5f4qw4l: /tmp/tmph5f4qw4l.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]>0){\n                sum+=nums[j];\n            }\n  \
    \      }\n        if(sum==0){\n            nums2.push_back(nums[i]);\n       \
    \ }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnqxvz75c: /tmp/tmpnqxvz75c.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplimj6djc: /tmp/tmplimj6djc.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpo49v7esd: /tmp/tmpo49v7esd.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2g_72hnh: /tmp/tmp2g_72hnh.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        int sum = 0;\n        while (i != 0) {\n        \
    \    sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkkt4uu79: /tmp/tmpkkt4uu79.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4isoi_yc: /tmp/tmp4isoi_yc.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpneaah3ho: /tmp/tmpneaah3ho.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long &num : nums) {\n        nums2.push_back(num);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long &a, long &b){\n        return a + b < 0;\n    });\n   \
    \ return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppsuvt6yd: /tmp/tmppsuvt6yd.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7ug06mqf: /tmp/tmp7ug06mqf.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjerj6_7k: /tmp/tmpjerj6_7k.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpp3gerfbi: /tmp/tmpp3gerfbi.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpz6jgvo1m: /tmp/tmpz6jgvo1m.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp93uyd0bi: /tmp/tmp93uyd0bi.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n        return a + b < 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2zb77chz: /tmp/tmp2zb77chz.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpsguxl294: /tmp/tmpsguxl294.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    long sum = 0;\n    for (long i : nums_copy) {\n        sum += i;\n    }\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [sum](int a, int b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpksta483l: /tmp/tmpksta483l.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b) -> bool\
    \ {\n        return a + b == sum;\n    });\n    return nums2;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpik34ng2u: /tmp/tmpik34ng2u.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for(long &num: nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp9lq0idyf: /tmp/tmp9lq0idyf.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpndqfj941: /tmp/tmpndqfj941.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(nums[i]);\n    }\n    std::sort(nums2.begin(), nums2.end(),\
    \ [&sum](long a, long b) -> bool {\n        return sum - a < sum - b;\n    });\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmwl7gx0w: /tmp/tmpmwl7gx0w.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxohws_y8: /tmp/tmpxohws_y8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp95uekexf: /tmp/tmp95uekexf.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmrm960qk: /tmp/tmpmrm960qk.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long max = 0;\n    for (long i : nums2) {\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        sum += i;\n    }\n    std::vector<long>\
    \ nums3;\n    for (long i : nums2) {\n        if (sum == max) {\n            nums3.push_back(i);\n\
    \        }\n    }\n    return nums3;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjdv43ojj: /tmp/tmpjdv43ojj.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    long max = 0;\n    for (long i : nums) {\n        sum += i;\n\
    \        if (sum > max) {\n            max = sum;\n        }\n    }\n    for (long\
    \ i : nums) {\n        if (sum == max) {\n            result.push_back(i);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdpjrmcgk: /tmp/tmpdpjrmcgk.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdw_31j2g: /tmp/tmpdw_31j2g.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) < std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkxw31a6q: /tmp/tmpkxw31a6q.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7aiuv9x1: /tmp/tmp7aiuv9x1.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(j==i){\n                continue;\n            }\n           \
    \ sum+=nums[j];\n        }\n        if(sum==0){\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp86vy5weu: /tmp/tmp86vy5weu.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpe0tcp897: /tmp/tmpe0tcp897.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    long min_sum = sum;\n\
    \    std::vector<long> result;\n    for (long i : nums_copy) {\n        long tmp\
    \ = sum - i;\n        if (tmp < min_sum) {\n            tmp = i;\n           \
    \ min_sum = tmp;\n        }\n        result.push_back(tmp);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpn3vnw5dz: /tmp/tmpn3vnw5dz.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){return a+b<0;});\n    std::vector<long> ans;\n\
    \    long sum = 0;\n    for(long i : numsCopy){\n        sum += i;\n        ans.push_back(i);\n\
    \    }\n    for(long i : numsCopy){\n        if(sum != i){\n            ans.push_back(i);\n\
    \            sum -= i;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7ny3f47l: /tmp/tmp7ny3f47l.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        return a + b < 0;\n    });\n    return\
    \ nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_nbak_o1: /tmp/tmp_nbak_o1.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptfv4srvj: /tmp/tmptfv4srvj.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for(long num : nums){\n        sum += num;\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkr1lhogk: /tmp/tmpkr1lhogk.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpa1ub1z35: /tmp/tmpa1ub1z35.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbn7a0dko: /tmp/tmpbn7a0dko.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted = nums;\n\
    \    std::sort(numsSorted.begin(), numsSorted.end(), [](long a, long b) {\n  \
    \      return a + b < 0;\n    });\n    return numsSorted;\n}\nint main() {\n \
    \   auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvumq7t8s: /tmp/tmpvumq7t8s.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long i : nums_copy) {\n        sum += i;\n    }\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [sum](long a, long b) {\n        return sum - a + b < sum -\
    \ b + a;\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpszuu56u0: /tmp/tmpszuu56u0.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpj1a3ldl5: /tmp/tmpj1a3ldl5.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdu1hhlet: /tmp/tmpdu1hhlet.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy2;\n    long sum = 0;\n    for(long i : nums_copy){\n        sum +=\
    \ i;\n        nums_copy2.push_back(sum);\n    }\n    sort(nums_copy2.begin(),\
    \ nums_copy2.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy3;\n    long sum2 = 0;\n    for(long i : nums_copy2){\n        sum2\
    \ += i;\n        nums_copy3.push_back(sum2);\n    }\n    sort(nums_copy3.begin(),\
    \ nums_copy3.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy4;\n    long sum3 = 0;\n    for(long i : nums_copy3){\n        sum3\
    \ += i;\n        nums_copy4.push_back(sum3);\n    }\n    sort(nums_copy4.begin(),\
    \ nums_copy4.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy5;\n    long sum4 = 0;\n    for(long i : nums_copy4){\n        sum4\
    \ += i;\n        nums_copy5.push_back(sum4);\n    }\n    sort(nums_copy5.begin(),\
    \ nums_copy5.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy6;\n    long sum5 = 0;\n    for(long i : nums_copy5){\n        sum5\
    \ += i;\n        nums_copy6.push_back(sum5);\n    }\n    sort(nums_copy6.begin(),\
    \ nums_copy6.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy7;\n    long sum6 = 0;\n    for(long i : nums_copy6){\n        sum6\
    \ += i;\n        nums_copy7.push_back(sum6);\n    }\n    sort(nums_copy7.begin(),\
    \ nums_copy7.end(), [](long a, long b){return a+b<0;});\n    std::vector<long>\
    \ nums_copy8;\n    long sum7 = 0;\n    for(long i : nums_copy7){\n        sum7\
    \ += i;\n        nums_copy8.push_back(sum7);\n    }\n    sort(nums_copy8.begin(),\
    \ nums_copy8.end(), [](long a, long b){return \n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlpvvs5y.cpp: In lambda function:\n/tmp/tmptlpvvs5y.cpp:62:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n\
    /tmp/tmptlpvvs5y.cpp:61:73: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   61 |     sort(nums_copy8.begin(), nums_copy8.end(), [](long a, long\
    \ b){return\n      |                                                         \
    \                ^\n      |                                                  \
    \                       ;\n   62 | }\n      | ~                              \
    \                                          \n/tmp/tmptlpvvs5y.cpp: In function\
    \ \u2018std::vector<long int> order_by_points(std::vector<long int>)\u2019:\n\
    /tmp/tmptlpvvs5y.cpp:62:2: error: expected \u2018)\u2019 before \u2018int\u2019\
    \n   62 | }\n      |  ^\n      |  )\n   63 | int main() {\n      | ~~~\n/tmp/tmptlpvvs5y.cpp:61:9:\
    \ note: to match this \u2018(\u2019\n   61 |     sort(nums_copy8.begin(), nums_copy8.end(),\
    \ [](long a, long b){return\n      |         ^\n/tmp/tmptlpvvs5y.cpp:71:1: error:\
    \ expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmptlpvvs5y.cpp:10:59:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n      |                                                           ^\n\
    /tmp/tmptlpvvs5y.cpp:71:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   71 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpopmkz_ky: /tmp/tmpopmkz_ky.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a - b < 0;\n    });\n    return nums2;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmper2uy99t: /tmp/tmper2uy99t.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1nanmhc7: /tmp/tmp1nanmhc7.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7womfz9f: /tmp/tmp7womfz9f.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprbfs2zqp: /tmp/tmprbfs2zqp.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptc8c9gd2: /tmp/tmptc8c9gd2.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpg9wqqb39: /tmp/tmpg9wqqb39.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpshjz8rts: /tmp/tmpshjz8rts.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        long sum = 0;\n        while (a !=\
    \ 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n        while\
    \ (a != 0) {\n            sum += a % 10;\n            a /= 10;\n        }\n  \
    \      return sum - b < 0;\n    });\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvgx1z1ee: /tmp/tmpvgx1z1ee.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums1;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums1.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    std::vector<long> nums2;\n    for (long i\
    \ : nums1) {\n        if (sum - i > maxSum) {\n            maxSum = sum - i;\n\
    \            nums2.push_back(i);\n        }\n    }\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpj_ywq2pc: /tmp/tmpj_ywq2pc.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a < sum - b;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0jx9v_1h: /tmp/tmp0jx9v_1h.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfx94bym5: /tmp/tmpfx94bym5.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmplqurfdoh: /tmp/tmplqurfdoh.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdfxgmojt: /tmp/tmpdfxgmojt.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n    \
    \        if (sum > 0) {\n                numsSorted[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    return numsSorted;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_bqtc_xr: /tmp/tmp_bqtc_xr.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long index = 0;\n    std::vector<long> result;\n    for\
    \ (auto i : nums) {\n        sum += i;\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n        if (sum < min) {\n            min = sum;\n  \
    \      }\n    }\n    for (auto i : nums) {\n        if (sum == i) {\n        \
    \    result.push_back(i);\n        }\n    }\n    for (auto i : result) {\n   \
    \     std::cout << i << std::endl;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: "-12\n"
  stderr: "tmpv2cwqwud: /tmp/tmpv2cwqwud.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3r64c_7i: /tmp/tmp3r64c_7i.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    long sum = 0;\n    for\
    \ (long i : numsCopy) {\n        sum += i;\n    }\n    long maxSum = sum;\n  \
    \  std::vector<long> numsCopyCopy = numsCopy;\n    for (long i : numsCopyCopy)\
    \ {\n        sum -= i;\n        if (sum < 0) {\n            sum = 0;\n       \
    \ }\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n\
    \    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxqf_51a2: /tmp/tmpxqf_51a2.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for(long i : nums){\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvwmksqka: /tmp/tmpvwmksqka.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5uqskqfi: /tmp/tmp5uqskqfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp46p3f7qd: /tmp/tmp46p3f7qd.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpz8azd_yl: /tmp/tmpz8azd_yl.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b){\n        sum = (a + b) % 10;\n        return sum < 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphexc_3ud: /tmp/tmphexc_3ud.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        int sum = 0;\n        for\
    \ (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        \
    \    if (sum == i) {\n                numsSorted[j] = i;\n            }\n    \
    \    }\n    }\n    return numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpisfepejx: /tmp/tmpisfepejx.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpic9k82xc: /tmp/tmpic9k82xc.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b) {\n        sum -= a;\n        sum += b;\n        return sum > 0;\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp9kddg3l9: /tmp/tmp9kddg3l9.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8jrv2ysd: /tmp/tmp8jrv2ysd.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp963p4y2p: /tmp/tmp963p4y2p.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b){return\
    \ sum - a + b < sum - a + b;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp60ki62te: /tmp/tmp60ki62te.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqelb05yi: /tmp/tmpqelb05yi.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpts09ymk7: /tmp/tmpts09ymk7.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdhot9kq6: /tmp/tmpdhot9kq6.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprl9iq6ml: /tmp/tmprl9iq6ml.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqtk4tj_e: /tmp/tmpqtk4tj_e.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptwnhfjsr: /tmp/tmptwnhfjsr.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmphowv8gg_: /tmp/tmphowv8gg_.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){\n  \
    \      return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpoqg75cag: /tmp/tmpoqg75cag.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpznfrrmbu: /tmp/tmpznfrrmbu.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < nums2.size(); i++) {\n        long sum2 = sum - nums2[i];\n        if (sum2\
    \ > maxSum) {\n            maxSum = sum2;\n            maxSumIndex = i;\n    \
    \    }\n    }\n    std::vector<long> ans;\n    ans.push_back(nums2[maxSumIndex]);\n\
    \    for (long i = maxSumIndex + 1; i < nums2.size(); i++) {\n        long sum2\
    \ = sum - nums2[i];\n        if (sum2 > maxSum) {\n            ans.push_back(nums2[i]);\n\
    \            maxSum = sum2;\n            maxSumIndex = i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpcor3lxl6: /tmp/tmpcor3lxl6.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpiactrwgs: /tmp/tmpiactrwgs.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a - b < 0;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpa2iiqvsv: /tmp/tmpa2iiqvsv.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3rh35vj4: /tmp/tmp3rh35vj4.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpevxqgt2u: /tmp/tmpevxqgt2u.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4lw2egbr: /tmp/tmp4lw2egbr.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4ytuaf7p: /tmp/tmp4ytuaf7p.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        long sum = 0;\n        while (i != 0) {\n       \
    \     sum += i % 10;\n            i /= 10;\n        }\n        nums2.push_back(sum);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end());\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxn_h2nd5: /tmp/tmpxn_h2nd5.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpu0u7jcot: /tmp/tmpu0u7jcot.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp37ifnjzf: /tmp/tmp37ifnjzf.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < 0;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3ifx1zra: /tmp/tmp3ifx1zra.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpv2bd6pbd: /tmp/tmpv2bd6pbd.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    long sum = 0;\n    for (long i : nums_copy) {\n        sum += i;\n    }\n\
    \    long max_sum = 0;\n    long max_index = 0;\n    for (long i : nums_copy)\
    \ {\n        if (sum == max_sum) {\n            max_index = i;\n        }\n  \
    \      if (sum > max_sum) {\n            max_sum = sum;\n        }\n    }\n  \
    \  std::vector<long> result;\n    for (long i : nums_copy) {\n        if (i ==\
    \ max_index) {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpk2gm4nxr: /tmp/tmpk2gm4nxr.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpo7tr2iy6: /tmp/tmpo7tr2iy6.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (auto &i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b) {\n\
    \        return sum - a - b < 0;\n    });\n    return result;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpam6a_cj0: /tmp/tmpam6a_cj0.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpu77yxukw: /tmp/tmpu77yxukw.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        if(sum==0){\n            nums2.push_back(i);\n        }\n \
    \   }\n    std::sort(nums2.begin(),nums2.end(),[](long a,long b){return a+b<0;});\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpiapeloct: /tmp/tmpiapeloct.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp413n0ipq: /tmp/tmp413n0ipq.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b) {\n        sum += std::abs(a - b);\n        return sum > 0;\n   \
    \ });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpop6ktw20: /tmp/tmpop6ktw20.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzcpchwpd: /tmp/tmpzcpchwpd.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7ydu535i: /tmp/tmp7ydu535i.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2nc9y6zz: /tmp/tmp2nc9y6zz.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnmmrcmsq: /tmp/tmpnmmrcmsq.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        numsSorted[sum\
    \ - i] = i;\n    }\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdss2ac84: /tmp/tmpdss2ac84.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7uccsv8e: /tmp/tmp7uccsv8e.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbdrwmcfh: /tmp/tmpbdrwmcfh.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(i);\n        }\n    }\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8k4asdim: /tmp/tmp8k4asdim.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b){\n    \
    \    return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpejgsmiub: /tmp/tmpejgsmiub.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    for(long\
    \ i=0;i<nums.size();i++){\n        long sum=0;\n        for(long j=0;j<nums.size();j++){\n\
    \            if(nums[j]==i){\n                sum+=nums[j];\n            }\n \
    \       }\n        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(),nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpzkvw_rf1: /tmp/tmpzkvw_rf1.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2aimbjdx: /tmp/tmp2aimbjdx.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    long maxSumIndex = 0;\n    for (long i = 0;\
    \ i < nums2.size(); i++) {\n        long sum2 = sum - nums2[i];\n        if (sum2\
    \ > maxSum) {\n            maxSum = sum2;\n            maxSumIndex = i;\n    \
    \    }\n    }\n    std::vector<long> ans;\n    ans.push_back(maxSum);\n    ans.push_back(maxSumIndex);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpq_nidpry: /tmp/tmpq_nidpry.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long maxSum = sum;\n    long maxIndex = 0;\n    for (long i = 0; i\
    \ < nums2.size(); i++) {\n        long sum2 = sum - nums2[i];\n        if (sum2\
    \ > maxSum) {\n            maxSum = sum2;\n            maxIndex = i;\n       \
    \ }\n    }\n    std::vector<long> ans;\n    ans.push_back(maxIndex);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdjmqgqhf: /tmp/tmpdjmqgqhf.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i == j) {\n      \
    \          continue;\n            }\n            sum += nums[j];\n        }\n\
    \        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n\
    \    return numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmppvknuqqk: /tmp/tmppvknuqqk.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int a, int b) {\n   \
    \     return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpnjagvw7f: /tmp/tmpnjagvw7f.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    long index = 0;\n    for (auto num : nums) {\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    for (auto num : result) {\n        std::cout << num << \" \";\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = order_by_points;\n  \
    \  assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: '-12 0 1 11 12 '
  stderr: "tmpret7vme2: /tmp/tmpret7vme2.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (size_t i =\
    \ 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (size_t j = 0;\
    \ j < nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmparnbn4a7: /tmp/tmparnbn4a7.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (size_t i =\
    \ 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (size_t j = 0;\
    \ j < nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpqn4gsqxi: /tmp/tmpqn4gsqxi.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp0vzjnrnh: /tmp/tmp0vzjnrnh.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    long max = 0;\n\
    \    long min = 0;\n    long index = 0;\n    long temp = 0;\n    std::vector<long>\
    \ result;\n    for (auto i : nums) {\n        sum += i;\n        if (sum > max)\
    \ {\n            max = sum;\n        }\n        if (sum < min) {\n           \
    \ min = sum;\n        }\n    }\n    for (auto i : nums) {\n        temp = sum\
    \ - i;\n        if (temp > 0) {\n            result.push_back(temp);\n       \
    \ }\n    }\n    for (auto i : result) {\n        index = result.size() - i - 1;\n\
    \        if (index > 0) {\n            result.insert(result.begin() + index, i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbtv20oeq: /tmp/tmpbtv20oeq.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5yh56h_m: /tmp/tmp5yh56h_m.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpq0x2zu7u: /tmp/tmpq0x2zu7u.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return result;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkz7ufuzn: /tmp/tmpkz7ufuzn.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdnyvvl7b: /tmp/tmpdnyvvl7b.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpplx_ead3: /tmp/tmpplx_ead3.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpp07jmz2u: /tmp/tmpp07jmz2u.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted = nums;\n\
    \    std::sort(numsSorted.begin(), numsSorted.end(), [](const long &a, const long\
    \ &b) -> bool {\n        return std::abs(a) > std::abs(b);\n    });\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpy2pnsas4: /tmp/tmpy2pnsas4.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) < std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkss4_9to: /tmp/tmpkss4_9to.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i : nums) {\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long a, long b){\n        return a + b < 0;\n    });\n    return\
    \ nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp29qxxhh_: /tmp/tmp29qxxhh_.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](int i, int j) {\n   \
    \     return sum - j;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpkrqua3pl: /tmp/tmpkrqua3pl.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](const long &a, const long &b){\n        return std::abs(a)\
    \ > std::abs(b);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmptlmy49v6: /tmp/tmptlmy49v6.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwoouc6xo: /tmp/tmpwoouc6xo.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (long num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpupgp6rb7: /tmp/tmpupgp6rb7.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpuzvw7rxz: /tmp/tmpuzvw7rxz.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpxagggwa5: /tmp/tmpxagggwa5.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return a + b < 0;\n    });\n  \
    \  return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpes0sav1h: /tmp/tmpes0sav1h.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return a + b < 0;\n    });\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmph0ck8sdh: /tmp/tmph0ck8sdh.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b){\n        sum += std::abs(a - b);\n        return sum > 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpb6ypx_cf: /tmp/tmpb6ypx_cf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums1;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums1.push_back(i);\n\
    \    }\n    std::sort(nums1.begin(), nums1.end(), [&sum](long a, long b) {\n \
    \       return sum - a - b < 0;\n    });\n    return nums1;\n}\nint main() {\n\
    \    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpoubl2st9: /tmp/tmpoubl2st9.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprwi6_5r8: /tmp/tmprwi6_5r8.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy = nums;\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpg9fd982u: /tmp/tmpg9fd982u.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpeu2e8o2o: /tmp/tmpeu2e8o2o.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpyll_5qvs: /tmp/tmpyll_5qvs.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b) ->\
    \ bool {\n        return sum - a < sum - b;\n    });\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8wzcbneu: /tmp/tmp8wzcbneu.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> result;\n    long sum = 0;\n    for (auto num\
    \ : nums) {\n        sum += num;\n        result.push_back(sum);\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpe_dt__a9: /tmp/tmpe_dt__a9.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_c30lov1: /tmp/tmp_c30lov1.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdwp6nyxq: /tmp/tmpdwp6nyxq.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums1;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            if (i != j) {\n                sum\
    \ += nums[j];\n            }\n        }\n        if (sum > 0) {\n            nums1.push_back(nums[i]);\n\
    \        }\n    }\n    return nums1;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpebh29z4_: /tmp/tmpebh29z4_.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> numsSorted(nums.size());\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        numsSorted[i] = sum;\n    }\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n    return numsSorted;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpvwdzirls: /tmp/tmpvwdzirls.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        long sum = 0;\n        for (long j = 0; j <\
    \ nums.size(); j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            sum += nums[j];\n        }\n        numsSorted[i]\
    \ = sum;\n    }\n    std::sort(numsSorted.begin(), numsSorted.end());\n    return\
    \ numsSorted;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmyhj0fj5: /tmp/tmpmyhj0fj5.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2h7z0mrp: /tmp/tmp2h7z0mrp.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](int a, int b) -> bool\
    \ {\n        return sum - a + b < sum - a - b;\n    });\n    return nums2;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpug8lfwtm: /tmp/tmpug8lfwtm.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](const long &a, const long &b){\n        return std::abs(a)\
    \ < std::abs(b);\n    });\n    return numsCopy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpmk3_viot: /tmp/tmpmk3_viot.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp01nl0s6_: /tmp/tmp01nl0s6_.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    long sum = 0;\n    std::vector<long>\
    \ result;\n    for(long i : nums)\n    {\n        sum += i;\n        result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end(), [&sum](long a, long b){return\
    \ sum - a < sum - b;});\n    return result;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmproriburg: /tmp/tmproriburg.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](const long &a, const long &b){\n        return std::abs(a)\
    \ > std::abs(b);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4jl7r7oe: /tmp/tmp4jl7r7oe.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n    \
    \        if (sum > 0) {\n                numsSorted[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    return numsSorted;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjjqycupu: /tmp/tmpjjqycupu.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        nums2.push_back(nums[i]);\n    }\n    std::sort(nums2.begin(), nums2.end(),\
    \ [&sum](long a, long b){return sum - a + b < sum - b + a;});\n    return nums2;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpm6sl9xnk: /tmp/tmpm6sl9xnk.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < sum - a + b;\n    });\n    return nums2;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprpk67l8q: /tmp/tmprpk67l8q.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](int a, int b){return sum\
    \ - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11,\
    \ -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpbqfkvoaz: /tmp/tmpbqfkvoaz.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for(long i : nums)\n    {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b){return\
    \ sum - a + b < sum - b + a;});\n    return nums2;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({1, 11,\
    \ -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpfdxivnlu: /tmp/tmpfdxivnlu.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < 0;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp1_qzgsg_: /tmp/tmp1_qzgsg_.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjqa9l21l: /tmp/tmpjqa9l21l.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpwogg5pub: /tmp/tmpwogg5pub.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    long min = nums2[0];\n    for (long i : nums2) {\n        if (sum\
    \ - i < min) {\n            min = sum - i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (long i : nums2) {\n        if (sum - i == min) {\n       \
    \     result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpdqlcax2m: /tmp/tmpdqlcax2m.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpiklfj18g: /tmp/tmpiklfj18g.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) < std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp5lr21puu: /tmp/tmp5lr21puu.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmprg9l5xjk: /tmp/tmprg9l5xjk.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpf6bcd8ac: /tmp/tmpf6bcd8ac.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsCopy(nums);\n    std::sort(numsCopy.begin(),\
    \ numsCopy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return numsCopy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpr_wvst4_: /tmp/tmpr_wvst4_.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp9pqxgzm7: /tmp/tmp9pqxgzm7.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> numsSorted(nums.size());\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n    \
    \        if (sum > 0) {\n                numsSorted[i] = j;\n                break;\n\
    \            }\n        }\n    }\n    return numsSorted;\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpljlcq7vt: /tmp/tmpljlcq7vt.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a) > std::abs(b);\n    });\n    return nums_copy;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp2s6w_m36: /tmp/tmp2s6w_m36.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    long sum = 0;\n    long max_sum =\
    \ 0;\n    std::vector<long> result;\n    for (long num : nums) {\n        sum\
    \ += num;\n        if (sum > max_sum) {\n            result.clear();\n       \
    \     result.push_back(sum);\n            max_sum = sum;\n        } else if (sum\
    \ == max_sum) {\n            result.push_back(sum);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp3fie9koi: /tmp/tmp3fie9koi.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpj5k641np: /tmp/tmpj5k641np.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){\n     \
    \   return std::abs(a - b) < std::abs(std::abs(a) - std::abs(b));\n    });\n \
    \   return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp4the4qp5: /tmp/tmp4the4qp5.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long &num : nums) {\n        nums2.push_back(num);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [](long &a, long &b){\n        return a + b < 0;\n    });\n   \
    \ return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpjr0xlsfr: /tmp/tmpjr0xlsfr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n        for (long\
    \ j = 0; j < nums.size(); j++) {\n            sum += nums[j];\n        }\n   \
    \     if (sum == nums[i]) {\n            nums2.push_back(nums[i]);\n        }\n\
    \    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp58sqkmck: /tmp/tmp58sqkmck.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [sum](long a, long b) -> bool\
    \ {\n        return sum - a + b < 0;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp_v2w01dd: /tmp/tmp_v2w01dd.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums2;\n    long\
    \ sum = 0;\n    for (long i : nums) {\n        sum += i;\n        nums2.push_back(i);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) -> bool\
    \ {\n        return sum - a < sum - b;\n    });\n    return nums2;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpobw6u4qy: /tmp/tmpobw6u4qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here\n    std::vector<long> nums_copy = nums;\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return a+b<0;});\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpsd9l6w0m: /tmp/tmpsd9l6w0m.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> numsSorted(nums.size());\n    long sum = 0;\n\
    \    for (long num : nums) {\n        sum += num;\n        numsSorted[sum % 10]\
    \ = num;\n    }\n    return numsSorted;\n}\nint main() {\n    auto candidate =\
    \ order_by_points;\n    assert(candidate((std::vector<long>({1, 11, -1, -11, -12})))\
    \ == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp7tepbgll: /tmp/tmp7tepbgll.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({1, 11, -1, -11, -12}))) == (std::vector<long>({-1,\
    \ -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmp8ikbs8wx: /tmp/tmp8ikbs8wx.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given list of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original list.\n// For example:\n\
    // >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n// >>>\
    \ order_by_points([]) == []\nstd::vector<long> order_by_points(std::vector<long>\
    \ nums) {\n    // Write your code here.\n    std::vector<long> result;\n    long\
    \ sum = 0;\n    for (long num : nums) {\n        sum += num;\n        result.push_back(sum);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11})));\n    assert(candidate((std::vector<long>({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}))) == (std::vector<long>({0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, -11,\
    \ -32, 43, 54, -98, 2, -3}))) == (std::vector<long>({-3, -32, -98, -11, 1, 2,\
    \ 43, 54})));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11}))) == (std::vector<long>({1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})));\n\
    \    assert(candidate((std::vector<long>({0, 6, 6, -76, -21, 23, 4}))) == (std::vector<long>({-76,\
    \ -21, 0, 4, 23, 6, 6})));\n}\n"
  stdout: ''
  stderr: "tmpyb2vb0xr: /tmp/tmpyb2vb0xr.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 11, -1, -11, -12}))) == (std::vector<long>({-1, -11, 1, -12, 11}))' failed.\n"
  exit_code: -6
  status: Exception
