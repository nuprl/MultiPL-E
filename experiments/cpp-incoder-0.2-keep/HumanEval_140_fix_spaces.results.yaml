name: HumanEval_140_fix_spaces
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5i4qq53f: /tmp/tmp5i4qq53f.cpp:22: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjt7buixb.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpjt7buixb.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjt7buixb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpjt7buix"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    for (size_t i\
    \ = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            count++;\n\
    \            if (count == 2) {\n                s[prev++] = ' ';\n           \
    \     s[next++] = ' ';\n                count = 0;\n            } else {\n   \
    \             s[prev++] = s[i];\n            }\n        } else {\n           \
    \ s[next++] = s[i];\n            count = 0;\n        }\n    }\n    s[next] = '\\\
    0';\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvhauw_b6.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpvhauw_b6.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvhauw_b6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6kemy93n.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp6kemy93n.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6kemy93n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp6kemy93"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    for(size_t i = 0; i < result.size(); i++) {\n        if(result[i] == ' ')\
    \ {\n            result.erase(i, 1);\n            result.insert(i, '_');\n   \
    \     }\n    }\n    for(size_t i = 0; i < result.size(); i++) {\n        if(result[i]\
    \ == ' ' && result[i+1] == ' ') {\n            result.erase(i, 1);\n         \
    \   result.insert(i, '-');\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdusinqw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpfdusinqw.cpp:15:33: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(size_t&, char)\u2019\n   15 |       \
    \      result.insert(i, '_');\n      |                                 ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfdusinqw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp0wt4qvbm: /tmp/tmp0wt4qvbm.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmphhl0xr8n: /tmp/tmphhl0xr8n.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp8u4jepea: /tmp/tmp8u4jepea.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpu0xd8uzk: /tmp/tmpu0xd8uzk.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpo1qi3xop: /tmp/tmpo1qi3xop.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    if (s.size() > 2 && s.substr(0, 2) == ' ') {\n        s.replace(s.begin(),\
    \ s.begin() + 2, std::string(\"_\"));\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb3esuhqz.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpb3esuhqz.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb3esuhqz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev] = '_';\n                s[next]\
    \ = '-';\n                prev = next + 1;\n                count = 0;\n     \
    \       }\n        } else {\n            count = 0;\n        }\n        next++;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp33i6svkq.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp33i6svkq.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp33i6svkq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpysaw72j2: /tmp/tmpysaw72j2.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            count++;\n\
    \            if (count == 2) {\n                s[prev++] = ' ';\n           \
    \     count = 0;\n            } else {\n                s[prev++] = s[i];\n  \
    \          }\n        } else {\n            count = 0;\n            s[prev++]\
    \ = s[i];\n        }\n    }\n    s[prev] = '\\0';\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaglti8nu.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpaglti8nu.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaglti8nu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpj__x4psk: /tmp/tmpj__x4psk.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpee8vyogs.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpee8vyogs.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpee8vyogs.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpee8vyogs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpee8vyogs.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    size_t\
    \ pos = 0;\n    size_t prev = 0, next = 0, count = 0;\n    while (pos < s.size())\
    \ {\n        next = s.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        size_t len = next - pos;\n\
    \        if (len > 2) {\n            while (pos < s.size() && s.at(pos) == ' ')\
    \ {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) != ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) == ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) != ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) == '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) != ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) == ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) != ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) == '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) != ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) == ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) != ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) == '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) != ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) == ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) != ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) == '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) != ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) == ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) != ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) == '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) != ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) == ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) != ' ') {\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrqo2_8k.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpqrqo2_8k.cpp:92:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   92 | int main() {\n      |            ^\n/tmp/tmpqrqo2_8k.cpp:99:1:\
    \ error: expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpqrqo2_8k.cpp:20:22:\
    \ note: to match this \u2018{\u2019\n   20 |         if (len > 2) {\n      | \
    \                     ^\n/tmp/tmpqrqo2_8k.cpp:99:1: error: expected \u2018}\u2019\
    \ at end of input\n   99 | }\n      | ^\n/tmp/tmpqrqo2_8k.cpp:14:28: note: to\
    \ match this \u2018{\u2019\n   14 |     while (pos < s.size()) {\n      |    \
    \                        ^\n/tmp/tmpqrqo2_8k.cpp:99:1: error: expected \u2018\
    }\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmpqrqo2_8k.cpp:10:42: note:\
    \ to match this \u2018{\u2019\n   10 | std::string fix_spaces(std::string text)\
    \ {\n      |                                          ^\n/tmp/tmpqrqo2_8k.cpp:99:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   99 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpthh9iziz: /tmp/tmpthh9iziz.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpag0gh1y8: /tmp/tmpag0gh1y8.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpawgdqc0q: /tmp/tmpawgdqc0q.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp9am09tlw: /tmp/tmp9am09tlw.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpk6no8j40: /tmp/tmpk6no8j40.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp2j7g2ll8: /tmp/tmp2j7g2ll8.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    while((pos = result.find_first_not_of(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n        pos += 1;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5cbjvdnl: /tmp/tmp5cbjvdnl.cpp:28: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    s.replace(s.begin(), s.end(), ' ');\n    s.replace(s.begin(),\
    \ s.end(), '-');\n    s.replace(s.begin(), s.end(), '-');\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppbr3skhw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmppbr3skhw.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppbr3skhw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpm64w4w_o: /tmp/tmpm64w4w_o.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwmgj5763: /tmp/tmpwmgj5763.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2 && res[0] == res[1] && res[1] == res[2] && res[2] == res[3]) {\n       \
    \ std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpu3fy3r4k: /tmp/tmpu3fy3r4k.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    size_t\
    \ pos = 0;\n    while(pos < s.size()) {\n        size_t next_space = s.find_first_of('\
    \ ', pos);\n        if(next_space != std::string::npos) {\n            s.erase(pos,\
    \ next_space - pos);\n            pos = next_space;\n        } else {\n      \
    \      pos = s.size();\n        }\n    }\n    size_t prev_space = s.find_first_not_of('\
    \ ', pos);\n    if(prev_space != std::string::npos) {\n        s.erase(prev_space,\
    \ s.size() - prev_space);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpl2auk471: /tmp/tmpl2auk471.cpp:31: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpdler4lig: /tmp/tmpdler4lig.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpba9k7nnb: /tmp/tmpba9k7nnb.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpjlvhnklu: /tmp/tmpjlvhnklu.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev++] = s[next];\n                s[next]\
    \ = '-';\n                count = 0;\n            } else {\n                s[next]\
    \ = '_';\n            }\n        } else {\n            count = 0;\n        }\n\
    \        ++next;\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprchsdzxk.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmprchsdzxk.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprchsdzxk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.find_first_not_of('\
    \ ') != std::string::npos) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp4m5g88s0: /tmp/tmp4m5g88s0.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n            s[i] = '_';\n\
    \        }\n        if(s.substr(i, 2) == \" \") {\n            s[i] = '_';\n \
    \           s[i + 1] = '-';\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpn15bdyuv: /tmp/tmpn15bdyuv.cpp:28: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpriodt46e: /tmp/tmpriodt46e.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz400w92h.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpz400w92h.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpz400w92h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpz400w92"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpqusd4_kw: /tmp/tmpqusd4_kw.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    int i = 0;\n    while (i < s.size() && s[i] != ' ') {\n\
    \        i++;\n    }\n    if (i != s.size()) {\n        s.replace(i, s.size(),\
    \ '_');\n    }\n    while (i < s.size() && s[i] != ' ') {\n        i++;\n    }\n\
    \    if (i != s.size()) {\n        s.replace(i, s.size(), '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw37sfmyd.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpw37sfmyd.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw37sfmyd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev] = '_';\n                s[next]\
    \ = '-';\n                prev = next;\n                next = prev + 1;\n   \
    \             count = 0;\n            }\n        } else {\n            count =\
    \ 0;\n        }\n        next++;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpinflu8o2.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpinflu8o2.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpinflu8o2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpalh4d1nx: /tmp/tmpalh4d1nx.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n  \
    \      if(s[i] == ' ' && i+1 < n && s[i+1] == ' ') {\n            s[i] = '_';\n\
    \            s[i+1] = '-';\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzl5hmahx.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpzl5hmahx.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzl5hmahx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpikesw12l: /tmp/tmpikesw12l.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fyi55a1.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp0fyi55a1.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0fyi55a1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp0fyi55a"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5e0s77rd: /tmp/tmp5e0s77rd.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        s.replace(s.size() - 1, s.size() - 2, \"\");\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpizrkoue0: /tmp/tmpizrkoue0.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmphqrjcub2: /tmp/tmphqrjcub2.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (size_t i = 0; i < out.size(); i++) {\n        if (out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n        if (out[i] == ' ' && out[i - 1]\
    \ == ' ') {\n            out[i] = '_';\n        }\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgaquk2zn: /tmp/tmpgaquk2zn.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8m60t1ve.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmp8m60t1ve.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmp8m60t1ve.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8m60t1ve.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8m60t1ve.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n    }\n    size_t prev = 0, next = 0, count = 0;\n    while(next\
    \ < s.length()) {\n        if(s[next] == ' ') {\n            count++;\n      \
    \      while(s[next] == ' ') {\n                next++;\n            }\n     \
    \       if(count > 2) {\n                s[prev] = '-';\n            }\n     \
    \       prev = next;\n            next = prev + 1;\n            count = 0;\n \
    \       } else {\n            count = 1;\n            next = prev + 1;\n     \
    \   }\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n        if(s[i+1] == ' ' && s[i+2] == ' ') {\n            s[i]\
    \ = '-';\n            s[i+1] = '-';\n            s[i+2] = '-';\n        }\n  \
    \  }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpjwocx_5o: /tmp/tmpjwocx_5o.cpp:28: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n   \
    \         out.insert(i, '_');\n            i += 2;\n        }\n    }\n    while(out.size()\
    \ > 2 && out[0] == ' ' && out[out.size() - 1] == ' ') {\n        out[0] = out[out.size()\
    \ - 2] = '-';\n        out.erase(out.size() - 1);\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfickuf90.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpfickuf90.cpp:14:30: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(size_t&, char)\u2019\n   14 |       \
    \      out.insert(i, '_');\n      |                              ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfickuf90.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ifcgmhd.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp4ifcgmhd.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4ifcgmhd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp4ifcgmh"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2 && res[0] == ' ' && res[res.size() - 1] == ' ') {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpfidfr25z: /tmp/tmpfidfr25z.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        if (s[pos] == ' ') {\n            s[prev++] = s[pos];\n            s[pos]\
    \ = '_';\n            prev = pos;\n            ++pos;\n        } else {\n    \
    \        ++pos;\n        }\n    }\n    s[prev] = '\\0';\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp564q0at_.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp564q0at_.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp564q0at_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp4den9441: /tmp/tmp4den9441.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev] = s[next];\n                s[next]\
    \ = '_';\n                prev = next;\n                count = 0;\n         \
    \   } else if (count == 1) {\n                s[prev] = s[next];\n           \
    \     s[next] = '-';\n                prev = next;\n                count = 0;\n\
    \            }\n        } else {\n            count = 1;\n            prev = next;\n\
    \        }\n        next++;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmr9x9ysb.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpmr9x9ysb.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmr9x9ysb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpp0cxfqw_: /tmp/tmpp0cxfqw_.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphq6_4ut_.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmphq6_4ut_.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmphq6_4ut_.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphq6_4ut_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphq6_4ut_.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph7164550.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmph7164550.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmph7164550.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmph716455"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res.insert(pos, \"_\");\n        pos += 1;\n    }\n    if (res.size()\
    \ > 2 && res[res.size() - 1] == ' ' && res[res.size() - 2] == ' ') {\n       \
    \ res.erase(res.size() - 2);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpfyin4h6v: /tmp/tmpfyin4h6v.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgga6fmd3: /tmp/tmpgga6fmd3.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_of(' ', prev);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        s.replace(pos, 1, std::string(\"\
    -\"));\n        prev = pos + 1;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxr25nckt.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpxr25nckt.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxr25nckt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp6mlh1zen: /tmp/tmp6mlh1zen.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpuhudkm32: /tmp/tmpuhudkm32.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while(next <\
    \ s.size()) {\n        if(s[next] == ' ') {\n            count++;\n          \
    \  if(count == 2) {\n                s[prev] = '_';\n                s[next] =\
    \ '-';\n                prev = next + 1;\n                count = 0;\n       \
    \     }\n        } else {\n            count = 0;\n        }\n        next++;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpthh0r51r.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpthh0r51r.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpthh0r51r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::size_t found = res.find_first_not_of(\" \");\n    while (found != std::string::npos)\
    \ {\n        res = res.substr(0, found) + std::to_string(std::distance(text.begin(),\
    \ found)) + res.substr(found + 1);\n        found = res.find_first_not_of(\" \"\
    , found + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6x6ycc9f.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp6x6ycc9f.cpp:14:86: error: no matching function for call to \u2018\
    distance(std::__cxx11::basic_string<char>::iterator, std::size_t&)\u2019\n   14\
    \ |         res = res.substr(0, found) + std::to_string(std::distance(text.begin(),\
    \ found)) + res.substr(found + 1);\n      |                                  \
    \                                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:66,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6x6ycc9f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator_base_funcs.h:138:5:\
    \ note: candidate: \u2018template<class _InputIterator> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator)\u2019\n  138 |     distance(_InputIterator\
    \ __first, _InputIterator __last)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator_base_funcs.h:138:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6x6ycc9f.cpp:14:86:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\u2019 and\
    \ \u2018long unsigned int\u2019)\n   14 |         res = res.substr(0, found) +\
    \ std::to_string(std::distance(text.begin(), found)) + res.substr(found + 1);\n\
    \      |                                          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpk3jydr4t: /tmp/tmpk3jydr4t.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp9abxn6fv: /tmp/tmp9abxn6fv.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdscp3znc.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpdscp3znc.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdscp3znc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpdscp3zn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpwxs6q7rj: /tmp/tmpwxs6q7rj.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp38p7sogd: /tmp/tmp38p7sogd.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzw4gec2.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpdzw4gec2.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdzw4gec2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpdzw4gec"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpl56njo0y: /tmp/tmpl56njo0y.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpbnoo5g6f: /tmp/tmpbnoo5g6f.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgur2oze7: /tmp/tmpgur2oze7.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp_tkoemrb: /tmp/tmp_tkoemrb.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp2fpzma_0: /tmp/tmp2fpzma_0.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp279tbg1_: /tmp/tmp279tbg1_.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    size_t\
    \ prev = 0, pos = 0;\n    while (pos < s.size()) {\n        pos = s.find_first_of(\"\
    \ \", prev);\n        if (pos == std::string::npos) {\n            pos = s.size();\n\
    \        }\n        size_t next = pos;\n        while (next < s.size() && s[next]\
    \ == ' ') {\n            next++;\n        }\n        s.erase(prev, next);\n  \
    \      prev = pos + 1;\n    }\n    while (s.size() > 1 && s[s.size() - 1] == '\
    \ ') {\n        s.erase(s.size() - 1);\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5vj5khet: /tmp/tmp5vj5khet.cpp:32: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpao8q5ay5.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpao8q5ay5.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpao8q5ay5.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpao8q5ay5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpao8q5ay5.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpg6j4wtay: /tmp/tmpg6j4wtay.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev] = s[next] = '_';\n            \
    \    prev++;\n                next++;\n                count = 0;\n          \
    \  }\n        } else {\n            count = 0;\n        }\n        next++;\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvjjioe4.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpmvjjioe4.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmvjjioe4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n   \
    \         if(i + 1 < out.size() && out[i + 1] == ' ') {\n                out[i]\
    \ = '_';\n                i++;\n            }\n        }\n    }\n    \n    size_t\
    \ count = 0;\n    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i]\
    \ == ' ') {\n            count++;\n        } else {\n            count = 0;\n\
    \        }\n        if(count == 2) {\n            out[i] = '_';\n        }\n \
    \   }\n    \n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpph91s3hp: /tmp/tmpph91s3hp.cpp:38: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp6amhqxdu: /tmp/tmp6amhqxdu.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    while((pos = result.find(\"  \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, std::string(\"-\"));\n        pos = result.find(\"\
    \  \", pos + 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp4sllh345: /tmp/tmp4sllh345.cpp:28: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpwey12biv: /tmp/tmpwey12biv.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n        if(s[i + 1] == ' ' && s[i + 2] == ' ') {\n        \
    \    s[i] = '-';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpxh6fmaj4: /tmp/tmpxh6fmaj4.cpp:26: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\" \"));\n        ++pos;\n   \
    \ }\n    if (result.length() > 2) {\n        pos = 0;\n        while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, std::string(\"\
    -\"));\n            ++pos;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpp1va5uxm: /tmp/tmpp1va5uxm.cpp:29: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp8c2oxrmg: /tmp/tmp8c2oxrmg.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpvbrifyj4: /tmp/tmpvbrifyj4.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp27_n_cfv: /tmp/tmp27_n_cfv.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpne7his83: /tmp/tmpne7his83.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp0i7ulnok: /tmp/tmp0i7ulnok.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmplq8fq3fy: /tmp/tmplq8fq3fy.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (size_t i = 0; i < out.size(); i++) {\n        if (out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n        if (out[i] == ' ' && out[i+1] ==\
    \ ' ') {\n            out[i] = '-';\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpitns1p82: /tmp/tmpitns1p82.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  size_t pos = 0;\n    while(pos < res.size()) {\n        if(res[pos] == ' ')\
    \ {\n            res[pos] = '_';\n            pos += 1;\n        }\n        else\
    \ if(res[pos] == ' ' && pos != 0) {\n            res[pos] = '-';\n           \
    \ pos += 1;\n        }\n        pos += 1;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpedrxfxc0: /tmp/tmpedrxfxc0.cpp:30: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n        if(s[i + 1] == ' ' && s[i + 2] == ' ') {\n        \
    \    s[i] = '-';\n            s[i + 1] = '-';\n            s[i + 2] = '-';\n \
    \       }\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp_bz7iwjs: /tmp/tmp_bz7iwjs.cpp:28: int main(): Assertion `candidate((\"\
    Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n       \
    \ pos = res.find(\" \", pos);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpo1pyb5gd: /tmp/tmpo1pyb5gd.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n        }\
    \ else {\n            if (count > 1) {\n                s.replace(prev, (next\
    \ - prev), std::string(\"_\") + std::to_string(count));\n                prev\
    \ = next + 1;\n                count = 0;\n            } else {\n            \
    \    prev = next + 1;\n                count = 0;\n            }\n        }\n\
    \        ++next;\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpugp1n4rq.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpugp1n4rq.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpugp1n4rq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxwaafbp6.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpxwaafbp6.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpxwaafbp6.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxwaafbp6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxwaafbp6.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpnyd_fezc: /tmp/tmpnyd_fezc.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    size_t\
    \ pos = 0;\n    while(pos < s.size()) {\n        if(s[pos] == ' ') {\n       \
    \     s[pos] = '_';\n            pos++;\n        }\n        else {\n         \
    \   pos++;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpawmmnmms: /tmp/tmpawmmnmms.cpp:29: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\" \"));\n        ++pos;\n   \
    \ }\n    while (pos < result.length() && result[pos] == ' ')\n        ++pos;\n\
    \    while (pos < result.length() && result[pos] == ' ')\n        result.replace(pos,\
    \ 1, std::string(\"-\"));\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkiviuu6v: /tmp/tmpkiviuu6v.cpp:26: int main(): Assertion `candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp64uimbhm: /tmp/tmp64uimbhm.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsznl86zv.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpsznl86zv.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpsznl86zv.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsznl86zv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpsznl86zv.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    if (s.size() > 2) {\n        s.replace(s.begin(), s.end(),\
    \ ' ');\n        s.replace(s.begin(), s.end(), '-');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjl5jixve.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpjl5jixve.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjl5jixve.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxedhhhsm: /tmp/tmpxedhhhsm.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp79jcyvub: /tmp/tmp79jcyvub.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp673yp2to: /tmp/tmp673yp2to.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe69xsfvj.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpe69xsfvj.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpe69xsfvj.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe69xsfvj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpe69xsfvj.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp4nu80xa7: /tmp/tmp4nu80xa7.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5e7hxou3.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp5e7hxou3.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5e7hxou3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp5e7hxou"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpqhb822be: /tmp/tmpqhb822be.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t pos = 0;\n    while (pos < s.size()) {\n        size_t\
    \ prev = pos;\n        pos = s.find_first_not_of(\" \", pos);\n        if (pos\
    \ != std::string::npos) {\n            s.erase(prev, pos + 1);\n        }\n  \
    \  }\n    while (pos < s.size()) {\n        size_t prev = pos;\n        pos =\
    \ s.find_first_of(\" \", pos);\n        if (pos != std::string::npos) {\n    \
    \        s.insert(prev, \"-\");\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo9tncjlg.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpo9tncjlg.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo9tncjlg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpb4d1t267: /tmp/tmpb4d1t267.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmplfzvt2qz: /tmp/tmplfzvt2qz.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpdw81dre1: /tmp/tmpdw81dre1.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n        if(s.substr(i, 2) == \" \") {\n            s[i] = '_';\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp_8ry9_6u: /tmp/tmp_8ry9_6u.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk1ye7xu9.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpk1ye7xu9.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk1ye7xu9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpk1ye7xu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if\
    \ (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n     \
    \   std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5_9eaqn7: /tmp/tmp5_9eaqn7.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi27ujv0s.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpi27ujv0s.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi27ujv0s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpi27ujv0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgq3fitc8: /tmp/tmpgq3fitc8.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf2z9ix0w.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpf2z9ix0w.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf2z9ix0w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpf2z9ix0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp3hjkxy72: /tmp/tmp3hjkxy72.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp3whs9s__: /tmp/tmp3whs9s__.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n            s[i] = '_';\n\
    \        }\n        if(s.substr(i, 2) == \" \") {\n            s[i] = '_';\n \
    \           s[i+1] = '-';\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"\
    Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp0c_8eu9c: /tmp/tmp0c_8eu9c.cpp:28: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkbmoxz8l: /tmp/tmpkbmoxz8l.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n       \
    \ pos = res.find(\" \", pos);\n    }\n    if (res.size() > 2 && res.substr(0,\
    \ 2) == \"_ \")\n        res = res.substr(2);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpmw06j04g: /tmp/tmpmw06j04g.cpp:26: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpvi278zor: /tmp/tmpvi278zor.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpaq_eljrl: /tmp/tmpaq_eljrl.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = pos +\
    \ 1;\n    }\n    if (result.length() > 2) {\n        size_t pos = 0;\n       \
    \ while ((pos = result.find(\" \", pos)) != std::string::npos) {\n           \
    \ result.replace(pos, 1, std::string(\"-\"));\n            pos = pos + 1;\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp3h1kmcuv: /tmp/tmp3h1kmcuv.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev++] = s[next];\n                s[next]\
    \ = '-';\n                count = 0;\n            } else {\n                s[next]\
    \ = '_';\n            }\n        } else {\n            count = 0;\n        }\n\
    \        next++;\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp456ensts.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp456ensts.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp456ensts.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2) {\n        std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpyv4eoyed: /tmp/tmpyv4eoyed.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpizyqigfy: /tmp/tmpizyqigfy.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpjyalllfh: /tmp/tmpjyalllfh.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2 && result[result.size() - 1] == ' ' && result[result.size()\
    \ - 2] == ' ') {\n        result.replace(result.size() - 1, 1, std::string(\"\
    -\"));\n    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmprk3eo2xt: /tmp/tmprk3eo2xt.cpp:27: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n   \
    \         out[i] = '_';\n        }\n    }\n    size_t prev = 0, next = 0;\n  \
    \  for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == '_') {\n   \
    \         if(prev == i) {\n                prev = i + 1;\n            }\n    \
    \        if(next == i) {\n                next = i + 1;\n            }\n     \
    \   }\n    }\n    if(prev != out.size()) {\n        for(size_t i = prev; i < out.size();\
    \ i++) {\n            out[i] = '_';\n        }\n    }\n    if(next != out.size())\
    \ {\n        for(size_t i = next; i < out.size(); i++) {\n            out[i] =\
    \ '_';\n        }\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmppd5el4oh: /tmp/tmppd5el4oh.cpp:42: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (size_t i = 0; i < out.size(); i++) {\n        if (out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n    }\n    if (out.size() > 2 && out.substr(0,\
    \ 2) == \" \") {\n        out = out.substr(1);\n    }\n    for (size_t i = 0;\
    \ i < out.size(); i++) {\n        if (out[i] == ' ') {\n            out[i] = '_';\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpfcmdukcn: /tmp/tmpfcmdukcn.cpp:32: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        s.replace(pos, 1, std::string(\"\
    \ \"));\n        prev = pos + 1;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz2pyfz_l.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpz2pyfz_l.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpz2pyfz_l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpdlk375r1: /tmp/tmpdlk375r1.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, len = s.size();\n    while (next\
    \ < len) {\n        if (s[next] == ' ') {\n            s[prev++] = s[next++];\n\
    \        } else if (s[next] == '\\t') {\n            s[prev++] = s[next++];\n\
    \            s[prev++] = s[next++];\n        } else {\n            s[prev++] =\
    \ s[next++];\n        }\n    }\n    s[prev] = '\\0';\n    return s;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbuq7l02s.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpbuq7l02s.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbuq7l02s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.find_first_not_of('\
    \ ') != std::string::npos) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp6tormruj: /tmp/tmp6tormruj.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        if (s[pos] == ' ') {\n            s[prev++] = s[pos];\n            s[pos]\
    \ = '_';\n            prev = pos;\n            ++pos;\n        }\n        else\
    \ {\n            ++pos;\n        }\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrqgatpv.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpcrqgatpv.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcrqgatpv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpudmhk511: /tmp/tmpudmhk511.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp5f0dnzv1: /tmp/tmp5f0dnzv1.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            count++;\n            if (count == 2)\
    \ {\n                s.replace(i, i + 1, \"-\");\n                i += 1;\n  \
    \              count = 0;\n            }\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpib8oma8q.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpib8oma8q.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpib8oma8q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpa0qw3xhr: /tmp/tmpa0qw3xhr.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpn44wajwk: /tmp/tmpn44wajwk.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpemnoomrx: /tmp/tmpemnoomrx.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        s.replace(pos, 1, std::string(\"-\"\
    ));\n        prev = pos + 1;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmporknamqs.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmporknamqs.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmporknamqs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n    }\n    size_t prev = 0, next = 0, count = 0;\n    while(next\
    \ < s.length()) {\n        if(s[next] == ' ') {\n            count++;\n      \
    \      while(s[next] == ' ' && next < s.length()) {\n                next++;\n\
    \            }\n            if(count > 2) {\n                s[prev] = '-';\n\
    \                prev = next;\n                count = 0;\n            }\n   \
    \     } else {\n            count = 0;\n        }\n        next++;\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp3bb_cs90: /tmp/tmp3bb_cs90.cpp:41: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmps4lxsh7j: /tmp/tmps4lxsh7j.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for (size_t i = 0; i < out.size(); i++) {\n        if (out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n    }\n    size_t prev = 0, next = 0, count\
    \ = 0;\n    for (size_t i = 0; i < out.size(); i++) {\n        if (out[i] == '\
    \ ') {\n            prev = i;\n            count = 1;\n        }\n        if (count\
    \ == 2) {\n            next = i;\n            out[prev] = out[next];\n       \
    \     count = 1;\n        }\n    }\n    return out;\n}\nint main() {\n    auto\
    \ candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"\
    ));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n  \
    \  assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpdrrses2q: /tmp/tmpdrrses2q.cpp:36: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmppcneusd6: /tmp/tmppcneusd6.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        if (s[pos] == ' ') {\n            s[prev++] = s[pos];\n            s[pos]\
    \ = '_';\n            prev = pos;\n            ++pos;\n        }\n        ++pos;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9d_81xm.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpv9d_81xm.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv9d_81xm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp3t3erqm4: /tmp/tmp3t3erqm4.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuh6w0csh.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpuh6w0csh.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpuh6w0csh.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuh6w0csh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpuh6w0csh.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;\n\
    }\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpi1w388gi: /tmp/tmpi1w388gi.cpp:24: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpf0gftq7g: /tmp/tmpf0gftq7g.cpp:22: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n        if(i > 0 && s[i-1] == ' ') {\n            s[i] = '_';\n\
    \        }\n    }\n    \n    size_t count = 0;\n    for(size_t i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == ' ') {\n            count++;\n        }\n    }\n\
    \    \n    if(count > 2) {\n        for(size_t i = 0; i < s.length(); i++) {\n\
    \            if(s[i] == ' ') {\n                s[i] = '-';\n            }\n \
    \       }\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpxhzlx4zh: /tmp/tmpxhzlx4zh.cpp:43: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xql34e4.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmp7xql34e4.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmp7xql34e4.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7xql34e4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7xql34e4.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpla6rsdif: /tmp/tmpla6rsdif.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp3wh91cf3: /tmp/tmp3wh91cf3.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string out = text;\n  \
    \  for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n   \
    \         out[i] = '_';\n        }\n    }\n    size_t count = 0;\n    for(size_t\
    \ i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            count++;\n\
    \            if(count == 2) {\n                out[i] = '_';\n            }\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmph8gk3rhs: /tmp/tmph8gk3rhs.cpp:33: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxzjj5928: /tmp/tmpxzjj5928.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpcgyvumdr: /tmp/tmpcgyvumdr.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpjgrhkw11: /tmp/tmpjgrhkw11.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpdc_b_c2i: /tmp/tmpdc_b_c2i.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev] = '_';\n                s[next]\
    \ = '-';\n                prev++;\n                next++;\n                count\
    \ = 0;\n            }\n        } else {\n            count = 0;\n        }\n \
    \       next++;\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr8f6t5lw.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpr8f6t5lw.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpr8f6t5lw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqfih7wzw.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpqfih7wzw.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpqfih7wzw.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqfih7wzw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqfih7wzw.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpr8wog006: /tmp/tmpr8wog006.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqozh9yco.cpp:13:38: warning: multi-character character constant\
    \ [-Wmultichar]\n   13 |     std::replace(s.begin(), s.end(), '  ', '-');\n  \
    \    |                                      ^~~~\n/tmp/tmpqozh9yco.cpp: In function\
    \ \u2018std::string fix_spaces(std::string)\u2019:\n/tmp/tmpqozh9yco.cpp:13:47:\
    \ error: no matching function for call to \u2018replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, int, char)\u2019\n   13 |     std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n      |                                              \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqozh9yco.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> void std::replace(_FIter,\
    \ _FIter, const _Tp&, const _Tp&)\u2019\n 4356 |     replace(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4356:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqozh9yco.cpp:13:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018char\u2019)\n   13 |     std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n      |                                               ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgilqjagr: /tmp/tmpgilqjagr.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpcrksis13: /tmp/tmpcrksis13.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxb5fwcdl: /tmp/tmpxb5fwcdl.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (std::adjacent_find(std::begin(res),\
    \ std::end(res)) != std::end(res)) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmphzrnq4_a: /tmp/tmphzrnq4_a.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpjowevcga: /tmp/tmpjowevcga.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgxipfsk7: /tmp/tmpgxipfsk7.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    size_t\
    \ prev = 0, pos = 0;\n    while (pos < s.size()) {\n        pos = s.find_first_not_of(\"\
    \ \", prev);\n        if (pos == std::string::npos) {\n            break;\n  \
    \      }\n        s.replace(pos, 1, std::string(\" \"));\n        prev = pos +\
    \ 1;\n    }\n    while (pos < s.size()) {\n        pos = s.find_first_of(\" \"\
    , prev);\n        if (pos == std::string::npos) {\n            break;\n      \
    \  }\n        s.replace(pos, 1, std::string(\"_\"));\n        prev = pos + 1;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n   \
    \ assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpc5kgt2yh: /tmp/tmpc5kgt2yh.cpp:33: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ pos = s.size();\n        s.replace(pos, 1, std::string(\"-\"));\n        prev\
    \ = pos + 1;\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6r5q3an7.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp6r5q3an7.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6r5q3an7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp073ova45: /tmp/tmp073ova45.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyeascnbu.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpyeascnbu.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyeascnbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpyeascnb"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpigfci70d: /tmp/tmpigfci70d.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n       \
    \ pos = res.find(\" \", pos);\n    }\n    if (res.size() > 2) {\n        while\
    \ ((pos = res.find(\" \", pos)) != std::string::npos) {\n            res = res.substr(0,\
    \ pos) + \"-\" + res.substr(pos + 1);\n            pos = res.find(\" \", pos);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpgs9pu6w1: /tmp/tmpgs9pu6w1.cpp:30: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2) {\n        pos = 0;\n        while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpzh2gxdus: /tmp/tmpzh2gxdus.cpp:31: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpkxeyxpds: /tmp/tmpkxeyxpds.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpb08952kt: /tmp/tmpb08952kt.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    while((pos = result.find_first_not_of(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n        pos += 1;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp44qccqf6: /tmp/tmp44qccqf6.cpp:28: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5lbbj5ur.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp5lbbj5ur.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5lbbj5ur.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp5lbbj5u"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp0kwtdaz9: /tmp/tmp0kwtdaz9.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string result = text;\n\
    \    size_t pos = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"_\"));\n        }\n        pos = result.find_first_of(\" \"\
    , pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) ==\
    \ (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpap2i5_7h: /tmp/tmpap2i5_7h.cpp:27: int main(): Assertion `candidate((\"\
    Example\")) == (\"Example\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpj40g7s5r: /tmp/tmpj40g7s5r.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp87fjsttl: /tmp/tmp87fjsttl.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp_v655_3l: /tmp/tmp_v655_3l.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string res = text;\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.find_first_of('\
    \ ') != std::string::npos) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;\n}\nint main() {\n    auto candidate = fix_spaces;\n\
    \    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"\
    Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow\
    \  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"\
    Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\"\
    )) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmpa6ze5yta: /tmp/tmpa6ze5yta.cpp:23: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            count++;\n        } else {\n        \
    \    count = 0;\n        }\n        if (count > 2) {\n            s.replace(i,\
    \ i + 1, \"-\");\n            i += 1;\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa4y_ljkl.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmpa4y_ljkl.cpp:12:38: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator, char)\u2019\n   12 |     s.replace(s.begin(),\
    \ s.end(), ' ');\n      |                                      ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpa4y_ljkl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:2045:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019 <near match>\n 2045 |       replace(__const_iterator __i1,\
    \ __const_iterat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
    Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) ==\
    \ (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\"\
    )) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\"\
    )) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
    ));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7c9acwv1.cpp: In function \u2018std::string fix_spaces(std::string)\u2019\
    :\n/tmp/tmp7c9acwv1.cpp:14:50: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(std::__cxx11::basic_string<char>::size_type,\
    \ std::__cxx11::basic_string<char>::size_type, char)\u2019\n   14 |         s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n      |                                          \
    \        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7c9acwv1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1961 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1961:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmp7c9acwv"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
    \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
    \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
    ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
    \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
    \nstd::string fix_spaces(std::string text) {\n    std::string s = text;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] =\
    \ '_';\n        }\n    }\n    size_t prev = 0, next = 0, count = 0;\n    while(next\
    \ < s.length()) {\n        if(s[next] == ' ') {\n            s[next] = '_';\n\
    \            count++;\n            prev = next;\n            next = next + 1;\n\
    \        } else {\n            if(count > 1) {\n                s[prev] = '-';\n\
    \                s[next] = '-';\n                prev = prev + 1;\n          \
    \      next = next + 1;\n            }\n            count = 0;\n            prev\
    \ = next;\n            next = next + 1;\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\"\
    )) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"\
    ));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"\
    ));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"\
    \   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n"
  stdout: ''
  stderr: "tmp06gvg4y9: /tmp/tmp06gvg4y9.cpp:43: int main(): Assertion `candidate((\"\
    Exa   mple\")) == (\"Exa-mple\")' failed.\n"
  exit_code: -6
  status: Exception
