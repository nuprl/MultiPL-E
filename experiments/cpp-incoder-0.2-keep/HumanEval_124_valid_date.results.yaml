name: HumanEval_124_valid_date
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your code here\n    \n  \
    \  // Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdn5gtvod: /tmp/tmpdn5gtvod.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 4 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 6 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 9 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 11 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpy6nmo0ok.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpy6nmo0ok.cpp:118:26: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  118 |     if (month == 7 && day\n      |        ~                 ^\n\
    \      |                          )\n  119 | }\n      | ~                    \
    \     \n/tmp/tmpy6nmo0ok.cpp:119:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  119 | }\n      | ^\n/tmp/tmpy6nmo0ok.cpp:119:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    if (date.empty()) {\n        valid = false;\n    } else {\n  \
    \      std::stringstream ss(date);\n        std::string month;\n        std::string\
    \ day;\n        std::string year;\n        int months;\n        int days;\n  \
    \      int years;\n        ss >> month >> day >> year;\n        months = stoi(month);\n\
    \        days = stoi(day);\n        years = stoi(year);\n        if (months <\
    \ 1 || months > 12) {\n            valid = false;\n        } else if (days < 1\
    \ || days > 31) {\n            valid = false;\n        } else if (years < 1 ||\
    \ years > 2020) {\n            valid = false;\n        } else {\n            valid\
    \ = true;\n        }\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 2000 || year > 2040) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnyigq6y7: /tmp/tmpnyigq6y7.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month;\n    ss >> day;\n    ss >> year;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 30) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 31) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 31) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 31) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zsopvhn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5zsopvhn.cpp:111:14: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  111 |     if (month\n      |        ~     ^\n      |              )\n\
    \  112 | }\n      | ~             \n/tmp/tmp5zsopvhn.cpp:112:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmp5zsopvhn.cpp:112:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  112 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp94i504lc: /tmp/tmp94i504lc.cpp:265: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\n        \"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    std::string days[31] =\
    \ {\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"\
    , \"Friday\", \"Saturday\"\n    };\n    std::string years[12] = {\n        \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"\
    11\", \"12\",\n        \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"\n    };\n    int day;\n    int month;\n    int year;\n    std::string::size_type\
    \ pos;\n    pos = date.find('-');\n    month = stoi(date.substr(0, pos));\n  \
    \  day = stoi(date.substr(pos + 1, 2));\n    pos = date.find('-');\n    year =\
    \ stoi(date.substr(pos + 1, 2));\n    if (month < 1 || month > 12) {\n       \
    \ valid = false;\n    }\n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    if (year < 1 || year > 12) {\n        valid = false;\n    }\n    if\
    \ (month == 2) {\n        if (day > 29) {\n            valid = false;\n      \
    \  }\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp68jfjoan.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp68jfjoan.cpp:29:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   29 |\
    \     };\n      |     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1 || year > 9999) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (day > 29) {\n            return false;\n        }\n   \
    \ }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \  if (day > 30) {\n            return false;\n        }\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi7llayhg: /tmp/tmpi7llayhg.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp85cgfek7: /tmp/tmp85cgfek7.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string date_s[] = {\"01\",\"03\",\"\
    05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\"\
    ,\"09\",\"11\",\"02\"};\n    std::string date_s_s_s[] = {\"01\",\"03\",\"05\"\
    ,\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"\
    06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s[] = {\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n   \
    \ std::string date_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\"\
    ,\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\"\
    ,\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"\
    ,\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"\
    05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"\
    12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vgamx20.cpp:30:58: warning: missing terminating \" character\n\
    \   30 |     std::string date_s_s_s_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\n   \
    \   |                                                          ^\n/tmp/tmp7vgamx20.cpp:30:58:\
    \ error: missing terminating \" character\n   30 |     std::string date_s_s_s_s_s_s_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\n      |                                                    \
    \      ^~~\n/tmp/tmp7vgamx20.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7vgamx20.cpp:27:17: error: redeclaration of \u2018std::string date_s_s_s_s_s_s_s_s_s_s\
    \ []\u2019\n   27 |     std::string date_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n   \
    \   |                 ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7vgamx20.cpp:26:17: note:\
    \ \u2018std::string date_s_s_s_s_s_s_s_s_s_s [12]\u2019 previously declared here\n\
    \   26 |     std::string date_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"\
    07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n      |      \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7vgamx20.cpp:32:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   32 | int main() {\n\
    \      | ^~~\n/tmp/tmp7vgamx20.cpp:50:1: error: expected \u2018}\u2019 at end\
    \ of input\n   50 | }\n      | ^\n/tmp/tmp7vgamx20.cpp:16:35: note: to match this\
    \ \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |        \
    \                           ^\n/tmp/tmp7vgamx20.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   50 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    bool flag = false;\n    \n    std::stringstream\
    \ ss(date);\n    \n    ss >> month >> day >> year;\n    \n    if(month < 1 ||\
    \ month > 12){\n        flag = false;\n    }\n    else if(day < 1 || day > 31){\n\
    \        flag = false;\n    }\n    else if(month == 2 && day > 29){\n        flag\
    \ = false;\n    }\n    else if(month == 4 && day > 30){\n        flag = false;\n\
    \    }\n    else if(month == 6 && day > 30){\n        flag = false;\n    }\n \
    \   else if(month == 9 && day > 30){\n        flag = false;\n    }\n    else if(month\
    \ == 11 && day > 30){\n        flag = false;\n    }\n    else if(month == 1 &&\
    \ day > 29){\n        flag = false;\n    }\n    else if(month == 3 && day > 31){\n\
    \        flag = false;\n    }\n    else if(month == 5 && day > 31){\n        flag\
    \ = false;\n    }\n    else if(month == 7 && day > 31){\n        flag = false;\n\
    \    }\n    else if(month == 8 && day > 31){\n        flag = false;\n    }\n \
    \   else if(month == 10 && day > 31){\n        flag = false;\n    }\n    else\
    \ if(month == 12 && day > 31){\n        flag = false;\n    }\n    else if(month\
    \ == 1 && day > 30){\n        flag = false;\n    }\n    else if(month == 3 &&\
    \ day > 30){\n        flag = false;\n    }\n    else if(month == 5 && day > 30){\n\
    \        flag = false;\n    }\n    else if(month == 7 && day > 30){\n        flag\
    \ = false;\n    }\n    else if(month == 8 && day > 30){\n        flag = false;\n\
    \    }\n    else if(month == 10 && day > 30){\n        flag = false;\n    }\n\
    \    else if(month == 12 && day > 30){\n        flag = false;\n    }\n    else\
    \ if(month == 1 && day > 29){\n        flag = false;\n    }\n    else if(month\
    \ == 3 && day > 31){\n        flag = false;\n    }\n    else if(month == 5 &&\
    \ day > 31){\n        flag = false;\n    }\n    else if(month == 7 && day > 31){\n\
    \        flag = false;\n    }\n    else if(month == 8 && day > 31){\n        flag\
    \ = false;\n    }\n    else if(month == 10 && day > 31){\n        flag = false;\n\
    \    }\n    else if(month == 12 && day > 31){\n        flag = false;\n    }\n\
    \    else if(month\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp93vl3wtb.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp93vl3wtb.cpp:113:18: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  113 |     else if(month\n      |            ~     ^\n      |      \
    \            )\n  114 | }\n      | ~                 \n/tmp/tmp93vl3wtb.cpp:114:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  114 | }\n \
    \     | ^\n/tmp/tmp93vl3wtb.cpp:114:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\", \"28\", \"27\", \"26\", \"25\", \"24\", \"23\", \"22\", \"21\", \"20\",\
    \ \"19\", \"18\", \"17\", \"16\", \"15\", \"14\", \"13\", \"12\", \"11\", \"10\"\
    , \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"};\n    std::string\
    \ years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\
    \ \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\"};\n    std::string dates[4] = {\"03-11-2000\",\
    \ \"15-01-2012\", \"04-0-2040\", \"06-04-2020\", \"06/04/2020\"};\n    std::string\
    \ date_str = date;\n    int day;\n    int month;\n    int year;\n    std::string::size_type\
    \ pos;\n    std::string::size_type pos2;\n    std::string::size_type pos3;\n \
    \   std::string::size_type pos4;\n    std::string::size_type pos5;\n    std::string::size_type\
    \ pos6;\n    std::string::size_type pos7;\n    std::string::size_type pos8;\n\
    \    std::string::size_type pos9;\n    std::string::size_type pos10;\n    std::string::size_type\
    \ pos11;\n    std::string::size_type pos12;\n    std::string::size_type pos13;\n\
    \    std::string::size_type pos14;\n    std::string::size_type pos15;\n    std::string::size_type\
    \ pos16;\n    std::string::size_type pos17;\n    std::string::size_type pos18;\n\
    \    std::string::size_type pos19;\n    std::string::size_type pos20;\n    std::string::size_type\
    \ pos21;\n    std::string::size_type pos22;\n    std::string::size_type pos23;\n\
    \    std::string::size_type pos24;\n    std::string::size_type pos25;\n    std::string::size_type\
    \ pos26;\n    std::string::size_type pos27;\n    std::string::size_type pos28;\n\
    \    std::string::size_type \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpr9vqr2tp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpr9vqr2tp.cpp:21:356: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   21 |\
    \     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\"\
    , \"2037\", \"2038\", \"2039\", \"2040\"};\n      |                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          ^\n/tmp/tmpr9vqr2tp.cpp:22:96: error: too many initializers\
    \ for \u2018std::string [4]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [4]\u2019}\n   22 |     std::string dates[4] = {\"03-11-2000\", \"15-01-2012\"\
    , \"04-0-2040\", \"06-04-2020\", \"06/04/2020\"};\n      |                   \
    \                                                                            \
    \ ^\n/tmp/tmpr9vqr2tp.cpp:56:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmpr9vqr2tp.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 3000) {\n        return false;\n    }\n \
    \   if (month == 2) {\n        if (day > 29) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcle38rcu: /tmp/tmpcle38rcu.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = true;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1900 || year > 2099) {\n        valid = false;\n\
    \    }\n    if (month == 2 && day > 29) {\n        valid = false;\n    }\n   \
    \ if (month == 4 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 6 && day > 31) {\n        valid = false;\n    }\n    if (month == 9 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 11 && day > 30) {\n\
    \        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1y_l5y2l: /tmp/tmp1y_l5y2l.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcckzrbd0: /tmp/tmpcckzrbd0.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq8v0_56f: /tmp/tmpq8v0_56f.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 3000) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw5iy4cyj: /tmp/tmpw5iy4cyj.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmd7of429: /tmp/tmpmd7of429.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphu10op43: /tmp/tmphu10op43.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptfm4pqkp: /tmp/tmptfm4pqkp.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvcdcw2hc: /tmp/tmpvcdcw2hc.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    bool valid = true;\n    \n    if (day\
    \ < 1 || day > 31) {\n        valid = false;\n    }\n    \n    if (month < 1 ||\
    \ month > 12) {\n        valid = false;\n    }\n    \n    if (year < 1 || year\
    \ > 9999) {\n        valid = false;\n    }\n    \n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwh1q50kv: /tmp/tmpwh1q50kv.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string months[12] = {\n        \"January\", \"\
    March\", \"May\", \"July\", \"August\", \"October\", \"December\"\n    };\n  \
    \  \n    std::string days[31] = {\n        \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\",\
    \ \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n    };\n    \n    std::string\
    \ years[12] = {\n        \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"\
    2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\",\
    \ \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\"\n    };\n    \n    int days_month[12] = {\n   \
    \     0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    \n    int\
    \ days_year[12] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n\
    \    };\n    \n    int month_index = 0;\n    int year_index = 0;\n    \n    int\
    \ days_month_index = 0;\n    int days_year_index = 0;\n    \n    int month = 0;\n\
    \    int year = 0;\n    \n    int day = 0;\n    \n    std::string date_str = date;\n\
    \    \n    date_str = date_str.substr(0, 2);\n    \n    month = stoi(date_str);\n\
    \    \n    date_str = date_str.substr(2, 2);\n    \n    year = stoi(date_str);\n\
    \    \n    date_str = date_str.substr(4, 2);\n    \n    day = stoi(date_str);\n\
    \    \n    days_month_index = month_index;\n    days_year_index = year_index;\n\
    \    \n    days_month_index += month;\n    \n    days_year_index += year;\n  \
    \  \n    days_month_index += day;\n    \n    valid = (days_month_index <= days_month[month_index]\
    \ && days_year_index <= days_year[year_index]);\n    \n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgpof_sk3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgpof_sk3.cpp:31:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   31 |\
    \     };\n      |     ^\n/tmp/tmpgpof_sk3.cpp:35:5: error: too many initializers\
    \ for \u2018int [12]\u2019\n   35 |     };\n      |     ^\n/tmp/tmpgpof_sk3.cpp:39:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   39 |     };\n    \
    \  |     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqd89cre_: /tmp/tmpqd89cre_.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 2 && day < 1) {\n        valid = false;\n\
    \    }\n    if (month == 4 && day > 30) {\n        valid = false;\n    }\n   \
    \ if (month == 4 && day < 1) {\n        valid = false;\n    }\n    if (month ==\
    \ 6 && day > 31) {\n        valid = false;\n    }\n    if (month == 6 && day <\
    \ 1) {\n        valid = false;\n    }\n    if (month == 9 && day > 30) {\n   \
    \     valid = false;\n    }\n    if (month == 9 && day < 1) {\n        valid =\
    \ false;\n    }\n    if (month == 11 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 11 && day < 1) {\n        valid = false;\n    }\n   \
    \ if (month == 12 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day < 1) {\n        valid = false;\n    }\n    if (day > 31) {\n  \
    \      valid = false;\n    }\n    if (day < 1) {\n        valid = false;\n   \
    \ }\n    if (year < 1000 || year > 3000) {\n        valid = false;\n    }\n  \
    \  return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxyartk4s: /tmp/tmpxyartk4s.cpp:80: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(date.empty()){\n        valid = false;\n    }\n\
    \    \n    int day;\n    int month;\n    int year;\n    \n    std::stringstream\
    \ ss(date);\n    \n    ss >> month >> day >> year;\n    \n    if(month < 1 ||\
    \ month > 12){\n        valid = false;\n    }\n    \n    if(day < 1 || day > 31){\n\
    \        valid = false;\n    }\n    \n    if(month == 2 && day > 29){\n      \
    \  valid = false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9\
    \ || month == 11 && day > 30){\n        valid = false;\n    }\n    \n    if(month\
    \ == 1 && day > 31){\n        valid = false;\n    }\n    \n    if(month == 1 &&\
    \ day > 29){\n        valid = false;\n    }\n    \n    if(month == 1 && day >\
    \ 28){\n        valid = false;\n    }\n    \n    if(month == 1 && day > 27){\n\
    \        valid = false;\n    }\n    \n    if(month == 1 && day > 26){\n      \
    \  valid = false;\n    }\n    \n    if(month == 1 && day > 25){\n        valid\
    \ = false;\n    }\n    \n    if(month == 1 && day > 24){\n        valid = false;\n\
    \    }\n    \n    if(month == 1 && day > 23){\n        valid = false;\n    }\n\
    \    \n    if(month == 1 && day > 22){\n        valid = false;\n    }\n    \n\
    \    if(month == 1 && day > 21){\n        valid = false;\n    }\n    \n    if(month\
    \ == 1 && day > 20){\n        valid = false;\n    }\n    \n    if(month == 1 &&\
    \ day > 19){\n        valid = false;\n    }\n    \n    if(month == 1 && day >\
    \ 18){\n        valid = false;\n    }\n    \n    if(month == 1 && day > 17){\n\
    \        valid = false;\n    }\n    \n    if(month == 1 && day > 16){\n      \
    \  valid = false;\n    }\n    \n    if(month == 1 && day > 15){\n        valid\
    \ = false;\n    }\n    \n    if(month == 1 && day > 14){\n        valid = false;\n\
    \    }\n    \n    if(month == 1 && day > 13){\n        valid = false;\n    }\n\
    \    \n    if(month == 1 && day > 12){\n        valid = false;\n    }\n    \n\
    \    if(month == 1 && day > 11){\n        valid = false;\n    }\n    \n    if(month\
    \ == 1 && day > 10){\n        valid = false;\n    }\n    \n    if(month == 1 &&\
    \ day > 9){\n        valid = false;\n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx8tgyytf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpx8tgyytf.cpp:137:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  137 | int main() {\n      |            ^\n/tmp/tmpx8tgyytf.cpp:155:1:\
    \ error: expected \u2018}\u2019 at end of input\n  155 | }\n      | ^\n/tmp/tmpx8tgyytf.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpx8tgyytf.cpp:155:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  155 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbqywsi59: /tmp/tmpbqywsi59.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm5io7v13: /tmp/tmpm5io7v13.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp75s1hpcm: /tmp/tmp75s1hpcm.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >>\
    \ day >> month >> year;\n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n  \
    \  if (year < 1900 || year > 2099) {\n        valid = false;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj2hrobvl: /tmp/tmpj2hrobvl.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpggrh20nm: /tmp/tmpggrh20nm.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsvfydjh5: /tmp/tmpsvfydjh5.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    if(day < 1 || day > 31) {\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(year < 1 || year > 9999) {\n        return false;\n    }\n    \n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpokm3vti9: /tmp/tmpokm3vti9.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6m0xxc92: /tmp/tmp6m0xxc92.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpekvkgfj7: /tmp/tmpekvkgfj7.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqkv4zmhy: /tmp/tmpqkv4zmhy.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || (month == 2 && day > 29)) {\n        valid = false;\n\
    \    } else {\n        valid = true;\n    }\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf7fm0uw9: /tmp/tmpf7fm0uw9.cpp:33: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    std::string months[12] = {\n        \"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"\n    };\n    \n    std::string\
    \ days[31] = {\n        \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\
    , \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\",\n        \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\",\
    \ \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n        \"01\", \"\
    02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\",\
    \ \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    \n    };\n    \n    std::string years[12] = {\n        \"2000\", \"2001\", \"\
    2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",\
    \ \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\",\n        \"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\",\n    \
    \    \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\"\n    };\n    \n    std::string date_str = date;\n    \n    int days_str\
    \ = date_str.substr(6, 2);\n    int months_str = date_str.\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoe8i46lo.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpoe8i46lo.cpp:30:5: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   30 |\
    \     };\n      |     ^\n/tmp/tmpoe8i46lo.cpp:36:5: error: too many initializers\
    \ for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   36 |     };\n      |     ^\n/tmp/tmpoe8i46lo.cpp:40:35: error:\
    \ cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\
    \ in initialization\n   40 |     int days_str = date_str.substr(6, 2);\n     \
    \ |                    ~~~~~~~~~~~~~~~^~~~~~\n      |                        \
    \           |\n      |                                   std::__cxx11::basic_string<char>\n\
    /tmp/tmpoe8i46lo.cpp:42:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   42 | }\n      | ^\n/tmp/tmpoe8i46lo.cpp:42:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7qpb2jp: /tmp/tmpb7qpb2jp.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    \n\
    \    ss >> month >> day >> year;\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_vgqr_50: /tmp/tmp_vgqr_50.cpp:266: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpax2h6kys: /tmp/tmpax2h6kys.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpd2bo3wzy: /tmp/tmpd2bo3wzy.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi9ldcv54: /tmp/tmpi9ldcv54.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31){\n        return false;\n \
    \   }\n    \n    if(year < 2000 || year > 2040) {\n        return false;\n   \
    \ }\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwvbt515v: /tmp/tmpwvbt515v.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1w81edao: /tmp/tmp1w81edao.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(date.empty()){\n        valid = false;\n    }\n\
    \    \n    if(date.size() < 3 || date.size() > 10){\n        valid = false;\n\
    \    }\n    \n    for(int i = 0; i < date.size(); i++){\n        if(date[i] <\
    \ '0' || date[i] > '9'){\n            valid = false;\n        }\n    }\n    \n\
    \    for(int i = 0; i < date.size(); i++){\n        if(date[i] < '0' || date[i]\
    \ > '9'){\n            valid = false;\n        }\n    }\n    \n    for(int i =\
    \ 0; i < date.size(); i++){\n        if(date[i] < '0' || date[i] > '9'){\n   \
    \         valid = false;\n        }\n    }\n    \n    if(date[1] < '0' || date[1]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[2] < '0' || date[2]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[3] < '0' || date[3]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[4] < '0' || date[4]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[5] < '0' || date[5]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[6] < '0' || date[6]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[7] < '0' || date[7]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[8] < '0' || date[8]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[9] < '0' || date[9]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[10] < '0' || date[10]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[11] < '0' || date[11]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[12] < '0' || date[12]\
    \ > '9'){\n        valid = false;\n    }\n    \n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmps3lh0t22: /tmp/tmps3lh0t22.cpp:99: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmbdn_4ch: /tmp/tmpmbdn_4ch.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmph17f2o8f: /tmp/tmph17f2o8f.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\"\
    , \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\"\
    , \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\"\
    , \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\"\
    , \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\"\
    , \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\"\
    , \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\
    , \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\"\
    , \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\"\
    , \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\"\
    , \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\"\
    , \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\"\
    , \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\"\
    , \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\"\
    , \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\"\
    , \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\"\
    , \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\"\
    , \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\"\
    , \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\"\
    , \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\"\
    , \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\"\
    , \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\"\
    , \"235\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpupnhmuuc.cpp:19:1566: warning: missing terminating \" character\n\
    \   19 |     std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\"\
    , \"232\", \"233\", \"234\", \"235\", \"\n      |                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month;\n \
    \   ss >> day;\n    ss >> year;\n    if (month < 1 || month > 12) {\n        valid\
    \ = false;\n    }\n    if (day < 1 || day > 31) {\n        valid = false;\n  \
    \  }\n    if (month == 2) {\n        if (day > 29) {\n            valid = false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            valid = false;\n        }\n    }\n\
    \    if (month == 1) {\n        if (day > 31) {\n            valid = false;\n\
    \        }\n    }\n    if (valid) {\n        std::cout << \"Valid date\" << std::endl;\n\
    \    } else {\n        std::cout << \"Invalid date\" << std::endl;\n    }\n  \
    \  return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: "Invalid date\n"
  stderr: "tmpwlsceh35: /tmp/tmpwlsceh35.cpp:55: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"\
    September\", \"October\", \"November\", \"December\"};\n    std::string days[31]\
    \ = {\"31\", \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"\
    October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"\
    30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk4_7vrlg.cpp:41:72: warning: missing terminating \" character\n\
    \   41 |     std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n      |                                                         \
    \               ^\n/tmp/tmpk4_7vrlg.cpp:41:72: error: missing terminating \" character\n\
    /tmp/tmpk4_7vrlg.cpp: In function \u2018bool valid_date(std::string)\u2019:\n\
    /tmp/tmpk4_7vrlg.cpp:23:17: error: redeclaration of \u2018std::string months [12]\u2019\
    \n   23 |     std::string months[12] = {\"January\", \"February\", \"March\",\
    \ \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n      |                 ^~~~~~\n/tmp/tmpk4_7vrlg.cpp:21:17:\
    \ note: \u2018std::string months [12]\u2019 previously declared here\n   21 |\
    \     std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n      |                 ^~~~~~\n/tmp/tmpk4_7vrlg.cpp:24:17:\
    \ error: redeclaration of \u2018std::string days [31]\u2019\n   24 |     std::string\
    \ days[31] = {\"31\", \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpk4_7vrlg.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpk4_7vrlg.cpp:25:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   25 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpk4_7vrlg.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpk4_7vrlg.cpp:26:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   26 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmpk4_7vrlg.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::str"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 1 && day > 29){\n        return false;\n    }\n    if(month == 2 && day >\
    \ 28){\n        return false;\n    }\n    if(month == 4 && day > 30){\n      \
    \  return false;\n    }\n    if(month == 6 && day > 31){\n        return false;\n\
    \    }\n    if(month == 9 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 11 && day > 30){\n        return false;\n    }\n    if(month == 12 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 1 && day > 31){\n    \
    \    return false;\n    }\n    if(month == 3 && day > 30){\n        return false;\n\
    \    }\n    if(month == 5 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 7 && day > 31){\n        return false;\n    }\n    if(month == 8 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 10 && day > 31){\n     \
    \   return false;\n    }\n    if(month == 12 && day > 31){\n        return false;\n\
    \    }\n    if(month == 1 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 3 && day > 30){\n        return false;\n    }\n    if(month == 5 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 7 && day > 31){\n      \
    \  return false;\n    }\n    if(month == 8 && day > 31){\n        return false;\n\
    \    }\n    if(month == 10 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 12 && day > 31){\n        return false;\n    }\n    if(month == 1 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 3 && day > 30){\n    \
    \    return false;\n    }\n    if(month == 5 && day > 31){\n        return false;\n\
    \    }\n    if(month == 7 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 8 && day > 31){\n        return false;\n    }\n    if(month == 10 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 12 && day > 31){\n   \
    \     return false;\n    }\n    if(month == 1 && day > 31){\n        return false;\n\
    \    }\n    if(month == 3 && day > 30){\n        return false;\n    }\n    if(month\
    \ == 5 && day > 31){\n        return false;\n    }\n    if(month == 7 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 8 && day > 31){\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw5vntqpz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpw5vntqpz.cpp:128:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  128 | int main() {\n      |            ^\n/tmp/tmpw5vntqpz.cpp:146:1:\
    \ error: expected \u2018}\u2019 at end of input\n  146 | }\n      | ^\n/tmp/tmpw5vntqpz.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpw5vntqpz.cpp:146:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  146 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5u7bdc55: /tmp/tmp5u7bdc55.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2vfbsg3p: /tmp/tmp2vfbsg3p.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdinfofik: /tmp/tmpdinfofik.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if (month < 1 || month > 12) return false;\n    if\
    \ (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return\
    \ false;\n    if (month == 4 || month == 6 || month == 9 || month == 11 && day\
    \ > 30) return false;\n    if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 && day > 31) return false;\n    if (month\
    \ == 2) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp462h9z67: /tmp/tmp462h9z67.cpp:34: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 2000 || year > 2040) {\n      \
    \  valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvqaizg2l: /tmp/tmpvqaizg2l.cpp:38: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpowqq3vyg: /tmp/tmpowqq3vyg.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    if(day < 1 || day > 31) {\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(year < 1000 || year > 3000) {\n        return false;\n    }\n \
    \   \n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpo45nro7w: /tmp/tmpo45nro7w.cpp:40: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(!date.empty()){\n        valid = false;\n    }\n\
    \    \n    int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11};\n    \n    int days_month = date.size() - 4;\n\
    \    \n    int days_month_1 = days_month / 4;\n    int days_month_2 = days_month\
    \ / 2;\n    int days_month_3 = days_month / 3;\n    \n    int days_month_4 = days_month\
    \ / 4;\n    \n    int days_month_5 = days_month / 5;\n    \n    int days_month_6\
    \ = days_month / 6;\n    \n    int days_month_7 = days_month / 7;\n    \n    int\
    \ days_month_8 = days_month / 8;\n    \n    int days_month_9 = days_month / 9;\n\
    \    \n    int days_month_10 = days_month / 10;\n    \n    int days_month_11 =\
    \ days_month / 11;\n    \n    int days_month_12 = days_month / 12;\n    \n   \
    \ int days_month_13 = days_month / 13;\n    \n    int days_month_14 = days_month\
    \ / 14;\n    \n    int days_month_15 = days_month / 15;\n    \n    int days_month_16\
    \ = days_month / 16;\n    \n    int days_month_17 = days_month / 17;\n    \n \
    \   int days_month_18 = days_month / 18;\n    \n    int days_month_19 = days_month\
    \ / 19;\n    \n    int days_month_20 = days_month / 20;\n    \n    int days_month_21\
    \ = days_month / 21;\n    \n    int days_month_22 = days_month / 22;\n    \n \
    \   int days_month_23 = days_month / 23;\n    \n    int days_month_24 = days_month\
    \ / 24;\n    \n    int days_month_25 = days_month / 25;\n    \n    int days_month_26\
    \ = days_month / 26;\n    \n    int days_month_27 = days_month / 27;\n    \n \
    \   int days_month_28 = days_month / 28;\n    \n    int days_month_29 = days_month\
    \ / 29;\n    \n    int days_month_30 = days_month / 30;\n    \n    int days_month_31\
    \ = days_month / 31;\n    \n    int \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpofd0q01p.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpofd0q01p.cpp:25:58: error: too many initializers for \u2018int [12]\u2019\
    \n   25 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmpofd0q01p.cpp:91:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   91 | }\n     \
    \ | ^\n/tmp/tmpofd0q01p.cpp:91:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string date_str = date;\n    size_t\
    \ pos = 0;\n    int day = 0;\n    int month = 0;\n    int year = 0;\n    bool\
    \ valid = false;\n    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    /\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\",\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"\\\\\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"0\");\n  \
    \  if (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1,\
    \ date_str.length());\n    }\n    pos = date_str.find_first_of(\"1\");\n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1, date_str.length());\n\
    \    }\n    pos = date_str.find_first_of(\"2\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1, date_str.length());\n    }\n\
    \    pos = date_str.find_first_of(\"3\");\n    if (pos != std::string::npos) {\n\
    \        date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos\
    \ = date_str.find_first_of(\"4\");\n    if (pos != std::string::npos) {\n    \
    \    date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos =\
    \ date_str.find_first_of(\"5\");\n    if (pos != std::string::npos) {\n      \
    \  date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"\
    6\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"7\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"8\");\n  \
    \  if (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1,\
    \ date_str.length());\n    }\n    pos = date_str.find_first_of(\"9\");\n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1, date_str.length());\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7_6wm46q: /tmp/tmp7_6wm46q.cpp:82: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 4 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 6 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 9 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 11 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppq7ynacd.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmppq7ynacd.cpp:118:26: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  118 |     if (month == 7 && day\n      |        ~                 ^\n\
    \      |                          )\n  119 | }\n      | ~                    \
    \     \n/tmp/tmppq7ynacd.cpp:119:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  119 | }\n      | ^\n/tmp/tmppq7ynacd.cpp:119:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_lhors5i: /tmp/tmp_lhors5i.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpryavw0dh: /tmp/tmpryavw0dh.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpivrfcjje: /tmp/tmpivrfcjje.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 2000 || year > 2040) {\n      \
    \  valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid = false;\n\
    \    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3kx4wjlt: /tmp/tmp3kx4wjlt.cpp:41: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpuy82azrk: /tmp/tmpuy82azrk.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"\
    September\", \"October\", \"November\", \"December\"};\n    int days[12] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12] = {0, 31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int year;\n    bool valid = false;\n\
    \    std::stringstream ss(date);\n    ss >> year;\n    if (ss.fail()) {\n    \
    \    std::cout << \"Invalid date format\" << std::endl;\n        return false;\n\
    \    }\n    if (year < 1 || year > 9999) {\n        std::cout << \"Invalid year\"\
    \ << std::endl;\n        return false;\n    }\n    if (date.size() < 2) {\n  \
    \      std::cout << \"Invalid date format\" << std::endl;\n        return false;\n\
    \    }\n    if (date.size() > 10) {\n        std::cout << \"Invalid date format\"\
    \ << std::endl;\n        return false;\n    }\n    if (date[0] == '0' && date[1]\
    \ == '/') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[0] == '/') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[1]\
    \ == '/') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[2] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[3]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[4] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[5]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[6] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[7]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[8] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[9]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[10] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[11]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[12] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    int day;\n\
    \    int month;\n    int year1;\n    int year2;\n    int day1;\n    int day2;\n\
    \    int day3;\n    int day4;\n    int day5;\n    int day6;\n    int day7;\n \
    \   int day8;\n    int day9;\n    int \n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp676t2307.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp676t2307.cpp:19:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   19 |     int months[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31};\n      |         ^~~~~~\n/tmp/tmp676t2307.cpp:17:17: note:\
    \ previous declaration as \u2018std::string months [12]\u2019\n   17 |     std::string\
    \ months[12] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    };\n      |                 ^~~~~~\n/tmp/tmp676t2307.cpp:110:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmp676t2307.cpp:110:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  110 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp77_hl22g: /tmp/tmp77_hl22g.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >>\
    \ day >> month >> year;\n    if (day > 0 && day <= 31 && month > 0 && month <=\
    \ 12 && year > 0 && year <= 9999) {\n        valid = true;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg9d3qfay: /tmp/tmpg9d3qfay.cpp:31: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    // Write\
    \ your code here\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmcd54q01: /tmp/tmpmcd54q01.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    bool valid = false;\n    \n    std::stringstream\
    \ ss(date);\n    \n    ss >> month >> day >> year;\n    \n    if (month < 1 ||\
    \ month > 12 || day < 1 || day > 31 || year < 1000 || year > 9999) {\n       \
    \ valid = false;\n    } else {\n        valid = true;\n    }\n    \n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp34_vwcam: /tmp/tmp34_vwcam.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(month == 1){\n \
    \       if(day > 31){\n            return false;\n        }\n    }\n    \n   \
    \ if(year < 2000 || year > 2040) {\n        return false;\n    }\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz59ul0kb: /tmp/tmpz59ul0kb.cpp:54: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpoiftflcz: /tmp/tmpoiftflcz.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw8wxewur: /tmp/tmpw8wxewur.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaqrbfyp0: /tmp/tmpaqrbfyp0.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string days[31]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    int month = 0;\n    int day = 0;\n    int\
    \ year = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n\
    \    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n\
    \    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n\
    \    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n\
    \    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n\
    \    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n\
    \    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n\
    \    int \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy3gv0z67.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpy3gv0z67.cpp:21:284: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   21 |\
    \     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n      |                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    ^\n/tmp/tmpy3gv0z67.cpp:77:9: error: redeclaration of \u2018\
    int i\u2019\n   77 |     int i = 0;\n      |         ^\n/tmp/tmpy3gv0z67.cpp:25:9:\
    \ note: \u2018int i\u2019 previously declared here\n   25 |     int i = 0;\n \
    \     |         ^\n/tmp/tmpy3gv0z67.cpp:78:9: error: redeclaration of \u2018int\
    \ j\u2019\n   78 |     int j = 0;\n      |         ^\n/tmp/tmpy3gv0z67.cpp:26:9:\
    \ note: \u2018int j\u2019 previously declared here\n   26 |     int j = 0;\n \
    \     |         ^\n/tmp/tmpy3gv0z67.cpp:79:9: error: redeclaration of \u2018int\
    \ k\u2019\n   79 |     int k = 0;\n      |         ^\n/tmp/tmpy3gv0z67.cpp:27:9:\
    \ note: \u2018int k\u2019 previously declared here\n   27 |     int k = 0;\n \
    \     |         ^\n/tmp/tmpy3gv0z67.cpp:80:9: error: redeclaration of \u2018int\
    \ l\u2019\n   80 |     int l = 0;\n      |         ^\n/tmp/tmpy3gv0z67.cpp:28:9:\
    \ note: \u2018int l\u2019 previously declared here\n   28 |     int l = 0;\n \
    \     |         ^\n/tmp/tmpy3gv0z67.cpp:81:9: error: redeclaration of \u2018int\
    \ m\u2019\n   81 |     int m = 0;\n      |         ^\n/tmp/tmpy3gv0z67.cpp:29:9:\
    \ note: \u2018int m\u2019 previously declared here\n   29 |     int m = 0;\n \
    \     |         ^\n/tmp/tmpy3gv0z67.cpp:82:9: error: redeclaration of \u2018int\
    \ n\u2019\n   82 |     int n = 0;\n      |         ^\n/tmp/tmpy3gv0z67.cpp:30:9:\
    \ note: \u2018int n\u2019 previously declared here\n   30 |     int n = 0;\n \
    \     |         ^\n/tmp/tmpy3gv0z67.cpp:83:9:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpml5sdqgr: /tmp/tmpml5sdqgr.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1 || year > 9999) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplzant6g8: /tmp/tmplzant6g8.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8mhlwhd5: /tmp/tmp8mhlwhd5.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    if (day < 1 || day > 31) {\n      \
    \  return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n\
    \    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr2fp69bj: /tmp/tmpr2fp69bj.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\n        \"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    int days[12] = {\n    \
    \    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int months[12]\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int days_months[12] = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31\n    };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n\
    \        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int\
    \ days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31, 29, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppxlbwsj2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmppxlbwsj2.cpp:26:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   26 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmppxlbwsj2.cpp:19:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   19 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n/tmp/tmppxlbwsj2.cpp:31:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   31 |     };\n    \
    \  |     ^\n/tmp/tmppxlbwsj2.cpp:34:5: error: too many initializers for \u2018\
    int [13]\u2019\n   34 |     };\n      |     ^\n/tmp/tmppxlbwsj2.cpp:35:9: error:\
    \ redeclaration of \u2018int days_months_leap [13]\u2019\n   35 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:38:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   38 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:41:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   41 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:44:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   44 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:47:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   47 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmppxlbwsj2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"\
    September\", \"October\", \"November\", \"December\"};\n    std::string days[31]\
    \ = {\"31\", \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"\
    October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"\
    30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhv1qkm3.cpp:41:72: warning: missing terminating \" character\n\
    \   41 |     std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n      |                                                         \
    \               ^\n/tmp/tmpnhv1qkm3.cpp:41:72: error: missing terminating \" character\n\
    /tmp/tmpnhv1qkm3.cpp: In function \u2018bool valid_date(std::string)\u2019:\n\
    /tmp/tmpnhv1qkm3.cpp:23:17: error: redeclaration of \u2018std::string months [12]\u2019\
    \n   23 |     std::string months[12] = {\"January\", \"February\", \"March\",\
    \ \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n      |                 ^~~~~~\n/tmp/tmpnhv1qkm3.cpp:21:17:\
    \ note: \u2018std::string months [12]\u2019 previously declared here\n   21 |\
    \     std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n      |                 ^~~~~~\n/tmp/tmpnhv1qkm3.cpp:24:17:\
    \ error: redeclaration of \u2018std::string days [31]\u2019\n   24 |     std::string\
    \ days[31] = {\"31\", \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpnhv1qkm3.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpnhv1qkm3.cpp:25:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   25 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpnhv1qkm3.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpnhv1qkm3.cpp:26:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   26 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmpnhv1qkm3.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::str"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpog80jr7h: /tmp/tmpog80jr7h.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp06dp3v1f: /tmp/tmp06dp3v1f.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpejm1s5mo: /tmp/tmpejm1s5mo.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ flag = false;\n    \n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    \n    std::string days[31] =\
    \ {\"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\"\
    , \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n    \n    std::string years[12] = {\"\", \"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n    \n    int\
    \ days_count = 0, month_count = 0, year_count = 0;\n    \n    for(int i = 0; i\
    \ < date.size(); i++) {\n        if(date[i] >= '0' && date[i] <= '9') {\n    \
    \        days_count++;\n        }\n        if(date[i] == '-') {\n            month_count++;\n\
    \        }\n        if(date[i] == '/') {\n            year_count++;\n        }\n\
    \    }\n    \n    if(days_count < 1 || days_count > 31) {\n        flag = false;\n\
    \    }\n    \n    if(month_count < 1 || month_count > 12) {\n        flag = false;\n\
    \    }\n    \n    if(year_count < 1 || year_count > 12) {\n        flag = false;\n\
    \    }\n    \n    if(days_count == 31 && month_count == 2 && year_count==4) {\n\
    \        flag = true;\n    }\n    \n    return flag;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4pzfaw4.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpf4pzfaw4.cpp:23:217: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   23 |\
    \     std::string days[31] = {\"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"\
    06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n      |                  \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmpf4pzfaw4.cpp:25:288:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   25 |     std::string years[12] = {\"\", \"2000\", \"2001\",\
    \ \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n    ss\
    \ >> month >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day\
    \ > 31 || year < 1000 || year > 9999) {\n        valid = false;\n    }\n    if\
    \ (month == 2 && day > 29) {\n        valid = false;\n    }\n    if (month ==\
    \ 4 && day > 30) {\n        valid = false;\n    }\n    if (month == 6 && day >\
    \ 31) {\n        valid = false;\n    }\n    if (month == 9 && day > 30) {\n  \
    \      valid = false;\n    }\n    if (month == 11 && day > 31) {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbp0m24nz: /tmp/tmpbp0m24nz.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsoediw8u: /tmp/tmpsoediw8u.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn6gppdmo: /tmp/tmpn6gppdmo.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpohvjk1bh: /tmp/tmpohvjk1bh.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    int day;\n    int month;\n    int year;\n    \n   \
    \ std::stringstream ss;\n    ss << date;\n    ss >> day >> month >> year;\n  \
    \  \n    if(day < 1 || day > 31) {\n        valid = false;\n    }\n    \n    if(month\
    \ < 1 || month > 12) {\n        valid = false;\n    }\n    \n    if(year < 1000\
    \ || year > 9999) {\n        valid = false;\n    }\n    \n    if(month == 2 &&\
    \ day > 29) {\n        valid = false;\n    }\n    \n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9rxm4l2i: /tmp/tmp9rxm4l2i.cpp:49: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \    int years[12] = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n\
    \    int days_months[12][12] = {\n        {31,28,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,29,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,31,30,31,30,31,30,31,31,30,31,30,31},\n        {30,31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpet2yq7fy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpet2yq7fy.cpp:18:58: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmpet2yq7fy.cpp:19:60:\
    \ error: too many initializers for \u2018int [12]\u2019\n   19 |     int months[12]\
    \ = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n      |                        \
    \                                    ^\n/tmp/tmpet2yq7fy.cpp:20:83: error: too\
    \ many initializers for \u2018int [12]\u2019\n   20 |     int years[12] = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n\
    \      |                                                                     \
    \              ^\n/tmp/tmpet2yq7fy.cpp:50:1: error: expected \u2018}\u2019 before\
    \ \u2018int\u2019\n   50 | int main() {\n      | ^~~\n/tmp/tmpet2yq7fy.cpp:21:31:\
    \ note: to match this \u2018{\u2019\n   21 |     int days_months[12][12] = {\n\
    \      |                               ^\n/tmp/tmpet2yq7fy.cpp:50:1: error: too\
    \ many initializers for \u2018int [12]\u2019\n   50 | int main() {\n      | ^~~\n\
    /tmp/tmpet2yq7fy.cpp:68:1: error: expected \u2018}\u2019 at end of input\n   68\
    \ | }\n      | ^\n/tmp/tmpet2yq7fy.cpp:16:35: note: to match this \u2018{\u2019\
    \n   16 | bool valid_date(std::string date) {\n      |                       \
    \            ^\n/tmp/tmpet2yq7fy.cpp:68:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   68 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbcp3ld5i: /tmp/tmpbcp3ld5i.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 2000 || year > 2040) {\n      \
    \  valid = false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n   \
    \         valid = false;\n        }\n    }\n    return valid;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvb8knfpb: /tmp/tmpvb8knfpb.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx11h32e9: /tmp/tmpx11h32e9.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || (month\
    \ == 2 && day > 29)) {\n        return false;\n    }\n    if (month == 2) {\n\
    \        if (day > 29) {\n            return false;\n        }\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day >\
    \ 30) {\n            return false;\n        }\n    }\n    if (month == 1) {\n\
    \        if (day > 31) {\n            return false;\n        }\n    }\n    if\
    \ (month == 3 && day > 31) {\n        return false;\n    }\n    if (month == 5\
    \ && day > 30) {\n        return false;\n    }\n    if (month == 7 && day > 31)\
    \ {\n        return false;\n    }\n    if (month == 8 && day > 31) {\n       \
    \ return false;\n    }\n    if (month == 10 && day > 30) {\n        return false;\n\
    \    }\n    if (month == 12 && day > 31) {\n        return false;\n    }\n   \
    \ if (month == 1) {\n        if (day > 31) {\n            return false;\n    \
    \    }\n    }\n    if (month == 3 && day > 31) {\n        return false;\n    }\n\
    \    if (month == 5 && day > 30) {\n        return false;\n    }\n    if (month\
    \ == 7 && day > 31) {\n        return false;\n    }\n    if (month == 8 && day\
    \ > 31) {\n        return false;\n    }\n    if (month == 10 && day > 30) {\n\
    \        return false;\n    }\n    if (month == 12 && day > 31) {\n        return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) {\n            return\
    \ false;\n        }\n    }\n    if (month == 3 && day > 31) {\n        return\
    \ false;\n    }\n    if (month == 5 && day > 30) {\n        return false;\n  \
    \  }\n    if (month == 7 && day > 31) {\n        return false;\n    }\n    if\
    \ (month == 8 && day > 31) {\n        return false;\n    }\n    if (month == 10\
    \ && day > 30) {\n        return false;\n    }\n    if (month == 12 && day > 31)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx9naql05: /tmp/tmpx9naql05.cpp:109: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if(day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1000 || year > 9999) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    if(month == 1) {\n\
    \        if(day > 31) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmps4wztya1: /tmp/tmps4wztya1.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1\
    \ || year > 2020) {\n        valid = false;\n    }\n    if (month == 2 && day\
    \ > 29) {\n        valid = false;\n    }\n    return valid;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0f72cx0v: /tmp/tmp0f72cx0v.cpp:33: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n    ss\
    \ >> month >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day\
    \ > 31 || year < 1 || year > 2020) {\n        valid = false;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpme722bk1: /tmp/tmpme722bk1.cpp:31: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month;\n    ss >> day;\n    ss >> year;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2 && day > 29) return false;\n    if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11 && day > 30) return false;\n    if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12 && day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    valid = true;\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgsrt24r7: /tmp/tmpgsrt24r7.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpihu0h6aw: /tmp/tmpihu0h6aw.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    \n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day\
    \ > 29) return false;\n    if (month == 4 || month == 6 || month == 9 || month\
    \ == 11 && day > 30) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_bdr1r2h: /tmp/tmp_bdr1r2h.cpp:244: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1000 || year > 9999) {\n        valid = false;\n\
    \    }\n    else if (month == 2 && day > 29) {\n        valid = false;\n    }\n\
    \    else if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n        valid = false;\n    }\n    else if (month == 1 && day > 31) {\n \
    \       valid = false;\n    }\n    else {\n        valid = true;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp56co0okc: /tmp/tmp56co0okc.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1 || year > 2020) {\n        valid = false;\n\
    \    }\n    else if (month == 2 && day > 29) {\n        valid = false;\n    }\n\
    \    else if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n        valid = false;\n    }\n    else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 && day > 31) {\n        valid\
    \ = false;\n    }\n    else {\n        valid = true;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4xbt_vyd: /tmp/tmp4xbt_vyd.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdlcmtue5: /tmp/tmpdlcmtue5.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaqqlhjue: /tmp/tmpaqqlhjue.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpz89p9osz: /tmp/tmpz89p9osz.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqa1szont: /tmp/tmpqa1szont.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Your\
    \ code goes here\n    \n    return true; // Replace this with your code\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptbsmk7ro: /tmp/tmptbsmk7ro.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\n        \"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    int days[12] = {\n    \
    \    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int months[12]\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int days_months[12] = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31\n    };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31, 31, 28\n    };\n    int days_months_leap_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n   \
    \ };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n\
    \        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n \
    \   int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n        0,\
    \ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n   \
    \ };\n    int days_months_leap_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap[13] = {\n \
    \       0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n  \
    \  int days_months_leap_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap[13] = {\n        0,\
    \ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n   \
    \ };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n\
    \        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n \
    \   int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n        0,\
    \ 31, \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcp8awb0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqcp8awb0.cpp:26:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   26 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmpqcp8awb0.cpp:19:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   19 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n/tmp/tmpqcp8awb0.cpp:31:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   31 |     };\n    \
    \  |     ^\n/tmp/tmpqcp8awb0.cpp:34:5: error: too many initializers for \u2018\
    int [13]\u2019\n   34 |     };\n      |     ^\n/tmp/tmpqcp8awb0.cpp:37:5: error:\
    \ too many initializers for \u2018int [13]\u2019\n   37 |     };\n      |    \
    \ ^\n/tmp/tmpqcp8awb0.cpp:38:9: error: redeclaration of \u2018int days_months_leap\
    \ [13]\u2019\n   38 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpqcp8awb0.cpp:32:9: note: \u2018int days_months_leap [13]\u2019 previously\
    \ declared here\n   32 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpqcp8awb0.cpp:41:9: error: redeclaration of \u2018int days_months_leap_leap\
    \ [13]\u2019\n   41 |     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqcp8awb0.cpp:35:9: note: \u2018int days_months_leap_leap [13]\u2019 previously\
    \ declared here\n   35 |     int days_months_leap_leap[13] = {\n      |      \
    \   ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqcp8awb0.cpp:44:9: error: redeclaration of\
    \ \u2018int days_months_leap [13]\u2019\n   44 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpqcp8awb0.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpqcp8awb0.cpp:47:9: error: redeclaration\
    \ of \u2018int days_months_leap_leap [13]\u2019\n   47 |     int days_months_leap_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqcp8awb0.cpp:35:9: note:\
    \ \u2018int days_months_leap_leap [13]\u2019 previously declared here\n   35 |\
    \     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqcp8awb0.cpp:50:9: error: redeclaration of \u2018int days_months_leap\
    \ [13]\u2019\n   50 |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9nf6qcgg: /tmp/tmp9nf6qcgg.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprrseq7vh: /tmp/tmprrseq7vh.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    std::stringstream\
    \ ss(date);\n    int day, month, year;\n    ss >> month >> day >> year;\n    if\
    \ (month < 1 || month > 12 || day < 1 || day > 31 || year < 1 || year > 9999)\
    \ {\n        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4vxph1qg: /tmp/tmp4vxph1qg.cpp:28: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmnkj6akh: /tmp/tmpmnkj6akh.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfguwiyu1: /tmp/tmpfguwiyu1.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31 || month < 1 || month > 12 || year < 1000 || year > 9999) {\n        valid\
    \ = false;\n    } else {\n        valid = true;\n    }\n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpayi73u0e: /tmp/tmpayi73u0e.cpp:34: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your code here\n    \n  \
    \  // Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv_9e7ldt: /tmp/tmpv_9e7ldt.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxxk_8hnb: /tmp/tmpxxk_8hnb.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3xxj_s3a: /tmp/tmp3xxj_s3a.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwhgoz1_u: /tmp/tmpwhgoz1_u.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp84dnn20l: /tmp/tmp84dnn20l.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpps_j7cl1: /tmp/tmpps_j7cl1.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn444535v: /tmp/tmpn444535v.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyyutw499: /tmp/tmpyyutw499.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp53lqcyz4: /tmp/tmp53lqcyz4.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8oealhf9: /tmp/tmp8oealhf9.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    std::string date_str\
    \ = date;\n    if (date_str.size() > 0) {\n        int day;\n        int month;\n\
    \        int year;\n        std::istringstream ss(date_str);\n        ss >> day\
    \ >> month >> year;\n        if (day > 0 && month > 0 && month < 13 && day > 0\
    \ && day <= 31) {\n            if (month == 1) {\n                if (day > 1\
    \ && day <= 29) {\n                    valid = true;\n                }\n    \
    \        } else if (month == 3) {\n                if (day > 1 && day <= 30) {\n\
    \                    valid = true;\n                }\n            } else if (month\
    \ == 5) {\n                if (day > 1 && day <= 31) {\n                    valid\
    \ = true;\n                }\n            } else if (month == 7) {\n         \
    \       if (day > 1 && day <= 31) {\n                    valid = true;\n     \
    \           }\n            } else if (month == 8) {\n                if (day >\
    \ 1 && day <= 30) {\n                    valid = true;\n                }\n  \
    \          } else if (month == 10) {\n                if (day > 1 && day <= 31)\
    \ {\n                    valid = true;\n                }\n            } else\
    \ if (month == 12) {\n                if (day > 1 && day <= 31) {\n          \
    \          valid = true;\n                }\n            }\n        } else if\
    \ (month > 0 && month < 13 && day > 0 && day <= 30) {\n            if (month ==\
    \ 4) {\n                if (day > 1 && day <= 29) {\n                    valid\
    \ = true;\n                }\n            } else if (month == 6) {\n         \
    \       if (day > 1 && day <= 30) {\n                    valid = true;\n     \
    \           }\n            } else if (month == 9) {\n                if (day >\
    \ 1 && day <= 31) {\n                    valid = true;\n                }\n  \
    \          } else if (month == 11) {\n                if (day > 1 && day <= 31)\
    \ {\n                    valid = true;\n                }\n            }\n   \
    \     } else if (month > 0 && month < 13 && day > 0 && day <= 31) {\n        \
    \    if (month == 2) {\n                if (day > 1 && day <= 29) {\n        \
    \            valid = true;\n                }\n            }\n        }\n    }\n\
    \    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfgrpmdzy: /tmp/tmpfgrpmdzy.cpp:85: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    // Write your code\
    \ here\n    std::string months[12] = {\n        \"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    std::string days[31] =\
    \ {\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"\
    , \"Friday\", \"Saturday\"\n    };\n    std::string years[12] = {\n        \"\
    2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\",\
    \ \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\"\
    , \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"\
    , \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"\
    , \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\"\
    , \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\"\
    , \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\"\
    , \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\"\
    , \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\"\
    , \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\"\
    , \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\"\
    , \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\"\
    , \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\"\
    , \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\"\
    , \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\"\
    , \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\"\
    , \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\"\
    , \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\"\
    , \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\"\
    , \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\"\
    , \"2160\", \"216\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zr9u521.cpp:27:1297: warning: missing terminating \" character\n\
    \   27 |         \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\
    \ \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\"\
    , \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\"\
    , \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\"\
    , \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\"\
    , \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\"\
    , \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\"\
    , \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\"\
    , \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\"\
    , \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\"\
    , \"2142\", \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\"\
    , \"2150\", \"2151\", \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\"\
    , \"2158\", \"2159\", \"2160\", \"216\n      |                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ooy2q0b: /tmp/tmp1ooy2q0b.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 4 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 6 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 9 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 11 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5joybmej: /tmp/tmp5joybmej.cpp:71: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqznweq05: /tmp/tmpqznweq05.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2 && day > 29) return false;\n    if (month == 4 || month == 6 || month == 9\
    \ || month == 11 && day > 30) return false;\n    if (month == 1 && day > 31) return\
    \ false;\n    if (month == 3 && day > 31) return false;\n    if (month == 5 &&\
    \ day > 30) return false;\n    if (month == 7 && day > 31) return false;\n   \
    \ if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 30) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 30) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpcoa7mp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcpcoa7mp.cpp:75:27: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   75 |     if (month == 10 && day\n      |        ~                \
    \  ^\n      |                           )\n   76 | }\n      | ~              \
    \            \n/tmp/tmpcpcoa7mp.cpp:76:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpcpcoa7mp.cpp:76:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   76 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpden5gfnl: /tmp/tmpden5gfnl.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    int day;\n    int month;\n    int year;\n    \n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    \n    if(month < 1 || month\
    \ > 12){\n        valid = false;\n    }\n    \n    if(day < 1 || day > 31){\n\
    \        valid = false;\n    }\n    \n    if(month == 2 && day > 29){\n      \
    \  valid = false;\n    }\n    \n    if(day > 31 && month == 2 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 2 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 2 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 3 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 3 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 3 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 28){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 28){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 28){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 7 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 7 && day > \n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_y0u9p4p.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_y0u9p4p.cpp:116:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  116 | }\n      | ^\n/tmp/tmp_y0u9p4p.cpp:115:39: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  115 |     if(day > 31 && month ==\
    \ 7 && day >\n      |       ~                               ^\n      |       \
    \                                )\n  116 | }\n      | ~                     \
    \                 \n/tmp/tmp_y0u9p4p.cpp:116:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  116 | }\n      | ^\n/tmp/tmp_y0u9p4p.cpp:116:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string date_str = date;\n    \n    if(date_str.empty()){\n\
    \        valid = false;\n    }\n    \n    int day;\n    int month;\n    int year;\n\
    \    \n    std::stringstream ss(date_str);\n    \n    ss >> month >> day >> year;\n\
    \    \n    if(month < 1 || month > 12){\n        valid = false;\n    }\n    \n\
    \    if(day < 1 || day > 31){\n        valid = false;\n    }\n    \n    if(month\
    \ == 2){\n        if(day > 29){\n            valid = false;\n        }\n    }\n\
    \    \n    if(month == 4){\n        if(day > 30){\n            valid = false;\n\
    \        }\n    }\n    \n    if(month == 6){\n        if(day > 30){\n        \
    \    valid = false;\n        }\n    }\n    \n    if(month == 9){\n        if(day\
    \ > 30){\n            valid = false;\n        }\n    }\n    \n    if(month ==\
    \ 11){\n        if(day > 30){\n            valid = false;\n        }\n    }\n\
    \    \n    if(month == 1){\n        if(day > 31){\n            valid = false;\n\
    \        }\n    }\n    \n    if(month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day > 31){\n            valid\
    \ = false;\n        }\n    }\n    \n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwywex0do: /tmp/tmpwywex0do.cpp:89: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 1 || year > 9999) {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdmnwehc9: /tmp/tmpdmnwehc9.cpp:38: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Your\
    \ code here\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprrr3uzeq: /tmp/tmprrr3uzeq.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa46ft_lk: /tmp/tmpa46ft_lk.cpp:21: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1 || year > 9999) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9a2utq41: /tmp/tmp9a2utq41.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpekrxuwb3: /tmp/tmpekrxuwb3.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12) valid = false;\n    if (day < 1 ||\
    \ day > 31) valid = false;\n    if (month == 2 && day > 29) valid = false;\n \
    \   if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30) valid\
    \ = false;\n    if (month == 1 && day > 31) valid = false;\n    if (month == 3\
    \ && day > 30) valid = false;\n    if (month == 5 && day > 31) valid = false;\n\
    \    if (month == 7 && day > 31) valid = false;\n    if (month == 8 && day > 31)\
    \ valid = false;\n    if (month == 10 && day > 31) valid = false;\n    if (month\
    \ == 12 && day > 31) valid = false;\n    if (month == 1 && day > 31) valid = false;\n\
    \    if (month == 3 && day > 30) valid = false;\n    if (month == 5 && day > 31)\
    \ valid = false;\n    if (month == 7 && day > 31) valid = false;\n    if (month\
    \ == 8 && day > 31) valid = false;\n    if (month == 10 && day > 31) valid = false;\n\
    \    if (month == 12 && day > 31) valid = false;\n    if (month == 1 && day >\
    \ 31) valid = false;\n    if (month == 3 && day > 30) valid = false;\n    if (month\
    \ == 5 && day > 31) valid = false;\n    if (month == 7 && day > 31) valid = false;\n\
    \    if (month == 8 && day > 31) valid = false;\n    if (month == 10 && day >\
    \ 31) valid = false;\n    if (month == 12 && day > 31) valid = false;\n    if\
    \ (month == 1 && day > 31) valid = false;\n    if (month == 3 && day > 30) valid\
    \ = false;\n    if (month == 5 && day > 31) valid = false;\n    if (month == 7\
    \ && day > 31) valid = false;\n    if (month == 8 && day > 31) valid = false;\n\
    \    if (month == 10 && day > 31) valid = false;\n    if (month == 12 && day >\
    \ 31) valid = false;\n    if (month == 1 && day > 31) valid = false;\n    if (month\
    \ == 3 && day > 30) valid = false;\n    if (month == 5 && day > 31) valid = false;\n\
    \    if (month == 7 && day > 31) valid = false;\n    if (month == 8 && day > 31)\
    \ valid = false;\n    if (month == 10 && day > 31) valid = false;\n    if (month\
    \ == 12 && day > 31) valid = false;\n    if (month == 1 && day > 31) valid = false;\n\
    \    if (month == 3 && day > 30) valid = false;\n    if (month == 5 && day > 31)\
    \ valid = false;\n    if (month == 7 && day > 31\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcynkokfr.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcynkokfr.cpp:65:31: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   65 |     if (month == 7 && day > 31\n      |        ~            \
    \          ^\n      |                               )\n   66 | }\n      | ~  \
    \                            \n/tmp/tmpcynkokfr.cpp:66:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   66 | }\n      | ^\n/tmp/tmpcynkokfr.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzppbuex_: /tmp/tmpzppbuex_.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if(day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1000 || year > 2020) {\n        return false;\n    }\n    else\
    \ if(month == 2) {\n        if(day > 29) {\n            return false;\n      \
    \  }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if(day > 30) {\n            return false;\n        }\n    }\n   \
    \ else if(month == 1) {\n        if(day > 31) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkg34293d: /tmp/tmpkg34293d.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqp5lqfei: /tmp/tmpqp5lqfei.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn3w35t08: /tmp/tmpn3w35t08.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n \
    \   if (month == 2) {\n        if (day > 29) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn_ccagle: /tmp/tmpn_ccagle.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31){\n        return false;\n \
    \   }\n    \n    if(year < 2000 || year > 2040) {\n        return false;\n   \
    \ }\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgh_np7da: /tmp/tmpgh_np7da.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(!date.empty()) {\n        valid = false;\n    }\n\
    \    \n    int daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n    \n    if(daysInMonth[date.substr(0,2)] < 1 || daysInMonth[date.substr(0,2)]\
    \ > 31) {\n        valid = false;\n    }\n    \n    if(daysInMonth[date.substr(2,2)]\
    \ < 1 || daysInMonth[date.substr(2,2)] > 30) {\n        valid = false;\n    }\n\
    \    \n    if(daysInMonth[date.substr(4,2)] < 1 || daysInMonth[date.substr(4,2)]\
    \ > 29) {\n        valid = false;\n    }\n    \n    if(date.substr(0,2) < 1 ||\
    \ date.substr(0,2) > 12) {\n        valid = false;\n    }\n    \n    if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n        valid = false;\n    }\n    \n    if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n        valid = false;\n    }\n    \n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07asuv4e.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp07asuv4e.cpp:27:19: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   27 |     if(daysInMonth[date.substr(0,2)] < 1 || daysInMonth[date.substr(0,2)]\
    \ > 31) {\n      |                   ^\n/tmp/tmp07asuv4e.cpp:27:56: error: no\
    \ match for \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>\u2019)\n   27 |     if(daysInMonth[date.substr(0,2)]\
    \ < 1 || daysInMonth[date.substr(0,2)] > 31) {\n      |                      \
    \                                  ^\n/tmp/tmp07asuv4e.cpp:31:19: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and \u2018\
    std::__cxx11::basic_string<char>\u2019)\n   31 |     if(daysInMonth[date.substr(2,2)]\
    \ < 1 || daysInMonth[date.substr(2,2)] > 30) {\n      |                   ^\n\
    /tmp/tmp07asuv4e.cpp:31:56: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   31 |     if(daysInMonth[date.substr(2,2)] < 1 || daysInMonth[date.substr(2,2)]\
    \ > 30) {\n      |                                                        ^\n\
    /tmp/tmp07asuv4e.cpp:35:19: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   35 |     if(daysInMonth[date.substr(4,2)] < 1 || daysInMonth[date.substr(4,2)]\
    \ > 29) {\n      |                   ^\n/tmp/tmp07asuv4e.cpp:35:56: error: no\
    \ match for \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>\u2019)\n   35 |     if(daysInMonth[date.substr(4,2)]\
    \ < 1 || daysInMonth[date.substr(4,2)] > 29) {\n      |                      \
    \                                  ^\n/tmp/tmp07asuv4e.cpp:39:25: error: no match\
    \ for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |        ~~~~~~~~~~~~~~~~ ^ ~\n      |                   |  \
    \     |\n      |                   |       int\n      |                   std::__cxx11::basic_string<char>\n\
    In file included fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp83xxr_gx: /tmp/tmp83xxr_gx.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31){\n        return false;\n \
    \   }\n    \n    if(month == 2){\n        if(day > 29){\n            return false;\n\
    \        }\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11){\n        if(day > 30){\n            return false;\n        }\n    }\n\
    \    \n    if(month == 1){\n        if(day > 31){\n            return false;\n\
    \        }\n    }\n    \n    if(day > 31){\n        return false;\n    }\n   \
    \ \n    if(year < 1000 || year > 2020){\n        return false;\n    }\n    \n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7dtheq6d: /tmp/tmp7dtheq6d.cpp:64: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdtnzmjm4: /tmp/tmpdtnzmjm4.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpoy2lw9v2: /tmp/tmpoy2lw9v2.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 2000\
    \ || year > 2040) {\n        valid = false;\n    }\n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplzy1n4ny: /tmp/tmplzy1n4ny.cpp:30: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9o3ngh3e: /tmp/tmp9o3ngh3e.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    std::string months[12] = {\n        \"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    int days[12] = {\n    \
    \    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int months[12]\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int daysInMonth[12] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31\n    };\n    int day;\n    int month;\n    int year;\n    std::string\
    \ temp;\n    temp = date;\n    temp = temp.substr(0, temp.find_first_of('-'));\n\
    \    temp = temp.substr(temp.find_first_of('-') + 1, temp.find_last_of('-') -\
    \ temp.find_first_of('-') - 1);\n    temp = temp.substr(0, temp.find_first_of('/'));\n\
    \    temp = temp.substr(temp.find_first_of('/') + 1, temp.find_last_of('/') -\
    \ temp.find_first_of('/') - 1);\n    temp = temp.substr(0, temp.find_first_of('.'));\n\
    \    temp = temp.substr(temp.find_first_of('.') + 1, temp.find_last_of('.') -\
    \ temp.find_first_of('.') - 1);\n    temp = temp.substr(0, temp.find_first_of('y'));\n\
    \    temp = temp.substr(temp.find_first_of('y') + 1, temp.find_last_of('y') -\
    \ temp.find_first_of('y') - 1);\n    temp = temp.substr(0, temp.find_first_of('M'));\n\
    \    temp = temp.substr(temp.find_first_of('M') + 1, temp.find_last_of('M') -\
    \ temp.find_first_of('M') - 1);\n    temp = temp.substr(0, temp.find_first_of('d'));\n\
    \    temp = temp.substr(temp.find_first_of('d') + 1, temp.find_last_of('d') -\
    \ temp.find_first_of('d') - 1);\n    temp = temp.substr(0, temp.find_first_of('h'));\n\
    \    temp = temp.substr(temp.find_first_of('h') + 1, temp.find_last_of('h') -\
    \ temp.find_first_of('h') - 1);\n    temp = temp.substr(0, temp.find_first_of('m'));\n\
    \    temp = temp.substr(temp.find_first_of('m') + 1, temp.find_last_of('m') -\
    \ temp.find_first_of('m') - 1);\n    temp = temp.substr(0, temp.find_first_of('s'));\n\
    \    temp = temp.substr(temp.find_first_of('s') + 1, temp.find_last_of('s') -\
    \ temp.find_first_of('s') - 1);\n    temp = temp.substr(0, temp.find_first_of('S'));\n\
    \    temp = temp.substr(temp.find_first_\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp5r2syx5e.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5r2syx5e.cpp:26:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   26 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmp5r2syx5e.cpp:19:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   19 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n/tmp/tmp5r2syx5e.cpp:31:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   31 |     };\n    \
    \  |     ^\n/tmp/tmp5r2syx5e.cpp:56:29: error: \u2018std::string\u2019 {aka \u2018\
    class std::__cxx11::basic_string<char>\u2019} has no member named \u2018find_first_\u2019\
    ; did you mean \u2018find_first_of\u2019?\n   56 |     temp = temp.substr(temp.find_first_\n\
    \      |                             ^~~~~~~~~~~\n      |                    \
    \         find_first_of\n/tmp/tmp5r2syx5e.cpp:57:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string months[12] = {\n        \"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"\n    };\n    \n    int\
    \ days[12] = {\n        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n\
    \    \n    int year;\n    \n    std::stringstream ss(date);\n    \n    ss >> month;\n\
    \    \n    ss >> day;\n    \n    ss >> year;\n    \n    if (month < 1 || month\
    \ > 12 || day < 1 || day > days[month - 1] || year < 1900 || year > 2020) {\n\
    \        valid = false;\n    }\n    else {\n        valid = true;\n    }\n   \
    \ \n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaxzkoav5.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpaxzkoav5.cpp:34:11: error: \u2018month\u2019 was not declared in this\
    \ scope; did you mean \u2018months\u2019?\n   34 |     ss >> month;\n      | \
    \          ^~~~~\n      |           months\n/tmp/tmpaxzkoav5.cpp:36:11: error:\
    \ \u2018day\u2019 was not declared in this scope; did you mean \u2018days\u2019\
    ?\n   36 |     ss >> day;\n      |           ^~~\n      |           days\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    \n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpr4uqy2c2: /tmp/tmpr4uqy2c2.cpp:27: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Write your code\
    \ here\n    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    valid = month >= 1 && month <= 12\
    \ && day >= 1 && day <= 31 && year >= 1 && year <= 9999;\n    \n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv4iqmgbg: /tmp/tmpv4iqmgbg.cpp:31: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqb1agve7: /tmp/tmpqb1agve7.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6qtxmu0z: /tmp/tmp6qtxmu0z.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpinez6t01: /tmp/tmpinez6t01.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \    int years[12] = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n\
    \    int day;\n    int month;\n    int year;\n    int days;\n    int months;\n\
    \    int years;\n    std::string::size_type pos;\n    pos = date.find('-');\n\
    \    day = stoi(date.substr(0,pos));\n    month = stoi(date.substr(pos+1,2));\n\
    \    year = stoi(date.substr(pos+3,4));\n    days = days[month-1];\n    months\
    \ = months[month-1];\n    years = years[year-1];\n    if (date.empty()) {\n  \
    \      return false;\n    }\n    if (day<1 || day>31) {\n        return false;\n\
    \    }\n    if (month<1 || month>12) {\n        return false;\n    }\n    if (year<1\
    \ || year>2020) {\n        return false;\n    }\n    if (days<1 || days>31) {\n\
    \        return false;\n    }\n    if (months<1 || months>12) {\n        return\
    \ false;\n    }\n    if (years<1 || years>2020) {\n        return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph8vh1k5w.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmph8vh1k5w.cpp:18:58: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmph8vh1k5w.cpp:20:83:\
    \ error: too many initializers for \u2018int [12]\u2019\n   20 |     int years[12]\
    \ = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n      |\
    \                                                                            \
    \       ^\n/tmp/tmph8vh1k5w.cpp:24:9: error: conflicting declaration \u2018int\
    \ days\u2019\n   24 |     int days;\n      |         ^~~~\n/tmp/tmph8vh1k5w.cpp:18:9:\
    \ note: previous declaration as \u2018int days [12]\u2019\n   18 |     int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |         ^~~~\n/tmp/tmph8vh1k5w.cpp:25:9:\
    \ error: conflicting declaration \u2018int months\u2019\n   25 |     int months;\n\
    \      |         ^~~~~~\n/tmp/tmph8vh1k5w.cpp:19:9: note: previous declaration\
    \ as \u2018int months [12]\u2019\n   19 |     int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \      |         ^~~~~~\n/tmp/tmph8vh1k5w.cpp:26:9: error: conflicting declaration\
    \ \u2018int years\u2019\n   26 |     int years;\n      |         ^~~~~\n/tmp/tmph8vh1k5w.cpp:20:9:\
    \ note: previous declaration as \u2018int years [12]\u2019\n   20 |     int years[12]\
    \ = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n      |\
    \         ^~~~~\n/tmp/tmph8vh1k5w.cpp:32:24: error: incompatible types in assignment\
    \ of \u2018int\u2019 to \u2018int [12]\u2019\n   32 |     days = days[month-1];\n\
    \      |                        ^\n/tmp/tmph8vh1k5w.cpp:33:28: error: incompatible\
    \ types in assignment of \u2018int\u2019 to \u2018int [12]\u2019\n   33 |    \
    \ months = months[month-1];\n      |                            ^\n/tmp/tmph8vh1k5w.cpp:34:25:\
    \ error: incompatible types in assignment of \u2018int\u2019 to \u2018int [12]\u2019\
    \n   34 |     years = years[year-1];\n      |                         ^\n/tmp/tmph8vh1k5w.cpp:47:14:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   47 |     if (days<1 || days>31) {\n      |              ^\n/tmp/tmph8vh1k5w."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Write your code\
    \ here\n    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    valid = month > 0 && month < 12 &&\
    \ day > 0 && day < 31 && year > 0 && year < 2040;\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdsg8bxr6: /tmp/tmpdsg8bxr6.cpp:30: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    if (month == 1) {\n        if (day > 31) {\n            return false;\n \
    \       }\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\
    \    if (month == 2) {\n        if (day > 29) {\n            return false;\n \
    \       }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (month == 1) {\n        if (day > 31) {\n            return false;\n   \
    \     }\n    }\n    if (day < 1 || day > 30) {\n        return false;\n    }\n\
    \    if (month == 2) {\n        if (day > 29) {\n            return false;\n \
    \       }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (month == 1) {\n        if (day > 31) {\n            return false;\n   \
    \     }\n    }\n    if (day < 1 || day > 29) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_nvn2bm7: /tmp/tmp_nvn2bm7.cpp:88: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgcryspgo: /tmp/tmpgcryspgo.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        valid = false;\n    }\n    if (month < 1 || month > 12) {\n        valid\
    \ = false;\n    }\n    if (month == 2 && day > 29) {\n        valid = false;\n\
    \    }\n    if (month == 4 && day > 30) {\n        valid = false;\n    }\n   \
    \ if (month == 6 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 9 && day > 30) {\n        valid = false;\n    }\n    if (month == 11 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 1 && day > 31) {\n\
    \        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_xvfy_d4: /tmp/tmp_xvfy_d4.cpp:52: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpf6d1bqjx: /tmp/tmpf6d1bqjx.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfsbdvgh7: /tmp/tmpfsbdvgh7.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr_jl1w3g: /tmp/tmpr_jl1w3g.cpp:149: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Write your code\
    \ here\n    std::istringstream iss(date);\n    std::string month;\n    int day;\n\
    \    int year;\n    iss >> month >> day >> year;\n    if (month.length() < 1 ||\
    \ month.length() > 12 || day.length() < 1 || day.length() > 31 || year.length()\
    \ < 1 || year.length() > 12) {\n        valid = false;\n    }\n    if (month.length()\
    \ < 1 || month.length() > 12) {\n        valid = false;\n    }\n    if (day.length()\
    \ < 1 || day.length() > 31) {\n        valid = false;\n    }\n    if (month.length()\
    \ < 1 || month.length() > 12) {\n        valid = false;\n    }\n    if (year.length()\
    \ < 1 || year.length() > 12) {\n        valid = false;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ky4bup7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5ky4bup7.cpp:24:58: error: request for member \u2018length\u2019 in\
    \ \u2018day\u2019, which is of non-class type \u2018int\u2019\n   24 |     if\
    \ (month.length() < 1 || month.length() > 12 || day.length() < 1 || day.length()\
    \ > 31 || year.length() < 1 || year.length() > 12) {\n      |                \
    \                                          ^~~~~~\n/tmp/tmp5ky4bup7.cpp:24:78:\
    \ error: request for member \u2018length\u2019 in \u2018day\u2019, which is of\
    \ non-class type \u2018int\u2019\n   24 |     if (month.length() < 1 || month.length()\
    \ > 12 || day.length() < 1 || day.length() > 31 || year.length() < 1 || year.length()\
    \ > 12) {\n      |                                                           \
    \                   ^~~~~~\n/tmp/tmp5ky4bup7.cpp:24:100: error: request for member\
    \ \u2018length\u2019 in \u2018year\u2019, which is of non-class type \u2018int\u2019\
    \n   24 |     if (month.length() < 1 || month.length() > 12 || day.length() <\
    \ 1 || day.length() > 31 || year.length() < 1 || year.length() > 12) {\n     \
    \ |                                                                          \
    \                          ^~~~~~\n/tmp/tmp5ky4bup7.cpp:24:121: error: request\
    \ for member \u2018length\u2019 in \u2018year\u2019, which is of non-class type\
    \ \u2018int\u2019\n   24 |     if (month.length() < 1 || month.length() > 12 ||\
    \ day.length() < 1 || day.length() > 31 || year.length() < 1 || year.length()\
    \ > 12) {\n      |                                                           \
    \                                                              ^~~~~~\n/tmp/tmp5ky4bup7.cpp:30:13:\
    \ error: request for member \u2018length\u2019 in \u2018day\u2019, which is of\
    \ non-class type \u2018int\u2019\n   30 |     if (day.length() < 1 || day.length()\
    \ > 31) {\n      |             ^~~~~~\n/tmp/tmp5ky4bup7.cpp:30:33: error: request\
    \ for member \u2018length\u2019 in \u2018day\u2019, which is of non-class type\
    \ \u2018int\u2019\n   30 |     if (day.length() < 1 || day.length() > 31) {\n\
    \      |                                 ^~~~~~\n/tmp/tmp5ky4bup7.cpp:36:14: error:\
    \ request for member \u2018length\u2019 in \u2018year\u2019, which is of non-class\
    \ type \u2018int\u2019\n   36 |     if (year.length() < 1 || year.length() > 1"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq0zaqdnn: /tmp/tmpq0zaqdnn.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n           \
    \ return false;\n        }\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (month == 1) {\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    if (year < 1000 ||\
    \ year > 9999) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvpjyd_fb: /tmp/tmpvpjyd_fb.cpp:52: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm7p804ge: /tmp/tmpm7p804ge.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpepb0nbu2: /tmp/tmpepb0nbu2.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    // Write\
    \ your code here\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0676lpur: /tmp/tmp0676lpur.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    \n    int days[12] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    \n    int month = 0;\n    int\
    \ day = 0;\n    int year = 0;\n    \n    std::string date_str = date;\n    \n\
    \    size_t pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoanjq1tl: /tmp/tmpoanjq1tl.cpp:106: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \    int years[12] = {0,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_months[12][12] = {\n        {31,28,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ja9x962.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0ja9x962.cpp:18:58: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmp0ja9x962.cpp:20:88:\
    \ error: too many initializers for \u2018int [12]\u2019\n   20 |     int years[12]\
    \ = {0,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n  \
    \    |                                                                       \
    \                 ^\n/tmp/tmp0ja9x962.cpp:52:1: error: expected \u2018}\u2019\
    \ before \u2018int\u2019\n   52 | int main() {\n      | ^~~\n/tmp/tmp0ja9x962.cpp:21:31:\
    \ note: to match this \u2018{\u2019\n   21 |     int days_months[12][12] = {\n\
    \      |                               ^\n/tmp/tmp0ja9x962.cpp:52:1: error: too\
    \ many initializers for \u2018int [12][12]\u2019\n   52 | int main() {\n     \
    \ | ^~~\n/tmp/tmp0ja9x962.cpp:70:1: error: expected \u2018}\u2019 at end of input\n\
    \   70 | }\n      | ^\n/tmp/tmp0ja9x962.cpp:16:35: note: to match this \u2018\
    {\u2019\n   16 | bool valid_date(std::string date) {\n      |                \
    \                   ^\n/tmp/tmp0ja9x962.cpp:70:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   70 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    \n    std::string months[12] = {\"01\",\"03\",\"05\",\"07\",\"\
    08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string days[31]\
    \ = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"\
    11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"\
    22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string\
    \ years[12] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\"\
    ,\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\"\
    ,\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\"\
    ,\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\"\
    ,\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\",\"2041\",\"2042\"\
    ,\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\",\"2050\",\"2051\"\
    ,\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\",\"2059\",\"2060\"\
    ,\"2061\",\"2062\",\"2063\",\"2064\",\"2065\",\"2066\",\"2067\",\"2068\",\"2069\"\
    ,\"2070\",\"2071\",\"2072\",\"2073\",\"2074\",\"2075\",\"2076\",\"2077\",\"2078\"\
    ,\"2079\",\"2080\",\"2081\",\"2082\",\"2083\",\"2084\",\"2085\",\"2086\",\"2087\"\
    ,\"2088\",\"2089\",\"2090\",\"2091\",\"2092\",\"2093\",\"2094\",\"2095\",\"2096\"\
    ,\"2097\",\"2098\",\"2099\",\"2100\",\"2101\",\"2102\",\"2103\",\"2104\",\"2105\"\
    ,\"2106\",\"2107\",\"2108\",\"2109\",\"2110\",\"2111\",\"2112\",\"2113\",\"2114\"\
    ,\"2115\",\"2116\",\"2117\",\"2118\",\"2119\",\"2120\",\"2121\",\"2122\",\"2123\"\
    ,\"2124\",\"2125\",\"2126\",\"2127\",\"2128\",\"2129\",\"2130\",\"2131\",\"2132\"\
    ,\"2133\",\"2134\",\"2135\",\"2136\",\"2137\",\"2138\",\"\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttuqzdcg.cpp:22:1003: warning: missing terminating \" character\n\
    \   22 |     std::string years[12] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\"\
    ,\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"\
    ,\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"\
    ,\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\"\
    ,\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"\
    ,\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\"\
    ,\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\"\
    ,\"2059\",\"2060\",\"2061\",\"2062\",\"2063\",\"2064\",\"2065\",\"2066\",\"2067\"\
    ,\"2068\",\"2069\",\"2070\",\"2071\",\"2072\",\"2073\",\"2074\",\"2075\",\"2076\"\
    ,\"2077\",\"2078\",\"2079\",\"2080\",\"2081\",\"2082\",\"2083\",\"2084\",\"2085\"\
    ,\"2086\",\"2087\",\"2088\",\"2089\",\"2090\",\"2091\",\"2092\",\"2093\",\"2094\"\
    ,\"2095\",\"2096\",\"2097\",\"2098\",\"2099\",\"2100\",\"2101\",\"2102\",\"2103\"\
    ,\"2104\",\"2105\",\"2106\",\"2107\",\"2108\",\"2109\",\"2110\",\"2111\",\"2112\"\
    ,\"2113\",\"2114\",\"2115\",\"2116\",\"2117\",\"2118\",\"2119\",\"2120\",\"2121\"\
    ,\"2122\",\"2123\",\"2124\",\"2125\",\"2126\",\"2127\",\"2128\",\"2129\",\"2130\"\
    ,\"2131\",\"2132\",\"2133\",\"2134\",\"2135\",\"2136\",\"2137\",\"2138\",\"\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) return false;\n    }\n    if (month == 3 && day\
    \ > 31) return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpybca7mch: /tmp/tmpybca7mch.cpp:45: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4zxog97k: /tmp/tmp4zxog97k.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string days[31]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\",\
    \ \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\"\
    , \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\"\
    , \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"};\n    std::string years[12]\
    \ = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\"\
    , \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\"\
    , \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\"\
    , \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\"\
    , \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\"\
    , \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\"\
    , \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\"\
    , \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\"\
    , \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\"\
    , \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\"\
    , \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\"\
    , \"2119\", \"2120\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8sz7l34q.cpp:21:990: warning: missing terminating \" character\n\
    \   21 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\"\
    , \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\"\
    , \"2116\", \"2117\", \"2118\", \"2119\", \"2120\n      |                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year\
    \ < 1 || year > 2020) {\n        return false;\n    }\n    if (month == 2) {\n\
    \        if (day > 29) {\n            return false;\n        }\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day >\
    \ 30) {\n            return false;\n        }\n    }\n    if (month == 1) {\n\
    \        if (day > 31) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnk4ykxey: /tmp/tmpnk4ykxey.cpp:45: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpumz0ln8c: /tmp/tmpumz0ln8c.cpp:23: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::string date_str = date;\n    std::istringstream\
    \ iss(date_str);\n    iss >> day >> month >> year;\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n      \
    \  return false;\n    }\n    if (year < 1000 || year > 9999) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpop0ooc7g: /tmp/tmpop0ooc7g.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmporbidra_: /tmp/tmporbidra_.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11 && day > 30){\n        return false;\n   \
    \ }\n    if(month == 1 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 1 && day > 29){\n        return false;\n    }\n    if(month == 3 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 5 && day > 31){\n      \
    \  return false;\n    }\n    if(month == 7 && day > 31){\n        return false;\n\
    \    }\n    if(month == 8 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 10 && day > 31){\n        return false;\n    }\n    if(month == 12 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 1 && day > 30){\n    \
    \    return false;\n    }\n    if(month == 3 && day > 30){\n        return false;\n\
    \    }\n    if(month == 5 && day > 30){\n        return false;\n    }\n    if(month\
    \ == 7 && day > 30){\n        return false;\n    }\n    if(month == 8 && day >\
    \ 30){\n        return false;\n    }\n    if(month == 10 && day > 30){\n     \
    \   return false;\n    }\n    if(month == 12 && day > 30){\n        return false;\n\
    \    }\n    if(month == 1 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 3 && day > 29){\n        return false;\n    }\n    if(month == 5 && day >\
    \ 29){\n        return false;\n    }\n    if(month == 7 && day > 29){\n      \
    \  return false;\n    }\n    if(month == 8 && day > 29){\n        return false;\n\
    \    }\n    if(month == 10 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 12 && day > 29){\n        return false;\n    }\n    if(month == 1 && day\
    \ > 28){\n        return false;\n    }\n    if(month == 3 && day > 28){\n    \
    \    return false;\n    }\n    if(month == 5 && day > 28){\n        return false;\n\
    \    }\n    if(month == 7 && day > 28){\n        return false;\n    }\n    if(month\
    \ == 8 && day > 28){\n        return false;\n    }\n    if(month == 10 && day\
    \ > 28){\n        return false;\n    }\n    if(month == 12 && day > 28){\n   \
    \     return false;\n    }\n    if(month == 1 && day > 27){\n        return false;\n\
    \    }\n    if(month == 3 && day > 27){\n        return false;\n    }\n    if(month\
    \ == 5 && \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3k3_kjwq.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp3k3_kjwq.cpp:130:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  130 | }\n      | ^\n/tmp/tmp3k3_kjwq.cpp:129:21: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  129 |     if(month == 5 &&\n   \
    \   |       ~             ^\n      |                     )\n  130 | }\n      |\
    \ ~                    \n/tmp/tmp3k3_kjwq.cpp:130:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  130 | }\n      | ^\n/tmp/tmp3k3_kjwq.cpp:130:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  130 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpuew9gr5t: /tmp/tmpuew9gr5t.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy1pbpkyp: /tmp/tmpy1pbpkyp.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >>\
    \ day >> month >> year;\n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n  \
    \  if (month == 2 && day > 29) {\n        valid = false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11 && day > 30) {\n        valid\
    \ = false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 && day > 31) {\n        valid = false;\n    }\n\
    \    if (month == 2) {\n        if (year % 400 == 0 || (year % 4 == 0 && year\
    \ % 100 != 0)) {\n            if (day > 29) {\n                valid = false;\n\
    \            }\n        } else {\n            if (day > 28) {\n              \
    \  valid = false;\n            }\n        }\n    }\n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphdyngssr: /tmp/tmphdyngssr.cpp:54: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1kl_ji7_: /tmp/tmp1kl_ji7_.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    std::string date_str = date;\n    \n    if (date_str.empty())\
    \ {\n        valid = false;\n    }\n    \n    int day;\n    int month;\n    int\
    \ year;\n    \n    std::stringstream ss(date_str);\n    \n    ss >> month;\n \
    \   \n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n    \n\
    \    ss >> day;\n    \n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    \n    ss >> year;\n    \n    if (year < 1000 || year > 3000) {\n \
    \       valid = false;\n    }\n    \n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaifmngv_: /tmp/tmpaifmngv_.cpp:55: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp02namyis: /tmp/tmp02namyis.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpeu2b3eey: /tmp/tmpeu2b3eey.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpouko6jze: /tmp/tmpouko6jze.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9qgoncz1: /tmp/tmp9qgoncz1.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxigock77: /tmp/tmpxigock77.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppqgrsf9o: /tmp/tmppqgrsf9o.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n \
    \   if (month == 2) {\n        if (day > 29) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppwzh37hx: /tmp/tmppwzh37hx.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpua4r1z_t: /tmp/tmpua4r1z_t.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
