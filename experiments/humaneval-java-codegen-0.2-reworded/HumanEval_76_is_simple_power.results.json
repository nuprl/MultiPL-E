{
  "name": "HumanEval_76_is_simple_power",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x==-1 && n%2==0) return false;\n        if(x==-1 && n%2==1) return false;\n        if(x==-n) return false;\n        if(x==-1) return false;\n        if(x==-2 && n%4==0) return false;\n        if(x==-2 && n%4==1) return false;\n        if(x==-2 && n%4==2) return false;\n        if(x==-2 && n%4==3) return false;\n        if(x==-3 && n%6==0) return false;\n        if(x==-3 && n%6==1) return false;\n        if(x==-3 && n%6==2) return false;\n        if(x==-3 && n%6==3) return false;\n        if(x==-3 && n%6==4) return false;\n        if(x==-3 && n%6==5) return false;\n        if(x==-5 && n%10==0) return false;\n        if(x==-5 && n%10==1) return false;\n        if(x==-5 && n%10==2) return false;\n        if(x==-5 && n%10==3) return false;\n        if(x==-5 && n%10==4) return false;\n        if(x==-5 && n%10==5) return false;\n        if(x==-5 && n%10==6) return false;\n        if(x==-5 && n%10==7) return false;\n        if(x==-5 && n%10==8) return false;\n        if(x==-5 && n%10==9) return false;\n        if(x==-7 && n%14==0) return false;\n        if(x==-7 && n%14==1) return false;\n        if(x==-7 && n%14==\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpnte9lz9x.java:57: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8bpsst.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        long nn = n;\n        while (nn % 2 == 0) {\n            nn /= 2;\n        }\n        while (nn % 3 == 0) {\n            nn /= 3;\n        }\n        while (nn % 5 == 0) {\n            nn /= 5;\n        }\n        while (nn % 7 == 0) {\n            nn /= 7;\n        }\n        while (nn % 11 == 0) {\n            nn /= 11;\n        }\n        while (nn % 13 == 0) {\n            nn /= 13;\n        }\n        while (nn % 17 == 0) {\n            nn /= 17;\n        }\n        while (nn % 19 == 0) {\n            nn /= 19;\n        }\n        while (nn % 23 == 0) {\n            nn /= 23;\n        }\n        while (nn % 29 == 0) {\n            nn /= 29;\n        }\n        while (nn % 31 == 0) {\n            nn /= 31;\n        }\n        while (nn % 37 == 0) {\n            nn /= 37;\n        }\n        while (nn % 41 == 0) {\n            nn /= 41;\n        }\n        while (nn % 43 == 0) {\n            nn /= 43;\n        }\n        while (nn % 47 == 0) {\n            nn /= 47;\n        }\n        while (nn % 53 == 0) {\n            nn /= 53;\n        }\n        while (nn % 59 == 0) {\n            nn /= 59;\n        }\n        while (nn % 61 == 0) {\n            nn /= 61;\n        }\n        while (nn % 67 == 0) {\n            nn /= 67;\n        }\n        while (nn % 71 == 0) {\n            nn /= 71;\n        }\n        while (nn % 73 == 0) {\n            nn /= 73;\n        }\n        while (nn % 79 == 0) {\n            nn /= 79;\n        }\n        while (nn % 83 ==\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpi33yffy6.java:97: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8bpsst.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == 1 || x == n || x == n*n || x == n*n*n || x == n*n*n*n || x == n*n*n*n*n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long t = x / n;\n        if (t == 1) return true;\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pk9cqg8.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long i = 2;\n        while (i < n) {\n            if (x % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh_i2erg.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8tdo9jv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n < 0) return false;\n        if (n == 0) return false;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long x_n = x;\n        while (x_n > 1) {\n            x_n /= n;\n        }\n        return x_n == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvfg79tv.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==0) return false;\n        if(x==1) return true;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x%n==0) return false;\n        if(n%x==0) return false;\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_c8fv31.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n) || (x == n * n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcwg1ghnq.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==0) return false;\n        if(x==1) return true;\n        if(x==n) return true;\n        if(x==n*n) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpqlkus8gf.java:46: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1)\n            return true;\n        if(x == n)\n            return true;\n        if(x % n != 0)\n            return false;\n        long x_n = x;\n        while(x_n % n == 0)\n            x_n /= n;\n        return x_n == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kh2wxns.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(x==n) return true;\n        if(x==-1 && n%2==0) return true;\n        if(x==-1 && n%2==1) return false;\n        if(x==-n) return true;\n        if(x==-1 && n==1) return true;\n        if(x==-1 && n==-1) return true;\n        if(x==-1 && n==-2) return true;\n        if(x==-1 && n==-3) return true;\n        if(x==-1 && n==-4) return true;\n        if(x==-1 && n==-5) return true;\n        if(x==-1 && n==-6) return true;\n        if(x==-1 && n==-7) return true;\n        if(x==-1 && n==-8) return true;\n        if(x==-1 && n==-9) return true;\n        if(x==-1 && n==-10) return true;\n        if(x==-1 && n==-11) return true;\n        if(x==-1 && n==-12) return true;\n        if(x==-1 && n==-13) return true;\n        if(x==-1 && n==-14) return true;\n        if(x==-1 && n==-15) return true;\n        if(x==-1 && n==-16) return true;\n        if(x==-1 && n==-17) return true;\n        if(x==-1 && n==-18) return true;\n        if(x==-1 && n==-19) return true;\n        if(x==-1 && n==-20) return true;\n        if(x==-1 && n==-21) return true;\n        if(x==-1 && n==-22) return true;\n        if(x==-1 && n==-23) return true;\n        if(x==-1 && n==-24) return true;\n        if(x==-1\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpg1xrar1p.java:57: error: ')' expected\n        if(x==-1\n                ^\n/tmp/tmpg1xrar1p.java:58: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (x == n) return true;\n        if (x == n * n) return true;\n        if (x == n * n * n) return true;\n        if (x == n * n * n * n) return true;\n        if (x == n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n *\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "/tmp/tmpujp8uowc.java:48: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n % 2 == 0) return false;\n        if (x % 2 == 0) return false;\n        if (x % 3 == 0) return false;\n        if (x % 5 == 0) return false;\n        if (x % 7 == 0) return false;\n        if (x % 11 == 0) return false;\n        if (x % 13 == 0) return false;\n        if (x % 17 == 0) return false;\n        if (x % 19 == 0) return false;\n        if (x % 23 == 0) return false;\n        if (x % 29 == 0) return false;\n        if (x % 31 == 0) return false;\n        if (x % 37 == 0) return false;\n        if (x % 41 == 0) return false;\n        if (x % 43 == 0) return false;\n        if (x % 47 == 0) return false;\n        if (x % 53 == 0) return false;\n        if (x % 59 == 0) return false;\n        if (x % 61 == 0) return false;\n        if (x % 67 == 0) return false;\n        if (x % 71 == 0) return false;\n        if (x % 73 == 0) return false;\n        if (x % 79 == 0) return false;\n        if (x % 83 == 0) return false;\n        if (x % 89 == 0) return false;\n        if (x % 97 == 0) return false;\n        if (x % 101 == 0) return false;\n        if (x % 103 == 0) return false;\n        if (x % 107 == 0) return false;\n        if (x % 109 == 0) return false;\n        if (x % 113 == 0) return false;\n        if (x % 127 == 0) return false;\n        if (x % 131 == 0) return false;\n        if (x % 137 == 0) return false;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpph52qmo3.java:66: error: '(' expected\n        if\n          ^\n/tmp/tmpph52qmo3.java:67: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) || (x % n == 0 && isSimplePower(x / n, n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long x_pow_n = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                x_pow_n *= x;\n                if (x_pow_n == x) return true;\n            }\n            x_pow_n *= x;\n            n /= 2;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkre_qxr.java:44)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == (n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8s_2bvo.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (x % n == 0 && x != n) return false;\n        if (x == n) return true;\n        if (x == n * n) return true;\n        if (x == n * n * n) return true;\n        if (x == n * n * n * n) return true;\n        if (x == n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n *\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpus7ikn6_.java:48: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        long t = x;\n        while (t % n == 0) {\n            t /= n;\n        }\n        return t == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8bpsst.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) return false;\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == n * n) return true;\n        if (x == n * n * n) return true;\n        if (x == n * n * n * n) return true;\n        if (x == n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n *\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "/tmp/tmpn29pg4br.java:46: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == -1) return false;\n        if (x == -n) return false;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return false;\n        if (n == -1) return false;\n        if (n == 2) return false;\n        if (n == -2) return false;\n        if (n == 3) return false;\n        if (n == -3) return false;\n        if (n == 4) return false;\n        if (n == -4) return false;\n        if (n == 5) return false;\n        if (n == -5) return false;\n        if (n == 6) return false;\n        if (n == -6) return false;\n        if (n == 7) return false;\n        if (n == -7) return false;\n        if (n == 8) return false;\n        if (n == -8) return false;\n        if (n == 9) return false;\n        if (n == -9) return false;\n        if (n == 10) return false;\n        if (n == -10) return false;\n        if (n == 11) return false;\n        if (n == -11) return false;\n        if (n == 12) return false;\n        if (n == -12) return false;\n        if (n == 13) return false;\n        if (n == -13) return false;\n        if (n == 14) return false;\n        if (n == -14) return false;\n        if (n == 15) return false;\n        if (n == -15) return false;\n        if (n == 16) return false;\n        if (n == -16) return false;\n        if (n == 17) return false;\n        if (n == -17) return false;\n        if (n == 18) return false;\n        if (n == -18) return false;\n        if (n == 19) return false;\n        if (n == -19) return false;\n        if (n == 20)\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "/tmp/tmplf7t36ao.java:71: error: illegal start of statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == 0) return false;\n        if(x < 0) return false;\n        if(n == 0) return false;\n        if(x == n) return true;\n        if(x % n != 0) return false;\n        long y = x;\n        while(y != 1) {\n            if(y % n != 0) return false;\n            y /= n;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long x_pow_n = 1;\n        while (x_pow_n < x) {\n            x_pow_n *= n;\n        }\n        return x_pow_n == x;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long i = 2;\n        while (i <= n) {\n            if (x == i) {\n                return true;\n            }\n            if (x % i != 0) {\n                return false;\n            }\n            i++;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps62m2ic7.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long x_pow_n = 1;\n        for (long i = 0; i < n; i++) {\n            x_pow_n *= x;\n        }\n        return x_pow_n == x;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbn5u_hfy.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return true;\n        }\n        if (n == 24) {\n            return true;\n        }\n        if (n == 25) {\n            return true;\n        }\n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpbsxr3h8d.java:117: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrcupu_q.java:41)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return false;\n        }\n        if (n == 3) {\n            return false;\n        }\n        if (n == 4) {\n            return false;\n        }\n        if (n == 5) {\n            return false;\n        }\n        if (n == 6) {\n            return false;\n        }\n        if (n == 7) {\n            return false;\n        }\n        if (n == 8) {\n            return false;\n        }\n        if (n == 9) {\n            return false;\n        }\n        if (n == 10) {\n            return false;\n        }\n        if (n == 11) {\n            return false;\n        }\n        if (n == 12) {\n            return false;\n        }\n        if (n == 13) {\n            return false;\n        }\n        if (n == 14) {\n            return false;\n        }\n        if (n == 15) {\n            return false;\n        }\n        if (n == 16) {\n            return false;\n        }\n        if (n == 17) {\n            return false;\n        }\n        if (n == 18) {\n            return false;\n        }\n        if (n == 19) {\n            return false;\n        }\n        if (n == 20) {\n            return false;\n        }\n        if (n == 21) {\n            return false;\n        }\n        if (n == 22) {\n            return false;\n        }\n        if (n == 23) {\n            return false;\n        }\n        if (n == 24) {\n            return false;\n        }\n        if (n == 25) {\n            return false;\n        }\n        if (n == 26) {\n            return false;\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "/tmp/tmph8dk8c_x.java:116: error: '(' expected\n        if\n          ^\n/tmp/tmph8dk8c_x.java:117: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == n * n) {\n            return true;\n        }\n        if (x == n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpr9lrgu28.java:80: error: ')' expected\n        if (x == n * n * n * n * n * n * n * n * n\n                                                  ^\n/tmp/tmpr9lrgu28.java:81: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == n || (x > 1 && isSimplePower(x, n / 2) && (x & 1) == 0);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimplePower(tmpmm1wlvad.java:26)\n\tat Problem.isSimp",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long i = 2;\n        while (i <= n) {\n            if (x % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmvcikdzu.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == n || (x > 1 && isSimplePower(x, n/x));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimp",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1)\n            return true;\n        if(x == n)\n            return true;\n        if(x % n != 0)\n            return false;\n        long i = 2;\n        while(i <= n) {\n            if(x % i == 0) {\n                if(x / i != i)\n                    return false;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4jzycs5y.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3l8b0x1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) && isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpefpbvu89.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == 0) return false;\n        if(x % n != 0) return false;\n        long temp = x;\n        while(temp % n == 0) {\n            temp = temp / n;\n        }\n        return temp == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long temp = x;\n        while (temp % n == 0) {\n            temp /= n;\n        }\n        return temp == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == n * n) {\n            return true;\n        }\n        if (x == n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpwbqpstri.java:74: error: ')' expected\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n\n                                                                  ^\n/tmp/tmpwbqpstri.java:75: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n) || (x == n * n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcwg1ghnq.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long y = x;\n        while (y % n == 0) {\n            y /= n;\n        }\n        return y == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x == 0) return false;\n        if(x % n != 0) return false;\n        if(n == 0) return false;\n        if(n == 1) return true;\n        if(n == 2) return true;\n        if(n == 3) return true;\n        if(n == 4) return true;\n        if(n == 5) return true;\n        if(n == 6) return true;\n        if(n == 7) return true;\n        if(n == 8) return true;\n        if(n == 9) return true;\n        if(n == 10) return true;\n        if(n == 11) return true;\n        if(n == 12) return true;\n        if(n == 13) return true;\n        if(n == 14) return true;\n        if(n == 15) return true;\n        if(n == 16) return true;\n        if(n == 17) return true;\n        if(n == 18) return true;\n        if(n == 19) return true;\n        if(n == 20) return true;\n        if(n == 21) return true;\n        if(n == 22) return true;\n        if(n == 23) return true;\n        if(n == 24) return true;\n        if(n == 25) return true;\n        if(n == 26) return true;\n        if(n == 27) return true;\n        if(n == 28) return true;\n        if(n == 29) return true;\n        if(n == 30) return true;\n        if(n == 31) return true;\n        if(n == 32) return true;\n        if(n == 33) return true;\n        if(n == 34) return true;\n        if(n == 35) return true;\n        if(n == 36) return true;\n        if(n == 37) return true;\n        if(n == 38) return true;\n        if(n == 39) return true;\n        if(n == 40) return true;\n        if(n == 41) return true;\n        if(n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpijok9pja.java:72: error: ')' expected\n        if(n\n            ^\n/tmp/tmpijok9pja.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x % n != 0) return false;\n        return isSimplePower(x/n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        long result = x;\n        while (result % n == 0) {\n            result /= n;\n        }\n        return result == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (x % 2 != 0) {\n            return false;\n        }\n        if (n % 2 != 0) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpg4vxlztj.java:115: error: illegal start of expression\n    }\n    ^\n/tmp/tmpg4vxlztj.java:116: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8bpsst.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(x==n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-x) return false;\n        if(x==-x%n) return true;\n        if(x==-x%n+n) return true;\n        if(x==-x%n-n) return true;\n        if(x==-x%n+n*2) return true;\n        if(x==-x%n-n*2) return true;\n        if(x==-x%n+n*3) return true;\n        if(x==-x%n-n*3) return true;\n        if(x==-x%n+n*4) return true;\n        if(x==-x%n-n*4) return true;\n        if(x==-x%n+n*5) return true;\n        if(x==-x%n-n*5) return true;\n        if(x==-x%n+n*6) return true;\n        if(x==-x%n-n*6) return true;\n        if(x==-x%n+n*7) return true;\n        if(x==-x%n-n*7) return true;\n        if(x==-x%n+n*8) return true;\n        if(x==-x%n-n*8) return true;\n        if(x==-x%n+n*9) return true;\n        if(x==-x%n-n*9) return true;\n        if(x==-x%n+n*10) return true;\n        if(x==-x%n-n*10) return true;\n        if(x==-x%n+n*11) return true;\n        if(x==-x%n-n*11) return true;\n        if(x==-x%n+n*12) return true;\n        if(x==-x%n-n*12) return true;\n        \n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp9zgq6o5e.java:58: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 || (x % n == 0 && isSimplePower(x, n - 1));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkt2lhoaf.java:32)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x < n) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 4) return true;\n        if (n == 5) return true;\n        if (n == 6) return true;\n        if (n == 7) return true;\n        if (n == 8) return true;\n        if (n == 9) return true;\n        if (n == 10) return true;\n        if (n == 11) return true;\n        if (n == 12) return true;\n        if (n == 13) return true;\n        if (n == 14) return true;\n        if (n == 15) return true;\n        if (n == 16) return true;\n        if (n == 17) return true;\n        if (n == 18) return true;\n        if (n == 19) return true;\n        if (n == 20) return true;\n        if (n == 21) return true;\n        if (n == 22) return true;\n        if (n == 23) return true;\n        if (n == 24) return true;\n        if (n == 25) return true;\n        if (n == 26) return true;\n        if (n == 27) return true;\n        if (n == 28) return true;\n        if (n == 29) return true;\n        if (n == 30) return true;\n        if (n == 31) return true;\n        if (n == 32) return true;\n        if (n == 33) return true;\n        if (n == 34) return true;\n        if (n == 35) return true;\n        if (n == 36) return true;\n        if (n == 37) return true;\n        if (n == 38) return true;\n        if (n == 39) return true;\n        if (n == 40) return true;\n        if (n == 41) return true;\n        if (n == 42\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmp5wu3246w.java:72: error: ')' expected\n        if (n == 42\n                   ^\n/tmp/tmp5wu3246w.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3l8b0x1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long t = n;\n        while (t != 1) {\n            if (x % t != 0) {\n                return false;\n            }\n            t = t / 2;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_3whvvq.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1)\n            return true;\n        if(x==1)\n            return false;\n        if(x==n)\n            return true;\n        if(x==n*n)\n            return true;\n        if(x==n*n*n)\n            return true;\n        if(x==n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n            return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp771h4b4g.java:62: error: ')' expected\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n\n                                               ^\n/tmp/tmp771h4b4g.java:63: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(x<0) return false;\n        if(n==0) return false;\n        if(n==1) return true;\n        if(x==n) return true;\n        if(x==n-1) return true;\n        if(x==n+1) return true;\n        if(x==n*n) return true;\n        if(x==n*n-1) return true;\n        if(x==n*n+1) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n-1) return true;\n        if(x==n*n*n+1) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n-1) return true;\n        if(x==n*n*n*n+1) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n*n*n*n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpbsz0h5cz.java:54: error: ')' expected\n        if(x==n*n*n*n*n*n*n*n\n                             ^\n/tmp/tmpbsz0h5cz.java:55: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == (n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8s_2bvo.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n || x == n * n * n * n * n || x == n * n * n * n * n * n || x == n * n * n * n * n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long x_n = x / n;\n        return isSimplePower(x_n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9mak_68.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) && isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpefpbvu89.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : x == 1 ? true : x == n ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp39yojcx7.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpmg458xz5.java:70: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n < 0) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return true;\n        }\n        if (n == 24) {\n            return true;\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpgecnq3km.java:116: error: '(' expected\n        if\n          ^\n/tmp/tmpgecnq3km.java:117: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(x==n) return true;\n        if(x%n==0) return false;\n        return isSimplePower(x, n/2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi77cuokf.java:33)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long tmp = x;\n        while (tmp != 1) {\n            if (tmp % n != 0) {\n                return false;\n            }\n            tmp /= n;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 || (x % n == 0 && isSimplePower(x, n / 2));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyleapq9w.java:34)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == (n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8s_2bvo.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long x_n = x / n;\n        return isSimplePower(x_n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == n * n) {\n            return true;\n        }\n        if (x == n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp91tubr8z.java:80: error: ')' expected\n        if (x == n * n * n * n * n * n * n * n * n\n                                                  ^\n/tmp/tmp91tubr8z.java:81: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x == n*n) return true;\n        if(x == n*n*n) return true;\n        if(x == n*n*n*n) return true;\n        if(x == n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmphu7ut8_r.java:45: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        long t = x;\n        while (t % n == 0) {\n            t /= n;\n        }\n        return t == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n)) || (x == (n * n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cpofz2c.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0 && x / n == 0) return false;\n        if (x % n == 0 && x / n == 0 && x / n ==\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpgkg3wqcj.java:44: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        long i = 0;\n        while (x % n == 0) {\n            x /= n;\n            i++;\n        }\n        return i > 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsd6ge8yl.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8tdo9jv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo5m64e_u.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp4_cz5lb0.java:66: error: '(' expected\n        if\n          ^\n/tmp/tmp4_cz5lb0.java:67: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == n * n) {\n            return true;\n        }\n        if (x == n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "/tmp/tmpwbqpstri.java:74: error: ')' expected\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n\n                                                                  ^\n/tmp/tmpwbqpstri.java:75: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long r = x / n;\n        return isSimplePower(r, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x == -1) return false;\n        if(x == -n) return false;\n        if(x == 0) return false;\n        if(n == 0) return false;\n        if(n == 1) return true;\n        if(n == -1) return false;\n        if(n == 2) return true;\n        if(n == -2) return false;\n        if(n == 3) return true;\n        if(n == -3) return false;\n        if(n == 4) return true;\n        if(n == -4) return false;\n        if(n == 5) return true;\n        if(n == -5) return false;\n        if(n == 6) return true;\n        if(n == -6) return false;\n        if(n == 7) return true;\n        if(n == -7) return false;\n        if(n == 8) return true;\n        if(n == -8) return false;\n        if(n == 9) return true;\n        if(n == -9) return false;\n        if(n == 10) return true;\n        if(n == -10) return false;\n        if(n == 11) return true;\n        if(n == -11) return false;\n        if(n == 12) return true;\n        if(n == -12) return false;\n        if(n == 13) return true;\n        if(n == -13) return false;\n        if(n == 14) return true;\n        if(n == -14) return false;\n        if(n == 15) return true;\n        if(n == -15) return false;\n        if(n == 16) return true;\n        if(n == -16) return false;\n        if(n == 17) return true;\n        if(n == -17) return false;\n        if(n == 18) return true;\n        if(n == -18) return false;\n        if(n == 19) return true;\n        if(n == -19) return false;\n        if(n == 20)\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpfhfryp4n.java:71: error: illegal start of statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) && isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpefpbvu89.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (x % n != 0) return false;\n        if (n == 1) return true;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 4) return true;\n        if (n == 5) return true;\n        if (n == 6) return true;\n        if (n == 7) return true;\n        if (n == 8) return true;\n        if (n == 9) return true;\n        if (n == 10) return true;\n        if (n == 11) return true;\n        if (n == 12) return true;\n        if (n == 13) return true;\n        if (n == 14) return true;\n        if (n == 15) return true;\n        if (n == 16) return true;\n        if (n == 17) return true;\n        if (n == 18) return true;\n        if (n == 19) return true;\n        if (n == 20) return true;\n        if (n == 21) return true;\n        if (n == 22) return true;\n        if (n == 23) return true;\n        if (n == 24) return true;\n        if (n == 25) return true;\n        if (n == 26) return true;\n        if (n == 27) return true;\n        if (n == 28) return true;\n        if (n == 29) return true;\n        if (n == 30) return true;\n        if (n == 31) return true;\n        if (n == 32) return true;\n        if (n == 33) return true;\n        if (n == 34) return true;\n        if (n == 35) return true;\n        if (n == 36) return true;\n        if (n == 37) return true;\n        if (n == 38) return true;\n        if (n == 39) return true;\n        if (n == 40) return true;\n        if (n == 41) return true;\n        if (n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpa_r_tcnm.java:72: error: ')' expected\n        if (n\n             ^\n/tmp/tmpa_r_tcnm.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long r = x;\n        while (r % n == 0) {\n            r /= n;\n        }\n        return r == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return true;\n        if (x % n == 0 && x / n == 1) return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmp1plzeqhq.java:55: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n < 0) return false;\n        if (n % 2 == 0) return false;\n        if (n % 2 == 1) return true;\n        if (n % 3 == 0) return false;\n        if (n % 3 == 1) return true;\n        if (n % 3 == 2) return false;\n        if (n % 5 == 0) return false;\n        if (n % 5 == 1) return true;\n        if (n % 5 == 2) return false;\n        if (n % 5 == 3) return true;\n        if (n % 5 == 4) return false;\n        if (n % 7 == 0) return false;\n        if (n % 7 == 1) return true;\n        if (n % 7 == 2) return false;\n        if (n % 7 == 3) return true;\n        if (n % 7 == 4) return false;\n        if (n % 7 == 5) return true;\n        if (n % 7 == 6) return false;\n        if (n % 11 == 0) return false;\n        if (n % 11 == 1) return true;\n        if (n % 11 == 2) return false;\n        if (n % 11 == 3) return true;\n        if (n % 11 == 4) return false;\n        if (n % 11 == 5) return true;\n        if (n % 11 == 6) return false;\n        if (n % 11 == 7) return true;\n        if (n % 11 == 8) return false;\n        if (n % 11 == 9) return true;\n        if (n % 11 == 10) return false;\n        if (n % 13 == 0) return false;\n        if (n % 13 == 1) return true;\n        if (n % 13 == 2) return false;\n        if (n % 13 == 3) return true;\n        if (n % 13 == 4) return false;\n        if (n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpn1hyqjxg.java:66: error: ')' expected\n        if (n\n             ^\n/tmp/tmpn1hyqjxg.java:67: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(n==0) return false;\n        if(x==n) return true;\n        if(x%n==0) return false;\n        if(n%x==0) return false;\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_2t0whj.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmp4_cz5lb0.java:66: error: '(' expected\n        if\n          ^\n/tmp/tmp4_cz5lb0.java:67: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(x==n) return true;\n        if(x==n-1) return true;\n        if(x==n+1) return true;\n        if(x==n*n) return true;\n        if(x==n*n-1) return true;\n        if(x==n*n+1) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n-1) return true;\n        if(x==n*n*n+1) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n-1) return true;\n        if(x==n*n*n*n+1) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n-1) return true;\n        if(x==n*n*n*n*n*n*n*n+1) return true;\n        if(x==n*n*n*n*n*n*n*n*n) return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmp7_xgh1q1.java:53: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n)) || (x == (n * n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cpofz2c.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long i = 2;\n        while (i <= n) {\n            if (x == i) return true;\n            if (x % i != 0) return false;\n            i++;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2h_npi5.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long m = x / n;\n        if (m == 0) return false;\n        return isSimplePower(m, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x == 0) return false;\n        if(n == 0) return false;\n        if(n == 1) return false;\n        if(n == 2) return true;\n        if(n == 3) return false;\n        if(n == 4) return true;\n        if(n == 5) return false;\n        if(n == 6) return true;\n        if(n == 7) return false;\n        if(n == 8) return true;\n        if(n == 9) return false;\n        if(n == 10) return true;\n        if(n == 11) return false;\n        if(n == 12) return true;\n        if(n == 13) return false;\n        if(n == 14) return true;\n        if(n == 15) return false;\n        if(n == 16) return true;\n        if(n == 17) return false;\n        if(n == 18) return true;\n        if(n == 19) return false;\n        if(n == 20) return true;\n        if(n == 21) return false;\n        if(n == 22) return true;\n        if(n == 23) return false;\n        if(n == 24) return true;\n        if(n == 25) return false;\n        if(n == 26) return true;\n        if(n == 27) return false;\n        if(n == 28) return true;\n        if(n == 29) return false;\n        if(n == 30) return true;\n        if(n == 31) return false;\n        if(n == 32) return true;\n        if(n == 33) return false;\n        if(n == 34) return true;\n        if(n == 35) return false;\n        if(n == 36) return true;\n        if(n == 37) return false;\n        if(n == 38) return true;\n        if(n == 39) return false;\n        if(n == 40) return true;\n        if(n == 41) return false;\n        if(n == 42) return true;\n        if(n == 43\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmpyceyjcgp.java:72: error: ')' expected\n        if(n == 43\n                  ^\n/tmp/tmpyceyjcgp.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long i = 0;\n        while (x % n == 0) {\n            x /= n;\n            i++;\n        }\n        return i == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu7n62g8j.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n || x == n * n) ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckomflw1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwn5tk5dl.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kh2wxns.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x == -1) return false;\n        if(x == -n) return false;\n        if(x == 0) return false;\n        if(n == 0) return false;\n        if(n == 1) return true;\n        if(n == -1) return false;\n        if(n == 2) return true;\n        if(n == -2) return false;\n        if(n == 3) return true;\n        if(n == -3) return false;\n        if(n == 4) return true;\n        if(n == -4) return false;\n        if(n == 5) return true;\n        if(n == -5) return false;\n        if(n == 6) return true;\n        if(n == -6) return false;\n        if(n == 7) return true;\n        if(n == -7) return false;\n        if(n == 8) return true;\n        if(n == -8) return false;\n        if(n == 9) return true;\n        if(n == -9) return false;\n        if(n == 10) return true;\n        if(n == -10) return false;\n        if(n == 11) return true;\n        if(n == -11) return false;\n        if(n == 12) return true;\n        if(n == -12) return false;\n        if(n == 13) return true;\n        if(n == -13) return false;\n        if(n == 14) return true;\n        if(n == -14) return false;\n        if(n == 15) return true;\n        if(n == -15) return false;\n        if(n == 16) return true;\n        if(n == -16) return false;\n        if(n == 17) return true;\n        if(n == -17) return false;\n        if(n == 18) return true;\n        if(n == -18) return false;\n        if(n == 19) return true;\n        if(n == -19) return false;\n        if(n == 20)\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292733,
      "stdout": "",
      "stderr": "/tmp/tmpfhfryp4n.java:71: error: illegal start of statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) || (x % n == 0 && isSimplePower(x / n, n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwn5tk5dl.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3l8b0x1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long rem = x % n;\n        return isSimplePower(rem, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimp",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == -1) {\n            return false;\n        }\n        if (n < 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x < n) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpceeiflh1.java:64)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(n==0) return false;\n        if(x==0) return false;\n        if(x==1) return true;\n        if(x==n) return true;\n        if(x==n*n) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmpbndpdz6c.java:48: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long r = x / n;\n        return isSimplePower(r, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppf27ff4f.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == n * n) return true;\n        if (x == n * n * n) return true;\n        if (x == n * n * n * n) return true;\n        if (x == n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return true;\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) return\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmp9bdk3gtg.java:45: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x == 0) return false;\n        if(n == 0) return false;\n        if(n == 1) return true;\n        if(x % n != 0) return false;\n        if(n % 2 == 0) return false;\n        if(x % 2 == 0) return false;\n        if(x % 2 == 1) return false;\n        if(n % 2 == 1) return false;\n        if(n % 3 == 0) return false;\n        if(x % 3 == 0) return false;\n        if(x % 3 == 1) return false;\n        if(n % 3 == 1) return false;\n        if(n % 4 == 0) return false;\n        if(x % 4 == 0) return false;\n        if(x % 4 == 1) return false;\n        if(n % 4 == 1) return false;\n        if(n % 5 == 0) return false;\n        if(x % 5 == 0) return false;\n        if(x % 5 == 1) return false;\n        if(n % 5 == 1) return false;\n        if(n % 6 == 0) return false;\n        if(x % 6 == 0) return false;\n        if(x % 6 == 1) return false;\n        if(n % 6 == 1) return false;\n        if(n % 7 == 0) return false;\n        if(x % 7 == 0) return false;\n        if(x % 7 == 1) return false;\n        if(n % 7 == 1) return false;\n        if(n % 8 == 0) return false;\n        if(x % 8 == 0) return false;\n        if(x % 8 == 1) return false;\n        if(n % 8 == 1) return false;\n        if(n % 9 == 0) return false;\n        if(x % 9 == 0) return false;\n        if(x % 9 == 1) return false;\n        if(n % 9 == 1) return false;\n        if(n % 10 == 0) return false;\n        if(x % 10 == 0) return false;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmp56dr54lz.java:66: error: '(' expected\n        if\n          ^\n/tmp/tmp56dr54lz.java:67: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (x % n == 0) {\n            return true;\n        }\n        if (x % n == 0 && x / n != 1) {\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppicutf3n.java:52)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n || x == n * n * n * n * n || x == n * n * n * n * n * n || x == n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmp59amtyqq.java:26: error: ')' expected\n        return (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n || x == n * n * n * n * n || x == n * n * n * n * n * n || x == n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n || x == n * n * n * n * n || x == n * n * n * n * n * n || x == n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "/tmp/tmp9__7fjxo.java:26: error: ')' expected\n        return (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n || x == n * n * n * n * n || x == n * n * n * n * n * n || x == n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n || x\n
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long nn = n;\n        while (nn > 1) {\n            if (x % nn != 0) {\n                return false;\n            }\n            nn /= 2;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1znilsyd.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n || x == n * n) ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckomflw1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == 1 || x == n || x == n*n || x == n*n*n || x == n*n*n*n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long t = x;\n        while (t != 1) {\n            t = t / n;\n            if (t == 1) return true;\n            if (t == 0) return false;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9y6q9tw.java:46)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long l = 0;\n        while (x > 1) {\n            l++;\n            x /= n;\n        }\n        return l == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpacylpic3.java:37)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n % 2 == 0) return false;\n        if (n % 2 == 1) return true;\n        if (n % 3 == 0) return false;\n        if (n % 3 == 1) return true;\n        if (n % 3 == 2) return false;\n        if (n % 4 == 0) return false;\n        if (n % 4 == 1) return true;\n        if (n % 4 == 2) return false;\n        if (n % 4 == 3) return true;\n        if (n % 5 == 0) return false;\n        if (n % 5 == 1) return true;\n        if (n % 5 == 2) return false;\n        if (n % 5 == 3) return true;\n        if (n % 5 == 4) return false;\n        if (n % 6 == 0) return false;\n        if (n % 6 == 1) return true;\n        if (n % 6 == 2) return false;\n        if (n % 6 == 3) return true;\n        if (n % 6 == 4) return false;\n        if (n % 6 == 5) return true;\n        if (n % 7 == 0) return false;\n        if (n % 7 == 1) return true;\n        if (n % 7 == 2) return false;\n        if (n % 7 == 3) return true;\n        if (n % 7 == 4) return false;\n        if (n % 7 == 5) return true;\n        if (n % 7 == 6) return false;\n        if (n % 8 == 0) return false;\n        if (n % 8 == 1) return true;\n        if (n % 8 == 2) return false;\n        if (n % 8 == 3) return true;\n        if (n % 8 == 4) return false;\n        if (n % 8 == 5) return true;\n        if (n % 8 == 6) return false;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmpktlaydbw.java:66: error: '(' expected\n        if\n          ^\n/tmp/tmpktlaydbw.java:67: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==0) return false;\n        if(x==1) return true;\n        if(x==n) return true;\n        if(x==n*n) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmpzag7rq7e.java:46: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == (n * n)) || (x == (n * n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7h3nr1bq.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == -1) return false;\n        if (x == -n) return false;\n        if (x < 0) return false;\n        if (n < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 4) return true;\n        if (n == 5) return true;\n        if (n == 6) return true;\n        if (n == 7) return true;\n        if (n == 8) return true;\n        if (n == 9) return true;\n        if (n == 10) return true;\n        if (n == 11) return true;\n        if (n == 12) return true;\n        if (n == 13) return true;\n        if (n == 14) return true;\n        if (n == 15) return true;\n        if (n == 16) return true;\n        if (n == 17) return true;\n        if (n == 18) return true;\n        if (n == 19) return true;\n        if (n == 20) return true;\n        if (n == 21) return true;\n        if (n == 22) return true;\n        if (n == 23) return true;\n        if (n == 24) return true;\n        if (n == 25) return true;\n        if (n == 26) return true;\n        if (n == 27) return true;\n        if (n == 28) return true;\n        if (n == 29) return true;\n        if (n == 30) return true;\n        if (n == 31) return true;\n        if (n == 32) return true;\n        if (n == 33) return true;\n        if (n == 34) return true;\n        if (n == 35) return true;\n        if (n == 36) return true;\n        if (n == 37) return true;\n        if (n == 38) return true;\n        if (n == 39) return true;\n        if (n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmpfyn6es5q.java:72: error: ')' expected\n        if (n\n             ^\n/tmp/tmpfyn6es5q.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x<0) return false;\n        if(n<0) return false;\n        if(x<n) return false;\n        if(x%n!=0) return false;\n        long x_pow_n = 1;\n        while(n>0) {\n            if(n%2==1) {\n                x_pow_n = x_pow_n*x;\n            }\n            n = n/2;\n        }\n        return x_pow_n==x;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04rj7wfa.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long tmp = x;\n        while (tmp % n == 0) {\n            tmp /= n;\n        }\n        return tmp == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3tzaosv2.java:41)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long i = 2;\n        while (i <= n) {\n            if (x % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7qbekxu.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) || (x % n == 0 && isSimplePower(x / n, n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x % n == 0) {\n            return true;\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbbiegezt.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8tdo9jv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x % n == 0 && isSimplePower(x / n, n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_bed98l.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8tdo9jv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n == 3) {\n            return true;\n        }\n        if (n == 4) {\n            return true;\n        }\n        if (n == 5) {\n            return true;\n        }\n        if (n == 6) {\n            return true;\n        }\n        if (n == 7) {\n            return true;\n        }\n        if (n == 8) {\n            return true;\n        }\n        if (n == 9) {\n            return true;\n        }\n        if (n == 10) {\n            return true;\n        }\n        if (n == 11) {\n            return true;\n        }\n        if (n == 12) {\n            return true;\n        }\n        if (n == 13) {\n            return true;\n        }\n        if (n == 14) {\n            return true;\n        }\n        if (n == 15) {\n            return true;\n        }\n        if (n == 16) {\n            return true;\n        }\n        if (n == 17) {\n            return true;\n        }\n        if (n == 18) {\n            return true;\n        }\n        if (n == 19) {\n            return true;\n        }\n        if (n == 20) {\n            return true;\n        }\n        if (n == 21) {\n            return true;\n        }\n        if (n == 22) {\n            return true;\n        }\n        if (n == 23) {\n            return true;\n        }\n        if (n == 24) {\n            return true;\n        }\n        if (n == 25) {\n            return true;\n        }\n        if (n == 26) {\n            return true;\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmp4hcq3eth.java:116: error: '(' expected\n        if\n          ^\n/tmp/tmp4hcq3eth.java:117: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 4) return true;\n        if (n == 5) return true;\n        if (n == 6) return true;\n        if (n == 7) return true;\n        if (n == 8) return true;\n        if (n == 9) return true;\n        if (n == 10) return true;\n        if (n == 11) return true;\n        if (n == 12) return true;\n        if (n == 13) return true;\n        if (n == 14) return true;\n        if (n == 15) return true;\n        if (n == 16) return true;\n        if (n == 17) return true;\n        if (n == 18) return true;\n        if (n == 19) return true;\n        if (n == 20) return true;\n        if (n == 21) return true;\n        if (n == 22) return true;\n        if (n == 23) return true;\n        if (n == 24) return true;\n        if (n == 25) return true;\n        if (n == 26) return true;\n        if (n == 27) return true;\n        if (n == 28) return true;\n        if (n == 29) return true;\n        if (n == 30) return true;\n        if (n == 31) return true;\n        if (n == 32) return true;\n        if (n == 33) return true;\n        if (n == 34) return true;\n        if (n == 35) return true;\n        if (n == 36) return true;\n        if (n == 37) return true;\n        if (n == 38) return true;\n        if (n == 39) return true;\n        if (n == 40) return true;\n        if (n == 41) return true;\n        if (n == 42) return true;\n        if (n == 43\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmpmcqj2x06.java:72: error: ')' expected\n        if (n == 43\n                   ^\n/tmp/tmpmcqj2x06.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return false;\n        if (n == 2) return false;\n        if (n == 3) return false;\n        if (n == 4) return false;\n        if (n == 5) return false;\n        if (n == 6) return false;\n        if (n == 7) return false;\n        if (n == 8) return false;\n        if (n == 9) return false;\n        if (n == 10) return false;\n        if (n == 11) return false;\n        if (n == 12) return false;\n        if (n == 13) return false;\n        if (n == 14) return false;\n        if (n == 15) return false;\n        if (n == 16) return false;\n        if (n == 17) return false;\n        if (n == 18) return false;\n        if (n == 19) return false;\n        if (n == 20) return false;\n        if (n == 21) return false;\n        if (n == 22) return false;\n        if (n == 23) return false;\n        if (n == 24) return false;\n        if (n == 25) return false;\n        if (n == 26) return false;\n        if (n == 27) return false;\n        if (n == 28) return false;\n        if (n == 29) return false;\n        if (n == 30) return false;\n        if (n == 31) return false;\n        if (n == 32) return false;\n        if (n == 33) return false;\n        if (n == 34) return false;\n        if (n == 35) return false;\n        if (n == 36) return false;\n        if (n == 37) return false;\n        if (n == 38) return false;\n        if (n == 39) return false;\n        if (n == 40) return false;\n        if (n == 41) return false;\n        if (n == 42) return false;\n        if (n == 43\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmpiwcqmck8.java:72: error: ')' expected\n        if (n == 43\n                   ^\n/tmp/tmpiwcqmck8.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == (n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8s_2bvo.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg3l8b0x1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==n*n) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmpn7uvmv_i.java:46: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n || x == n * n * n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) return false;\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long l = n;\n        while (l != 0) {\n            if (x % l != 0) return false;\n            l = l / 2;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6z5lbie.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x<0) return false;\n        if(n<0) return false;\n        if(x%n==0) return false;\n        if(n%2==0) return false;\n        if(n==2) return true;\n        if(n==3) return true;\n        if(n==4) return true;\n        if(n==5) return true;\n        if(n==6) return true;\n        if(n==7) return true;\n        if(n==8) return true;\n        if(n==9) return true;\n        if(n==10) return true;\n        if(n==11) return true;\n        if(n==12) return true;\n        if(n==13) return true;\n        if(n==14) return true;\n        if(n==15) return true;\n        if(n==16) return true;\n        if(n==17) return true;\n        if(n==18) return true;\n        if(n==19) return true;\n        if(n==20) return true;\n        if(n==21) return true;\n        if(n==22) return true;\n        if(n==23) return true;\n        if(n==24) return true;\n        if(n==25) return true;\n        if(n==26) return true;\n        if(n==27) return true;\n        if(n==28) return true;\n        if(n==29) return true;\n        if(n==30) return true;\n        if(n==31) return true;\n        if(n==32) return true;\n        if(n==33) return true;\n        if(n==34) return true;\n        if(n==35) return true;\n        if(n==36) return true;\n        if(n==37) return true;\n        if(n==38) return true;\n        if(n==39) return true;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmp8w5svdym.java:72: error: '(' expected\n        if\n          ^\n/tmp/tmp8w5svdym.java:73: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n || x == n * n) ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckomflw1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n || x == n * n) ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckomflw1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrcupu_q.java:41)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long rem = x % n;\n        return isSimplePower(rem, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimplePower(tmpyokbaj5_.java:39)\n\tat Problem.isSimp",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==0) return false;\n        if(x==1) return true;\n        if(x==n) return true;\n        if(x==n*n) return true;\n        if(x==n*n*n) return true;\n        if(x==n*n*n*n) return true;\n        if(x==n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292730,
      "stdout": "",
      "stderr": "/tmp/tmpqlkus8gf.java:46: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8bpsst.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == (long) Math.pow(n, 1.0 / n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpucupj2pm.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (n < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (n % 3 == 0) {\n            return false;\n        }\n        if (n % 5 == 0) {\n            return false;\n        }\n        if (n % 7 == 0) {\n            return false;\n        }\n        if (n % 11 == 0) {\n            return false;\n        }\n        if (n % 13 == 0) {\n            return false;\n        }\n        if (n % 17 == 0) {\n            return false;\n        }\n        if (n % 19 == 0) {\n            return false;\n        }\n        if (n % 23 == 0) {\n            return false;\n        }\n        if (n % 29 == 0) {\n            return false;\n        }\n        if (n % 31 == 0) {\n            return false;\n        }\n        if (n % 37 == 0) {\n            return false;\n        }\n        if (n % 41 == 0) {\n            return false;\n        }\n        if (n % 43 == 0) {\n            return false;\n        }\n        if (n % 47 == 0) {\n            return false;\n        }\n        if (n % 53 == 0) {\n            return false;\n        }\n        if (n % 59 == 0) {\n            return false;\n        }\n        if (n % 61 == 0) {\n            return false;\n        }\n        if (n % 67 == 0) {\n            return false;\n        }\n        if (n % 71 == 0) {\n            return false;\n        }\n        if (n % 73 == 0) {\n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "/tmp/tmp1lhyvc1s.java:110: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long rem = x % n;\n        if (rem == 0) {\n            return true;\n        }\n        return isSimplePower(rem, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt3h7qefy.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n || x == n * n) ? true : false;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292735,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpckomflw1.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == (n * n)) || (x == (n * n * n));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0cpofz2c.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long r = x;\n        while (r % n == 0) {\n            r /= n;\n        }\n        return r == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == n) return true;\n        if(x % n != 0) return false;\n        long i = 1;\n        while(i < n) {\n            if(x % i != 0) return false;\n            i *= 2;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4qnqy4tt.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long i = 2;\n        while (i < x) {\n            if (x % i != 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9aga46w3.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (x % 2 != 0) {\n            return false;\n        }\n        if (n % 3 == 0) {\n            return false;\n        }\n        if (x % 3 != 0) {\n            return false;\n        }\n        if (n % 4 == 0) {\n            return false;\n        }\n        if (x % 4 != 0) {\n            return false;\n        }\n        if (n % 5 == 0) {\n            return false;\n        }\n        if (x % 5 != 0) {\n            return false;\n        }\n        if (n % 6 == 0) {\n            return false;\n        }\n        if (x % 6 != 0) {\n            return false;\n        }\n        if (n % 7 == 0) {\n            return false;\n        }\n        if (x % 7 != 0) {\n            return false;\n        }\n        if (n % 8 == 0) {\n            return false;\n        }\n        if (x % 8 != 0) {\n            return false;\n        }\n        if (n % 9 == 0) {\n            return false;\n        }\n        if (x % 9 != 0) {\n            return false;\n        }\n        if (n % 10 == 0) {\n            return false;\n        }\n        if (x % 10 != 0) {\n            return false;\n        }\n        if (n % 11 == 0) {\n            return false;\n        }\n        if (x % 11 != 0) {\n            return false;\n        }\n        if (n % 12 == 0) {\n            return false;\n        }\n        if (x % 12 != 0) {\n            return false;\n        }\n        if (n % 13 ==\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpewovy9m4.java:108: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (n < 0) return false;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        if (n % 2 == 0) return false;\n        if (n % 2 == 1) return true;\n        long r = x;\n        while (r % n != 0) {\n            r = r / n;\n        }\n        return r == x;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6son0d38.java:43)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-n*n) return true;\n        if(x==-n*n*n) return true;\n        if(x==-n*n*n*n) return true;\n        if(x==-n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n        if(x==-n*n*n*n*n*n*n*n*n*\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpcxm7j6b0.java:48: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == n) || (x == n * n) || (x == n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsg8bpsst.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(n==0) return false;\n        if(x==n) return true;\n        if(x==-1 && n%2==0) return true;\n        if(x==-1 && n%2==1) return false;\n        if(x==-n) return true;\n        if(x==-n%2) return true;\n        if(x==-n%3) return true;\n        if(x==-n%4) return true;\n        if(x==-n%5) return true;\n        if(x==-n%6) return true;\n        if(x==-n%7) return true;\n        if(x==-n%8) return true;\n        if(x==-n%9) return true;\n        if(x==-n%10) return true;\n        if(x==-n%11) return true;\n        if(x==-n%12) return true;\n        if(x==-n%13) return true;\n        if(x==-n%14) return true;\n        if(x==-n%15) return true;\n        if(x==-n%16) return true;\n        if(x==-n%17) return true;\n        if(x==-n%18) return true;\n        if(x==-n%19) return true;\n        if(x==-n%20) return true;\n        if(x==-n%21) return true;\n        if(x==-n%22) return true;\n        if(x==-n%23) return true;\n        if(x==-n%24) return true;\n        if(x==-n%25) return true;\n        if(x==-n%26) return true;\n        if(x==-n%27) return true;\n        if(x==-n%28) return true;\n        if(x==-n%29) return true;\n        if(x==-n%30) return true;\n        if(x==-n%31) return true;\n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpv7lthk3c.java:64: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (x == n) return true;\n        if (x % n == 0) return false;\n        if (n == 1) return false;\n        if (n == 0) return false;\n        if (n == 2) return true;\n        if (n == 3) return false;\n        if (n == 4) return true;\n        if (n == 5) return false;\n        if (n == 6) return true;\n        if (n == 7) return false;\n        if (n == 8) return true;\n        if (n == 9) return false;\n        if (n == 10) return true;\n        if (n == 11) return false;\n        if (n == 12) return true;\n        if (n == 13) return false;\n        if (n == 14) return true;\n        if (n == 15) return false;\n        if (n == 16) return true;\n        if (n == 17) return false;\n        if (n == 18) return true;\n        if (n == 19) return false;\n        if (n == 20) return true;\n        if (n == 21) return false;\n        if (n == 22) return true;\n        if (n == 23) return false;\n        if (n == 24) return true;\n        if (n == 25) return false;\n        if (n == 26) return true;\n        if (n == 27) return false;\n        if (n == 28) return true;\n        if (n == 29) return false;\n        if (n == 30) return true;\n        if (n == 31) return false;\n        if (n == 32) return true;\n        if (n == 33) return false;\n        if (n == 34) return true;\n        if (n == 35) return false;\n        if (n == 36) return true;\n        if (n == 37) return false;\n        if (n == 38) return true;\n        if (n == 39) return false;\n        if\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpxw2qpirs.java:72: error: '(' expected\n        if\n          ^\n/tmp/tmpxw2qpirs.java:73: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8tdo9jv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long temp = x;\n        while (temp != 1) {\n            if (temp % n != 0) {\n                return false;\n            }\n            temp /= n;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x==1) return true;\n        if(x==0) return false;\n        if(x==n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-x) return false;\n        if(x==-x%n) return true;\n        if(x==-x%n+n) return true;\n        if(x==-x%n-n) return true;\n        if(x==-x%n-n+n) return true;\n        if(x==-x%n-n-n) return true;\n        if(x==-x%n-n-n+n) return true;\n        if(x==-x%n-n-n-n) return true;\n        if(x==-x%n-n-n-n+n) return true;\n        if(x==-x%n-n-n-n-n) return true;\n        if(x==-x%n-n-n-n-n+n) return true;\n        if(x==-x%n-n-n-n-n-n) return true;\n        if(x==-x%n-n-n-n-n-n+n) return true;\n        if(x==-x%n-n-n-n-n-n-n) return true;\n        if(x==-x%n-n-n-n-n-n-n+n) return true;\n        if(x==-x%n-n-n-n-n-n-n-n) return true;\n        if(x==-x%n-n-n-n-n-n-n-n+n) return true;\n        if(x==-x%n-n-n-n-n-n-n-n-n) return true;\n        if(x==-x%n-n-n-n-n-n-n-n-n+n) return true;\n        if(x==-x%n-n-n-n-n-n-n-n-n-n) return\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpqvqgf2uj.java:51: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x % n != 0) return false;\n        long y = x;\n        while (y % n == 0) {\n            y /= n;\n        }\n        return y == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x<0) return false;\n        if(n<0) return false;\n        if(n==2) return true;\n        if(x==2) return true;\n        if(x==3) return true;\n        if(x==4) return true;\n        if(x==5) return true;\n        if(x==6) return true;\n        if(x==7) return true;\n        if(x==8) return true;\n        if(x==9) return true;\n        if(x==10) return true;\n        if(x==11) return true;\n        if(x==12) return true;\n        if(x==13) return true;\n        if(x==14) return true;\n        if(x==15) return true;\n        if(x==16) return true;\n        if(x==17) return true;\n        if(x==18) return true;\n        if(x==19) return true;\n        if(x==20) return true;\n        if(x==21) return true;\n        if(x==22) return true;\n        if(x==23) return true;\n        if(x==24) return true;\n        if(x==25) return true;\n        if(x==26) return true;\n        if(x==27) return true;\n        if(x==28) return true;\n        if(x==29) return true;\n        if(x==30) return true;\n        if(x==31) return true;\n        if(x==32) return true;\n        if(x==33) return true;\n        if(x==34) return true;\n        if(x==35) return true;\n        if(x==36) return true;\n        if(x==37) return true;\n        if(x==38) return true;\n        if(x==39) return true;\n        if(x==40) return true;\n        if(x==41\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpk3q66f8p.java:72: error: ')' expected\n        if(x==41\n                ^\n/tmp/tmpk3q66f8p.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        long x_pow = 1;\n        while (x_pow * x < x) {\n            x_pow *= x;\n        }\n        return x_pow == n;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gxx05ji.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwn5tk5dl.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x == n * n) {\n            return true;\n        }\n        if (x == n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n) {\n            return true;\n        }\n        if (x == n * n * n * n *\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpb5dnd1ia.java:78: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return true;\n        if (x % n != 0) return false;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n == 0 && x / n == 1) return true;\n        if (x % n == 0 && x / n != 1) return false;\n        if (x % n ==\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmp48u53vpe.java:56: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8tdo9jv.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return (x == 1 || x == n || x == n * n || x == n * n * n || x == n * n * n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==0) return false;\n        if(x==1) return true;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x%n==0) return false;\n        if(n%x==0) return false;\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_c8fv31.java:35)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (n == 0) return false;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        long m = x;\n        while (m % n == 0) {\n            m /= n;\n        }\n        return m == 1;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x < 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(n, x);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpntxlkbsa.java:41)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long temp = x;\n        while (temp != 1) {\n            temp = temp / n;\n            if (temp == 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ahom403.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        return isSimplePower(x / n, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x % n == 0) {\n            return false;\n        }\n        return isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgzy2yb3u.java:38)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(x == 1) return true;\n        if(x == 0) return false;\n        if(x < 0) return false;\n        if(x % n != 0) return false;\n        if(n == 0) return false;\n        if(n == 1) return true;\n        if(n == 2) return true;\n        if(n == 3) return true;\n        if(n == 4) return true;\n        if(n == 5) return true;\n        if(n == 6) return true;\n        if(n == 7) return true;\n        if(n == 8) return true;\n        if(n == 9) return true;\n        if(n == 10) return true;\n        if(n == 11) return true;\n        if(n == 12) return true;\n        if(n == 13) return true;\n        if(n == 14) return true;\n        if(n == 15) return true;\n        if(n == 16) return true;\n        if(n == 17) return true;\n        if(n == 18) return true;\n        if(n == 19) return true;\n        if(n == 20) return true;\n        if(n == 21) return true;\n        if(n == 22) return true;\n        if(n == 23) return true;\n        if(n == 24) return true;\n        if(n == 25) return true;\n        if(n == 26) return true;\n        if(n == 27) return true;\n        if(n == 28) return true;\n        if(n == 29) return true;\n        if(n == 30) return true;\n        if(n == 31) return true;\n        if(n == 32) return true;\n        if(n == 33) return true;\n        if(n == 34) return true;\n        if(n == 35) return true;\n        if(n == 36) return true;\n        if(n == 37) return true;\n        if(n == 38) return true;\n        if(n == 39) return true;\n        if(n == 40) return true;\n        if(n == 41) return true;\n        if(n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpc7eth5pu.java:72: error: ')' expected\n        if(n\n            ^\n/tmp/tmpc7eth5pu.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return n == 0 ? false : (x == 1 || x == n) ? true : isSimplePower(x, n / 2);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmha3frf.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == n) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (x % n != 0) return false;\n        long a = n;\n        while (a > 1) {\n            if (a % 2 != 0) {\n                if (x % a != 0) return false;\n            }\n            a /= 2;\n        }\n        return true;\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkasho4pg.java:48)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (x < 0) return false;\n        if (x % n != 0) return false;\n        if (x == n) return true;\n        if (n == 1) return true;\n        if (n == 2) return true;\n        if (n == 3) return true;\n        if (n == 4) return true;\n        if (n == 5) return true;\n        if (n == 6) return true;\n        if (n == 7) return true;\n        if (n == 8) return true;\n        if (n == 9) return true;\n        if (n == 10) return true;\n        if (n == 11) return true;\n        if (n == 12) return true;\n        if (n == 13) return true;\n        if (n == 14) return true;\n        if (n == 15) return true;\n        if (n == 16) return true;\n        if (n == 17) return true;\n        if (n == 18) return true;\n        if (n == 19) return true;\n        if (n == 20) return true;\n        if (n == 21) return true;\n        if (n == 22) return true;\n        if (n == 23) return true;\n        if (n == 24) return true;\n        if (n == 25) return true;\n        if (n == 26) return true;\n        if (n == 27) return true;\n        if (n == 28) return true;\n        if (n == 29) return true;\n        if (n == 30) return true;\n        if (n == 31) return true;\n        if (n == 32) return true;\n        if (n == 33) return true;\n        if (n == 34) return true;\n        if (n == 35) return true;\n        if (n == 36) return true;\n        if (n == 37) return true;\n        if (n == 38) return true;\n        if (n == 39) return true;\n        if (n == 40) return true;\n        if (n == 41) return true;\n        if (n\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmp3zjofq8j.java:72: error: ')' expected\n        if (n\n             ^\n/tmp/tmp3zjofq8j.java:73: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (n == 1) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        long r = x / n;\n        return isSimplePower(r, n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292734,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppf27ff4f.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) return true;\n        if (x == 0) return false;\n        if (n == 0) return false;\n        if (x == n) return true;\n        if (x % n != 0) return false;\n        if (x < 0) return false;\n        if (x < n) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x % n == 0) return false;\n        if (x\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292736,
      "stdout": "",
      "stderr": "/tmp/tmpuv34vcj_.java:66: error: ')' expected\n        if (x\n             ^\n/tmp/tmpuv34vcj_.java:67: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if (x == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x % n != 0) {\n            return false;\n        }\n        if (x == n) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x % 3 == 0) {\n            return false;\n        }\n        if (x % 5 == 0) {\n            return false;\n        }\n        if (x % 7 == 0) {\n            return false;\n        }\n        if (x % 11 == 0) {\n            return false;\n        }\n        if (x % 13 == 0) {\n            return false;\n        }\n        if (x % 17 == 0) {\n            return false;\n        }\n        if (x % 19 == 0) {\n            return false;\n        }\n        if (x % 23 == 0) {\n            return false;\n        }\n        if (x % 29 == 0) {\n            return false;\n        }\n        if (x % 31 == 0) {\n            return false;\n        }\n        if (x % 37 == 0) {\n            return false;\n        }\n        if (x % 41 == 0) {\n            return false;\n        }\n        if (x % 43 == 0) {\n            return false;\n        }\n        if (x % 47 == 0) {\n            return false;\n        }\n        if (x % 53 == 0) {\n            return false;\n        }\n        if (x % 59 == 0) {\n            return false;\n        }\n        if (x % 61 == 0) {\n            return false;\n        }\n        if (x % 67 == 0) {\n            return false;\n        }\n        if (x % 71 == 0) {\n            return false;\n        }\n        if (x % 73 == 0)\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "/tmp/tmpm2n4fnml.java:108: error: illegal start of statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        if(n==1) return true;\n        if(n==0) return false;\n        if(x==1) return false;\n        if(x==n) return true;\n        if(x==0) return false;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-1) return false;\n        if(x==-n) return true;\n        if(x==-2) return false;\n        if(x==-n) return true;\n        if(x==-2) return false;\n        if(x==-n) return true;\n        if(x==-3) return false;\n        if(x==-n) return true;\n        if(x==-3) return false;\n        if(x==-n) return true;\n        if(x==-4) return false;\n        if(x==-n) return true;\n        if(x==-4) return false;\n        if(x==-n) return true;\n        if(x==-5) return false;\n        if(x==-n) return true;\n        if(x==-5) return false;\n        if(x==-n) return true;\n        if(x==-6) return false;\n        if(x==-n) return true;\n        if(x==-6) return false;\n        if(x==-n) return true;\n        if(x==-7) return false;\n        if(x==-n) return true;\n        if(x==-7) return false;\n        if(x==-n) return true;\n        if(x==-8) return false;\n        if(x==-n) return true;\n        if(x==-8) return false;\n        if(x==-n) return true;\n        if(x==-9) return false;\n        if(x==-n) return true;\n        if(x==-9) return false;\n        if(x==-n) return true;\n        if(x==-10) return false;\n        if(x==-n) return true;\n        \n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292737,
      "stdout": "",
      "stderr": "/tmp/tmpr_jk8j6x.java:70: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == n || (x > 1 && isSimplePower(x, n/x));\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292732,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimplePower(tmpzm3jt_36.java:26)\n\tat Problem.isSimp",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> is_simple_power(1, 4)\n    // true\n    // >>> is_simple_power(2, 2)\n    // true\n    // >>> is_simple_power(8, 2)\n    // true\n    // >>> is_simple_power(3, 2)\n    // false\n    // >>> is_simple_power(3, 1)\n    // false\n    // >>> is_simple_power(5, 3)\n    // false\n    public static boolean isSimplePower(long x, long n) {\n        return x == (n * n);\n    }\n    public static void main(String[] args) {\n    assert(isSimplePower((16l), (2l)) == (true));\n    assert(isSimplePower((143214l), (16l)) == (false));\n    assert(isSimplePower((4l), (2l)) == (true));\n    assert(isSimplePower((9l), (3l)) == (true));\n    assert(isSimplePower((16l), (4l)) == (true));\n    assert(isSimplePower((24l), (2l)) == (false));\n    assert(isSimplePower((128l), (4l)) == (false));\n    assert(isSimplePower((12l), (6l)) == (false));\n    assert(isSimplePower((1l), (1l)) == (true));\n    assert(isSimplePower((1l), (12l)) == (true));\n    }\n\n}\n",
      "timestamp": 1664292731,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8s_2bvo.java:29)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}