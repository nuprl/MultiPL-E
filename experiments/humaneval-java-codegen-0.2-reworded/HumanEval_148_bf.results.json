{
  "name": "HumanEval_148_bf",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4fs6lulb.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for (String p1 : result) {\n            for (String p2 : result) {\n                if (p1.equals(p2)) {\n                    continue;\n                }\n                if (p1.equals(\"Mercury\") && p2.equals(\"Earth\")) {\n                    continue;\n                }\n                if (p1.equals(\"Earth\") && p2.equals(\"Mercury\")) {\n                    continue;\n                }\n                if (p1.equals(\"Jupiter\") && p2.equals(\"Saturn\")) {\n                    continue;\n                }\n                if (p1.equals(\"Saturn\") && p2.equals(\"Jupiter\")) {\n                    continue;\n                }\n                if (p1.equals(\"Uranus\") && p2.equals(\"Neptune\")) {\n                    continue;\n                }\n                if (p1.equals(\"Neptune\") && p2.equals(\"Uranus\")) {\n                    continue;\n                }\n                if (p1.equals(\"Mercury\") && p2.equals(\"Jupiter\")) {\n                    continue;\n                }\n                if (p1.equals(\"Jupiter\") && p2.equals(\"Mercury\")) {\n                    continue;\n                }\n                if (p1.equals(\"Saturn\")\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmpk7zr1n3c.java:66: error: ')' expected\n                if (p1.equals(\"Saturn\")\n                                       ^\n/tmp/tmpk7zr1n3c.java:67: error: illegal start of statement\n    }\n    ^\n/tmp/tmpk7zr1n3c.java:68: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")){\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")){\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")){\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")){\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\")){\n            result.add(\"Uranus\");\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")){\n            result.add(\"Uranus\");\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Neptune\")){\n            result.add(\"Uranus\");\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Jupiter\");\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmph37bp91p.java:70: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result1 = new ArrayList<>();\n        ArrayList<String> result2 = new ArrayList<>();\n        for(String p1 : result){\n            for(String p2 : result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") || p1.equals(\"Venus\") || p1.equals(\"Earth\") || p1.equals(\"Mars\") || p1.equals(\"Jupiter\") || p1.equals(\"Saturn\") || p1.equals(\"Uranus\") || p1.equals(\"Neptune\")){\n                    result1.add(p1);\n                }\n                if(p2.equals(\"Mercury\") || p2.equals(\"Venus\") || p2.equals(\"Earth\") || p2.equals(\"Mars\") || p2.equals(\"Jupiter\") || p2.equals(\"Saturn\") || p2.equals(\"Uranus\") || p2.equals(\"Neptune\")){\n                    result2.add(p2);\n                }\n            }\n        }\n        for(String p1 : result1){\n            for\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmp6jjunxez.java:52: error: '(' expected\n            for\n               ^\n/tmp/tmp6jjunxez.java:53: error: illegal start of expression\n    }\n    ^\n/tmp/tmp6jjunxez.java:54: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) {\n            return result;\n        }\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Neptune\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmphhm_a1fv.java:61: error: unclosed string literal\n        if(planet1.equals(\"Neptune\n                          ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczsrrf_o.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> planets = new ArrayList<String>();\n        for(String p : result) {\n            planets.addAll(bf(p, planet2));\n        }\n        return planets;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.bf(tmpsf1vm1n8.java:27)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.bf(tmpsf1vm1n8.java:38)\n\tat Problem.",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        } else {\n            return result;\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        } else {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        } else {\n            return result;\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        } else {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        } else {\n            return result;\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        } else {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmpsho_h9g2.java:63: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        if(result.size() == 1){\n            return result;\n        }\n        if(result.size() == 2){\n            return result;\n        }\n        if(result.size() == 3){\n            return result;\n        }\n        if(result.size() == 4){\n            return result;\n        }\n        if(result.size() == 5){\n            return result;\n        }\n        if(result.size() == 6){\n            return result;\n        }\n        if(result.size() == 7){\n            return result;\n        }\n        if(result.size() == 8){\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps406emni.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpip0zpxsc.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vuo732y.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(\"Mercury\") && result.get(1).equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n        if (result.get(0).equals(\"Jupiter\") && result.get(1).equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        }\n        if (result.get(0).equals(\"Saturn\") && result.get(1).equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        }\n        if (result.get(0).equals(\"Uranus\") && result.get(1).equals(\"Neptune\")) {\n            result.add(\"Earth\");\n        }\n        if (result.get(0).equals(\"Neptune\") && result.get(1).equals(\"Earth\")) {\n            result.add(\"Mars\");\n        }\n        if (result.get(0).equals(\"Earth\") && result.get(1).equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        }\n        if (result.get(0).equals(\"Mars\") && result.get(1).equals(\"Jupiter\")) {\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmpsmt22zcc.java:63: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6t8zi9y.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkrc58i3.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        Planet[] planets = {new Planet(planet1), new Planet(planet2)};\n        int planet1_index = 0;\n        int planet2_index = 0;\n        for(int i = 0; i < planets.length; i++) {\n            if(planets[i].getName().equals(planet1)) planet1_index = i;\n            if(planets[i].getName().equals(planet2)) planet2_index = i;\n        }\n        Planet[] sorted = planets.clone();\n        Arrays.sort(sorted, (p1, p2) -> p1.getDistance() - p2.getDistance());\n        for(int i = 0; i < sorted.length; i++) {\n            if(sorted[i].getDistance() <= planets[planet1_index].getDistance() && sorted[i].getDistance() >= planets[planet2_index].getDistance()) {\n                result.add(sorted[i].getName());\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "/tmp/tmphzq6z4k3.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmphzq6z4k3.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmphzq6z4k3.java:28: error: cannot find symbol\n        Planet[] planets = {new Planet(planet1), new Planet(planet2)};\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphzq6z4k3.java:28: error: cannot find symbol\n        Planet[] planets = {new Planet(planet1), new Planet(planet2)};\n                                ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphzq6z4k3.java:28: error: cannot find symbol\n        Planet[] planets = {new Planet(planet1), new Planet(planet2)};\n                                                     ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphzq6z4k3.java:35: error: cannot find symbol\n        Planet[] sorted = planets.clone();\n        ^\n  symbol:   class Planet\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        } else {\n            return result;\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        } else {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmpelaybpc5.java:55: error: ')' expected\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals\n                                                                                   ^\n/tmp/tmpelaybpc5.java:56: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ycag6um.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzc9w8mua.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293532,
      "stdout": "",
      "stderr": "/tmp/tmprwamvqez.java:69: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpip0zpxsc.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")){\n            result.add(\"Venus\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")){\n            result.add(\"Mercury\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")){\n            result.add(\"Mercury\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")){\n            result.add(\"Mercury\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Mercury\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\")){\n            result.add(\"Mercury\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Mercury\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Saturn\")){\n            result.add(\"Mercury\");\n            result.add(\"Uranus\");\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "/tmp/tmpls9hvudh.java:76: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr7f41yi.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8x297uo2.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxxxys00.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")){\n            result.add(\"Mercury\");\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")){\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")){\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq57w52jc.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.isEmpty()) {\n            return result;\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        } else {\n            result.add(planet1);\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwecbpqw.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        if(result.size() == 1){\n            return result;\n        }\n        if(result.size() == 2){\n            return result;\n        }\n        if(result.size() == 3){\n            return result;\n        }\n        if(result.size() == 4){\n            return result;\n        }\n        if(result.size() == 5){\n            return result;\n        }\n        if(result.size() == 6){\n            return result;\n        }\n        if(result.size() == 7){\n            return result;\n        }\n        if(result.size() == 8){\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps406emni.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return res;\n        if(!isCorrectPlanet(planet2)) return res;\n        \n        int p1 = getPlanetNumber(planet1);\n        int p2 = getPlanetNumber(planet2);\n        int min = Math.min(p1, p2);\n        int max = Math.max(p1, p2);\n        \n        for(int i = min; i <= max; i++) {\n            res.add(getPlanetName(i));\n        }\n        \n        return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "/tmp/tmpscjpdc5g.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return res;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpscjpdc5g.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return res;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpscjpdc5g.java:30: error: cannot find symbol\n        int p1 = getPlanetNumber(planet1);\n                 ^\n  symbol:   method getPlanetNumber(String)\n  location: class Problem\n/tmp/tmpscjpdc5g.java:31: error: cannot find symbol\n        int p2 = getPlanetNumber(planet2);\n                 ^\n  symbol:   method getPlanetNumber(String)\n  location: class Problem\n/tmp/tmpscjpdc5g.java:36: error: cannot find symbol\n            res.add(getPlanetName(i));\n                    ^\n  symbol:   method getPlanetName(int)\n  location: class Problem\n5 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        } else {\n            return result;\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        } else {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n        }\n        if (planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(\"Earth\");\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Earth\");\n        }\n        if (planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\")) {\n            result.add(\"Mars\");\n        }\n        if (planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Mars\");\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph_86fkva.java:61)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(planet2)){\n            result.add(planet1);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        if(result.size() == 1){\n            return result;\n        }\n        if(result.size() == 2){\n            return result;\n        }\n        if(result.size() == 3){\n            return result;\n        }\n        if(result.size() == 4){\n            return result;\n        }\n        if(result.size() == 5){\n            return result;\n        }\n        if(result.size() == 6){\n            return result;\n        }\n        if(result.size() == 7){\n            return result;\n        }\n        if(result.size() == 8){\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvgfapfvh.java:66)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpohmx8ec4.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp96chxfak.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8x297uo2.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1ffl8dy.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        } else if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "/tmp/tmpur9md5an.java:66: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) return res;\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) return res;\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mercury\")) return res;\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Venus\")) return res;\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) return res;\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Mars\")) return res;\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Jupiter\")) return res;\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Saturn\")) return res;\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Uranus\")) return res;\n        if(planet1.equals(\"Neptune\") && planet2.equals(\"Neptune\")) return res;\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzejwb9xu.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0gyrgf4e.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.get(0).equals(planet1) && result.get(1).equals(planet2)) {\n            return result;\n        }\n        if (result.get(0).equals(planet2) && result.get(1).equals(planet1)) {\n            return result;\n        }\n        if (result.get(0).equals(planet1) || result.get(1).equals(planet2)) {\n            return result;\n        }\n        if (result.get(0).equals(planet2) || result.get(1).equals(planet1)) {\n            return result;\n        }\n        if (result.get(0).equals(\"Mercury\") || result.get(1).equals(\"Mercury\")) {\n            return result;\n        }\n        if (result.get(0).equals(\"Jupiter\") || result.get(1).equals(\"Jupiter\")) {\n            return result;\n        }\n        if (result.get(0).equals(\"Saturn\") || result.get(1).equals(\"Saturn\")) {\n            return result;\n        }\n        if (result.get(0).equals(\"Uranus\") || result.get(1).equals(\"Uranus\")) {\n            return result;\n        }\n        if (result.get(0).equals(\"Neptune\") || result.get(1).equals(\"Neptune\")) {\n            return result\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "/tmp/tmptc8nsw6p.java:61: error: ';' expected\n            return result\n                         ^\n/tmp/tmptc8nsw6p.java:63: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzc9w8mua.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") ||\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "/tmp/tmp1q4qfokz.java:46: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppef6atu_.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        \n        double distance = p1.getDistance();\n        \n        while(distance < p2.getDistance()) {\n            result.add(p1.getName());\n            distance += p1.getDistance();\n            p1 = p1.nextPlanet();\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "/tmp/tmpkcfic394.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpkcfic394.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpkcfic394.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpkcfic394.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpkcfic394.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpkcfic394.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpkcfic394.java:34: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) {\n            return result;\n        }\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Neptune\")\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "/tmp/tmpfe_3h73r.java:61: error: ')' expected\n        if(planet1.equals(\"Neptune\")\n                                    ^\n/tmp/tmpfe_3h73r.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        \n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(p1.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(p2.getName());\n            result.add(p1.getName());\n            return result;\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "/tmp/tmp2jlmud1j.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp2jlmud1j.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp2jlmud1j.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp2jlmud1j.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp2jlmud1j.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp2jlmud1j.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp2jlmud1j.java:34: error: cannot find symbol\n            Planet tmp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkzwn4ck4.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<>();\n        for(String p1 : result){\n            for(String p2 : result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Jupiter\")){\n                    result2.add(\"Mercury\");\n                }\n                if(p1.equals(\"Jupiter\") && p2.equals(\"Mercury\")){\n                    result2.add(\"Jupiter\");\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Saturn\")){\n                    result2.add(\"Saturn\");\n                }\n                if(p1.equals(\"Saturn\") && p2.equals(\"Mercury\")){\n                    result2.add(\"Saturn\");\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Uranus\")){\n                    result2.add(\"Uranus\");\n                }\n                if(p1.equals(\"Uranus\") && p2.equals(\"Mercury\")){\n                    result2.add(\"Uranus\");\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Neptune\")){\n                    result2.add(\"Neptune\");\n                }\n                if(p1.equals(\"Neptune\") && p2.equals(\"\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "/tmp/tmptzqinqxp.java:63: error: unclosed string literal\n                if(p1.equals(\"Neptune\") && p2.equals(\"\n                                                     ^\n/tmp/tmptzqinqxp.java:65: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        } else {\n            result.add(\"\");\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        } else {\n            result.add(\"\");\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9tqcmle.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Venus\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mars\") && planet2.equals(\"Venus\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mars\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Saturn\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Uranus\");\n        } else if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293535,
      "stdout": "",
      "stderr": "/tmp/tmpyjm5qyt0.java:55: error: '(' expected\n        } else if\n                 ^\n/tmp/tmpyjm5qyt0.java:56: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for(String p1 : result){\n            for(String p2 : result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") || p1.equals(\"Jupiter\") || p1.equals(\"Saturn\") || p1.equals(\"Uranus\") || p1.equals(\"Neptune\")){\n                    if(p2.equals(\"Mercury\") || p2.equals(\"Jupiter\") || p2.equals(\"Saturn\") || p2.equals(\"Uranus\") || p2.equals(\"Neptune\")){\n                        continue;\n                    }\n                    if(p2.equals(\"Earth\")){\n                        result2.add(p2);\n                    }\n                }\n                if(p2.equals(\"Mercury\") || p2.equals(\"Jupiter\") || p2.equals(\"Saturn\") || p2.equals(\"Uranus\") || p2.equals(\"Neptune\")){\n                    if(p1.equals(\"Earth\")){\n                        result2.add(p1);\n                    }\n                }\n            }\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0fzy782g.java:60)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(\"Mercury\");\n        }\n        if(planet2.equals(\"Earth\") || planet2.equ\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "/tmp/tmpqu3y0oz9.java:45: error: ')' expected\n        if(planet2.equals(\"Earth\") || planet2.equ\n                                                 ^\n/tmp/tmpqu3y0oz9.java:46: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(result.size() == 0) {\n            return result;\n        }\n        if(result.size() == 1) {\n            return result;\n        }\n        if(result.size() == 2) {\n            return result;\n        }\n        if(result.size() == 3) {\n            return result;\n        }\n        if(result.size() == 4) {\n            return result;\n        }\n        if(result.size() == 5) {\n            return result;\n        }\n        if(result.size() == 6) {\n            return result;\n        }\n        if(result.size() == 7) {\n            return result;\n        }\n        if(result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5soicn3j.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"J\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "/tmp/tmpd4hae816.java:48: error: unclosed string literal\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"J\n                                                       ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(planet2)){\n            result.add(planet1);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbw3brsft.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<>();\n        for (String p1 : result) {\n            for (String p2 : result) {\n                if (p1.equals(p2)) {\n                    continue;\n                }\n                if (p1.equals(\"Mercury\") && p2.equals(\"Earth\")) {\n                    result2.add(\"Mercury\");\n                }\n                if (p1.equals(\"Earth\") && p2.equals(\"Mercury\")) {\n                    result2.add(\"Mercury\");\n                }\n                if (p1.equals(\"Mercury\") && p2.equals(\"Mars\")) {\n                    result2.add(\"Mercury\");\n                }\n                if (p1.equals(\"Mars\") && p2.equals(\"Mercury\")) {\n                    result2.add(\"Mercury\");\n                }\n                if (p1.equals(\"Mercury\") && p2.equals(\"Jupiter\")) {\n                    result2.add(\"Mercury\");\n                }\n                if (p1.equals(\"Jupiter\") && p2.equals(\"Mercury\")) {\n                    result2.add(\"Mercury\");\n                }\n                if (p1.equals\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "/tmp/tmpznon2e5q.java:60: error: ')' expected\n                if (p1.equals\n                             ^\n/tmp/tmpznon2e5q.java:61: error: illegal start of statement\n    }\n    ^\n/tmp/tmpznon2e5q.java:62: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy958n08s.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = 0; j < result.size(); j++) {\n                if (i != j) {\n                    if (result.get(i).equals(result.get(j))) {\n                        result2.add(result.get(i));\n                    }\n                }\n            }\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4jjb7tb1.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) {\n            return result;\n        }\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "/tmp/tmpo_87_8q5.java:67: error: unclosed string literal\n            result.add(\"\n                       ^\n/tmp/tmpo_87_8q5.java:69: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(\"Mercury\") || result.get(0).equals(\"Jupiter\") || result.get(0).equals(\"Saturn\") || result.get(0).equals(\"Uranus\") || result.get(0).equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(\"Mercury\") || result.get(0).equals(\"Jupiter\") || result.get(0).equals(\"Saturn\") || result.get(0).equals(\"Uranus\") || result.get(0).equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.get(0).equals(\"Mercury\") || result.get(0).equals(\"Jupiter\") || result.get(0).equals(\"Saturn\") || result.get(0).equals(\"Uranus\") || result.get(0).equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (result.get(0).equals(\"Mercury\") || result.get(0).equals(\"Jupiter\") || result.get(\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "/tmp/tmp_5dje4o4.java:52: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8x297uo2.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ycag6um.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgrsr0om.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4m755ur.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprkry4m5n.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        if(result.size() == 1){\n            return result;\n        }\n        if(result.size() == 2){\n            return result;\n        }\n        if(result.size() == 3){\n            return result;\n        }\n        if(result.size() == 4){\n            return result;\n        }\n        if(result.size() == 5){\n            return result;\n        }\n        if(result.size() == 6){\n            return result;\n        }\n        if(result.size() == 7){\n            return result;\n        }\n        if(result.size() == 8){\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98xn9ai2.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        \n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        \n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmpt2sraeif.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpt2sraeif.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpt2sraeif.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpt2sraeif.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpt2sraeif.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpt2sraeif.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpt2sraeif.java:33: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        double distance = p1.getDistance();\n        double distance2 = p2.getDistance();\n        double distance3 = distance + distance2;\n        double distance4 = distance - distance2;\n        double distance5 = distance2 - distance;\n        double distance6 = distance + distance3;\n        double distance7 = distance - distance3;\n        double distance8 = distance3 - distance;\n        double distance9 = distance + distance4;\n        double distance10 = distance - distance4;\n        double distance11 = distance4 - distance;\n        double distance12 = distance + distance5;\n        double distance13 = distance - distance5;\n        double distance14 = distance5 - distance;\n        double distance15 = distance + distance6;\n        double distance16 = distance - distance6;\n        double distance17 = distance6 - distance;\n        double distance18 = distance + distance7;\n        double distance19 = distance - distance7;\n        double distance20 = distance7 - distance;\n        double distance21 = distance + distance8;\n        double distance22 = distance - distance8;\n        double distance23 = distance8 - distance;\n        double distance24 = distance + distance9;\n        double distance25 = distance - distance9;\n        double distance26 = distance9 - distance;\n        double distance27 = distance + distance10;\n        double distance28 = distance - distance10;\n        double distance29 = distance10 - distance;\n        double distance30 = distance + distance11;\n        double distance31 = distance - distance11;\n        double distance32 = distance11 - distance;\n        double distance33 = distance + distance12;\n        double distance34 = distance - distance12;\n        double distance35 = distance12 - distance;\n        double distance36 = distance + distance13;\n        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmp3az5s2ig.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp3az5s2ig.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp3az5s2ig.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp3az5s2ig.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp3az5s2ig.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp3az5s2ig.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp3az5s2ig.java:32: error: cannot find symbol\n            Planet tmp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> list = new ArrayList<>();\n        for(String p1 : result){\n            for(String p2 : result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") || p1.equals(\"Jupiter\") || p1.equals(\"Saturn\") || p1.equals(\"Uranus\") || p1.equals(\"Neptune\")){\n                    list.add(p1);\n                }\n                if(p2.equals(\"Mercury\") || p2.equals(\"Jupiter\") || p2.equals(\"Saturn\") || p2.equals(\"Uranus\") || p2.equals(\"Neptune\")){\n                    list.add(p2);\n                }\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") || p1.equals(\"Jupiter\") || p1.equals(\"Saturn\") || p1.equals(\"Uranus\") || p1.equals(\"Neptune\")){\n                    list.add(p1);\n                }\n                if(p2.equals(\"Mercury\") || p2.equals(\"Jupiter\") || p2.equals(\"Saturn\") || p2.equals(\"Uranus\") || p2.equals(\"Neptune\")){\n                    list.add(\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmprswz7i4o.java:56: error: illegal start of expression\n    }\n    ^\n/tmp/tmprswz7i4o.java:57: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmp6y9ax1s2.java:76: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        if(result.size() == 1){\n            return result;\n        }\n        if(result.size() == 2){\n            return result;\n        }\n        if(result.size() == 3){\n            return result;\n        }\n        if(result.size() == 4){\n            return result;\n        }\n        if(result.size() == 5){\n            return result;\n        }\n        if(result.size() == 6){\n            return result;\n        }\n        if(result.size() == 7){\n            return result;\n        }\n        if(result.size() == 8){\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps406emni.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")){\n            result.add(planet1);\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmpb_y5_a4v.java:54: error: '(' expected\n        if\n          ^\n/tmp/tmpb_y5_a4v.java:55: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Earth\");\n            result.add(\"Mercury\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Venus\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mercury\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Venus\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n            result.add(\"Mercury\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Earth\") && planet2.equals\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmp8m8ldyph.java:69: error: ')' expected\n        } else if(planet1.equals(\"Earth\") && planet2.equals\n                                                           ^\n/tmp/tmp8m8ldyph.java:70: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr7f41yi.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")){\n            return result;\n        }\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")){\n            return result;\n        }\n        if(planet1.equals(planet2)){\n            return result;\n        }\n        if(planet1.equals(\"Mercury\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\")){\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\")){\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmp4k9k77uj.java:67: error: unclosed string literal\n            result.add(\"\n                       ^\n/tmp/tmp4k9k77uj.java:69: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n            result.add\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmpkdckzb_f.java:77: error: not a statement\n            result.add\n                  ^\n/tmp/tmpkdckzb_f.java:77: error: ';' expected\n            result.add\n                      ^\n/tmp/tmpkdckzb_f.java:79: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(planet2);\n            result.add(planet1);\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmpueud9chq.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpueud9chq.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpueud9chq.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpueud9chq.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpueud9chq.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpueud9chq.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpueud9chq.java:31: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ycag6um.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)){\n            return result;\n        }\n        \n        double distance1 = distance(planet1, \"Sun\");\n        double distance2 = distance(planet2, \"Sun\");\n        \n        if(distance1 > distance2){\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        if(distance1 < distance2){\n            result.add(planet2);\n            result.add(planet1);\n            return result;\n        }\n        \n        if(distance1 == distance2){\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmphfkrfu5x.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)){\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmphfkrfu5x.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)){\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmphfkrfu5x.java:31: error: cannot find symbol\n        double distance1 = distance(planet1, \"Sun\");\n                           ^\n  symbol:   method distance(String,String)\n  location: class Problem\n/tmp/tmphfkrfu5x.java:32: error: cannot find symbol\n        double distance2 = distance(planet2, \"Sun\");\n                           ^\n  symbol:   method distance(String,String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpip0zpxsc.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Earth\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmpq5eorsc0.java:55: error: ')' expected\n        } else if(planet1\n                         ^\n/tmp/tmpq5eorsc0.java:56: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph6wpqesk.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n            result.addAll(bf(planet2, result.get(1)));\n            result.addAll(bf(result.get(1), result.get(2)));\n            result.addAll(bf(result.get(2), result.get(3)));\n            result.addAll(bf(result.get(3), result.get(4)));\n            result.addAll(bf(result.get(4), result.get(5)));\n            result.addAll(bf(result.get(5), result.get(6)));\n            result.addAll(bf(result.get(6), result.get(7)));\n            result.addAll(bf(result.get(7), result.get(8)));\n            result.addAll(bf(result.get(8), result.get(9)));\n            result.addAll(bf(result.get(9), result.get(10)));\n            result.addAll(bf(result.get(10), result.get(11)));\n            result.addAll(bf(result.get(11), result.get(12)));\n            result.addAll(bf(result.get(12), result.get(13)));\n            result.addAll(bf(result.get(13), result.get(14)));\n            result.addAll(bf(result.\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "/tmp/tmphebx3g4e.java:52: error: <identifier> expected\n            result.addAll(bf(result.\n                                    ^\n/tmp/tmphebx3g4e.java:54: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphz8q6r2r.java:54)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) {\n            return result;\n        }\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Venus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Mars\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Uranus\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Neptune\")\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293534,
      "stdout": "",
      "stderr": "/tmp/tmpfe_3h73r.java:61: error: ')' expected\n        if(planet1.equals(\"Neptune\")\n                                    ^\n/tmp/tmpfe_3h73r.java:62: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        double distance = p1.getDistance();\n        double distance2 = p2.getDistance();\n        double distance3 = distance + distance2;\n        double distance4 = distance2 + distance;\n        double distance5 = distance + distance3;\n        double distance6 = distance3 + distance;\n        double distance7 = distance + distance4;\n        double distance8 = distance4 + distance;\n        double distance9 = distance + distance5;\n        double distance10 = distance5 + distance;\n        double distance11 = distance + distance6;\n        double distance12 = distance6 + distance;\n        double distance13 = distance + distance7;\n        double distance14 = distance7 + distance;\n        double distance15 = distance + distance8;\n        double distance16 = distance8 + distance;\n        double distance17 = distance + distance9;\n        double distance18 = distance9 + distance;\n        double distance19 = distance + distance10;\n        double distance20 = distance10 + distance;\n        double distance21 = distance + distance11;\n        double distance22 = distance11 + distance;\n        double distance23 = distance + distance12;\n        double distance24 = distance12 + distance;\n        double distance25 = distance + distance13;\n        double distance26 = distance13 + distance;\n        double distance27 = distance + distance14;\n        double distance28 = distance14 + distance;\n        double distance29 = distance + distance15;\n        double distance30 = distance15 + distance;\n        double distance31 = distance + distance16;\n        double distance32 = distance16 + distance;\n        double distance33 = distance + distance17;\n        double distance34 = distance17 + distance;\n        double distance35 = distance + distance18;\n        double distance36 = distance18 + distance;\n        double distance37 = distance + distance\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmpvpi_k1da.java:71: error: ';' expected\n        double distance37 = distance + distance\n                                               ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmp3nxahojv.java:57: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29nvmrq1.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Venus\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Jupiter\");\n        } else if (planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmpahqfx2w1.java:58: error: ')' expected\n        } else if (planet\n                         ^\n/tmp/tmpahqfx2w1.java:59: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr7f41yi.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6t8zi9y.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Earth\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Mars\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n        } else if(\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmppgx12zhn.java:56: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmpha8u8nxr.java:69: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmphcw3h_5k.java:45: error: ')' expected\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet\n                                                                                                      ^\n/tmp/tmphcw3h_5k.java:46: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg_xpsjj.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = 0; j < result.size(); j++) {\n                if (i != j) {\n                    if (result.get(i).equals(result.get(j))) {\n                        result2.add(result.get(i));\n                    }\n                }\n            }\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4jjb7tb1.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            return result;\n        }\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        for(Planet p : p1.getPlanets()) {\n            if(p.getDistance() > p2.getDistance()) {\n                break;\n            }\n            result.add(p.getName());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "/tmp/tmpa2p7467k.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpa2p7467k.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpa2p7467k.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpa2p7467k.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpa2p7467k.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpa2p7467k.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpa2p7467k.java:33: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpa2p7467k.java:37: error: cannot find symbol\n        for(Planet p : p1.getPlanets()) {\n            ^\n  symbol:   class Planet\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")){\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")){\n            result.add(\"Earth\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Venus\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Neptune\")){\n            \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmp5bdyfq90.java:69: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s21o7la.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(\"Mercury\");\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "/tmp/tmpwpxw6mtt.java:45: error: ')' expected\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet\n                                                                                                      ^\n/tmp/tmpwpxw6mtt.java:46: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = 0; j < result.size(); j++) {\n                if (result.get(i).equals(result.get(j))) {\n                    continue;\n                }\n                if (result.get(i).equals(planet1) && result.get(j).equals(planet2)) {\n                    result2.add(result.get(i));\n                }\n                if (result.get(i).equals(planet2) && result.get(j).equals(planet1)) {\n                    result2.add(result.get(i));\n                }\n            }\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6qxyc3h.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpki0ryw1d.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6pies9lu.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        \n        double sun = getSunDistance(planet1);\n        double sun2 = getSunDistance(planet2);\n        \n        if(sun > sun2) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        double planet1_distance = getPlanetDistance(planet1);\n        double planet2_distance = getPlanetDistance(planet2);\n        \n        if(planet1_distance > planet2_distance) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        double sun3 = getSunDistance(planet2);\n        double sun4 = getSunDistance(planet1);\n        \n        if(sun3 > sun4) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        double planet3_distance = getPlanetDistance(planet2);\n        double planet4_distance = getPlanetDistance(planet1);\n        \n        if(planet3_distance > planet4_distance) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        double sun5 = getSunDistance(planet1);\n        double sun6 = getSunDistance(planet2);\n        \n        if(sun5 > sun6) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        double planet5_distance = getPlanetDistance(planet1);\n        double planet6_distance = getPlanetDistance(planet2);\n        \n        if(planet5_distance > planet6_distance) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        \n        double sun7 = getSunDistance(planet2);\n        double sun8 = getSunDistance(planet1);\n        \n        if(sun7 > sun8) {\n            result.add(planet1\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "/tmp/tmplxta2ewc.java:87: error: ')' expected\n            result.add(planet1\n                              ^\n/tmp/tmplxta2ewc.java:89: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr7f41yi.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        }\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "/tmp/tmpgcjmxziv.java:56: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprkry4m5n.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.get(0).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(0).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(1).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(1).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(2).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(2).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(3).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(3).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(4).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(4).equals(planet2)) {\n            result.add(planet1);\n        }\n        if (result.get(5).equals(planet1)) {\n            result.add(planet2);\n        }\n        if (result.get(5).equals(planet2)) {\n            result.add(\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmp_lb6l0k0.java:71: error: illegal start of expression\n    }\n    ^\n/tmp/tmp_lb6l0k0.java:72: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s21o7la.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczsrrf_o.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfr7f41yi.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\") || planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\") || planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\") || planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\") || planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\") || planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\") || planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\") || planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\") || planet1.equals(\"Saturn\") && planet2.equals(\"Jupiter\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\") || planet1.equals(\"Uranus\")\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "/tmp/tmpgyip_syq.java:33: error: ')' expected\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\") || planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\") || planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\") || planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\") || planet1.equals(\"Uranus\") && planet2.equals(\"Saturn\") || planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\") || planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\") || planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\") || planet1.equals(\"Saturn\") && planet2.equals(\"Jupiter\") || planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\") || planet1.equals(\"Uranus\")\n
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4k_0kkk.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for(String p1 : result){\n            for(String p2 : result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Uranus\") || p1.equals(\"Uranus\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Neptune\") || p1.equals(\"Neptune\") && p2.equals(\"Mercury\")){\n                    result2.add(p1);\n                    result2.add(p2);\n                }\n            }\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphrycfudn.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmp6y9ax1s2.java:76: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "/tmp/tmp0aa5v__n.java:75: error: '(' expected\n        if\n          ^\n/tmp/tmp0aa5v__n.java:76: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!planet1.equals(\"Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\") && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"Saturn\") && !planet1.equals(\"Uranus\") && !planet1.equals(\"Neptune\")) {\n            return result;\n        }\n        if(!planet2.equals(\"Mercury\") && !planet2.equals(\"Venus\") && !planet2.equals(\"Earth\") && !planet2.equals(\"Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\") && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "/tmp/tmphcht9995.java:63: error: unclosed string literal\n            result.add(\"Jupiter\n                       ^\n/tmp/tmphcht9995.java:65: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> planets = new ArrayList<>();\n        for(String p : result) {\n            planets.add(p);\n        }\n        planets.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                if(o1.equals(\"Mercury\") || o1.equals(\"Jupiter\") || o1.equals(\"Saturn\") || o1.equals(\"Uranus\") || o1.equals(\"Neptune\")) {\n                    return -1;\n                }\n                if(o2.equals(\"Mercury\") || o2.equals(\"Jupiter\") || o2.equals(\"Saturn\") || o2.equals(\"Uranus\") || o2.equals(\"Neptune\")) {\n                    return 1;\n                }\n                return 0;\n            }\n        });\n        for(int i = 0; i < planets.size(); i++) {\n            for(int j = i + 1; j < planets.size(); j++) {\n                if(planets.get(i).equals(planets.get(j))) {\n                    result.add(planets.get(i));\n                    result.add(planets.get(j));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwpt2si_8.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")){\n            result.add(\"Venus\");\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Mars\") && planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")){\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")){\n            result.add(\"Neptune\");\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "/tmp/tmp2xjmcq0n.java:64: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzc9w8mua.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ycag6um.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29nvmrq1.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "/tmp/tmp99qttl_k.java:57: error: ')' expected\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet\n                                                                          ^\n/tmp/tmp99qttl_k.java:58: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s21o7la.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29nvmrq1.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ycag6um.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Earth\");\n                result.add(\"Venus\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa8x7to52.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s21o7la.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equ\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "/tmp/tmp1lhsn0gd.java:75: error: ')' expected\n        if(planet1.equ\n                      ^\n/tmp/tmp1lhsn0gd.java:76: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        \n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(p1.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(p2.getName());\n            result.add(p1.getName());\n            return result;\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmp9ynljmx3.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp9ynljmx3.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp9ynljmx3.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9ynljmx3.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9ynljmx3.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9ynljmx3.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9ynljmx3.java:34: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qxwg5h0.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> planets = new ArrayList<String>();\n        for(String p : result){\n            planets.addAll(bf(p, planet2));\n        }\n        return planets;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.String.equals(String.java:1830)\n\tat Problem.bf(tmproiypan4.java:27)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.java:38)\n\tat Problem.bf(tmproiypan4.j",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return result;\n        }\n        if(planet1.equals(planet2)) {\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293538,
      "stdout": "",
      "stderr": "/tmp/tmphcw3h_5k.java:45: error: ')' expected\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet\n                                                                                                      ^\n/tmp/tmphcw3h_5k.java:46: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")){\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "/tmp/tmpmqsjzlxt.java:75: error: not a statement\n            result.add\n                  ^\n/tmp/tmpmqsjzlxt.java:75: error: ';' expected\n            result.add\n                      ^\n/tmp/tmpmqsjzlxt.java:77: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            return result;\n        }\n        if(planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        double distance1 = distance(planet1, \"Sun\");\n        double distance2 = distance(planet2, \"Sun\");\n        double distance = distance1 - distance2;\n        if(distance > 0) {\n            result.add(planet1);\n            result.add(planet2);\n        }\n        else if(distance < 0) {\n            result.add(planet2);\n            result.add(planet1);\n        }\n        else {\n            result.add(planet1);\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpatazkd8q.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpatazkd8q.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpatazkd8q.java:35: error: cannot find symbol\n        double distance1 = distance(planet1, \"Sun\");\n                           ^\n  symbol:   method distance(String,String)\n  location: class Problem\n/tmp/tmpatazkd8q.java:36: error: cannot find symbol\n        double distance2 = distance(planet2, \"Sun\");\n                           ^\n  symbol:   method distance(String,String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return res;\n        int p1 = getPlanetNumber(planet1);\n        int p2 = getPlanetNumber(planet2);\n        int d = p2 - p1;\n        if(d == 0) {\n            res.add(planet1);\n            return res;\n        }\n        if(d == 1) {\n            res.add(planet2);\n            return res;\n        }\n        if(d == 2) {\n            res.add(planet1);\n            res.add(planet2);\n            return res;\n        }\n        if(d == 3) {\n            res.add(planet2);\n            res.add(planet1);\n            return res;\n        }\n        if(d == 4) {\n            res.add(planet1);\n            res.add(planet2);\n            return res;\n        }\n        if(d == 5) {\n            res.add(planet1);\n            res.add(planet2);\n            return res;\n        }\n        if(d == 6) {\n            res.add(planet2);\n            res.add(planet1);\n            return res;\n        }\n        if(d == 7) {\n            res.add(planet1);\n            res.add(planet2);\n            return res;\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmpwvq2t1rl.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return res;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpwvq2t1rl.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return res;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpwvq2t1rl.java:28: error: cannot find symbol\n        int p1 = getPlanetNumber(planet1);\n                 ^\n  symbol:   method getPlanetNumber(String)\n  location: class Problem\n/tmp/tmpwvq2t1rl.java:29: error: cannot find symbol\n        int p2 = getPlanetNumber(planet2);\n                 ^\n  symbol:   method getPlanetNumber(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(p1.getName());\n            return result;\n        }\n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(p2.getName());\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmp9y0wx4ty.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp9y0wx4ty.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp9y0wx4ty.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9y0wx4ty.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9y0wx4ty.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9y0wx4ty.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp9y0wx4ty.java:32: error: cannot find symbol\n            Planet tmp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        if(planet1.equals(planet2)) return result;\n        if(planet1.compareTo(planet2) > 0) {\n            result.add(planet2);\n            result.addAll(bf(planet2, planet1));\n            return result;\n        }\n        if(planet1.compareTo(planet2) < 0) {\n            result.add(planet1);\n            result.addAll(bf(planet1, planet2));\n            return result;\n        }\n        if(planet1.compareTo(planet2) == 0) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmp456wxi5t.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp456wxi5t.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            return result;\n        }\n        \n        // Calculate the distance between the two planets\n        double distance = distance(planet1, planet2);\n        \n        // Calculate the orbit of planet1\n        double orbit1 = orbit(planet1);\n        \n        // Calculate the orbit of planet2\n        double orbit2 = orbit(planet2);\n        \n        // Calculate the orbit of the sun\n        double sun = sun(planet1);\n        \n        // Calculate the distance between the two orbits\n        double orbitDistance = orbit1 - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance = sun - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance2 = sun - orbit1;\n        \n        // Calculate the distance between the two orbits and the sun\n        double orbitDistance2 = orbit1 - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance3 = sun - orbit1;\n        \n        // Calculate the distance between the two orbits and the sun\n        double orbitDistance3 = orbit2 - orbit1;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance4 = sun - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double orbitDistance4 = orbit1 - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance5 = sun - orbit1;\n        \n        // Calculate the distance between the two orbits and the sun\n        double orbitDistance5 = orbit2 - orbit1;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance6 = sun - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double orbitDistance6 = orbit1 - orbit2;\n        \n        // Calculate the distance between the two orbits and the sun\n        double sunDistance7 = sun - orbit1;\n        \n        // Calculate the distance\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpkvp82ux5.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpkvp82ux5.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpkvp82ux5.java:32: error: cannot find symbol\n        double distance = distance(planet1, planet2);\n                          ^\n  symbol:   method distance(String,String)\n  location: class Problem\n/tmp/tmpkvp82ux5.java:35: error: cannot find symbol\n        double orbit1 = orbit(planet1);\n                        ^\n  symbol:   method orbit(String)\n  location: class Problem\n/tmp/tmpkvp82ux5.java:38: error: cannot find symbol\n        double orbit2 = orbit(planet2);\n                        ^\n  symbol:   method orbit(String)\n  location: class Problem\n/tmp/tmpkvp82ux5.java:41: error: cannot find symbol\n        double sun = sun(planet1);\n                     ^\n  symbol:   method sun(String)\n  location: class Problem\n6 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Jupiter\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") &&\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpft5ldn79.java:75: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29nvmrq1.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for(int i = 0; i < result.size(); i++){\n            for(int j = 0; j < result.size(); j++){\n                if(result.get(i).equals(result.get(j))){\n                    continue;\n                }\n                if(result.get(i).equals(\"Mercury\") && result.get(j).equals(\"Jupiter\")){\n                    result2.add(\"Mercury\");\n                }\n                if(result.get(i).equals(\"Jupiter\") && result.get(j).equals(\"Mercury\")){\n                    result2.add(\"Jupiter\");\n                }\n                if(result.get(i).equals(\"Mercury\") && result.get(j).equals(\"Saturn\")){\n                    result2.add(\"Mercury\");\n                }\n                if(result.get(i).equals(\"Saturn\") && result.get(j).equals(\"Mercury\")){\n                    result2.add(\"Saturn\");\n                }\n                if(result.get(i).equals(\"Mercury\") && result.get(j).equals(\"Uranus\")){\n                    result2.add(\"Mercury\");\n                }\n                if(result.get(i).equals(\"Uranus\") && result.get(j).equals(\"Mercury\")){\n                    result2.add(\"Uranus\");\n                }\n\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmp1r50ollo.java:62: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Mercury\");\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n        }\n        if(planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphc8ut3dd.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6t8zi9y.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(planet2)){\n            result.add(planet1);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbw3brsft.java:39)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        \n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(p1.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(p1.getName());\n            return result;\n        }\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(p2.getName());\n            return result;\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmp03orghff.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp03orghff.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp03orghff.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp03orghff.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp03orghff.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp03orghff.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp03orghff.java:34: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpetjhzm12.java:54: error: '(' expected\n        if\n          ^\n/tmp/tmpetjhzm12.java:55: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> planets = new ArrayList<String>();\n        for(String p: result){\n            planets.add(p);\n        }\n        for(String p1: result){\n            for(String p2: result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") || p1.equals(\"Jupiter\") || p1.equals(\"Saturn\") || p1.equals(\"Uranus\") || p1.equals(\"Neptune\")){\n                    if(p2.equals(\"Mercury\") || p2.equals(\"Jupiter\") || p2.equals(\"Saturn\") || p2.equals(\"Uranus\") || p2.equals(\"Neptune\")){\n                        continue;\n                    }\n                    if(p2.equals(\"Venus\")){\n                        if(planets.contains(\"Jupiter\") || planets.contains(\"Saturn\") || planets.contains(\"Uranus\") || planets.contains(\"Neptune\")){\n                            continue;\n                        }\n                    }\n                    if(p2.equals(\"Mars\")){\n                        if(planets.contains(\"Jupiter\") || planets.contains(\"Saturn\") || planets.contains(\"Uranus\") || planets.contains(\"Neptune\")){\n                            continue;\n                        }\n                    }\n                    if(p2.equals(\"Jupiter\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpp9rtydd5.java:59: error: unclosed string literal\n                    if(p2.equals(\"Jupiter\n                                 ^\n/tmp/tmpp9rtydd5.java:61: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for(String p1: result){\n            for(String p2: result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Uranus\") || p1.equals(\"Uranus\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Neptune\") || p1.equals(\"Neptune\") && p2.equals(\"Mercury\") || p1.equals(\"Jupiter\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Uranus\") || p1.equals(\"Uranus\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Neptune\") || p1.equals(\"Neptune\") && p2\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpke125s2o.java:42: error: ')' expected\n                if(p1.equals(\"Mercury\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Uranus\") || p1.equals(\"Uranus\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Neptune\") || p1.equals(\"Neptune\") && p2.equals(\"Mercury\") || p1.equals(\"Jupiter\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Uranus\") || p1.equals(\"Uranus\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Neptune\") || p1.equals(\"Neptune\") && p2\nn/tmp/tmpke125s2o.java:43: error: illegal start of statement\n    }\n    ^\n/tmp/tmpke125s2o.java:44: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<>();\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = 0; j < result.size(); j++) {\n                if (i != j) {\n                    if (result.get(i).equals(result.get(j))) {\n                        result2.add(result.get(i));\n                    }\n                }\n            }\n        }\n        return result2;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0j27xly6.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        ArrayList<String> planets = new ArrayList<>();\n        for (String p : result) {\n            planets.add(p);\n        }\n        for (String p : result) {\n            for (String q : result) {\n                if (p.equals(q)) {\n                    continue;\n                }\n                if (p.equals(\"Mercury\") && q.equals(\"Jupiter\") || p.equals(\"Jupiter\") && q.equals(\"Mercury\") || p.equals(\"Mercury\") && q.equals(\"Saturn\") || p.equals(\"Saturn\") && q.equals(\"Mercury\") || p.equals(\"Mercury\") && q.equals(\"Uranus\") || p.equals(\"Uranus\") && q.equals(\"Mercury\") || p.equals(\"Mercury\") && q.equals(\"Neptune\") || p.equals(\"Neptune\") && q.equals(\"Mercury\") || p.equals(\"Jupiter\") && q.equals(\"Saturn\") || p.equals(\"Saturn\") && q.equals(\"Jupiter\") || p.equals(\"Jupiter\") && q.equals(\"Uranus\") || p.equals(\"Uranus\") && q.equals(\"Jupiter\") || p.equals(\"Jupiter\") && q.equals(\"Neptune\") || p.equals(\"Neptune\") && q.equals(\"Jupiter\") || p.\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpbezqb9n_.java:45: error: <identifier> expected\n                if (p.equals(\"Mercury\") && q.equals(\"Jupiter\") || p.equals(\"Jupiter\") && q.equals(\"Mercury\") || p.equals(\"Mercury\") && q.equals(\"Saturn\") || p.equals(\"Saturn\") && q.equals(\"Mercury\") || p.equals(\"Mercury\") && q.equals(\"Uranus\") || p.equals(\"Uranus\") && q.equals(\"Mercury\") || p.equals(\"Mercury\") && q.equals(\"Neptune\") || p.equals(\"Neptune\") && q.equals(\"Mercury\") || p.equals(\"Jupiter\") && q.equals(\"Saturn\") || p.equals(\"Saturn\") && q.equals(\"Jupiter\") || p.equals(\"Jupiter\") && q.equals(\"Uranus\") || p.equals(\"Uranus\") && q.equals(\"Jupiter\") || p.equals(\"Jupiter\") && q.equals(\"Neptune\") || p.equals(\"Neptune\") && q.equals(\"Jupiter\") || p.\nn/tmp/tmpbezqb9n_.java:46: error: illegal start of statement\n    }\n    ^\n/tmp/tmpbezqb9n_.java:47: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if(result.size() == 0) {\n            return result;\n        }\n        if(result.size() == 1) {\n            return result;\n        }\n        if(result.size() == 2) {\n            return result;\n        }\n        if(result.size() == 3) {\n            return result;\n        }\n        if(result.size() == 4) {\n            return result;\n        }\n        if(result.size() == 5) {\n            return result;\n        }\n        if(result.size() == 6) {\n            return result;\n        }\n        if(result.size() == 7) {\n            return result;\n        }\n        if(result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbee2psm.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s21o7la.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "/tmp/tmpkuyxqo5k.java:76: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n            result.add(\"Jupiter\");\n        } else if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmp6oe_f16p.java:55: error: '(' expected\n        } else if\n                 ^\n/tmp/tmp6oe_f16p.java:56: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Venus\");\n                result.add(\"Earth\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvsbhbjhq.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293541,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qxwg5h0.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")))\n            return result;\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")))\n            return result;\n        if(planet1.equals(planet2))\n            return result;\n        if(planet1.equals(\"Mercury\")) {\n            if(planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))\n                result.add(\"Venus\");\n            if(planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))\n                result.add(\"Earth\");\n            if(planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))\n                result.add(\"Mars\");\n            if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))\n                result.add(\"Jupiter\");\n            if(planet2.equals(\"Saturn\") ||\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmpc1zn2ljj.java:43: error: illegal start of expression\n    }\n    ^\n/tmp/tmpc1zn2ljj.java:44: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")){\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")){\n            result.add(\"Jupiter\");\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")){\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")){\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")){\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")){\n            result.add(\"Saturn\");\n            return result;\n        }\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmp6hnw2msr.java:76: error: missing return statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        } else {\n            result.add(\"\");\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        } else {\n            result.add(\"\");\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7xlpwe2s.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        if(result.get(0).equals(planet1)){\n            result.add(planet2);\n        }\n        if(result.get(0).equals(planet2)){\n            result.add(planet1);\n        }\n        if(result.get(1).equals(planet1)){\n            result.add(planet2);\n        }\n        if(result.get(1).equals(planet2)){\n            result.add(planet1);\n        }\n        if(result.get(2).equals(planet1)){\n            result.add(planet2);\n        }\n        if(result.get(2).equals(planet2)){\n            result.add(planet1);\n        }\n        if(result.get(3).equals(planet1)){\n            result.add(planet2);\n        }\n        if(result.get(3).equals(planet2)){\n            result.add(planet1);\n        }\n        if(result.get(4).equals(planet1)){\n            result.add(planet2);\n        }\n        if(result.get(4).equals(planet2)){\n            result.add(planet1);\n        }\n        if(result.get(5).equals(planet1)){\n            result.add(planet2);\n        }\n        if(result.get(5).equals(planet2)){\n            result.add(planet\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmp9xdgbac0.java:70: error: ')' expected\n            result.add(planet\n                             ^\n/tmp/tmp9xdgbac0.java:72: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        \n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        \n        double distance = p1.getDistance();\n        \n        for(Planet p : Planet.values()) {\n            if(p.getDistance() < distance && p.getDistance() > p2.getDistance()) {\n                result.add(p.name());\n            }\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmp5_t9mj3n.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:30: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:31: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:34: error: cannot find symbol\n            Planet tmp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:41: error: cannot find symbol\n        for(Planet p : Planet.values()) {\n                       ^\n  symbol:   variable Planet\n  location: class Problem\n/tmp/tmp5_t9mj3n.java:41: error: cannot find symbol\n        for(Planet p : Planet.values()) {\n            ^\n  symbol:   class Planet\n  location: class Problem\n9 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29nvmrq1.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            return result;\n        }\n        \n        // Calculate the distance between the two planets\n        BigDecimal distance = calculateDistance(planet1, planet2);\n        \n        // Calculate the orbit of the first planet\n        BigDecimal orbit = calculateOrbit(planet1);\n        \n        // Calculate the orbit of the second planet\n        BigDecimal orbit2 = calculateOrbit(planet2);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun2 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun3 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun4 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun5 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun6 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun7 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun8 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun9 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun10 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun11 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun12 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun13 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun14 = calculateSun(distance);\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun15 = calculateSun(distance);\n        \n        // Calculate the orbit of\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmpeb3gouf1.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) {\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:32: error: cannot find symbol\n        BigDecimal distance = calculateDistance(planet1, planet2);\n                              ^\n  symbol:   method calculateDistance(String,String)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:35: error: cannot find symbol\n        BigDecimal orbit = calculateOrbit(planet1);\n                           ^\n  symbol:   method calculateOrbit(String)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:38: error: cannot find symbol\n        BigDecimal orbit2 = calculateOrbit(planet2);\n                            ^\n  symbol:   method calculateOrbit(String)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:41: error: cannot find symbol\n        BigDecimal sun = calculateSun(distance);\n                         ^\n  symbol:   method calculateSun(BigDecimal)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:44: error: cannot find symbol\n        BigDecimal sun2 = calculateSun(distance);\n                          ^\n  symbol:   method calculateSun(BigDecimal)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:47: error: cannot find symbol\n        BigDecimal sun3 = calculateSun(distance);\n                          ^\n  symbol:   method calculateSun(BigDecimal)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:50: error: cannot find symbol\n        BigDecimal sun4 = calculateSun(distance);\n                          ^\n  symbol:   method calculateSun(BigDecimal)\n  location: class Problem\n/tmp/tmpeb3gouf1.java:53: error: cannot find symbol\n        BigDecimal sun5 = calculateSun(distance);\n                          ^\n  symbol:   method calculateSun(BigDecimal)\n  loca",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(planet2);\n            result.add(planet1);\n            return result;\n        }\n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(planet1);\n            result.add(planet2);\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmphvld3ae8.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmphvld3ae8.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmphvld3ae8.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphvld3ae8.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphvld3ae8.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphvld3ae8.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmphvld3ae8.java:31: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        // Calculate the distance between the two planets\n        BigDecimal distance = new BigDecimal(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(), 2)));\n        \n        // Calculate the distance between the two planets\n        BigDecimal orbit1 = new BigDecimal(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(), 2)));\n        BigDecimal orbit2 = new BigDecimal(Math.sqrt(Math.pow(planet2.length(), 2) + Math.pow(planet1.length(), 2)));\n        \n        // Calculate the difference between the two orbits\n        BigDecimal orbitDifference = orbit1.subtract(orbit2);\n        \n        // Calculate the difference between the two distances\n        BigDecimal distanceDifference = distance.subtract(orbitDifference);\n        \n        // Calculate the difference between the two distances\n        BigDecimal orbitDifferenceAbs = orbitDifference.abs();\n        \n        // Calculate the difference between the two distances\n        BigDecimal distanceDifferenceAbs = distanceDifference.abs();\n        \n        // Calculate the difference between the two distances\n        BigDecimal orbitDifferenceAbs2 = orbitDifferenceAbs.pow(2);\n        \n        // Calculate the difference between the two distances\n        BigDecimal distanceDifferenceAbs2 = distanceDifferenceAbs.pow(2);\n        \n        // Calculate the difference between the two distances\n        BigDecimal orbitDifferenceAbs3 = orbitDifferenceAbs2.pow(2);\n        \n        // Calculate the difference between the two distances\n        BigDecimal distanceDifferenceAbs3 = distanceDifferenceAbs2.pow(2);\n        \n        // Calculate the difference between the two distances\n        BigDecimal orbitDifferenceAbs4 = orbitDifferenceAbs3.pow(2);\n        \n        // Calculate the difference between the two distances\n        \n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmpven0ucx0.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpven0ucx0.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (result.size() == 0) {\n            return result;\n        }\n        if (result.size() == 1) {\n            return result;\n        }\n        if (result.size() == 2) {\n            return result;\n        }\n        if (result.size() == 3) {\n            return result;\n        }\n        if (result.size() == 4) {\n            return result;\n        }\n        if (result.size() == 5) {\n            return result;\n        }\n        if (result.size() == 6) {\n            return result;\n        }\n        if (result.size() == 7) {\n            return result;\n        }\n        if (result.size() == 8) {\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s21o7la.java:63)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(result.size() == 0){\n            return result;\n        }\n        ArrayList<String> result2 = new ArrayList<String>();\n        for(String p1 : result){\n            for(String p2 : result){\n                if(p1.equals(p2)){\n                    continue;\n                }\n                if(p1.equals(\"Mercury\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Uranus\") || p1.equals(\"Uranus\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Neptune\") || p1.equals(\"Neptune\") && p2.equals(\"Mercury\")){\n                    result2.add(p1);\n                    result2.add(p2);\n                }\n                if(p1.equals(\"Jupiter\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\")\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293542,
      "stdout": "",
      "stderr": "/tmp/tmpd7ada8a9.java:46: error: ')' expected\n                if(p1.equals(\"Jupiter\") && p2.equals(\"Mercury\") || p1.equals(\"Mercury\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\") && p2.equals(\"Saturn\") || p1.equals(\"Saturn\") && p2.equals(\"Jupiter\") || p1.equals(\"Jupiter\")\n                                                                                                                                                                                                                                     ^\n/tmp/tmpd7ada8a9.java:47: error: illegal start of statement\n    }\n    ^\n/tmp/tmpd7ada8a9.java:48: error: illegal start of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Saturn\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Uranus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Venus\");\n        } else if(planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Neptune\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n        } else\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmp9winlm61.java:70: error: illegal start of statement\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Earth\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Mars\");\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equ\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmpnrmody4j.java:55: error: ')' expected\n        } else if (planet1.equ\n                              ^\n/tmp/tmpnrmody4j.java:56: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmpqe63rpmn.java:75: error: '(' expected\n        if\n          ^\n/tmp/tmpqe63rpmn.java:76: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        if(p1.getDistance() == p2.getDistance()) {\n            result.add(p1.getName());\n            result.add(p2.getName());\n            return result;\n        }\n        if(p1.getDistance() > p2.getDistance()) {\n            result.add(p1.getName());\n            return result;\n        }\n        if(p1.getDistance() < p2.getDistance()) {\n            result.add(p2.getName());\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmpf348d6df.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpf348d6df.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpf348d6df.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpf348d6df.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpf348d6df.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpf348d6df.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpf348d6df.java:32: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n7 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplvsql_y7.java:48)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            if (planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n                result.add(\"Mercury\");\n                result.add(\"Earth\");\n                result.add(\"Venus\");\n                result.add(\"Mars\");\n                result.add(\"Jupiter\");\n                result.add(\"Saturn\");\n                result.add(\"Uranus\");\n                result.add(\"Neptune\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxaq2gyjk.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzc9w8mua.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n            result.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n            result.add(\"Jupiter\");\n        } else if\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmpclrdrle4.java:55: error: '(' expected\n        } else if\n                 ^\n/tmp/tmpclrdrle4.java:56: error: illegal start of expression\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293539,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg_xpsjj.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293540,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29nvmrq1.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)){\n            return result;\n        }\n        ArrayList<String> planets = new ArrayList<String>();\n        planets.add(planet1);\n        planets.add(planet2);\n        while(planets.size() > 1){\n            String first = planets.get(0);\n            String second = planets.get(1);\n            if(first.equals(second)){\n                result.add(first);\n                planets.remove(first);\n                planets.remove(second);\n                continue;\n            }\n            double first_orbit = getOrbit(first);\n            double second_orbit = getOrbit(second);\n            if(first_orbit > second_orbit){\n                result.add(first);\n                planets.remove(first);\n                continue;\n            }\n            else if(first_orbit < second_orbit){\n                result.add(second);\n                planets.remove(second);\n                continue;\n            }\n            else{\n                result.add(first);\n                result.add(second);\n                planets.remove(first);\n                planets.remove(second);\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpw30ow0br.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)){\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpw30ow0br.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)){\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpw30ow0br.java:42: error: cannot find symbol\n            double first_orbit = getOrbit(first);\n                                 ^\n  symbol:   method getOrbit(String)\n  location: class Problem\n/tmp/tmpw30ow0br.java:43: error: cannot find symbol\n            double second_orbit = getOrbit(second);\n                                  ^\n  symbol:   method getOrbit(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        int planet1_orbital_period = getOrbitalPeriod(planet1);\n        int planet2_orbital_period = getOrbitalPeriod(planet2);\n        int planet1_orbital_period_diff = planet1_orbital_period - planet2_orbital_period;\n        int planet2_orbital_period_diff = planet2_orbital_period - planet1_orbital_period;\n        int orbital_period_diff = Math.abs(planet1_orbital_period_diff) + Math.abs(planet2_orbital_period_diff);\n        int orbital_period = planet1_orbital_period + planet2_orbital_period;\n        int orbital_period_diff_abs = Math.abs(orbital_period_diff);\n        int orbital_period_diff_sign = (orbital_period_diff > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign = (orbital_period_diff_abs > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign_sign = (orbital_period_diff_abs_sign > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign_sign_sign = (orbital_period_diff_abs_sign_sign > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign_sign_sign_sign = (orbital_period_diff_abs_sign_sign_sign > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign_sign_sign_sign_sign = (orbital_period_diff_abs_sign_sign_sign_sign > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign_sign_sign_sign_sign_sign = (orbital_period_diff_abs_sign_sign_sign_sign_sign > 0) ? 1 : -1;\n        int orbital_period_diff_abs_sign_sign_sign_sign\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293543,
      "stdout": "",
      "stderr": "/tmp/tmp0wncqlad.java:42: error: ';' expected\n        int orbital_period_diff_abs_sign_sign_sign_sign\n                                                       ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuivbjdkq.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            res.add(planet1);\n        } else {\n            res.add(\"\");\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            res.add(planet2);\n        } else {\n            res.add(\"\");\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e83p3md.java:40)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqie3dz0.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n            result.add(\"Venus\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmps5bopus_.java:77: error: illegal start of expression\n    }\n    ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Earth\") || planet1.equals(\"Venus\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Earth\") || planet2.equals(\"Venus\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2dlk2up.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")){\n            result.add(\"Mercury\");\n            return result;\n        }\n        if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")){\n            result.add(\"Venus\");\n            return result;\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")){\n            result.add(\"Earth\");\n            return result;\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")){\n            result.add(\"Mars\");\n            return result;\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")){\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")){\n            result.add(\"Saturn\");\n            return result;\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")){\n            result.add(\"Uranus\");\n            return result;\n        }\n        if(planet1.equals(\"Neptune\") || planet2.equals(\"Neptune\")){\n            result.add(\"Neptune\");\n            return result;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpcf35e0.java:62)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        \n        // Calculate the distance between the two planets\n        BigDecimal distance = new BigDecimal(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(), 2)));\n        \n        // Calculate the orbit of the first planet\n        BigDecimal orbit1 = new BigDecimal(2 * Math.PI * Math.sqrt(planet1.length()));\n        \n        // Calculate the orbit of the second planet\n        BigDecimal orbit2 = new BigDecimal(2 * Math.PI * Math.sqrt(planet2.length()));\n        \n        // Calculate the orbit of the sun\n        BigDecimal sun = new BigDecimal(2 * Math.PI * Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(), 2)));\n        \n        // Calculate the distance between the two orbits\n        BigDecimal orbitDistance = orbit1.subtract(orbit2);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance = sun.subtract(orbitDistance);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance2 = sunDistance.subtract(orbitDistance);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance3 = sunDistance2.subtract(orbitDistance);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance4 = sunDistance3.subtract(orbitDistance);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance5 = sunDistance4.subtract(orbitDistance);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance6 = sunDistance5.subtract(orbitDistance);\n        \n        // Calculate the distance between the two orbits and the sun\n        BigDecimal sunDistance7 = sunDistance6\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpxuinuish.java:63: error: ';' expected\n        BigDecimal sunDistance7 = sunDistance6\n                                              ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        for(Planet p : p1.getPlanets()) {\n            if(p.getDistance() > p2.getDistance()) break;\n            result.add(p.getName());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpdb848vft.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpdb848vft.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpdb848vft.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpdb848vft.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpdb848vft.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpdb848vft.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpdb848vft.java:32: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpdb848vft.java:36: error: cannot find symbol\n        for(Planet p : p1.getPlanets()) {\n            ^\n  symbol:   class Planet\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for(Planet p : new Planet[]{p1, p2}) {\n            for(Planet p2 : p.getPlanets()) {\n                if(p2.getDistance() > p1.getDistance()) {\n                    result.add(p2.getName());\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpv5fgzkky.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpv5fgzkky.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpv5fgzkky.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:31: error: cannot find symbol\n            Planet tmp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:35: error: cannot find symbol\n        for(Planet p : new Planet[]{p1, p2}) {\n                           ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:35: error: cannot find symbol\n        for(Planet p : new Planet[]{p1, p2}) {\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpv5fgzkky.java:36: error: cannot find symbol\n            for(Planet p2 : p.getPlanets()) {\n                ^\n  symbol:   class Planet\n  location: class Problem\n10 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293536,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_s5xdccd.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for(Planet p : p1.getPlanets()) {\n            if(p.getDistance() > p2.getDistance()) break;\n            result.add(p.getName());\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpmh0lj4hz.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1) || !isCorrectPlanet(planet2)) return result;\n                                         ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:28: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:29: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:31: error: cannot find symbol\n            Planet tmp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpmh0lj4hz.java:35: error: cannot find symbol\n        for(Planet p : p1.getPlanets()) {\n            ^\n  symbol:   class Planet\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293537,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4m755ur.java:36)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        Planet p1 = new Planet(planet1);\n        Planet p2 = new Planet(planet2);\n        if(p1.getDistance() > p2.getDistance()) {\n            Planet temp = p1;\n            p1 = p2;\n            p2 = temp;\n        }\n        for(Planet p : p1.getPlanets()) {\n            if(p.getDistance() > p2.getDistance()) {\n                result.add(p.getName());\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpu23sehnf.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpu23sehnf.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpu23sehnf.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpu23sehnf.java:29: error: cannot find symbol\n        Planet p1 = new Planet(planet1);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpu23sehnf.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpu23sehnf.java:30: error: cannot find symbol\n        Planet p2 = new Planet(planet2);\n                        ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpu23sehnf.java:32: error: cannot find symbol\n            Planet temp = p1;\n            ^\n  symbol:   class Planet\n  location: class Problem\n/tmp/tmpu23sehnf.java:36: error: cannot find symbol\n        for(Planet p : p1.getPlanets()) {\n            ^\n  symbol:   class Planet\n  location: class Problem\n8 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<String>();\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\")){\n            result.add(planet2);\n        }\n        if(planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")){\n            result.add(planet1);\n        }\n        if(planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")){\n            result.add(planet2);\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293533,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ycag6um.java:42)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> res = new ArrayList<String>();\n        if(!(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\"))) {\n            return res;\n        }\n        if(!(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\"))) {\n            return res;\n        }\n        if(planet1.equals(planet2)) {\n            return res;\n        }\n        if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            res.add(planet1);\n        }\n        if(planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n            res.add(planet2);\n        }\n        if(planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n            res.add(\"Mercury\");\n        }\n        if(planet2.equals(\"Earth\") || planet2.equ\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmp_sck04w5.java:45: error: ')' expected\n        if(planet2.equals(\"Earth\") || planet2.equ\n                                                 ^\n/tmp/tmp_sck04w5.java:46: error: illegal start of statement\n    }\n    ^\n2 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a pair containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty pair if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf(\"Jupiter\", \"Neptune\")\n    // (\"Saturn\", \"Uranus\")\n    // >>> bf(\"Earth\", \"Mercury\")\n    // (\"Venus\")\n    // >>> bf(\"Mercury\", \"Uranus\")\n    // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> result = new ArrayList<>();\n        if(!isCorrectPlanet(planet1)) return result;\n        if(!isCorrectPlanet(planet2)) return result;\n        \n        double distance1 = getDistance(planet1);\n        double distance2 = getDistance(planet2);\n        \n        if(distance1 > distance2) {\n            result.add(planet1);\n            result.addAll(bf(planet2, planet1));\n        } else {\n            result.add(planet2);\n            result.addAll(bf(planet1, planet2));\n        }\n        \n        return result;\n    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n    }\n\n}\n",
      "timestamp": 1664293544,
      "stdout": "",
      "stderr": "/tmp/tmpaaj4wcs0.java:27: error: cannot find symbol\n        if(!isCorrectPlanet(planet1)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpaaj4wcs0.java:28: error: cannot find symbol\n        if(!isCorrectPlanet(planet2)) return result;\n            ^\n  symbol:   method isCorrectPlanet(String)\n  location: class Problem\n/tmp/tmpaaj4wcs0.java:30: error: cannot find symbol\n        double distance1 = getDistance(planet1);\n                           ^\n  symbol:   method getDistance(String)\n  location: class Problem\n/tmp/tmpaaj4wcs0.java:31: error: cannot find symbol\n        double distance2 = getDistance(planet2);\n                           ^\n  symbol:   method getDistance(String)\n  location: class Problem\n4 errors\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}