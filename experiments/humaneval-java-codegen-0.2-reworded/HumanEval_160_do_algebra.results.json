{
  "name": "HumanEval_160_do_algebra",
  "language": "java",
  "prompt": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n",
  "tests": "    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(i < op.size()) {\n                switch(op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp512calka.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i == 0) {\n                result = operand.get(i);\n            } else {\n                String opr = op.get(i - 1);\n                if (opr.equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (opr.equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (opr.equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (opr.equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (opr.equals(\"**\")) {\n                    result = (long) Math.pow(result, operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdal8o9sg.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                }\n                if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppmo8kxek.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzqauu5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t5rnuo8.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                if (op.get(i).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(i).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(i).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(i).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(i).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zf7st2_.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i == 0) {\n                result = operand.get(i);\n            } else {\n                if (op.get(i - 1).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(i - 1).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(i - 1).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(i - 1).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(i - 1).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i - 1));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5sbtfa5s.java:49)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t5rnuo8.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                }\n                if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwxoivzg0.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                }\n                if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vt7k2gq.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzqauu5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(i < op.size()) {\n                switch(op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxyqlwxny.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(result, operand.get(i));\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid operator\");\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjnt0xd5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"/\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv80u92kc.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i == 0) {\n                result = operand.get(i);\n            } else {\n                int j = i - 1;\n                while (j >= 0 && op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                    j--;\n                }\n                if (j >= 0 && op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (j >= 0 && op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (j >= 0 && op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (j >= 0 && op.get(j).equals(\"//\")) {\n                    result = (long) Math.floor(result / operand.get(i));\n                } else if (j >= 0 && op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(result, operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqj6vl1lx.java:54)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if(op.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if(op.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if(op.get(i).equals(\"//\")) {\n                result /= operand.get(i);\n            } else if(op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(operand.get(i), operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.doAlgebra(tmp0a746sfc.java:30)\n\tat Problem.main(tmp0a746sfc.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqt9s3j1.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                }\n                if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vt7k2gq.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzqauu5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = Math.pow(result, operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "/tmp/tmp6p1nz2mh.java:45: error: incompatible types: possible lossy conversion from double to long\n                        result = Math.pow(result, operand.get(i));\n                                         ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(result, operand.get(i));\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Invalid operator\");\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid operand\");\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid operand\n\tat Problem.doAlgebra(tmpl8egyx0p.java:51)\n\tat Problem.main(tmpl8egyx0p.java:57)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(operand.get(i), operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.doAlgebra(tmp7xnirzer.java:30)\n\tat Problem.main(tmp7xnirzer.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i == 0) {\n                result = operand.get(i);\n            } else {\n                if (op.get(i - 1).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(i - 1).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(i - 1).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(i - 1).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(i - 1).equals(\"**\")) {\n                    result = (long) Math.pow(result, operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6x7tew7.java:50)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(result, operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqaffmgfz.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfsrcd8d9.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqt9s3j1.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(i < op.size()) {\n                switch(op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5vn7xs2x.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t5rnuo8.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"/\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0v7qm_b5.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = Math.pow(result, operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "/tmp/tmp6p1nz2mh.java:45: error: incompatible types: possible lossy conversion from double to long\n                        result = Math.pow(result, operand.get(i));\n                                         ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = Math.pow(result, operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "/tmp/tmp6p1nz2mh.java:45: error: incompatible types: possible lossy conversion from double to long\n                        result = Math.pow(result, operand.get(i));\n                                         ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = Math.pow(result, operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "/tmp/tmp6p1nz2mh.java:45: error: incompatible types: possible lossy conversion from double to long\n                        result = Math.pow(result, operand.get(i));\n                                         ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                }\n                else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofaov8sa.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(op.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if(op.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if(op.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if(op.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if(op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(operand.get(i), operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.doAlgebra(tmpc0ctfn5a.java:30)\n\tat Problem.main(tmpc0ctfn5a.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                }\n                else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofaov8sa.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                if (op.get(i).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(i).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(i).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(i).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(i).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zf7st2_.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(operand.get(i), operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.doAlgebra(tmpbqdj_hkp.java:30)\n\tat Problem.main(tmpbqdj_hkp.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqt9s3j1.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                }\n                else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofaov8sa.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                }\n                if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy1jv30fx.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzqauu5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(operand.get(i), operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.doAlgebra(tmp7xnirzer.java:30)\n\tat Problem.main(tmp7xnirzer.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8t5rnuo8.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzqauu5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(result, operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1ysh_ej.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i == 0) {\n                result = operand.get(i);\n            } else {\n                result = doAlgebra(op.get(i - 1), result, operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "/tmp/tmp_ihtjypu.java:33: error: method doAlgebra in class Problem cannot be applied to given types;\n                result = doAlgebra(op.get(i - 1), result, operand.get(i));\n                         ^\n  required: ArrayList<String>,ArrayList<Long>\n  found:    String,long,Long\n  reason: actual and formal argument lists differ in length\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                if (op.get(i).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(i).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(i).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(i).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(i).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zf7st2_.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                if (op.get(i).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(i).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(i).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(i).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(i).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zf7st2_.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk_749gm.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(i < op.size()) {\n                switch(op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp512calka.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = Math.pow(result, operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "/tmp/tmp7fmwv4k6.java:45: error: incompatible types: possible lossy conversion from double to long\n                        result = Math.pow(result, operand.get(i));\n                                         ^\n1 error\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292639,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyyzqauu5.java:55)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (op.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (op.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (op.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (op.get(i).equals(\"//\")) {\n                result /= operand.get(i);\n            } else if (op.get(i).equals(\"**\")) {\n                result = (long) Math.pow(operand.get(i), operand.get(i));\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\tat Problem.doAlgebra(tmp7xnirzer.java:30)\n\tat Problem.main(tmp7xnirzer.java:45)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long)Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5rshnkqt.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            if(i < op.size()) {\n                switch(op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long)Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp512calka.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if(op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqt9s3j1.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i = 0; i < operand.size(); i++) {\n            for(int j = 0; j < op.size(); j++) {\n                if(op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                }\n                if(op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                }\n                if(op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                }\n                if(op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                }\n                if(op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vt7k2gq.java:51)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            if (i < op.size()) {\n                switch (op.get(i)) {\n                    case \"+\":\n                        result += operand.get(i);\n                        break;\n                    case \"-\":\n                        result -= operand.get(i);\n                        break;\n                    case \"*\":\n                        result *= operand.get(i);\n                        break;\n                    case \"//\":\n                        result /= operand.get(i);\n                        break;\n                    case \"**\":\n                        result = (long) Math.pow(operand.get(i), operand.get(i));\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp30rkvc0c.java:53)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"/\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9nw6e4px.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Given two array lists operator, and operand. The first array list has basic algebra operations, and \n    // the second array list is an array array list of integers. Use the two given array lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // array array list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator array list is equal to the length of operand array list minus one.\n    // Operand is an array array list of of non-negative integers.\n    // Operator array list has at least one operator, and operand array list has at least two operands.\n    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {\n        long result = 0;\n        for (int i = 0; i < operand.size(); i++) {\n            for (int j = 0; j < op.size(); j++) {\n                if (op.get(j).equals(\"+\")) {\n                    result += operand.get(i);\n                } else if (op.get(j).equals(\"-\")) {\n                    result -= operand.get(i);\n                } else if (op.get(j).equals(\"*\")) {\n                    result *= operand.get(i);\n                } else if (op.get(j).equals(\"//\")) {\n                    result /= operand.get(i);\n                } else if (op.get(j).equals(\"**\")) {\n                    result = (long) Math.pow(operand.get(i), operand.get(i));\n                }\n            }\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"+\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"//\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)4l)))) == (8l));\n    }\n\n}\n",
      "timestamp": 1664292640,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3hrk8g4.java:47)\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}