name: HumanEval_65_circular_shift
language: ts
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100,\
  \ 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97,\
  \ 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11,\
  \ 101),\"11\");\n}\n\ntest();"
completions: ["  let x_str = x.toString();\n  let x_len = x_str.length;\n  if (shift\
    \ > x_len) {\n    return x_str.split(\"\").reverse().join(\"\");\n  }\n  let x_shift\
    \ = x_str.slice(x_len - shift, x_len) + x_str.slice(0, x_len - shift);\n  return\
    \ x_shift;\n}\n", "    let x_str = x.toString();\n    let x_len = x_str.length;\n\
    \    if (shift > x_len) {\n        return x_str.split(\"\").reverse().join(\"\"\
    );\n    }\n    let shift_str = x_str.slice(0, shift);\n    let remain_str = x_str.slice(shift,\
    \ x_len);\n    return remain_str + shift_str;\n}\n", "  let str = x.toString();\n\
    \  let len = str.length;\n  if (shift > len) {\n    return str.split(\"\").reverse().join(\"\
    \");\n  }\n  let first = str.slice(0, shift);\n  let second = str.slice(shift,\
    \ len);\n  return second + first;\n}\n", "    let x_str = x.toString();\n    let\
    \ x_len = x_str.length;\n    if (shift > x_len) {\n        return x_str.split(\"\
    \").reverse().join(\"\");\n    }\n    let x_shift = x_str.slice(x_len - shift,\
    \ x_len) + x_str.slice(0, x_len - shift);\n    return x_shift;\n}\n", "    let\
    \ str = x.toString();\n    let str_len = str.length;\n    if (shift >= str_len)\
    \ {\n        return str.split(\"\").reverse().join(\"\");\n    }\n    let first_part\
    \ = str.substring(0, shift);\n    let second_part = str.substring(shift, str_len);\n\
    \    return second_part + first_part;\n}\n", "    let str = x.toString();\n  \
    \  let len = str.length;\n    if (shift > len) {\n        return str.split(\"\"\
    ).reverse().join(\"\");\n    }\n    let first = str.substring(0, shift);\n   \
    \ let second = str.substring(shift, len);\n    return second + first;\n}\n", " \
    \   let digits = x.toString().split('');\n    let result = [];\n    for (let i\
    \ = 0; i < shift; i++) {\n        let digit = digits.pop();\n        if (digit)\
    \ {\n            result.unshift(digit);\n        }\n    }\n    return digits.concat(result).join('');\n\
    }\n", "    let s = x.toString();\n    if (shift > s.length) {\n        return\
    \ s.split(\"\").reverse().join(\"\");\n    }\n    return s.substring(s.length\
    \ - shift) + s.substring(0, s.length - shift);\n}\n", "    let str = x.toString();\n\
    \    if (shift > str.length) {\n        return str.split(\"\").reverse().join(\"\
    \");\n    }\n    let first = str.slice(0, shift);\n    let second = str.slice(shift);\n\
    \    return second + first;\n}\n", "    let x_str = x.toString();\n    let x_len\
    \ = x_str.length;\n    let shift_str = \"\";\n    if (shift > x_len) {\n     \
    \   shift_str = x_str.split(\"\").reverse().join(\"\");\n    } else {\n      \
    \  shift_str = x_str.slice(x_len - shift) + x_str.slice(0, x_len - shift);\n \
    \   }\n    return shift_str;\n}\n", "    let str = x.toString();\n    let len\
    \ = str.length;\n    if (shift > len) {\n        return str.split(\"\").reverse().join(\"\
    \");\n    }\n    return str.substring(len - shift) + str.substring(0, len - shift);\n\
    }\n", "    let str = x.toString();\n    let len = str.length;\n    if (shift >\
    \ len) {\n        return str.split(\"\").reverse().join(\"\");\n    }\n    let\
    \ left = str.substring(0, shift);\n    let right = str.substring(shift, len);\n\
    \    return right + left;\n}\n", "    let str = x.toString();\n    if (shift >\
    \ str.length) {\n        return str.split(\"\").reverse().join(\"\");\n    } else\
    \ {\n        return str.slice(shift) + str.slice(0, shift);\n    }\n}\n", "  \
    \  let s = x.toString();\n    let n = s.length;\n    if (shift > n) {\n      \
    \  return s.split(\"\").reverse().join(\"\");\n    }\n    let left = s.substring(0,\
    \ n - shift);\n    let right = s.substring(n - shift, n);\n    return right +\
    \ left;\n}\n", "    let digits = x.toString().split('');\n    let result = '';\n\
    \    if (shift > digits.length) {\n        result = digits.reverse().join('');\n\
    \    } else {\n        for (let i = 0; i < digits.length; i++) {\n           \
    \ result += digits[(i + shift) % digits.length];\n        }\n    }\n    return\
    \ result;\n}\n", "    let str = x.toString();\n    let len = str.length;\n   \
    \ if (shift > len) {\n        return str.split(\"\").reverse().join(\"\");\n \
    \   }\n    let shift_str = str.substring(len - shift, len);\n    let rest_str\
    \ = str.substring(0, len - shift);\n    return shift_str + rest_str;\n}\n", " \
    \ let digits: string = x.toString();\n  if (shift > digits.length) {\n    return\
    \ digits.split(\"\").reverse().join(\"\");\n  }\n  let first_part: string = digits.slice(shift);\n\
    \  let second_part: string = digits.slice(0, shift);\n  return first_part + second_part;\n\
    }\n", "  let str = x.toString();\n  if (shift > str.length) {\n    return str.split(\"\
    \").reverse().join(\"\");\n  }\n  let first = str.slice(0, shift);\n  let second\
    \ = str.slice(shift);\n  return second + first;\n}\n", "    let str = x.toString();\n\
    \    let len = str.length;\n    if (shift > len) {\n        return str.split(\"\
    \").reverse().join(\"\");\n    }\n    let left = str.substring(0, shift);\n  \
    \  let right = str.substring(shift, len);\n    return right + left;\n}\n", " \
    \ let str = x.toString();\n  let len = str.length;\n  let shift_len = shift %\
    \ len;\n  let res = str.slice(shift_len) + str.slice(0, shift_len);\n  return\
    \ res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
