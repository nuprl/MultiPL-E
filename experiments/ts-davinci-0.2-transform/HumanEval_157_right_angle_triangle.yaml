name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n",
  "    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n    } else\
    \ if (b > a && b > c) {\n        return b * b === a * a + c * c;\n    } else {\n\
    \        return c * c === a * a + b * b;\n    }\n}\n", "    return (a ** 2 + b\
    \ ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a **\
    \ 2);\n}\n", "    return (a * a + b * b == c * c) || (a * a + c * c == b * b)\
    \ || (b * b + c * c == a * a);\n}\n", "    return a * a + b * b === c * c || a\
    \ * a + c * c === b * b || b * b + c * c === a * a;\n}\n", "    let max = Math.max(a,\
    \ b, c);\n    let sum = a + b + c - max;\n    return max * max === sum * sum;\n\
    }\n", "    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b *\
    \ b + c * c == a * a);\n}\n", "    return (a*a + b*b == c*c) || (a*a + c*c ==\
    \ b*b) || (b*b + c*c == a*a);\n}\n", "    // your code here\n    return false;\n\
    }\n", "    // your code here\n    return false;\n}\n", "    return (a * a + b\
    \ * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n",
  "    return a * a + b * b === c * c;\n}\n", "    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n", "    let arr =\
    \ [a, b, c];\n    arr.sort((a, b) => a - b);\n    let [x, y, z] = arr;\n    return\
    \ x * x + y * y === z * z;\n}\n", "    return (a * a + b * b == c * c) || (a *\
    \ a + c * c == b * b) || (b * b + c * c == a * a);\n}\n", "    // your code here\n\
    \    return false;\n}\n", "    if (a > b && a > c) {\n        return a * a ===\
    \ b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b === a\
    \ * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n    }\n\
    }\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n",
  "    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c *\
    \ c == a * a);\n}\n", "    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c\
    \ ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
