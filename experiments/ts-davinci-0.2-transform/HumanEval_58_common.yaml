name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two lists.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort();\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i\
    \ < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n       \
    \     if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n          \
    \  }\n        }\n    }\n    return result.sort();\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                if\
    \ (!result.includes(l1[i])) {\n                    result.push(l1[i]);\n     \
    \           }\n            }\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort();\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    let commonElements: number[] = [];\n    for (let i\
    \ = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                commonElements.push(l1[i]);\n\
    \            }\n        }\n    }\n    return commonElements.sort((a, b) => a -\
    \ b);\n}\n", "  return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort().filter((x,\
    \ i, a) => a.indexOf(x) === i);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i\
    \ < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n       \
    \     if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n          \
    \  }\n        }\n    }\n    return result.sort();\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n",
  "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a - b);\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        if (l2.indexOf(l1[i]) !== -1) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result.sort().filter((item, pos, ary) => {\n   \
    \     return !pos || item != ary[pos - 1];\n    });\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(e\
    \ => l2.includes(e)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result.sort().filter((item, index,\
    \ arr) => {\n        return arr.indexOf(item) === index;\n    });\n}\n", "   \
    \ return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new\
    \ Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    let\
    \ l3 = l1.filter(x => l2.includes(x));\n    return l3.sort((a, b) => a - b).filter((x,\
    \ i, a) => !i || x != a[i - 1]);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return [...new Set(l1.filter(i => l2.includes(i)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "  return [...new Set(l1.filter(e => l2.includes(e)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\
    \    const intersection = new Set([...set1].filter(x => set2.has(x)));\n    return\
    \ Array.from(intersection);\n}\n", "    return l1.filter(v => l2.includes(v)).sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) => a\
    \ - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a - b);\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    const result = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        if (l2.includes(l1[i]) && !result.includes(l1[i])) {\n          \
    \  result.push(l1[i]);\n        }\n    }\n    return result.sort((a, b) => a -\
    \ b);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result.sort();\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    let result: number[] = [];\n    let i: number = 0;\n\
    \    let j: number = 0;\n    while (i < l1.length && j < l2.length) {\n      \
    \  if (l1[i] === l2[j]) {\n            result.push(l1[i]);\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    return result;\n}\n",
  "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a - b);\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return result.sort();\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(n => l2.includes(n)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return result.sort().filter((item, pos, ary) => {\n        return !pos\
    \ || item != ary[pos - 1];\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b).filter((e, i, l) => l.indexOf(e) === i);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b).filter((x, i, a) => a.indexOf(x) === i);\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort();\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    let result: number[] = [];\n    let l1_set = new Set(l1);\n\
    \    let l2_set = new Set(l2);\n    l1_set.forEach(element => {\n        if (l2_set.has(element))\
    \ {\n            result.push(element);\n        }\n    });\n    return result.sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) => a\
    \ - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b) => a -\
    \ b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(e => l2.includes(e)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    let commonElements: number[] = [];\n    l1.forEach(element\
    \ => {\n        if (l2.includes(element)) {\n            commonElements.push(element);\n\
    \        }\n    });\n    return commonElements.sort((a, b) => a - b).filter((item,\
    \ index, array) => array.indexOf(item) === index);\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return l1.filter(n =>\
    \ l2.includes(n)).sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    let commonList: number[]\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                commonList.push(l1[i]);\n\
    \            }\n        }\n    }\n    return commonList.sort((a, b) => a - b);\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return l1.filter(e => l2.includes(e)).sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(e => l2.includes(e)))].sort((a,\
    \ b) => a - b);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
