name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two lists.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort();\n\
    }\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(e => l2.includes(e)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i\
    \ < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n       \
    \     if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n          \
    \  }\n        }\n    }\n    return result.sort();\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
