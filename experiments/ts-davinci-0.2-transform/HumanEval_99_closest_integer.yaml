name: HumanEval_99_closest_integer
language: ts
prompt: "//Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer(value: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
  10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
  -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
  0\"),0);\n}\n\ntest();"
completions: ["  return Math.round(parseFloat(value));\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n", "  return Math.round(parseFloat(value));\n}\n", "  const number = Number(value);\n\
    \  const decimal = number % 1;\n  if (decimal < 0.5) {\n    return Math.floor(number);\n\
    \  } else {\n    return Math.ceil(number);\n  }\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n", "  return Math.round(parseFloat(value));\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n", "  return Math.round(parseFloat(value));\n}\n", "    let num = Number(value);\n\
    \    let num1 = Math.floor(num);\n    let num2 = Math.ceil(num);\n    if (num\
    \ - num1 > num2 - num) {\n        return num2;\n    } else {\n        return num1;\n\
    \    }\n}\n", "  return Math.round(parseFloat(value));\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n", "  const number = Number(value);\n  const decimal = number % 1;\n  const\
    \ integer = Math.floor(number);\n  const nextInteger = integer + 1;\n  const distanceToInteger\
    \ = number - integer;\n  const distanceToNextInteger = nextInteger - number;\n\
    \  if (decimal === 0) {\n    return integer;\n  } else if (distanceToInteger <\
    \ distanceToNextInteger) {\n    return integer;\n  } else {\n    return nextInteger;\n\
    \  }\n}\n", "  return Math.round(parseFloat(value));\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n", "  const num = parseFloat(value);\n  const num_floor = Math.floor(num);\n\
    \  const num_ceil = Math.ceil(num);\n  const diff_floor = Math.abs(num - num_floor);\n\
    \  const diff_ceil = Math.abs(num - num_ceil);\n  if (diff_floor < diff_ceil)\
    \ {\n    return num_floor;\n  } else {\n    return num_ceil;\n  }\n}\n", "  return\
    \ Math.round(parseFloat(value));\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n", "  return Math.round(parseFloat(value));\n}\n", "    return Math.round(parseFloat(value));\n\
    }\n", "  return Math.round(parseFloat(value));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
