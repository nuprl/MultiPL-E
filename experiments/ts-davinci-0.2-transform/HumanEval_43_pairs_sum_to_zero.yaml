name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are two distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n", "    // TODO\n    return\
    \ false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    let flag: boolean = false;\n    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i]\
    \ + l[j] === 0) {\n                flag = true;\n            }\n        }\n  \
    \  }\n    return flag;\n}\n", "    let result: boolean = false;\n    for (let\
    \ i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++)\
    \ {\n            if (l[i] + l[j] === 0) {\n                result = true;\n  \
    \          }\n        }\n    }\n    return result;\n}\n", "    let i = 0;\n  \
    \  let j = 0;\n    while (i < l.length) {\n        j = i + 1;\n        while (j\
    \ < l.length) {\n            if (l[i] + l[j] === 0) {\n                return\
    \ true;\n            }\n            j = j + 1;\n        }\n        i = i + 1;\n\
    \    }\n    return false;\n}\n", "    // TODO: implement this function\n    return\
    \ false;\n}\n", "    let i: number;\n    let j: number;\n    for (i = 0; i < l.length;\
    \ i++) {\n        for (j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n", "    // TODO: implement this function\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n\
    }\n", "  // YOUR CODE HERE\n  return false;\n}\n", "    // TODO: implement this\
    \ function\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    Not implemented yet.\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    Not implemented yet.\");\n}\n", "  let i: number = 0;\n  let j: number = 0;\n\
    \  let k: number = 0;\n  let sum: number = 0;\n  for (i = 0; i < l.length; i++)\
    \ {\n    for (j = i + 1; j < l.length; j++) {\n      sum = l[i] + l[j];\n    \
    \  if (sum === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n", "    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n", "    // YOUR CODE HERE\n\
    \    throw new Error(\"Not implemented yet.\");\n}\n", "    let result: boolean\
    \ = false;\n    for (let i = 0; i < l.length; i++) {\n        for (let j = 0;\
    \ j < l.length; j++) {\n            if (i != j && l[i] + l[j] == 0) {\n      \
    \          result = true;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n\
    \    let sum: number = 0;\n    let result: boolean = false;\n    for (i = 0; i\
    \ < l.length; i++) {\n        for (j = i + 1; j < l.length; j++) {\n         \
    \   sum = l[i] + l[j];\n            if (sum === 0) {\n                result =\
    \ true;\n            }\n        }\n    }\n    return result;\n}\n", "  // YOUR\
    \ CODE HERE\n  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
