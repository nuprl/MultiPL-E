name: HumanEval_141_file_name_check
language: ts
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    // TODO: Implement this function\n    return \"No\";\n}\n", " \
    \   let file_name_regex: RegExp = /^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$/;\n\
    \    return file_name_regex.test(file_name) ? \"Yes\" : \"No\";\n}\n", "    let\
    \ dot_index = file_name.indexOf('.');\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    let name = file_name.substring(0, dot_index);\n    let digits_count\
    \ = 0;\n    for (let i = 0; i < name.length; i++) {\n        if (name[i] >= '0'\
    \ && name[i] <= '9') {\n            digits_count++;\n        }\n    }\n    if\
    \ (digits_count > 3) {\n        return \"No\";\n    }\n    if (dot_index == -1)\
    \ {\n        return \"No\";\n    }\n    if (name.length == 0) {\n        return\
    \ \"No\";\n    }\n    if (name[0] < 'a' || name[0] > 'z' && name[0] < 'A' || name[0]\
    \ > 'Z') {\n        return \"No\";\n    }\n    if (extension != 'txt' && extension\
    \ != 'exe' && extension != 'dll') {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n", "    let file_name_regex: RegExp = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$/;\n    return file_name_regex.test(file_name) ? \"Yes\" : \"No\"\
    ;\n}\n", "    let dot_index = file_name.indexOf('.');\n    let ext = file_name.substring(dot_index\
    \ + 1);\n    let name = file_name.substring(0, dot_index);\n    let digits = 0;\n\
    \    for (let i = 0; i < name.length; i++) {\n        if (name[i] >= '0' && name[i]\
    \ <= '9') {\n            digits++;\n        }\n    }\n    if (digits > 3) {\n\
    \        return \"No\";\n    }\n    if (ext != 'txt' && ext != 'exe' && ext !=\
    \ 'dll') {\n        return \"No\";\n    }\n    if (name.length == 0 || (name[0]\
    \ < 'a' || name[0] > 'z') && (name[0] < 'A' || name[0] > 'Z')) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\n", "    let dot_index = file_name.indexOf('.');\n\
    \    let before_dot = file_name.substring(0, dot_index);\n    let after_dot =\
    \ file_name.substring(dot_index + 1);\n    let digits_count = 0;\n    for (let\
    \ i = 0; i < before_dot.length; i++) {\n        if (before_dot[i] >= '0' && before_dot[i]\
    \ <= '9') {\n            digits_count++;\n        }\n    }\n    if (digits_count\
    \ > 3) {\n        return \"No\";\n    }\n    if (before_dot.length == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    if (after_dot != 'txt' && after_dot !=\
    \ 'exe' && after_dot != 'dll') {\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\n", "    let dot_index = file_name.indexOf('.');\n    let file_name_before_dot\
    \ = file_name.substring(0, dot_index);\n    let file_name_after_dot = file_name.substring(dot_index\
    \ + 1);\n    let valid_extensions = ['txt', 'exe', 'dll'];\n    let valid_extension\
    \ = valid_extensions.includes(file_name_after_dot);\n    let valid_file_name_before_dot\
    \ = file_name_before_dot.match(/[a-zA-Z]/g) && file_name_before_dot.match(/[a-zA-Z]/g).length\
    \ === 1 && file_name_before_dot.match(/[0-9]/g) && file_name_before_dot.match(/[0-9]/g).length\
    \ <= 3;\n    return valid_file_name_before_dot && valid_extension ? 'Yes' : 'No';\n\
    }\n", "    let dot_index = file_name.indexOf('.');\n    let file_name_without_extension\
    \ = file_name.substring(0, dot_index);\n    let file_extension = file_name.substring(dot_index\
    \ + 1);\n    let digits_count = 0;\n    for (let i = 0; i < file_name_without_extension.length;\
    \ i++) {\n        if (file_name_without_extension[i] >= '0' && file_name_without_extension[i]\
    \ <= '9') {\n            digits_count++;\n        }\n    }\n    if (digits_count\
    \ > 3) {\n        return \"No\";\n    }\n    if (file_name_without_extension[0]\
    \ < 'A' || file_name_without_extension[0] > 'z' ||\n        (file_name_without_extension[0]\
    \ > 'Z' && file_name_without_extension[0] < 'a')) {\n        return \"No\";\n\
    \    }\n    if (file_extension != \"txt\" && file_extension != \"exe\" && file_extension\
    \ != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", " \
    \   let dot_index = file_name.indexOf('.');\n    let file_name_before_dot = file_name.substring(0,\
    \ dot_index);\n    let file_name_after_dot = file_name.substring(dot_index + 1);\n\
    \    let file_name_after_dot_is_valid = file_name_after_dot === 'txt' || file_name_after_dot\
    \ === 'exe' || file_name_after_dot === 'dll';\n    let file_name_before_dot_is_valid\
    \ = file_name_before_dot.length > 0 && file_name_before_dot[0].match(/[a-zA-Z]/);\n\
    \    let file_name_is_valid = file_name_after_dot_is_valid && file_name_before_dot_is_valid;\n\
    \    let file_name_has_more_than_three_digits = file_name.match(/[0-9]/g).length\
    \ > 3;\n    return file_name_is_valid && !file_name_has_more_than_three_digits\
    \ ? 'Yes' : 'No';\n}\n", "    let dot_index = file_name.indexOf('.');\n    let\
    \ dot_count = 0;\n    let digit_count = 0;\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    let valid_extensions = ['txt', 'exe', 'dll'];\n    let valid_extension\
    \ = false;\n    for (let i = 0; i < file_name.length; i++) {\n        if (file_name[i]\
    \ == '.') {\n            dot_count++;\n        }\n        if (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            digit_count++;\n        }\n    }\n\
    \    for (let i = 0; i < valid_extensions.length; i++) {\n        if (extension\
    \ == valid_extensions[i]) {\n            valid_extension = true;\n        }\n\
    \    }\n    if (dot_count == 1 && digit_count <= 3 && valid_extension) {\n   \
    \     return 'Yes';\n    }\n    return 'No';\n}\n", "    const file_name_regex\
    \ = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n    return file_name_regex.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    let dot_index = file_name.indexOf('.');\n  \
    \  let extension = file_name.substring(dot_index + 1);\n    let file_name_without_extension\
    \ = file_name.substring(0, dot_index);\n    let digits_count = 0;\n    for (let\
    \ i = 0; i < file_name_without_extension.length; i++) {\n        if (file_name_without_extension[i]\
    \ >= '0' && file_name_without_extension[i] <= '9') {\n            digits_count++;\n\
    \        }\n    }\n    if (digits_count > 3) {\n        return \"No\";\n    }\n\
    \    if (file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n        return\
    \ \"No\";\n    }\n    if (file_name_without_extension.length == 0) {\n       \
    \ return \"No\";\n    }\n    if (file_name_without_extension[0] < 'A' || file_name_without_extension[0]\
    \ > 'z' ||\n        (file_name_without_extension[0] > 'Z' && file_name_without_extension[0]\
    \ < 'a')) {\n        return \"No\";\n    }\n    if (extension != 'txt' && extension\
    \ != 'exe' && extension != 'dll') {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n", "    let file_name_regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n\
    \    return file_name_regex.test(file_name) ? \"Yes\" : \"No\";\n}\n", "    let\
    \ dot_index = file_name.indexOf('.');\n    let dot_count = 0;\n    let digit_count\
    \ = 0;\n    let extension = file_name.substring(dot_index + 1);\n    let valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n    let valid_extension = false;\n    let valid_name\
    \ = false;\n    let valid_name_characters = 0;\n    let valid_name_characters_count\
    \ = 0;\n    let valid_name_characters_count_max = 0;\n    let valid_name_characters_count_min\
    \ = 0;\n    let valid_name_characters_count_min_max = 0;\n    let valid_name_characters_count_min_max_count\
    \ = 0;\n    let valid_name_characters_count_min_max_count_max = 0;\n    let valid_name_characters_count_min_max_count_min\
    \ = 0;\n    let valid_name_characters_count_min_max_count_min_max = 0;\n    let\
    \ valid_name_characters_count_min_max_count_min_max_count = 0;\n    let valid_name_characters_count_min_max_count_min_max_count_max\
    \ = 0;\n    let valid_name_characters_count_min_max_count_min_max_count_min =\
    \ 0;\n    let valid_name_characters_count_min_max_count_min_max_count_min_max\
    \ = 0;\n    let valid_name_characters_count_min_max_count_min_max_count_min_max_count\
    \ = 0;\n    let valid_name_characters_count_min_max_count_min_max_count_min_max_count_max\
    \ = 0;\n    let valid_name_characters_count_min_max_count_min_max_count_min_max_count_min\
    \ = 0;\n    let valid_name_characters_count_min_max_count_min_max_count_min_max_count_min_max\
    \ = 0;\n    let valid_name_characters_count", "    let dot_index = file_name.indexOf('.');\n\
    \    let extension = file_name.substring(dot_index + 1);\n    let name = file_name.substring(0,\
    \ dot_index);\n    let digits_count = 0;\n    for (let i = 0; i < name.length;\
    \ i++) {\n        if (name[i] >= '0' && name[i] <= '9') {\n            digits_count++;\n\
    \        }\n    }\n    if (digits_count > 3) {\n        return \"No\";\n    }\n\
    \    if (extension != \"txt\" && extension != \"exe\" && extension != \"dll\"\
    ) {\n        return \"No\";\n    }\n    if (name.length == 0 || (name[0] < 'a'\
    \ || name[0] > 'z') && (name[0] < 'A' || name[0] > 'Z')) {\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}\n", "    let dot_index = file_name.indexOf('.');\n\
    \    let dot_count = 0;\n    let digit_count = 0;\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    let valid_extensions = ['txt', 'exe', 'dll'];\n    let valid_extension\
    \ = false;\n    let valid_name = false;\n    let valid_digit_count = false;\n\
    \    let valid_dot_count = false;\n\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] === '.') {\n            dot_count++;\n    \
    \    }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n          \
    \  digit_count++;\n        }\n    }\n\n    if (dot_count === 1) {\n        valid_dot_count\
    \ = true;\n    }\n\n    if (digit_count <= 3) {\n        valid_digit_count = true;\n\
    \    }\n\n    for (let i = 0; i < valid_extensions.length; i++) {\n        if\
    \ (extension === valid_extensions[i]) {\n            valid_extension = true;\n\
    \        }\n    }\n\n    if (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0]\
    \ >= 'A' && file_name[0] <= 'Z') {\n        valid_name = true;\n    }\n\n    if\
    \ (valid_digit_count && valid_dot_count && valid_extension && valid_name) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", "   \
    \ let dot_index = file_name.indexOf('.');\n    let file_name_without_extension\
    \ = file_name.substring(0, dot_index);\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    let valid_extensions = ['txt', 'exe', 'dll'];\n    let valid_extension\
    \ = valid_extensions.includes(extension);\n    let valid_name = /^[a-zA-Z][a-zA-Z0-9]*$/.test(file_name_without_extension);\n\
    \    let valid_digits = /^[a-zA-Z0-9]*$/.test(file_name_without_extension);\n\
    \    let valid_digits_count = file_name_without_extension.match(/[0-9]/g).length\
    \ <= 3;\n    return valid_name && valid_extension && valid_digits && valid_digits_count\
    \ ? 'Yes' : 'No';\n}\n", "    let dot_index = file_name.indexOf('.');\n    let\
    \ file_name_without_extension = file_name.substring(0, dot_index);\n    let file_extension\
    \ = file_name.substring(dot_index + 1);\n    let digit_count = 0;\n    for (let\
    \ i = 0; i < file_name_without_extension.length; i++) {\n        if (file_name_without_extension[i]\
    \ >= '0' && file_name_without_extension[i] <= '9') {\n            digit_count++;\n\
    \        }\n    }\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\
    \    if (file_name_without_extension.length == 0) {\n        return \"No\";\n\
    \    }\n    if (file_name_without_extension[0] < 'a' || file_name_without_extension[0]\
    \ > 'z' && file_name_without_extension[0] < 'A' || file_name_without_extension[0]\
    \ > 'Z') {\n        return \"No\";\n    }\n    if (file_extension != 'txt' &&\
    \ file_extension != 'exe' && file_extension != 'dll') {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}\n", "    let dot_index = file_name.indexOf('.');\n\
    \    let sub_string_before_dot = file_name.substring(0, dot_index);\n    let sub_string_after_dot\
    \ = file_name.substring(dot_index + 1);\n    let digit_count = 0;\n    for (let\
    \ i = 0; i < sub_string_before_dot.length; i++) {\n        if (sub_string_before_dot[i]\
    \ >= '0' && sub_string_before_dot[i] <= '9') {\n            digit_count++;\n \
    \       }\n    }\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\
    \    if (sub_string_before_dot.length == 0) {\n        return \"No\";\n    }\n\
    \    if (sub_string_before_dot[0] < 'a' || sub_string_before_dot[0] > 'z' && sub_string_before_dot[0]\
    \ < 'A' || sub_string_before_dot[0] > 'Z') {\n        return \"No\";\n    }\n\
    \    if (sub_string_after_dot != 'txt' && sub_string_after_dot != 'exe' && sub_string_after_dot\
    \ != 'dll') {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "   \
    \ let count = 0;\n    let dot = false;\n    let extension = false;\n    let valid\
    \ = false;\n    for (let i = 0; i < file_name.length; i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if\
    \ (file_name[i] == '.') {\n            dot = true;\n        }\n        if (file_name[i]\
    \ == '.' && file_name[i + 1] == 't' && file_name[i + 2] == 'x' && file_name[i\
    \ + 3] == 't') {\n            extension = true;\n        }\n        if (file_name[i]\
    \ == '.' && file_name[i + 1] == 'e' && file_name[i + 2] == 'x' && file_name[i\
    \ + 3] == 'e') {\n            extension = true;\n        }\n        if (file_name[i]\
    \ == '.' && file_name[i + 1] == 'd' && file_name[i + 2] == 'l' && file_name[i\
    \ + 3] == 'l') {\n            extension = true;\n        }\n        if (file_name[0]\
    \ >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z')\
    \ {\n            valid = true;\n        }\n    }\n    if (count <= 3 && dot ==\
    \ true && extension == true && valid == true) {\n        return \"Yes\";\n   \
    \ }\n    else {\n        return \"No\";\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
