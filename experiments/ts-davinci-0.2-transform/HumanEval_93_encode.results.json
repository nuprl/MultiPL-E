{
  "language": "ts",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkifw6fvj.js:27:12)\n    at Object.<anonymous> (/tmp/tmpkifw6fvj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8oxlbozc.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8oxlbozc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333508
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            result = result.slice(0, result.length - 1) + vowels[(index + 2) % 5];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkz86ovux.js:32:12)\n    at Object.<anonymous> (/tmp/tmpkz86ovux.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let vowels: string = 'aeiou';\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentLetter);\n            let newIndexOfVowel: number = indexOfVowel + 2;\n            if (newIndexOfVowel > 4) {\n                newIndexOfVowel = newIndexOfVowel - 5;\n            }\n            encodedMessage += vowels[newIndexOfVowel];\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy1q442rx.js:35:12)\n    at Object.<anonymous> (/tmp/tmpy1q442rx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "tost\nThus us i mossigo\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = \"aeiou\";\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encoded += alphabet[(alphabet.indexOf(char) + 2) % 26].toUpperCase();\n        } else {\n            encoded += alphabet[(alphabet.indexOf(char) + 2) % 26];\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbwn_rblk.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbwn_rblk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentChar);\n            let newIndex: number = (indexOfVowel + 2) % 5;\n            encodedMessage += vowels[newIndex];\n        } else {\n            encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5ocovu4_.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5ocovu4_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(char.toLowerCase());\n            let newIndexOfVowel: number = (indexOfVowel + 2) % 5;\n            encodedMessage += vowels[newIndexOfVowel];\n        } else {\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0w59eb7q.js:30:12)\n    at Object.<anonymous> (/tmp/tmp0w59eb7q.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char === \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else if (char === \"u\") {\n      char = \"y\";\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp2wvpw7rz.js:44:12)\n    at Object.<anonymous> (/tmp/tmp2wvpw7rz.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage = encodedMessage.replace(encodedMessage[i], vowels[(vowels.indexOf(encodedMessage[i]) + 2) % 5]);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptsaz0dw8.js:30:12)\n    at Object.<anonymous> (/tmp/tmptsaz0dw8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuyrszui_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpuyrszui_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\";\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encoded += alphabet[(alphabet.indexOf(char) + 2) % 26].toUpperCase();\n        } else {\n            if (vowels.includes(char)) {\n                encoded += alphabet[(alphabet.indexOf(char) + 2) % 26];\n            } else {\n                encoded += char;\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8ax38gpf.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8ax38gpf.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuyrszui_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpuyrszui_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n        } else {\n            let encodedChar: string = \"\";\n            if (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n                encodedChar = alphabet[(currentCharIndex + 2) % 26];\n            } else {\n                encodedChar = alphabet[currentCharIndex];\n            }\n            if (currentChar === currentChar.toUpperCase()) {\n                encodedChar = encodedChar.toUpperCase();\n            }\n            encodedMessage += encodedChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkjopf9dc.js:40:12)\n    at Object.<anonymous> (/tmp/tmpkjopf9dc.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            if (index === 4) {\n                encoded += vowels[0];\n            } else {\n                encoded += vowels[index + 2];\n            }\n        } else {\n            if (char === char.toUpperCase()) {\n                encoded += char.toLowerCase();\n            } else {\n                encoded += char.toUpperCase();\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpm7pdtsei.js:39:12)\n    at Object.<anonymous> (/tmp/tmpm7pdtsei.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length; i++) {\n        const char: string = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            const index: number = vowels.indexOf(char.toLowerCase());\n            const newIndex: number = (index + 2) % vowels.length;\n            result += vowels[newIndex];\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyfn68e1k.js:30:12)\n    at Object.<anonymous> (/tmp/tmpyfn68e1k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.includes(letter.toLowerCase())) {\n            let index = vowels.indexOf(letter.toLowerCase());\n            let newIndex = (index + 2) % 5;\n            encoded += vowels[newIndex];\n        } else {\n            encoded += letter;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwbh59h6p.js:30:12)\n    at Object.<anonymous> (/tmp/tmpwbh59h6p.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkifw6fvj.js:27:12)\n    at Object.<anonymous> (/tmp/tmpkifw6fvj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            let index: number = message.indexOf(char);\n            encodedMessage += message[index + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3tzhb8jo.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3tzhb8jo.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let result: string = '';\n  for (let i = 0; i < message.length; i++) {\n    let char: string = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (char === 'a') {\n      char = 'c';\n    } else if (char === 'e') {\n      char = 'g';\n    } else if (char === 'i') {\n      char = 'k';\n    } else if (char === 'o') {\n      char = 'q';\n    } else if (char === 'u') {\n      char = 'y';\n    }\n    result += char;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpd7_r0qm5.js:44:12)\n    at Object.<anonymous> (/tmp/tmpd7_r0qm5.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdjg57jg1.js:27:12)\n    at Object.<anonymous> (/tmp/tmpdjg57jg1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo69tlth9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpo69tlth9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            let index: number = message.indexOf(char);\n            let nextChar: string = message[index + 2];\n            encodedMessage += nextChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp29f52m4p.js:32:12)\n    at Object.<anonymous> (/tmp/tmp29f52m4p.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let index: number = alphabet.indexOf(currentLetter);\n            let newIndex: number = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n        } else if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpedeaipqx.js:37:12)\n    at Object.<anonymous> (/tmp/tmpedeaipqx.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5opp08mw.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5opp08mw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char.match(/[a-z]/i)) {\n            let charCode: number = char.charCodeAt(0);\n            if (charCode >= 65 && charCode <= 90) {\n                charCode += 32;\n            } else if (charCode >= 97 && charCode <= 122) {\n                charCode -= 32;\n            }\n            char = String.fromCharCode(charCode);\n        }\n        if (char.match(/[aeiou]/i)) {\n            let charCode: number = char.charCodeAt(0);\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n            char = String.fromCharCode(charCode);\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp98sak07j.js:27:12)\n    at Object.<anonymous> (/tmp/tmp98sak07j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            if (index === 4) {\n                index = -1;\n            }\n            char = vowels[index + 2];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzill_w9u.js:36:12)\n    at Object.<anonymous> (/tmp/tmpzill_w9u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n            let index: number = alphabet.indexOf(letter);\n            result += alphabet[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp61yr5hn3.js:30:12)\n    at Object.<anonymous> (/tmp/tmp61yr5hn3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        if (vowels.includes(encodedMessage[i])) {\n            let index: number = alphabet.indexOf(encodedMessage[i]);\n            encodedMessage = encodedMessage.slice(0, i) + alphabet[index + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphamd82ls.js:34:12)\n    at Object.<anonymous> (/tmp/tmphamd82ls.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "tHIS IS A MESSAGE\n",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            encoded += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppve52fjh.js:30:12)\n    at Object.<anonymous> (/tmp/tmppve52fjh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels: string = 'aeiou';\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (vowels.includes(currentLetter)) {\n            let index: number = alphabet.indexOf(currentLetter);\n            encodedMessage += alphabet[index + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprjlsoukc.js:33:12)\n    at Object.<anonymous> (/tmp/tmprjlsoukc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let vowels = \"aeiou\";\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      let index = vowels.indexOf(char.toLowerCase());\n      let newIndex = index + 2;\n      if (newIndex >= vowels.length) {\n        newIndex -= vowels.length;\n      }\n      result += vowels[newIndex];\n    } else {\n      if (char === char.toUpperCase()) {\n        result += char.toLowerCase();\n      } else {\n        result += char.toUpperCase();\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3gju7425.js:38:12)\n    at Object.<anonymous> (/tmp/tmp3gju7425.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333630
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuyrszui_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpuyrszui_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char.match(/[a-z]/i)) {\n            if (char.match(/[a-z]/)) {\n                char = char.toUpperCase();\n            } else {\n                char = char.toLowerCase();\n            }\n            if (char.match(/[aeiou]/i)) {\n                char = String.fromCharCode(char.charCodeAt(0) + 2);\n            }\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encoded += char;\n        } else {\n            char = char.toUpperCase();\n            encoded += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            if (index === 4) {\n                encoded += vowels[0];\n            } else {\n                encoded += vowels[index + 2];\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplftrxlf9.js:39:12)\n    at Object.<anonymous> (/tmp/tmplftrxlf9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === 'a') {\n            char = 'c';\n        } else if (char === 'e') {\n            char = 'g';\n        } else if (char === 'i') {\n            char = 'k';\n        } else if (char === 'o') {\n            char = 'q';\n        } else if (char === 'u') {\n            char = 'y';\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpa0oaxlnk.js:44:12)\n    at Object.<anonymous> (/tmp/tmpa0oaxlnk.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += char;\n        } else if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n            encodedMessage += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            index += 2;\n            if (index > 4) {\n                index -= 5;\n            }\n            encodedMessage += vowels[index];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2_ut3o0v.js:38:12)\n    at Object.<anonymous> (/tmp/tmp2_ut3o0v.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0; i < encodedMessage.length; i++) {\n        if (encodedMessage[i] === \"a\") {\n            encodedMessage = encodedMessage.replace(\"a\", \"c\");\n        } else if (encodedMessage[i] === \"e\") {\n            encodedMessage = encodedMessage.replace(\"e\", \"g\");\n        } else if (encodedMessage[i] === \"i\") {\n            encodedMessage = encodedMessage.replace(\"i\", \"k\");\n        } else if (encodedMessage[i] === \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"q\");\n        } else if (encodedMessage[i] === \"u\") {\n            encodedMessage = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmppqnuh9q_.js:47:12)\n    at Object.<anonymous> (/tmp/tmppqnuh9q_.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else {\n            let newLetterIndex: number = currentLetterIndex + 2;\n            if (newLetterIndex > 25) {\n                newLetterIndex -= 26;\n            }\n            let newLetter: string = alphabet[newLetterIndex];\n            if (vowels.indexOf(newLetter) !== -1) {\n                newLetter = newLetter.toUpperCase();\n            }\n            encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfd61fjsb.js:38:12)\n    at Object.<anonymous> (/tmp/tmpfd61fjsb.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char == char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\") {\n            encodedMessage = encodedMessage.slice(0, -1);\n            let index: number = message.indexOf(char);\n            encodedMessage += message[index + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi_vtew9t.js:32:12)\n    at Object.<anonymous> (/tmp/tmpi_vtew9t.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += alphabet[currentLetterIndex].toUpperCase();\n        } else if (vowels.indexOf(currentLetter) !== -1) {\n            encodedMessage += alphabet[(currentLetterIndex + 2) % alphabet.length];\n        } else {\n            encodedMessage += alphabet[currentLetterIndex];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2uo4wji8.js:36:12)\n    at Object.<anonymous> (/tmp/tmp2uo4wji8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        let index: number = alphabet.indexOf(letter.toLowerCase());\n        if (index === -1) {\n            result += letter;\n        } else {\n            let newIndex: number = index + 2;\n            if (newIndex >= alphabet.length) {\n                newIndex -= alphabet.length;\n            }\n            let newLetter: string = alphabet[newIndex];\n            if (vowels.indexOf(newLetter) !== -1) {\n                newLetter = newLetter.toUpperCase();\n            }\n            result += newLetter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu0m13xn6.js:38:12)\n    at Object.<anonymous> (/tmp/tmpu0m13xn6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            letter = letter.toLowerCase();\n            let index: number = alphabet.indexOf(letter);\n            index += 2;\n            if (index > 25) {\n                index -= 26;\n            }\n            letter = alphabet[index];\n            letter = letter.toUpperCase();\n        } else {\n            let index: number = alphabet.indexOf(letter);\n            index += 2;\n            if (index > 25) {\n                index -= 26;\n            }\n            letter = alphabet[index];\n        }\n        encodedMessage += letter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl5v2umyg.js:41:12)\n    at Object.<anonymous> (/tmp/tmpl5v2umyg.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += char;\n        } else {\n            char = char.toUpperCase();\n            encodedMessage += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            if (index === vowels.length - 1) {\n                encodedMessage += vowels[0];\n            } else {\n                encodedMessage += vowels[index + 1];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teist'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_xjle9ju.js:39:12)\n    at Object.<anonymous> (/tmp/tmp_xjle9ju.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teist',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            index += 2;\n            if (index >= vowels.length) {\n                index -= vowels.length;\n            }\n            encodedMessage += vowels[index];\n        } else {\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmino2j64.js:33:12)\n    at Object.<anonymous> (/tmp/tmpmino2j64.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase())) {\n            encodedMessage += getNextVowel(message[i]);\n        } else {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe4afcya5.ts(16,31): error TS2304: Cannot find name 'getNextVowel'.\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg8x04iom.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg8x04iom.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333510
    },
    {
      "exit_code": 0,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char.match(/[a-z]/i)) {\n            let charCode = char.charCodeAt(0);\n            if (charCode >= 65 && charCode <= 90) {\n                charCode += 32;\n            } else if (charCode >= 97 && charCode <= 122) {\n                charCode -= 32;\n            }\n            char = String.fromCharCode(charCode);\n        }\n        if (char.match(/[aeiou]/i)) {\n            let charCode = char.charCodeAt(0);\n            charCode += 2;\n            if (charCode > 122) {\n                charCode -= 26;\n            }\n            char = String.fromCharCode(charCode);\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char.toLowerCase() === \"a\") {\n            encodedMessage += \"c\";\n        } else if (char.toLowerCase() === \"e\") {\n            encodedMessage += \"g\";\n        } else if (char.toLowerCase() === \"i\") {\n            encodedMessage += \"k\";\n        } else if (char.toLowerCase() === \"o\") {\n            encodedMessage += \"q\";\n        } else if (char.toLowerCase() === \"u\") {\n            encodedMessage += \"y\";\n        } else if (char.toLowerCase() === char) {\n            encodedMessage += char.toUpperCase();\n        } else {\n            encodedMessage += char.toLowerCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpfydcbez6.js:43:12)\n    at Object.<anonymous> (/tmp/tmpfydcbez6.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiaydq69m.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiaydq69m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char == char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char == \"a\") {\n            char = \"c\";\n        } else if (char == \"e\") {\n            char = \"g\";\n        } else if (char == \"i\") {\n            char = \"k\";\n        } else if (char == \"o\") {\n            char = \"q\";\n        } else if (char == \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpqrblnnwd.js:44:12)\n    at Object.<anonymous> (/tmp/tmpqrblnnwd.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333512
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.includes(letter.toLowerCase())) {\n            let index = alphabet.indexOf(letter.toLowerCase());\n            index += 2;\n            if (index > 25) {\n                index -= 26;\n            }\n            letter = alphabet[index];\n        }\n        if (letter === letter.toUpperCase()) {\n            letter = letter.toLowerCase();\n        } else {\n            letter = letter.toUpperCase();\n        }\n        encodedMessage += letter;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa0blth1y.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa0blth1y.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n      encodedMessage += char;\n    } else if (char === char.toLowerCase()) {\n      char = char.toUpperCase();\n      encodedMessage += char;\n    }\n    if (vowels.includes(char)) {\n      encodedMessage += vowels[(vowels.indexOf(char) + 2) % 5];\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf3y9453j.js:33:12)\n    at Object.<anonymous> (/tmp/tmpf3y9453j.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        if (vowels.indexOf(encodedMessage[i]) !== -1) {\n            let index: number = alphabet.indexOf(encodedMessage[i]);\n            encodedMessage = encodedMessage.slice(0, i) + alphabet[index + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp1zamcfur.js:35:12)\n    at Object.<anonymous> (/tmp/tmp1zamcfur.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex !== -1) {\n            let encodedLetter: string = \"\";\n            if (vowels.indexOf(currentLetter.toLowerCase()) !== -1) {\n                encodedLetter = alphabet[(currentLetterIndex + 2) % 26];\n            } else {\n                encodedLetter = alphabet[currentLetterIndex];\n            }\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedLetter = encodedLetter.toUpperCase();\n            }\n            encodedMessage += encodedLetter;\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpujm7uszc.js:40:12)\n    at Object.<anonymous> (/tmp/tmpujm7uszc.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else {\n            let encodedLetterIndex: number = currentLetterIndex + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedLetter = encodedLetter.toUpperCase();\n            }\n            encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd3rx3iy1.js:37:12)\n    at Object.<anonymous> (/tmp/tmpd3rx3iy1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333501
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiaydq69m.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiaydq69m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        for (let j: number = 0; j < vowels.length; j++) {\n            if (encodedMessage[i] === vowels[j]) {\n                encodedMessage = encodedMessage.slice(0, i) + alphabet[(alphabet.indexOf(vowels[j]) + 2) % 26] + encodedMessage.slice(i + 1);\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpxhkel_zp.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxhkel_zp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            currentChar = currentChar.toLowerCase();\n            encodedMessage += currentChar;\n        } else if (currentChar === currentChar.toLowerCase()) {\n            currentChar = currentChar.toUpperCase();\n            encodedMessage += currentChar;\n        }\n        if (vowels.includes(currentChar)) {\n            let currentVowelIndex: number = alphabet.indexOf(currentChar);\n            let encodedVowelIndex: number = currentVowelIndex + 2;\n            let encodedVowel: string = alphabet[encodedVowelIndex];\n            encodedMessage += encodedVowel;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvgj_9b88.js:37:12)\n    at Object.<anonymous> (/tmp/tmpvgj_9b88.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let encoded = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            let newIndex = (index + 2) % 5;\n            encoded += vowels[newIndex];\n        } else {\n            encoded += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmparebo2j7.js:30:12)\n    at Object.<anonymous> (/tmp/tmparebo2j7.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        let charCode = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 32;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode -= 32;\n        }\n        if (charCode === 97) {\n            charCode = 99;\n        } else if (charCode === 101) {\n            charCode = 103;\n        } else if (charCode === 105) {\n            charCode = 107;\n        } else if (charCode === 111) {\n            charCode = 113;\n        } else if (charCode === 117) {\n            charCode = 119;\n        }\n        encodedMessage += String.fromCharCode(charCode);\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpifyarwfj.js:45:12)\n    at Object.<anonymous> (/tmp/tmpifyarwfj.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            currentChar = currentChar.toLowerCase();\n            encodedMessage += currentChar;\n        } else {\n            currentChar = currentChar.toUpperCase();\n            encodedMessage += currentChar;\n        }\n        if (vowels.includes(currentChar)) {\n            let index: number = vowels.indexOf(currentChar);\n            if (index + 2 > 4) {\n                encodedMessage += vowels[index + 2 - 5];\n            } else {\n                encodedMessage += vowels[index + 2];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqd0z6c46.js:39:12)\n    at Object.<anonymous> (/tmp/tmpqd0z6c46.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toLowerCase();\n        } else {\n            result += letter.toUpperCase();\n        }\n        if (vowels.includes(letter)) {\n            let index: number = alphabet.indexOf(letter);\n            result = result.slice(0, result.length - 1) + alphabet[index + 2];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp42la5fu5.js:33:12)\n    at Object.<anonymous> (/tmp/tmp42la5fu5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (vowels.includes(currentLetter.toLowerCase())) {\n            let index = vowels.indexOf(currentLetter.toLowerCase());\n            let newIndex = (index + 2) % 5;\n            encodedMessage += vowels[newIndex];\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphj05fqlp.js:30:12)\n    at Object.<anonymous> (/tmp/tmphj05fqlp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuyrszui_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpuyrszui_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index: number = alphabet.indexOf(letter);\n            let newLetter: string = alphabet[index + 2];\n            encodedMessage += newLetter;\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9g2raqw2.js:31:12)\n    at Object.<anonymous> (/tmp/tmp9g2raqw2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let index: number = alphabet.indexOf(currentLetter);\n            let newIndex: number = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n        } else if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpedeaipqx.js:37:12)\n    at Object.<anonymous> (/tmp/tmpedeaipqx.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            encodedMessage += message[i + 2];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8oxlbozc.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8oxlbozc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333508
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += char;\n        } else if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n            encodedMessage += char;\n        }\n        if (vowels.includes(char)) {\n            if (char === \"u\") {\n                encodedMessage = encodedMessage.slice(0, -1);\n                encodedMessage += \"a\";\n            } else {\n                encodedMessage = encodedMessage.slice(0, -1);\n                encodedMessage += vowels[vowels.indexOf(char) + 1];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfzq7wmm2.js:40:12)\n    at Object.<anonymous> (/tmp/tmpfzq7wmm2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            encoded += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppve52fjh.js:30:12)\n    at Object.<anonymous> (/tmp/tmppve52fjh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333627
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char) !== -1) {\n            let index: number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf8f0khdy.js:30:12)\n    at Object.<anonymous> (/tmp/tmpf8f0khdy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333501
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = '';\n    let vowels: string = 'aeiou';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n        if (vowels.includes(char.toLowerCase())) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            encoded += vowels[(index + 2) % 5];\n        }\n    }\n    return encoded;\n}\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpms0eui0t.js:34:12)\n    at Object.<anonymous> (/tmp/tmpms0eui0t.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEoST\ntHIuS IuS Ai MEoSSAiGEo\n",
      "timestamp": 1660333634
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += char;\n        } else {\n            char = char.toUpperCase();\n            encodedMessage += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            let newIndex: number = (index + 2) % 5;\n            encodedMessage = encodedMessage.replace(char, vowels[newIndex]);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9a1j80sw.js:35:12)\n    at Object.<anonymous> (/tmp/tmp9a1j80sw.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n        } else {\n            if (currentChar === currentChar.toUpperCase()) {\n                if (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n                    encodedMessage += alphabet[(currentCharIndex + 2) % alphabet.length].toUpperCase();\n                } else {\n                    encodedMessage += alphabet[currentCharIndex].toUpperCase();\n                }\n            } else {\n                if (vowels.indexOf(currentChar) !== -1) {\n                    encodedMessage += alphabet[(currentCharIndex + 2) % alphabet.length];\n                } else {\n                    encodedMessage += alphabet[currentCharIndex];\n                }\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzko8uvfi.js:45:12)\n    at Object.<anonymous> (/tmp/tmpzko8uvfi.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            currentChar = currentChar.toLowerCase();\n        } else {\n            currentChar = currentChar.toUpperCase();\n        }\n        if (currentChar === \"a\") {\n            currentChar = \"c\";\n        } else if (currentChar === \"e\") {\n            currentChar = \"g\";\n        } else if (currentChar === \"i\") {\n            currentChar = \"k\";\n        } else if (currentChar === \"o\") {\n            currentChar = \"q\";\n        } else if (currentChar === \"u\") {\n            currentChar = \"y\";\n        }\n        encodedMessage += currentChar;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpi2ck59ed.js:44:12)\n    at Object.<anonymous> (/tmp/tmpi2ck59ed.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        const char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbi56vwo8.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbi56vwo8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbpgnli4d.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbpgnli4d.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n            encodedMessage += currentLetter;\n        } else if (currentLetter === currentLetter.toLowerCase()) {\n            currentLetter = currentLetter.toUpperCase();\n            encodedMessage += currentLetter;\n        }\n        if (vowels.includes(currentLetter)) {\n            encodedMessage = encodedMessage.slice(0, -1);\n            let index: number = vowels.indexOf(currentLetter);\n            if (index === 4) {\n                encodedMessage += vowels[0];\n            } else {\n                encodedMessage += vowels[index + 2];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1e59tcjw.js:40:12)\n    at Object.<anonymous> (/tmp/tmp1e59tcjw.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter) > -1) {\n            let index: number = alphabet.indexOf(letter);\n            let newIndex: number = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex];\n        } else if (alphabet.indexOf(letter) > -1) {\n            let index: number = alphabet.indexOf(letter);\n            let newIndex: number = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            encodedMessage += alphabet[newIndex].toUpperCase();\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps2sr7e8q.js:42:12)\n    at Object.<anonymous> (/tmp/tmps2sr7e8q.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n            encodedMessage += currentLetter;\n        } else {\n            currentLetter = currentLetter.toUpperCase();\n            encodedMessage += currentLetter;\n        }\n        if (vowels.includes(currentLetter)) {\n            let indexOfVowel: number = alphabet.indexOf(currentLetter);\n            let indexOfEncodedVowel: number = indexOfVowel + 2;\n            let encodedVowel: string = alphabet[indexOfEncodedVowel];\n            encodedMessage = encodedMessage.replace(currentLetter, encodedVowel);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmps4vg4ido.js:38:12)\n    at Object.<anonymous> (/tmp/tmps4vg4ido.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (alphabet.indexOf(currentLetter) !== -1) {\n            let currentLetterIndex: number = alphabet.indexOf(currentLetter);\n            let encodedLetterIndex: number = currentLetterIndex + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n            if (vowels.indexOf(currentLetter) !== -1) {\n                encodedMessage += encodedLetter.toUpperCase();\n            } else {\n                encodedMessage += encodedLetter;\n            }\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphewda4tx.js:40:12)\n    at Object.<anonymous> (/tmp/tmphewda4tx.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n        } else if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += alphabet[currentCharIndex].toUpperCase();\n        } else if (vowels.indexOf(currentChar) !== -1) {\n            encodedMessage += alphabet[(currentCharIndex + 2) % 26];\n        } else {\n            encodedMessage += alphabet[currentCharIndex];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp33ppxemv.js:36:12)\n    at Object.<anonymous> (/tmp/tmp33ppxemv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            let newChar = vowels[(index + 2) % 5];\n            encodedMessage += newChar.toUpperCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn9r0nldy.js:30:12)\n    at Object.<anonymous> (/tmp/tmpn9r0nldy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp37fxvsge.js:29:12)\n    at Object.<anonymous> (/tmp/tmp37fxvsge.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333501
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase())) {\n            encodedMessage += String.fromCharCode(message.charCodeAt(i) + 2);\n        } else {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmxh3dqrc.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmxh3dqrc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentChar);\n            let nextVowel: string = vowels[(indexOfVowel + 2) % 5];\n            encodedMessage += nextVowel;\n        } else if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxrgvx_ol.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxrgvx_ol.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "ToST\ntHuS uS i MoSSiGo\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            const index = alphabet.indexOf(char.toLowerCase());\n            encoded += alphabet[index + 2];\n        } else {\n            encoded += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps82q51oz.js:30:12)\n    at Object.<anonymous> (/tmp/tmps82q51oz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      encodedMessage += letter.toLowerCase();\n    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprezmexr_.js:27:12)\n    at Object.<anonymous> (/tmp/tmprezmexr_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr7ue5e67.js:42:12)\n    at Object.<anonymous> (/tmp/tmpr7ue5e67.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp98sak07j.js:27:12)\n    at Object.<anonymous> (/tmp/tmp98sak07j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            encoded += String.fromCharCode(char.charCodeAt(0) + 2);\n        } else {\n            encoded += char;\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpca3tp956.js:28:12)\n    at Object.<anonymous> (/tmp/tmpca3tp956.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4lwv2ec9.js:30:12)\n    at Object.<anonymous> (/tmp/tmp4lwv2ec9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333518
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char === \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else if (char === \"u\") {\n      char = \"y\";\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp2wvpw7rz.js:44:12)\n    at Object.<anonymous> (/tmp/tmp2wvpw7rz.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333628
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === 'a' || char === 'A') {\n            encodedMessage += 'c';\n        } else if (char === 'e' || char === 'E') {\n            encodedMessage += 'g';\n        } else if (char === 'i' || char === 'I') {\n            encodedMessage += 'k';\n        } else if (char === 'o' || char === 'O') {\n            encodedMessage += 'q';\n        } else if (char === 'u' || char === 'U') {\n            encodedMessage += 'y';\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphkaqc1lb.js:44:12)\n    at Object.<anonymous> (/tmp/tmphkaqc1lb.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEgST\ntHIkS IkS Ac MEgSSAcGEg\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toLowerCase();\n        } else {\n            result += letter.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplq392xlr.js:29:12)\n    at Object.<anonymous> (/tmp/tmplq392xlr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333637
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            if (index === 4) {\n                index = -1;\n            }\n            char = vowels[index + 2];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp____uva_.js:36:12)\n    at Object.<anonymous> (/tmp/tmp____uva_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      letter = letter.toLowerCase();\n      let index = alphabet.indexOf(letter);\n      let newLetter = alphabet[index + 2];\n      encodedMessage += newLetter.toUpperCase();\n    } else {\n      let index = alphabet.indexOf(letter);\n      let newLetter = alphabet[index + 2];\n      encodedMessage += newLetter;\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc3alkbfe.js:33:12)\n    at Object.<anonymous> (/tmp/tmpc3alkbfe.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n            let index: number = vowels.indexOf(currentChar);\n            encodedMessage += vowels[(index + 2) % 5];\n        } else if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz0tivshf.js:32:12)\n    at Object.<anonymous> (/tmp/tmpz0tivshf.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let encodedMessage: string = \"\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i].toLowerCase()) + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_4unagok.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_4unagok.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n        if (letter === \"a\" || letter === \"A\") {\n            encodedMessage += \"c\";\n        } else if (letter === \"e\" || letter === \"E\") {\n            encodedMessage += \"g\";\n        } else if (letter === \"i\" || letter === \"I\") {\n            encodedMessage += \"k\";\n        } else if (letter === \"o\" || letter === \"O\") {\n            encodedMessage += \"q\";\n        } else if (letter === \"u\" || letter === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_e_zkl7b.js:42:12)\n    at Object.<anonymous> (/tmp/tmp_e_zkl7b.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333516
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n            encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp62qh0koa.js:30:12)\n    at Object.<anonymous> (/tmp/tmp62qh0koa.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            if (index + 2 > vowels.length - 1) {\n                index = (index + 2) % vowels.length;\n            } else {\n                index += 2;\n            }\n            result += vowels[index];\n        } else {\n            if (char === char.toUpperCase()) {\n                result += char.toLowerCase();\n            } else {\n                result += char.toUpperCase();\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjuyo77q4.js:40:12)\n    at Object.<anonymous> (/tmp/tmpjuyo77q4.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbpgnli4d.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbpgnli4d.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEST\ntHIS IS A MESSAGE\n",
      "timestamp": 1660333635
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage = encodedMessage.slice(0, i) + alphabet[alphabet.indexOf(encodedMessage[i]) + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpc07wqvi8.js:32:12)\n    at Object.<anonymous> (/tmp/tmpc07wqvi8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let vowels = \"aeiou\";\n  let encoded = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      let index = vowels.indexOf(char.toLowerCase());\n      let newIndex = (index + 2) % 5;\n      encoded += vowels[newIndex].toUpperCase();\n    } else {\n      encoded += char.toUpperCase();\n    }\n  }\n  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4qv9m4kd.js:30:12)\n    at Object.<anonymous> (/tmp/tmp4qv9m4kd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterCode: number = message.charCodeAt(i);\n        if (currentLetterCode >= 65 && currentLetterCode <= 90) {\n            encodedMessage += String.fromCharCode(currentLetterCode + 32);\n        } else if (currentLetterCode >= 97 && currentLetterCode <= 122) {\n            encodedMessage += String.fromCharCode(currentLetterCode - 32);\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu02n5a4w.js:31:12)\n    at Object.<anonymous> (/tmp/tmpu02n5a4w.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter) >= 0) {\n            let index: number = alphabet.indexOf(letter);\n            result += alphabet[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5l4u1ix1.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5l4u1ix1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else {\n            let encodedLetterIndex: number = currentLetterIndex + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedLetter = encodedLetter.toUpperCase();\n            }\n            encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd3rx3iy1.js:37:12)\n    at Object.<anonymous> (/tmp/tmpd3rx3iy1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333501
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(currentLetter) + 2) % 5];\n        } else if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaby6sqll.js:31:12)\n    at Object.<anonymous> (/tmp/tmpaby6sqll.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjaivnhyw.js:26:12)\n    at Object.<anonymous> (/tmp/tmpjaivnhyw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            result += letter.toLowerCase();\n        } else {\n            result += letter.toUpperCase();\n        }\n        if (vowels.includes(letter)) {\n            result = result.slice(0, -1) + vowels[(vowels.indexOf(letter) + 2) % 5];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_35iga0v.js:31:12)\n    at Object.<anonymous> (/tmp/tmp_35iga0v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n            encoded += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n            encoded += message[i].toLowerCase();\n        } else {\n            encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppq3_8b03.js:30:12)\n    at Object.<anonymous> (/tmp/tmppq3_8b03.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333508
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx_5oqd4y.js:27:12)\n    at Object.<anonymous> (/tmp/tmpx_5oqd4y.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        let charCode: number = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 32;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode -= 32;\n        }\n        if (charCode === 97) {\n            charCode = 99;\n        } else if (charCode === 101) {\n            charCode = 103;\n        } else if (charCode === 105) {\n            charCode = 107;\n        } else if (charCode === 111) {\n            charCode = 113;\n        } else if (charCode === 117) {\n            charCode = 119;\n        }\n        encodedMessage += String.fromCharCode(charCode);\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpev6ynrpg.js:45:12)\n    at Object.<anonymous> (/tmp/tmpev6ynrpg.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) >= 0) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            index += 2;\n            if (index >= vowels.length) {\n                index -= vowels.length;\n            }\n            char = vowels[index];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp24i51qgr.js:37:12)\n    at Object.<anonymous> (/tmp/tmp24i51qgr.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        let charCode: number = char.charCodeAt(0);\n        if (charCode >= 65 && charCode <= 90) {\n            charCode += 32;\n        } else if (charCode >= 97 && charCode <= 122) {\n            charCode -= 32;\n        }\n        if (charCode === 97) {\n            charCode = 99;\n        } else if (charCode === 101) {\n            charCode = 103;\n        } else if (charCode === 105) {\n            charCode = 107;\n        } else if (charCode === 111) {\n            charCode = 113;\n        } else if (charCode === 117) {\n            charCode = 119;\n        }\n        result += String.fromCharCode(charCode);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpx9ykv8c_.js:45:12)\n    at Object.<anonymous> (/tmp/tmpx9ykv8c_.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0; i < encodedMessage.length; i++) {\n        if (encodedMessage[i] === \"a\") {\n            encodedMessage = encodedMessage.replace(\"a\", \"c\");\n        } else if (encodedMessage[i] === \"e\") {\n            encodedMessage = encodedMessage.replace(\"e\", \"g\");\n        } else if (encodedMessage[i] === \"i\") {\n            encodedMessage = encodedMessage.replace(\"i\", \"k\");\n        } else if (encodedMessage[i] === \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"q\");\n        } else if (encodedMessage[i] === \"u\") {\n            encodedMessage = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp2gk00cfb.js:45:12)\n    at Object.<anonymous> (/tmp/tmp2gk00cfb.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            currentLetter = currentLetter.toLowerCase();\n            encodedMessage += currentLetter;\n        } else if (currentLetter === currentLetter.toLowerCase()) {\n            currentLetter = currentLetter.toUpperCase();\n            encodedMessage += currentLetter;\n        }\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let index: number = alphabet.indexOf(currentLetter);\n            let newVowel: string = alphabet[index + 2];\n            encodedMessage = encodedMessage.replace(currentLetter, newVowel);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjcuav1xx.js:37:12)\n    at Object.<anonymous> (/tmp/tmpjcuav1xx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = alphabet.indexOf(char.toLowerCase());\n            index += 2;\n            if (index > 25) {\n                index -= 26;\n            }\n            char = alphabet[index];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        encoded += char;\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvhw0v8en.js:38:12)\n    at Object.<anonymous> (/tmp/tmpvhw0v8en.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = 'aeiou';\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            if (index === 4) {\n                encoded += vowels[0];\n            } else {\n                encoded += vowels[index + 2];\n            }\n        } else if (char === char.toUpperCase()) {\n            encoded += char.toLowerCase();\n        } else {\n            encoded += char.toUpperCase();\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpepcpco3f.js:37:12)\n    at Object.<anonymous> (/tmp/tmpepcpco3f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharCode: number = message.charCodeAt(i);\n        if (currentCharCode >= 65 && currentCharCode <= 90) {\n            encodedMessage += String.fromCharCode(currentCharCode + 32);\n        } else if (currentCharCode >= 97 && currentCharCode <= 122) {\n            encodedMessage += String.fromCharCode(currentCharCode - 32);\n        } else {\n            encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdvv4_xt1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpdvv4_xt1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        let currentLetter = message[i];\n        if (vowels.includes(currentLetter.toLowerCase())) {\n            let index = alphabet.indexOf(currentLetter.toLowerCase());\n            let newIndex = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedMessage += alphabet[newIndex].toUpperCase();\n            } else {\n                encodedMessage += alphabet[newIndex];\n            }\n        } else {\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedMessage += currentLetter.toLowerCase();\n            } else {\n                encodedMessage += currentLetter.toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppy9_etze.js:44:12)\n    at Object.<anonymous> (/tmp/tmppy9_etze.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentLetter);\n            let indexOfEncodedVowel: number = indexOfVowel + 2;\n            if (indexOfEncodedVowel > 4) {\n                indexOfEncodedVowel = indexOfEncodedVowel - 5;\n            }\n            encodedMessage += vowels[indexOfEncodedVowel];\n        } else if (alphabet.indexOf(currentLetter) !== -1) {\n            let indexOfLetter: number = alphabet.indexOf(currentLetter);\n            let indexOfEncodedLetter: number = indexOfLetter + 2;\n            if (indexOfEncodedLetter > 25) {\n                indexOfEncodedLetter = indexOfEncodedLetter - 26;\n            }\n            encodedMessage += alphabet[indexOfEncodedLetter];\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk7ptzhvw.js:42:12)\n    at Object.<anonymous> (/tmp/tmpk7ptzhvw.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333639
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = \"aeiou\";\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            index += 2;\n            if (index >= vowels.length) {\n                index -= vowels.length;\n            }\n            char = vowels[index];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2joznri6.js:37:12)\n    at Object.<anonymous> (/tmp/tmp2joznri6.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333640
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            index += 2;\n            if (index >= vowels.length) {\n                index -= vowels.length;\n            }\n            result += vowels[index];\n        } else {\n            if (char === char.toUpperCase()) {\n                result += char.toLowerCase();\n            } else {\n                result += char.toUpperCase();\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr5b83tzy.js:38:12)\n    at Object.<anonymous> (/tmp/tmpr5b83tzy.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333641
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1) {\n            if (message[i] === \"u\") {\n                encodedMessage += \"a\";\n            } else {\n                encodedMessage += String.fromCharCode(message.charCodeAt(i) + 2);\n            }\n        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpokje82xt.js:35:12)\n    at Object.<anonymous> (/tmp/tmpokje82xt.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333641
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n        } else {\n            let encodedChar: string = \"\";\n            if (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n                encodedChar = alphabet[(currentCharIndex + 2) % alphabet.length];\n            } else {\n                encodedChar = alphabet[currentCharIndex];\n            }\n            if (currentChar === currentChar.toUpperCase()) {\n                encodedChar = encodedChar.toUpperCase();\n            }\n            encodedMessage += encodedChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqcajdmy2.js:40:12)\n    at Object.<anonymous> (/tmp/tmpqcajdmy2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333641
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] == message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0; i < encodedMessage.length; i++) {\n        if (encodedMessage[i] == \"a\") {\n            encodedMessage = encodedMessage.replace(\"a\", \"c\");\n        } else if (encodedMessage[i] == \"e\") {\n            encodedMessage = encodedMessage.replace(\"e\", \"g\");\n        } else if (encodedMessage[i] == \"i\") {\n            encodedMessage = encodedMessage.replace(\"i\", \"k\");\n        } else if (encodedMessage[i] == \"o\") {\n            encodedMessage = encodedMessage.replace(\"o\", \"q\");\n        } else if (encodedMessage[i] == \"u\") {\n            encodedMessage = encodedMessage.replace(\"u\", \"w\");\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpg4sg6gyt.js:45:12)\n    at Object.<anonymous> (/tmp/tmpg4sg6gyt.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333641
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let c: string = message[i];\n        if (c == c.toUpperCase()) {\n            c = c.toLowerCase();\n            result += c;\n        } else if (c == c.toLowerCase()) {\n            c = c.toUpperCase();\n            result += c;\n        }\n        if (vowels.indexOf(c) != -1) {\n            result = result.slice(0, -1);\n            let newVowel: string = vowels[(vowels.indexOf(c) + 2) % vowels.length];\n            result += newVowel;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphcvg29tu.js:35:12)\n    at Object.<anonymous> (/tmp/tmphcvg29tu.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n            let index: number = alphabet.indexOf(letter);\n            result += alphabet[index + 2];\n        } else {\n            result += letter;\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpntofqmrs.js:32:12)\n    at Object.<anonymous> (/tmp/tmpntofqmrs.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "tgst\nThks ks c mgsscgg\n",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy418svid.js:44:12)\n    at Object.<anonymous> (/tmp/tmpy418svid.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase()) != -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i].toLowerCase()) + 2) % 5];\n        } else {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp41ypf90v.js:27:12)\n    at Object.<anonymous> (/tmp/tmp41ypf90v.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let newIndex: number = vowels.indexOf(currentLetter) + 2;\n            if (newIndex > 4) {\n                newIndex -= 5;\n            }\n            encodedMessage += vowels[newIndex];\n        } else if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpll4mg2ey.js:35:12)\n    at Object.<anonymous> (/tmp/tmpll4mg2ey.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentChar);\n            let indexOfEncodedVowel: number = (indexOfVowel + 2) % 5;\n            encodedMessage += vowels[indexOfEncodedVowel];\n        } else if (alphabet.indexOf(currentChar) !== -1) {\n            let indexOfChar: number = alphabet.indexOf(currentChar);\n            let indexOfEncodedChar: number = (indexOfChar + 2) % 26;\n            encodedMessage += alphabet[indexOfEncodedChar];\n        } else {\n            encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqk2unhf2.js:36:12)\n    at Object.<anonymous> (/tmp/tmpqk2unhf2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n            newMessage += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2gakmy0c.js:30:12)\n    at Object.<anonymous> (/tmp/tmp2gakmy0c.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = '';\n    let vowels: string = 'aeiou';\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            index += 2;\n            if (index >= vowels.length) {\n                index -= vowels.length;\n            }\n            char = vowels[index];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkfh13i98.js:37:12)\n    at Object.<anonymous> (/tmp/tmpkfh13i98.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += alphabet[(alphabet.indexOf(char) + 2) % alphabet.length].toUpperCase();\n        } else {\n            encodedMessage += alphabet[(alphabet.indexOf(char) + 2) % alphabet.length];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuu5iq5m7.js:29:12)\n    at Object.<anonymous> (/tmp/tmpuu5iq5m7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            let newChar = vowels[(index + 2) % 5];\n            if (char === char.toUpperCase()) {\n                newChar = newChar.toUpperCase();\n            }\n            encoded += newChar;\n        } else {\n            if (char === char.toUpperCase()) {\n                encoded += char.toLowerCase();\n            } else {\n                encoded += char.toUpperCase();\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsfrq8jdh.js:38:12)\n    at Object.<anonymous> (/tmp/tmpsfrq8jdh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiaydq69m.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiaydq69m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        for (let j: number = 0; j < vowels.length; j++) {\n            if (encodedMessage[i] === vowels[j]) {\n                encodedMessage = encodedMessage.slice(0, i) + alphabet[(alphabet.indexOf(vowels[j]) + 2) % 26] + encodedMessage.slice(i + 1);\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpxhkel_zp.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxhkel_zp.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = '';\n    let vowels: string = 'aeiou';\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            result += char;\n        } else {\n            char = char.toUpperCase();\n            result += char;\n        }\n        if (vowels.indexOf(char) !== -1) {\n            let index: number = vowels.indexOf(char);\n            let newIndex: number = index + 2;\n            if (newIndex > 4) {\n                newIndex -= 5;\n            }\n            result = result.slice(0, result.length - 1) + vowels[newIndex];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbz14i41c.js:38:12)\n    at Object.<anonymous> (/tmp/tmpbz14i41c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar) >= 0) {\n            let index: number = vowels.indexOf(currentChar);\n            let nextIndex: number = (index + 2) % vowels.length;\n            encodedMessage += vowels[nextIndex];\n        } else {\n            encodedMessage += currentChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7u9yuop2.js:30:12)\n    at Object.<anonymous> (/tmp/tmp7u9yuop2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char.toLowerCase() === \"a\") {\n            encodedMessage += \"c\";\n        } else if (char.toLowerCase() === \"e\") {\n            encodedMessage += \"g\";\n        } else if (char.toLowerCase() === \"i\") {\n            encodedMessage += \"k\";\n        } else if (char.toLowerCase() === \"o\") {\n            encodedMessage += \"q\";\n        } else if (char.toLowerCase() === \"u\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7ep9mzi4.js:44:12)\n    at Object.<anonymous> (/tmp/tmp7ep9mzi4.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEgST\ntHIkS IkS Ac MEgSSAcGEg\n",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4lwv2ec9.js:30:12)\n    at Object.<anonymous> (/tmp/tmp4lwv2ec9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333518
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            result += char;\n        } else {\n            char = char.toUpperCase();\n            result += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            let newIndex: number = index + 2;\n            if (newIndex > 4) {\n                newIndex = newIndex - 5;\n            }\n            result = result.slice(0, result.length - 1) + vowels[newIndex];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa9nclm5u.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa9nclm5u.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentLetter);\n            let indexOfEncodedVowel: number = indexOfVowel + 2;\n            if (indexOfEncodedVowel > 4) {\n                indexOfEncodedVowel = indexOfEncodedVowel - 5;\n            }\n            encodedMessage += vowels[indexOfEncodedVowel];\n        } else if (alphabet.indexOf(currentLetter) !== -1) {\n            let indexOfLetter: number = alphabet.indexOf(currentLetter);\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedMessage += alphabet[indexOfLetter].toUpperCase();\n            } else {\n                encodedMessage += alphabet[indexOfLetter];\n            }\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp267j53bl.js:43:12)\n    at Object.<anonymous> (/tmp/tmp267j53bl.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (vowels.indexOf(currentChar) > -1) {\n            let index: number = vowels.indexOf(currentChar);\n            if (index + 2 > vowels.length - 1) {\n                index = index - vowels.length + 2;\n            } else {\n                index += 2;\n            }\n            encodedMessage += vowels[index];\n        } else if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_9aek3w4.js:38:12)\n    at Object.<anonymous> (/tmp/tmp_9aek3w4.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            result += char;\n        } else {\n            char = char.toUpperCase();\n            result += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            let newIndex: number = index + 2;\n            if (newIndex > 4) {\n                newIndex = newIndex - 5;\n            }\n            result = result.slice(0, result.length - 1) + vowels[newIndex];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa9nclm5u.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa9nclm5u.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        let currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n        if (currentLetterIndex === -1) {\n            encodedMessage += currentLetter;\n        } else {\n            let encodedLetterIndex: number = currentLetterIndex + 2;\n            if (encodedLetterIndex > 25) {\n                encodedLetterIndex -= 26;\n            }\n            let encodedLetter: string = alphabet[encodedLetterIndex];\n            if (vowels.indexOf(encodedLetter) !== -1) {\n                encodedLetter = encodedLetter.toUpperCase();\n            }\n            if (currentLetter === currentLetter.toUpperCase()) {\n                encodedLetter = encodedLetter.toUpperCase();\n            }\n            encodedMessage += encodedLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphhmavww7.js:41:12)\n    at Object.<anonymous> (/tmp/tmphhmavww7.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter.toLowerCase()) !== -1) {\n            let index: number = vowels.indexOf(letter.toLowerCase());\n            if (index === 4) {\n                result += vowels[0];\n            } else {\n                result += vowels[index + 2];\n            }\n        } else {\n            if (letter === letter.toUpperCase()) {\n                result += letter.toLowerCase();\n            } else {\n                result += letter.toUpperCase();\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpged01awu.js:39:12)\n    at Object.<anonymous> (/tmp/tmpged01awu.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) >= 0) {\n            let index: number = vowels.indexOf(char.toLowerCase());\n            let newIndex: number = (index + 2) % 5;\n            char = vowels[newIndex];\n        }\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsxv3zyv3.js:34:12)\n    at Object.<anonymous> (/tmp/tmpsxv3zyv3.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333642
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let vowels: string = 'aeiou';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let currentVowelIndex: number = vowels.indexOf(currentLetter);\n            let newVowelIndex: number = (currentVowelIndex + 2) % 5;\n            let newVowel: string = vowels[newVowelIndex];\n            encodedMessage += newVowel;\n        } else if (alphabet.indexOf(currentLetter) !== -1) {\n            let currentLetterIndex: number = alphabet.indexOf(currentLetter);\n            let newLetterIndex: number = (currentLetterIndex + 13) % 26;\n            let newLetter: string = alphabet[newLetterIndex];\n            encodedMessage += newLetter;\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa6v2ibzk.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa6v2ibzk.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333644
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel: number = vowels.indexOf(currentLetter);\n            if (indexOfVowel === 4) {\n                encodedMessage = encodedMessage.slice(0, -1) + vowels[0];\n            } else {\n                encodedMessage = encodedMessage.slice(0, -1) + vowels[indexOfVowel + 2];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiewzj15d.js:37:12)\n    at Object.<anonymous> (/tmp/tmpiewzj15d.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let newMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char == char.toUpperCase()) {\n            newMessage += char.toLowerCase();\n        } else {\n            newMessage += char.toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i = 0; i < vowels.length; i++) {\n        let vowel = vowels[i];\n        let index = newMessage.indexOf(vowel);\n        while (index != -1) {\n            newMessage = newMessage.substring(0, index) + vowels[(i + 2) % 5] + newMessage.substring(index + 1);\n            index = newMessage.indexOf(vowel, index + 1);\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tast'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp30_o1hct.js:36:12)\n    at Object.<anonymous> (/tmp/tmp30_o1hct.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tast',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1) {\n            let index: number = alphabet.indexOf(message[i].toLowerCase());\n            if (index + 2 > alphabet.length - 1) {\n                encodedMessage += alphabet[index + 2 - alphabet.length];\n            } else {\n                encodedMessage += alphabet[index + 2];\n            }\n        } else {\n            if (message[i] === message[i].toUpperCase()) {\n                encodedMessage += message[i].toLowerCase();\n            } else {\n                encodedMessage += message[i].toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp15fbxldi.js:40:12)\n    at Object.<anonymous> (/tmp/tmp15fbxldi.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter.toLowerCase()) >= 0) {\n            let index: number = vowels.indexOf(letter.toLowerCase());\n            let newIndex: number = (index + 2) % 5;\n            encodedMessage += vowels[newIndex];\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpepsgywwo.js:30:12)\n    at Object.<anonymous> (/tmp/tmpepsgywwo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char) !== -1) {\n            let index: number = alphabet.indexOf(char);\n            result += alphabet[index + 2];\n        } else {\n            result += char;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf8f0khdy.js:30:12)\n    at Object.<anonymous> (/tmp/tmpf8f0khdy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333501
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encodedMessage = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length; i++) {\n    let currentLetter = message[i];\n    if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n    }\n    if (currentLetter === 'a' || currentLetter === 'e' || currentLetter === 'i' || currentLetter === 'o' || currentLetter === 'u') {\n      let index = alphabet.indexOf(currentLetter);\n      encodedMessage += alphabet[index + 2];\n    }\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw8qkixv0.js:32:12)\n    at Object.<anonymous> (/tmp/tmpw8qkixv0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            encodedMessage += letter.toLowerCase();\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n        if (letter === \"a\" || letter === \"A\") {\n            encodedMessage += \"c\";\n        } else if (letter === \"e\" || letter === \"E\") {\n            encodedMessage += \"g\";\n        } else if (letter === \"i\" || letter === \"I\") {\n            encodedMessage += \"k\";\n        } else if (letter === \"o\" || letter === \"O\") {\n            encodedMessage += \"q\";\n        } else if (letter === \"u\" || letter === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_e_zkl7b.js:42:12)\n    at Object.<anonymous> (/tmp/tmp_e_zkl7b.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333516
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpy418svid.js:44:12)\n    at Object.<anonymous> (/tmp/tmpy418svid.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    for (let i: number = 0; i < encodedMessage.length; i++) {\n        if (vowels.indexOf(encodedMessage[i]) !== -1) {\n            let index: number = alphabet.indexOf(encodedMessage[i]);\n            if (index + 2 > alphabet.length - 1) {\n                encodedMessage = encodedMessage.replace(encodedMessage[i], alphabet[index + 2 - alphabet.length]);\n            } else {\n                encodedMessage = encodedMessage.replace(encodedMessage[i], alphabet[index + 2]);\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp2vi7cixx.js:40:12)\n    at Object.<anonymous> (/tmp/tmp2vi7cixx.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqzdn5bbj.js:44:12)\n    at Object.<anonymous> (/tmp/tmpqzdn5bbj.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "TEgST\ntHIkS IkS Ac MEgSSAcGEg\n",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiaydq69m.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiaydq69m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (vowels.includes(currentLetter)) {\n            let indexOfVowel: number = alphabet.indexOf(currentLetter);\n            let indexOfNextVowel: number = indexOfVowel + 2;\n            if (indexOfNextVowel > 25) {\n                indexOfNextVowel = indexOfNextVowel - 26;\n            }\n            encodedMessage += alphabet[indexOfNextVowel];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4q79uw64.js:37:12)\n    at Object.<anonymous> (/tmp/tmp4q79uw64.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333645
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter.toLowerCase()) !== -1) {\n            let index: number = vowels.indexOf(letter.toLowerCase());\n            let newIndex: number = index + 2;\n            if (newIndex >= vowels.length) {\n                newIndex = newIndex - vowels.length;\n            }\n            encodedMessage += vowels[newIndex];\n        } else {\n            if (letter === letter.toUpperCase()) {\n                encodedMessage += letter.toLowerCase();\n            } else {\n                encodedMessage += letter.toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd9_soijv.js:38:12)\n    at Object.<anonymous> (/tmp/tmpd9_soijv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsdzazmfo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpsdzazmfo.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i]) !== -1) {\n            encodedMessage += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        } else if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4lwv2ec9.js:30:12)\n    at Object.<anonymous> (/tmp/tmp4lwv2ec9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333518
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += alphabet[(alphabet.indexOf(char) + 2) % 26].toUpperCase();\n        } else {\n            encodedMessage += alphabet[(alphabet.indexOf(char) + 2) % 26];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyuus_lbq.js:29:12)\n    at Object.<anonymous> (/tmp/tmpyuus_lbq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333501
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i].toLowerCase()) !== -1) {\n            let index: number = alphabet.indexOf(message[i].toLowerCase());\n            encodedMessage += alphabet[index + 2];\n        } else {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3xrewmcv.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3xrewmcv.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            letter = letter.toLowerCase();\n            encodedMessage += letter;\n        } else if (letter === letter.toLowerCase()) {\n            letter = letter.toUpperCase();\n            encodedMessage += letter;\n        }\n        if (vowels.includes(letter)) {\n            let index: number = alphabet.indexOf(letter);\n            let newLetter: string = alphabet[index + 2];\n            encodedMessage += newLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8u6mh3lq.js:36:12)\n    at Object.<anonymous> (/tmp/tmp8u6mh3lq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        let currentCharIndex: number = alphabet.indexOf(currentChar.toLowerCase());\n        if (currentCharIndex === -1) {\n            encodedMessage += currentChar;\n        } else {\n            let newCharIndex: number = currentCharIndex + 2;\n            if (newCharIndex > 25) {\n                newCharIndex -= 26;\n            }\n            let newChar: string = alphabet[newCharIndex];\n            if (vowels.indexOf(newChar) !== -1) {\n                newChar = newChar.toUpperCase();\n            }\n            encodedMessage += newChar;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vgUv'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzwqra_w8.js:38:12)\n    at Object.<anonymous> (/tmp/tmpzwqra_w8.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vgUv',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (currentLetter === currentLetter.toUpperCase()) {\n            encodedMessage += currentLetter.toLowerCase();\n        } else {\n            encodedMessage += currentLetter.toUpperCase();\n        }\n        if (alphabet.indexOf(currentLetter) !== -1) {\n            let index: number = alphabet.indexOf(currentLetter);\n            if (index === 25) {\n                encodedMessage += alphabet[1];\n            } else if (index === 24) {\n                encodedMessage += alphabet[0];\n            } else {\n                encodedMessage += alphabet[index + 2];\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjlc0jjhh.js:40:12)\n    at Object.<anonymous> (/tmp/tmpjlc0jjhh.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333514
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        result += char;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp4qt82x8u.js:44:12)\n    at Object.<anonymous> (/tmp/tmp4qt82x8u.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuyrszui_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpuyrszui_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char.toLowerCase() === \"a\") {\n            result += \"c\";\n        } else if (char.toLowerCase() === \"e\") {\n            result += \"g\";\n        } else if (char.toLowerCase() === \"i\") {\n            result += \"k\";\n        } else if (char.toLowerCase() === \"o\") {\n            result += \"q\";\n        } else if (char.toLowerCase() === \"u\") {\n            result += \"y\";\n        } else if (char.toLowerCase() === char) {\n            result += char.toUpperCase();\n        } else {\n            result += char.toLowerCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphrngcx6w.js:43:12)\n    at Object.<anonymous> (/tmp/tmphrngcx6w.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let charCode: number = message.charCodeAt(i);\n        if (charCode >= 65 && charCode <= 90) {\n            encodedMessage += String.fromCharCode(charCode + 32);\n        } else if (charCode >= 97 && charCode <= 122) {\n            encodedMessage += String.fromCharCode(charCode - 32);\n        } else {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6o0d4l7a.js:30:12)\n    at Object.<anonymous> (/tmp/tmp6o0d4l7a.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (letter === letter.toUpperCase()) {\n            encoded += letter.toLowerCase();\n        } else {\n            encoded += letter.toUpperCase();\n        }\n        if (vowels.includes(letter)) {\n            let index: number = vowels.indexOf(letter);\n            let newIndex: number = index + 2;\n            if (newIndex >= vowels.length) {\n                newIndex -= vowels.length;\n            }\n            encoded += vowels[newIndex];\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkoj94p9y.js:36:12)\n    at Object.<anonymous> (/tmp/tmpkoj94p9y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = '';\n    let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels: string = 'aeiou';\n    for (let i: number = 0; i < message.length; i++) {\n        let letter: string = message[i];\n        if (vowels.indexOf(letter) !== -1) {\n            let index: number = alphabet.indexOf(letter);\n            let newLetter: string = alphabet[index + 2];\n            encodedMessage += newLetter;\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc1nghidc.js:31:12)\n    at Object.<anonymous> (/tmp/tmpc1nghidc.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiaydq69m.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiaydq69m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char.toLowerCase() === \"a\") {\n            result += \"c\";\n        } else if (char.toLowerCase() === \"e\") {\n            result += \"g\";\n        } else if (char.toLowerCase() === \"i\") {\n            result += \"k\";\n        } else if (char.toLowerCase() === \"o\") {\n            result += \"q\";\n        } else if (char.toLowerCase() === \"u\") {\n            result += \"y\";\n        } else if (char.toLowerCase() === char) {\n            result += char.toUpperCase();\n        } else {\n            result += char.toLowerCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphrngcx6w.js:43:12)\n    at Object.<anonymous> (/tmp/tmphrngcx6w.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        if (vowels.includes(encodedMessage[i])) {\n            encodedMessage = encodedMessage.slice(0, i) + alphabet[alphabet.indexOf(encodedMessage[i]) + 2] + encodedMessage.slice(i + 1);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpc07wqvi8.js:32:12)\n    at Object.<anonymous> (/tmp/tmpc07wqvi8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333638
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (vowels.indexOf(char.toLowerCase()) !== -1) {\n            let index: number = alphabet.indexOf(char.toLowerCase());\n            let newIndex: number = index + 2;\n            if (newIndex > 25) {\n                newIndex = newIndex - 26;\n            }\n            if (char === char.toUpperCase()) {\n                encodedMessage += alphabet[newIndex].toUpperCase();\n            } else {\n                encodedMessage += alphabet[newIndex];\n            }\n        } else {\n            if (char === char.toUpperCase()) {\n                encodedMessage += char.toLowerCase();\n            } else {\n                encodedMessage += char.toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy5cis191.js:44:12)\n    at Object.<anonymous> (/tmp/tmpy5cis191.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n        if (char === \"a\" || char === \"A\") {\n            encodedMessage += \"c\";\n        } else if (char === \"e\" || char === \"E\") {\n            encodedMessage += \"g\";\n        } else if (char === \"i\" || char === \"I\") {\n            encodedMessage += \"k\";\n        } else if (char === \"o\" || char === \"O\") {\n            encodedMessage += \"q\";\n        } else if (char === \"u\" || char === \"U\") {\n            encodedMessage += \"y\";\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tegst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpiaydq69m.js:42:12)\n    at Object.<anonymous> (/tmp/tmpiaydq69m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tegst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333497
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase()) {\n            encodedMessage += currentChar.toLowerCase();\n        } else {\n            encodedMessage += currentChar.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp98sak07j.js:27:12)\n    at Object.<anonymous> (/tmp/tmp98sak07j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const char = message[i];\n        if (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n        } else if (char === char.toLowerCase()) {\n            encodedMessage += char.toUpperCase();\n        } else {\n            encodedMessage += char;\n        }\n    }\n    for (let i = 0; i < encodedMessage.length; i++) {\n        const char = encodedMessage[i];\n        if (vowels.includes(char)) {\n            const index = alphabet.indexOf(char);\n            encodedMessage = encodedMessage.replace(char, alphabet[index + 2]);\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmph70ry1lz.js:40:12)\n    at Object.<anonymous> (/tmp/tmph70ry1lz.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length; i++) {\n        let currentLetter: string = message[i];\n        if (vowels.indexOf(currentLetter) !== -1) {\n            let indexOfVowel: number = alphabet.indexOf(currentLetter);\n            let indexOfEncodedVowel: number = indexOfVowel + 2;\n            let encodedVowel: string = alphabet[indexOfEncodedVowel];\n            encodedMessage += encodedVowel;\n        } else {\n            encodedMessage += currentLetter;\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo12eezzg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpo12eezzg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let vowels = \"aeiou\";\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase());\n            let newIndex = (index + 2) % 5;\n            encodedMessage += vowels[newIndex].toUpperCase();\n        } else {\n            encodedMessage += char.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxrwd7ta9.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxrwd7ta9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encodedMessage += char;\n        } else {\n            char = char.toUpperCase();\n            encodedMessage += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            encodedMessage = encodedMessage.slice(0, -1);\n            encodedMessage += vowels[(index + 2) % 5];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8pdsg80n.js:35:12)\n    at Object.<anonymous> (/tmp/tmp8pdsg80n.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === \"a\") {\n            char = \"c\";\n        } else if (char === \"e\") {\n            char = \"g\";\n        } else if (char === \"i\") {\n            char = \"k\";\n        } else if (char === \"o\") {\n            char = \"q\";\n        } else if (char === \"u\") {\n            char = \"y\";\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuyrszui_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpuyrszui_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333504
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  let encoded = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (char === \"a\") {\n      char = \"c\";\n    } else if (char === \"e\") {\n      char = \"g\";\n    } else if (char === \"i\") {\n      char = \"k\";\n    } else if (char === \"o\") {\n      char = \"q\";\n    } else if (char === \"u\") {\n      char = \"y\";\n    }\n    encoded += char;\n  }\n  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp_1oopigb.js:44:12)\n    at Object.<anonymous> (/tmp/tmp_1oopigb.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333646
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let encoded: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n            encoded += char;\n        } else {\n            char = char.toUpperCase();\n            encoded += char;\n        }\n        if (vowels.includes(char)) {\n            let index: number = vowels.indexOf(char);\n            if (index === 4) {\n                encoded += vowels[0];\n            } else {\n                encoded += vowels[index + 2];\n            }\n        }\n    }\n    return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teost'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplftrxlf9.js:39:12)\n    at Object.<anonymous> (/tmp/tmplftrxlf9.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teost',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333631
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n        } else {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp02t9qc83.js:27:12)\n    at Object.<anonymous> (/tmp/tmp02t9qc83.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333647
    }
  ]
}