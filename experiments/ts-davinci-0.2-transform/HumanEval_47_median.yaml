name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    return 0;\n}\n", "    const sorted = l.sort((a, b) => a - b);\n\
    \    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n  \
    \      return sorted[mid];\n    }\n}\n", "    let sorted = l.sort(function(a,\
    \ b) {return a - b});\n    let len = sorted.length;\n    if (len % 2 == 0) {\n\
    \        return (sorted[len / 2] + sorted[len / 2 - 1]) / 2;\n    } else {\n \
    \       return sorted[Math.floor(len / 2)];\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let half = Math.floor(sorted.length / 2);\n    if (sorted.length % 2) {\n\
    \        return sorted[half];\n    } else {\n        return (sorted[half - 1]\
    \ + sorted[half]) / 2.0;\n    }\n}\n", "    let l1 = l.sort((a, b) => a - b);\n\
    \    let mid = Math.floor(l1.length / 2);\n    if (l1.length % 2 == 0) {\n   \
    \     return (l1[mid] + l1[mid - 1]) / 2;\n    } else {\n        return l1[mid];\n\
    \    }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n  \
    \  }\n}\n", "    let sorted = l.sort((a, b) => a - b);\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len /\
    \ 2]) / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n",
  "    let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ m: number = 0;\n    let n: number = l.length;\n    let s: number = 0;\n    let\
    \ t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number\
    \ = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n\
    \    let aa: number = 0;\n    let ab: number = 0;\n    let ac: number = 0;\n \
    \   let ad: number = 0;\n    let ae: number = 0;\n    let af: number = 0;\n  \
    \  let ag: number = 0;\n    let ah: number = 0;\n    let ai: number = 0;\n   \
    \ let aj: number = 0;\n    let ak: number = 0;\n    let al: number = 0;\n    let\
    \ am: number = 0;\n    let an: number = 0;\n    let ao: number = 0;\n    let ap:\
    \ number = 0;\n    let aq: number = 0;\n    let ar: number = 0;\n    let as: number\
    \ = 0;\n    let at: number = 0;\n    let au: number = 0;\n    let av: number =\
    \ 0;\n    let aw: number = 0;\n    let ax: number = 0;\n    let ay: number = 0;\n\
    \    let az: number = 0;\n    let ba: number = 0;\n    let bb: number = 0;\n \
    \   let bc: number = 0;\n    let bd: number = 0;\n    let be: number = 0;\n  \
    \  let bf: number = 0;\n    let bg: number = 0;\n    let bh: number = 0;\n   \
    \ let bi: number = 0;\n    let bj: number = 0;\n    let bk: number = 0;\n    let\
    \ bl: number = 0;\n    let bm: number = 0;\n    let bn: number = 0;\n    let bo:\
    \ number = 0;\n    let bp: number = 0;\n    let bq: number = 0;\n    let br: number\
    \ = 0;\n    let bs: number", "    let sorted = l.sort(function(a, b) {return a\
    \ - b});\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    return 0;\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort();\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    let sorted = l.sort((a,\
    \ b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    return 0;\n}\n", "    return\
    \ 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
